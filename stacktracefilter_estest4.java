package org.mockito.internal.exceptions.stacktrace;

import org.junit.Test;
import org.evosuite.runtime.mock.java.lang.MockThrowable;

/**
 * This test class focuses on the behavior of the StackTraceFilter.
 * Note: The original test was auto-generated by EvoSuite. This version has been
 * refactored for better human readability and maintainability.
 */
public class StackTraceFilter_ESTestTest4 extends StackTraceFilter_ESTest_scaffolding {

    /**
     * Verifies that filterFirst throws a NullPointerException when given a Throwable
     * that effectively has a null stack trace. This tests the system's robustness
     * against unusual, but possible, edge cases.
     */
    @Test(expected = NullPointerException.class)
    public void filterFirst_shouldThrowNullPointerException_whenThrowableHasNullStackTrace() {
        // Arrange
        StackTraceFilter stackTraceFilter = new StackTraceFilter();

        // Create a mock throwable designed to simulate a scenario where getting the
        // stack trace results in null. This is an edge case, as Throwable.getStackTrace()
        // typically returns an empty array, not null.
        MockThrowable throwableWithNullStackTrace = new MockThrowable();
        throwableWithNullStackTrace.setOriginForDelegate(null);

        // Act & Assert
        // The call is expected to fail with a NullPointerException because the underlying
        // stack trace cleaner does not handle a null stack trace array.
        stackTraceFilter.filterFirst(throwableWithNullStackTrace, true);
    }
}