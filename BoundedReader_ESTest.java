/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:49:59 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.io.input.BoundedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundedReader_ESTest extends BoundedReader_ESTest_scaffolding {

    // Tests for read() method
    @Test(timeout = 4000)
    public void testReadSingleCharWithinLimit() throws Throwable {
        StringReader stringReader = new StringReader("v4]>?/Q;dj|.O1#4");
        BoundedReader reader = new BoundedReader(stringReader, 1);
        assertEquals('v', reader.read());
    }

    @Test(timeout = 4000)
    public void testReadOnEmptyReader() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1805);
        assertEquals(-1, reader.read());
    }

    @Test(timeout = 4000)
    public void testReadOnNullReader() throws Throwable {
        BoundedReader reader = new BoundedReader(null, -1);
        assertEquals(-1, reader.read());
    }

    @Test(timeout = 4000)
    public void testReadAfterClosingReader() throws Throwable {
        StringReader stringReader = new StringReader("");
        stringReader.close();
        BoundedReader reader = new BoundedReader(stringReader, 202);
        try {
            reader.read();
            fail("Expected IOException: Stream closed");
        } catch (IOException e) {
            assertEquals("Stream closed", e.getMessage());
        }
    }

    // Tests for read(char[]) method
    @Test(timeout = 4000)
    public void testReadCharBufferWithLimit() throws Throwable {
        StringReader stringReader = new StringReader("org.apache.commons.io.input.BoundedReader");
        BoundedReader reader = new BoundedReader(stringReader, 3);
        char[] buffer = new char[7];
        int readCount = reader.read(buffer);
        
        assertEquals(3, readCount);
        assertArrayEquals(new char[] {'o', 'r', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, buffer);
    }

    @Test(timeout = 4000)
    public void testReadCharBufferWithOffset() throws Throwable {
        StringReader stringReader = new StringReader(".''L5DuTEy{jV3");
        BoundedReader reader = new BoundedReader(stringReader, 1729);
        char[] buffer = new char[8];
        int readCount = reader.read(buffer, 1, 1);
        
        assertEquals(1, readCount);
        assertArrayEquals(new char[] {'\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, buffer);
    }

    @Test(timeout = 4000)
    public void testReadWithInvalidParameters() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1);
        char[] buffer = new char[3];
        // Negative offset with zero length should return 0
        assertEquals(0, reader.read(buffer, -743, 0));
    }

    @Test(timeout = 4000)
    public void testReadWithNullBuffer() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1805);
        assertEquals(-1, reader.read(null, 1805, -1));
    }

    @Test(timeout = 4000)
    public void testReadWithInvalidOffset() throws Throwable {
        StringReader stringReader = new StringReader("4s");
        BoundedReader reader = new BoundedReader(stringReader, 179);
        char[] buffer = new char[0];
        try {
            reader.read(buffer, 179, 179);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception when accessing invalid array index
        }
    }

    @Test(timeout = 4000)
    public void testReadAfterClosingReaderWithBuffer() throws Throwable {
        StringReader stringReader = new StringReader("");
        stringReader.close();
        BoundedReader reader = new BoundedReader(stringReader, 214);
        try {
            char[] buffer = new char[0];
            reader.read(buffer, 214, 214);
            fail("Expected IOException: Stream closed");
        } catch (IOException e) {
            assertEquals("Stream closed", e.getMessage());
        }
    }

    // Tests for mark() and reset() methods
    @Test(timeout = 4000)
    public void testMarkAndResetBehavior() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1805);
        reader.mark(1268);
        assertEquals(-1, reader.read());
        reader.reset();
        assertEquals(-1, reader.read());
    }

    @Test(timeout = 4000)
    public void testMarkWithEmptyReader() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1805);
        reader.read();
        reader.mark(0);
        assertEquals(-1, reader.read());
    }

    @Test(timeout = 4000)
    public void testResetWithoutMark() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, 1);
        // Should succeed without exception
        reader.reset();
    }

    @Test(timeout = 4000)
    public void testResetAfterClose() throws Throwable {
        StringReader stringReader = new StringReader("test");
        BoundedReader reader = new BoundedReader(stringReader, 0);
        reader.close();
        try {
            reader.reset();
            fail("Expected IOException: Stream closed");
        } catch (IOException e) {
            assertEquals("Stream closed", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testMarkWithNegativeReadAhead() throws Throwable {
        StringReader stringReader = new StringReader("");
        BoundedReader reader = new BoundedReader(stringReader, -431);
        try {
            reader.mark(-431);
            fail("Expected IllegalArgumentException: Read-ahead limit < 0");
        } catch (IllegalArgumentException e) {
            // Expected exception for negative read-ahead
        }
    }

    @Test(timeout = 4000)
    public void testMarkAfterClosingReader() throws Throwable {
        StringReader stringReader = new StringReader("");
        stringReader.close();
        BoundedReader reader = new BoundedReader(stringReader, 198);
        try {
            reader.mark(198);
            fail("Expected IOException: Stream closed");
        } catch (IOException e) {
            assertEquals("Stream closed", e.getMessage());
        }
    }

    // Tests for skip() method
    @Test(timeout = 4000)
    public void testMarkAndSkip() throws Throwable {
        StringReader stringReader = new StringReader("wa");
        BoundedReader reader = new BoundedReader(stringReader, 10);
        reader.mark(1);
        assertEquals(1, reader.skip(10));
    }

    // Tests for null reader scenarios
    @Test(timeout = 4000)
    public void testReadOnNullReaderWithBuffer() throws Throwable {
        BoundedReader reader = new BoundedReader(null, 1);
        try {
            char[] buffer = new char[1];
            reader.read(buffer, 1, 1);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected for null reader
        }
    }

    @Test(timeout = 4000)
    public void testReadSingleCharOnNullReader() throws Throwable {
        BoundedReader reader = new BoundedReader(null, 1);
        try {
            reader.read();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected for null reader
        }
    }

    @Test(timeout = 4000)
    public void testMarkOnNullReader() throws Throwable {
        BoundedReader reader = new BoundedReader(null, 4168);
        try {
            reader.mark(4168);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected for null reader
        }
    }

    @Test(timeout = 4000)
    public void testResetOnNullReader() throws Throwable {
        BoundedReader reader = new BoundedReader(null, 1);
        try {
            reader.reset();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected for null reader
        }
    }

    @Test(timeout = 4000)
    public void testCloseOnNullReader() throws Throwable {
        BoundedReader reader = new BoundedReader(null, -1235);
        try {
            reader.close();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected for null reader
        }
    }
}