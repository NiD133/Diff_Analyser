/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:49:59 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.apache.commons.io.input.BoundedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundedReader_ESTest extends BoundedReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.input.BoundedReader");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 3);
      char[] charArray0 = new char[7];
      int int0 = boundedReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1805);
      boundedReader0.read();
      boundedReader0.mark(0);
      int int0 = boundedReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, (-1));
      int int0 = boundedReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1805);
      int int0 = boundedReader0.read();
      boundedReader0.mark(1268);
      int int1 = boundedReader0.read();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
      char[] charArray0 = new char[3];
      int int0 = boundedReader0.read(charArray0, (-743), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".''L5DuTEy{jV3");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1729);
      char[] charArray0 = new char[8];
      int int0 = boundedReader0.read(charArray0, 1, 1);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v4]>?/Q;dj|.O1#4");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
      int int0 = boundedReader0.read();
      assertEquals(118, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, 1);
      // Undeclared exception!
      try { 
        boundedReader0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.io.input.BoundedReader");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 0);
      boundedReader0.close();
      try { 
        boundedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, 1);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        boundedReader0.read(charArray0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4s");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 179);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        boundedReader0.read(charArray0, 179, 179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 179
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 214);
      char[] charArray0 = new char[0];
      try { 
        boundedReader0.read(charArray0, 214, 214);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, 1);
      // Undeclared exception!
      try { 
        boundedReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 202);
      try { 
        boundedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, 4168);
      // Undeclared exception!
      try { 
        boundedReader0.mark(4168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-431));
      // Undeclared exception!
      try { 
        boundedReader0.mark((-431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 198);
      try { 
        boundedReader0.mark(198);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BoundedReader boundedReader0 = new BoundedReader((Reader) null, (-1235));
      // Undeclared exception!
      try { 
        boundedReader0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.BoundedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1805);
      boundedReader0.mark(1);
      boundedReader0.read();
      int int0 = boundedReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1805);
      int int0 = boundedReader0.read((char[]) null, 1805, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wa");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 10);
      boundedReader0.mark(1);
      long long0 = boundedReader0.skip(10);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
      boundedReader0.reset();
  }
}
