package com.fasterxml.jackson.core.io;

// Imports for Jackson Core classes
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.util.BufferRecycler;

// Imports for Java IO
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;

// Imports for JUnit
import org.junit.Test;

/**
 * This class contains an improved test for the {@link UTF8Writer}.
 * The original test was generated by EvoSuite and has been refactored for better understandability.
 */
// The original test class extended a scaffolding class, which is retained for compatibility.
public class UTF8Writer_ESTestTest19 extends UTF8Writer_ESTest_scaffolding {

    /**
     * Verifies that calling {@code close()} on a {@code UTF8Writer} throws a
     * {@code NullPointerException} if it was constructed with a null underlying
     * {@code OutputStream}.
     * <p>
     * This test ensures that the writer correctly delegates the close operation to the
     * underlying stream and that standard Java IO behavior (throwing NPE on
     * operations with a null stream) is preserved.
     */
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void closeThrowsNPEWhenConstructedWithNullOutputStream() throws IOException {
        // Arrange: Create a UTF8Writer that wraps a null OutputStream.
        // An IOContext is required for the UTF8Writer constructor, so we create one with default settings.
        BufferRecycler bufferRecycler = new BufferRecycler();
        IOContext ioContext = new IOContext(
                StreamReadConstraints.defaults(),
                StreamWriteConstraints.defaults(),
                ErrorReportConfiguration.defaults(),
                bufferRecycler,
                ContentReference.unknown(),
                true);

        // The key to this test is the null underlying stream.
        // The BufferedOutputStream demonstrates that the close() call is delegated.
        OutputStream nullOutputStream = null;
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(nullOutputStream);
        UTF8Writer utf8Writer = new UTF8Writer(ioContext, bufferedOutputStream);

        // Act: Attempt to close the writer.
        // This should call close() on the wrapped BufferedOutputStream, which will
        // then throw a NullPointerException when trying to access its null stream.
        utf8Writer.close();

        // Assert: The 'expected' parameter of the @Test annotation handles the assertion.
        // The test will pass only if a NullPointerException is thrown.
    }
}