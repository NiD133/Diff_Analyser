/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:15:49 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransformedBag_ESTest extends TransformedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("pA)M[)T~9fY");
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      Set<Object> set0 = transformedSortedBag0.uniqueSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      TransformedSortedBag<Integer> transformedSortedBag0 = new TransformedSortedBag<Integer>(synchronizedSortedBag0, constantTransformer0);
      Integer integer0 = new Integer(862);
      synchronizedSortedBag0.add(integer0);
      HashBag<Object> hashBag0 = new HashBag<Object>();
      boolean boolean0 = transformedSortedBag0.remove((Object) hashBag0, 3791);
      assertFalse(synchronizedSortedBag0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      TransformedBag<Integer> transformedBag0 = new TransformedBag<Integer>(hashBag0, transformer0);
      boolean boolean0 = transformedBag0.remove((Object) synchronizedSortedBag0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) constantFactory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("jA]A&z5z!a+Jbr(nH");
      TransformedSortedBag<Predicate<Object>> transformedSortedBag0 = new TransformedSortedBag<Predicate<Object>>(treeBag0, transformer1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(any() , any());
      TreeBag<Integer> treeBag1 = new TreeBag<Integer>(comparator1);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag1);
      synchronizedSortedBag0.add(integer0);
      TransformedSortedBag<Integer> transformedSortedBag1 = new TransformedSortedBag<Integer>(synchronizedSortedBag0, transformer0);
      int int0 = transformedSortedBag1.getCount(transformedSortedBag0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeBag<HashBag<Object>> treeBag0 = new TreeBag<HashBag<Object>>();
      Transformer<Object, HashBag<Object>> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedBag<HashBag<Object>> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<HashBag<Object>>) treeBag0, (Transformer<? super HashBag<Object>, ? extends HashBag<Object>>) transformer0);
      Bag<HashBag<Object>> bag0 = transformedSortedBag0.getBag();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(165);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      hashBag0.add(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Iterable<?>) hashBag0);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(treeBag0, factoryTransformer0);
      Bag<Object> bag0 = transformedSortedBag0.getBag();
      assertTrue(bag0.contains(165));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(165);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>((Collection<? extends Integer>) hashBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      boolean boolean0 = transformedSortedBag0.add(integer0, (-803));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      // Undeclared exception!
      try { 
        TransformedBag.transformingBag((Bag<Integer>) hashBag0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // transformer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      hashBag0.add((Integer) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Object object0 = new Object();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate(object0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) andPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) anyPredicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Integer integer0 = new Integer(1040);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, constantTransformer0);
      // Undeclared exception!
      TransformedBag.transformedBag((Bag<Integer>) hashBag0, (Transformer<? super Integer, ? extends Integer>) switchTransformer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      hashBag0.add((Integer) null);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Bag<Integer> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Integer>) hashBag0);
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag(bag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag((Bag<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(1);
      hashBag0.add(integer0);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>((Integer) null);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>((Iterable<? extends Integer>) hashBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = new TransformedSortedBag<Integer>(treeBag0, constantTransformer0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) transformedSortedBag0);
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag((Bag<Integer>) synchronizedSortedBag0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(417);
      hashBag0.add(integer0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Predicate<Integer> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedBag<Integer> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Integer>) hashBag0, (Predicate<? super Integer>) predicate0);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(predicate0, constantTransformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag((Bag<Integer>) predicatedBag0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '417' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      hashBag0.add((Integer) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Integer integer0 = new Integer(5);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      predicateArray0[0] = predicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag((Bag<Integer>) hashBag0, (Transformer<? super Integer, ? extends Integer>) switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag(sortedBag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.remove((Object) sortedBag0, 2694);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Comparator<? super Object>) null);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(treeBag0, transformer0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(transformedSortedBag0);
      SynchronizedBag<Object> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<Object>) collectionSortedBag0);
      TransformedBag<Object> transformedBag0 = new TransformedBag<Object>(synchronizedBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedBag0.remove((Object) null, (-2770));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.remove((Object) treeBag0, (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag0, transformer0);
      TransformedBag<Integer> transformedBag0 = new TransformedBag<Integer>(synchronizedSortedBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedBag0.remove((Object) synchronizedSortedBag0, 3811);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.getCount((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("gkOM!la6/=<.");
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(synchronizedSortedBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.getCount((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedBag<Integer> transformedSortedBag0 = new TransformedSortedBag<Integer>(treeBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.getCount(transformedSortedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Iterable<?>) hashBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      SortedBag<Object> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Object>) synchronizedSortedBag0);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(sortedBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.getCount(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add((Object) transformer0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      Transformer<Object, InstanceofPredicate> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, InstanceofPredicate> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) onePredicate0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0);
      TransformedSortedBag<Predicate<Object>> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Predicate<Object>>) treeBag0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      // Undeclared exception!
      transformedSortedBag0.add(predicateArray0[2], 1487);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>((Integer) null);
      Bag<Integer> bag0 = UnmodifiableBag.unmodifiableBag((Bag<? extends Integer>) hashBag0);
      TransformedBag<Integer> transformedBag0 = new TransformedBag<Integer>(bag0, constantTransformer0);
      Integer integer0 = new Integer(560);
      // Undeclared exception!
      try { 
        transformedBag0.add(integer0, 560);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      TransformedSortedBag<Integer> transformedSortedBag0 = new TransformedSortedBag<Integer>(treeBag0, transformer0);
      Integer integer0 = new Integer(3787);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add(integer0, 3787);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = new TransformedSortedBag<Integer>(synchronizedSortedBag0, transformer0);
      Integer integer0 = new Integer(414);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add(integer0, 414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Iterable<?>) hashBag0);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) hashBag0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      Integer integer0 = new Integer(1480);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) predicatedSortedBag0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add((Object) integer0, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '1480' - Predicate 'org.apache.commons.collections4.functors.IdentityPredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Class<Object> class0 = Object.class;
      InstantiateFactory<Object> instantiateFactory0 = new InstantiateFactory<Object>(class0);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(instantiateFactory0);
      TransformedBag<Object> transformedBag0 = new TransformedBag<Object>(treeBag0, factoryTransformer0);
      // Undeclared exception!
      try { 
        transformedBag0.add((Object) factoryTransformer0, 2357);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Vector<Integer> vector0 = new Vector<Integer>(477);
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Iterable<?>) vector0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Object> chainedTransformer0 = new ChainedTransformer<Object>(transformerArray0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Object>) synchronizedSortedBag0, (Transformer<? super Object, ?>) chainedTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add((Object) transformer0, 477);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      AndPredicate<Integer> andPredicate0 = new AndPredicate<Integer>(notPredicate0, notPredicate0);
      PredicatedSortedBag<Integer> predicatedSortedBag0 = new PredicatedSortedBag<Integer>(synchronizedSortedBag0, andPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = (Predicate<Object>) notPredicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Integer>) predicatedSortedBag0, (Transformer<? super Integer, ? extends Integer>) switchTransformer0);
      Integer integer0 = new Integer(2934);
      // Undeclared exception!
      try { 
        transformedSortedBag0.add(integer0, 2934);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedBag<Integer> transformedBag0 = null;
      try {
        transformedBag0 = new TransformedBag<Integer>((Bag<Integer>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(165);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>((Collection<? extends Integer>) hashBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      TransformedSortedBag<Integer> transformedSortedBag1 = TransformedSortedBag.transformedSortedBag((SortedBag<Integer>) transformedSortedBag0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      boolean boolean0 = transformedSortedBag1.equals(transformedSortedBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("jA]A&z5z!a+Jbr(nH");
      TransformedSortedBag<Predicate<Object>> transformedSortedBag0 = new TransformedSortedBag<Predicate<Object>>(treeBag0, transformer0);
      boolean boolean0 = transformedSortedBag0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer(165);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>((Collection<? extends Integer>) hashBag0);
      TransformedSortedBag<Integer> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Integer>) treeBag0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      boolean boolean0 = transformedSortedBag0.equals(transformedSortedBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      hashBag0.add((Integer) null);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>((Integer) null);
      TransformedBag.transformedBag((Bag<Integer>) hashBag0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      assertEquals(1, hashBag0.size());
      assertFalse(hashBag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Integer integer0 = new Integer(2);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) constantFactory0);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(collectionSortedBag0, transformer0);
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("jA]A&z5z!a+Jbr(nH");
      transformedSortedBag0.add((Object) integer0, 2);
      // Undeclared exception!
      try { 
        TransformedBag.transformedBag((Bag<Object>) transformedSortedBag0, (Transformer<? super Object, ?>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'jA]A&z5z!a+Jbr(nH' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Bag<Integer> bag0 = TransformedBag.transformedBag((Bag<Integer>) hashBag0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Comparator<? super Object>) null);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(treeBag0, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedBag0.remove((Object) null, (-2770));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(0, 0);
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Collection<?>) vector0);
      HashMap<Object, Locale.FilteringMode> hashMap0 = new HashMap<Object, Locale.FilteringMode>();
      Transformer<Object, Locale.FilteringMode> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Locale.FilteringMode>) hashMap0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      transformedSortedBag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Integer integer0 = new Integer(2);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) constantFactory0);
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(collectionSortedBag0, transformer0);
      Bag<Object> bag0 = TransformedBag.transformingBag((Bag<Object>) transformedSortedBag0, (Transformer<? super Object, ?>) transformer0);
      assertFalse(bag0.contains(2));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) constantFactory0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("jA]A&z5z!a+Jbr(nH");
      TransformedSortedBag<Predicate<Object>> transformedSortedBag0 = new TransformedSortedBag<Predicate<Object>>(treeBag0, transformer1);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag1 = new TreeBag<Integer>(comparator1);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag1);
      TransformedSortedBag<Integer> transformedSortedBag1 = new TransformedSortedBag<Integer>(synchronizedSortedBag0, transformer0);
      int int0 = transformedSortedBag1.getCount(transformedSortedBag0);
      assertEquals(0, int0);
  }
}
