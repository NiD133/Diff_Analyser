/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 17 10:58:23 GMT 2025
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("org.jsoup.select.Elements");
      Elements elements0 = document0.select((Evaluator) evaluator_ContainsWholeText0);
      Elements elements1 = elements0.eq(0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Elements elements0 = new Elements(0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.wrap("1:DKpJ$!<ko/csNY");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.val("map");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = new Tag("imap");
      Element element0 = new Element(tag0, "imap");
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.val("imap");
      String string0 = elements1.val();
      assertEquals("imap", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", ";c");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", ";c");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.parents();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements2 = elements1.traverse(nodeVisitor0);
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Element element0 = document0.text("org.jsoup.select.Elements");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("org.jsoup.select.Elements");
      Elements elements0 = element0.select((Evaluator) evaluator_ContainsWholeText0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.toggleClass("Stack unexpectedly empty");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Elements elements0 = new Elements();
      List<TextNode> list0 = elements0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", ";c");
      Elements elements0 = document0.children();
      String string0 = elements0.text();
      assertEquals("String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.children();
      elements0.set(0, (Element) document0);
      assertTrue(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", ";c");
      Elements elements0 = document0.children();
      Element element0 = elements0.selectFirst("org.jsoup.select.Elements");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.select("lt");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeClass((String) null);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = document0.children();
      boolean boolean0 = elements0.removeAll(elements1);
      assertEquals(3, elements0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("#declaration");
      Elements elements0 = document0.getAllElements();
      Document document1 = (Document)elements0.remove(0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("String must not be empty");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.remove(1);
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("%FypL.Ou}k)'");
      Elements elements0 = document0.getElementsByAttributeValueEnding("%FypL.Ou}k)'", "%FypL.Ou}k)'");
      Elements elements1 = elements0.prevAll((String) null);
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q,G", "Q,G");
      Elements elements0 = document0.getElementsByIndexLessThan(201);
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prev();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prepend("[=yZ}b4OR F!QP+");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Element element0 = document0.text("org.jsoup.select.Elements");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("org.jsoup.select.Elements");
      Elements elements0 = element0.select((Evaluator) evaluator_ContainsWholeText0);
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Tag tag0 = new Tag("ismap", "");
      Element element0 = new Element(tag0, "\"");
      Elements elements0 = element0.getAllElements();
      String string0 = elements0.outerHtml();
      assertEquals("<ismap></ismap>", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = new Tag("ismap", "");
      Element element0 = new Element(tag0, "\"");
      Pattern pattern0 = Pattern.compile("\"", 1);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]S,", "]S,");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("ismap");
      StructuralEvaluator.ImmediateParentRun structuralEvaluator_ImmediateParentRun0 = new StructuralEvaluator.ImmediateParentRun(evaluator_ContainsWholeText0);
      Elements elements0 = document0.select((Evaluator) structuralEvaluator_ImmediateParentRun0);
      Elements elements1 = elements0.not("Content-Encoding");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.not("String must not be empty");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("|", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll((String) null);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll();
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = new Tag("R", "R");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Elements", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsByIndexLessThan(512);
      Elements elements1 = elements0.next("org.jsoup.select.Elements");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Pattern pattern0 = Pattern.compile("", 32);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Element element0 = elements0.last();
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.html("lt");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse(".KK`)n7Yo+S(:._|)", ".KK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getElementsContainingOwnText(".KK`)n7Yo+S(:._|)");
      Element element0 = elements0.first();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = new Tag("ismap", "");
      Element element0 = new Element(tag0, "\"");
      Elements elements0 = element0.getAllElements();
      Element element1 = elements0.first();
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("%FypL.Ou}k)'");
      Elements elements0 = document0.getElementsByAttributeValueEnding("%FypL.Ou}k)'", "%FypL.Ou}k)'");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Element element0 = document0.text("org.jsoup.select.Elements");
      Evaluator.ContainsWholeText evaluator_ContainsWholeText0 = new Evaluator.ContainsWholeText("org.jsoup.select.Elements");
      Elements elements0 = element0.select((Evaluator) evaluator_ContainsWholeText0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = new Tag("imap");
      Element element0 = new Element(tag0, "imap");
      Elements elements0 = element0.getAllElements();
      Element element1 = elements0.expectFirst("imap");
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", ";c");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.empty();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("E", "E");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.deselect((Object) document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Tag tag0 = new Tag("", "");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getAllElements();
      Element element1 = elements0.deselect(0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.before("+locPfd1R']\"Xmtz8N");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.attr(":", ":");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Tag tag0 = new Tag("ismap", "ismap");
      Element element0 = new Element(tag0, "\"");
      Elements elements0 = element0.getAllElements();
      ArrayList<Element> arrayList0 = elements0.asList();
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.append("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.after("org.jsoup.select.Elements");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.addClass("7wat9qt*uppi");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getElementsMatchingText("String must not be empty");
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'tagName' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("|", "");
      document0.parser((Parser) null);
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.tagName("String must not be empty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Elements elements0 = new Elements();
      Document document0 = new Document((String) null);
      // Undeclared exception!
      try { 
        elements0.set(3309, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3309, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.set((-380), (Element) document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.selectFirst("U>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'U>': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("!(q4W,[=2.O6%D?>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '!(q4W,[=2.O6%D?>': unexpected token at '!(q4W,[=2.O6%D?>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.replaceAll((UnaryOperator<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document(".PK`)n7Yo+S(:._|)", ".PK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeIf((Predicate<? super Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".PK`)n7Yo}SK:._|)", ".PK`)n7Yo}SK:._|)");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.removeClass("-j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.remove(1024);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1024, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.prevAll("f<u]q0f%]9U|Q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'f<u]q0f%]9U|Q': unexpected token at '<u]q0f%]9U|Q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Element[] elementArray0 = new Element[9];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = new Tag("E", "E");
      Element element0 = new Element(tag0, "E");
      Elements elements0 = element0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not("j;lL:<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'j;lL:<': unexpected token at ';lL:<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.nextAll("tXNESci[o~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'o~'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.next("<G#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<G#': unexpected token at '<G#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.is("9?SohH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '9?SohH': unexpected token at '?SohH'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell(") w9n8 #)g\"");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("/tring must not be mpty", "/tring must not be mpty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.hasAttr("No elements matched the query '%s' in the elements.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.expectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("S$tsk F", "S$tsk F");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.deselect(1063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1063, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.deselect((-3524));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".PK`)n7YS(G.__)", ".PK`)n7YS(G.__)");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell(".PK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JqY[1(<nRcx|RV", "JqY[1(<nRcx|RV");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.remove((Object) document0);
      assertEquals(3, elements0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.remove((Object) elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("x?");
      Elements elements0 = document0.parents();
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.remove((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.replaceAll(unaryOperator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.replaceAll((UnaryOperator<Element>) null);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = new Tag("", "");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getAllElements();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) element0);
      boolean boolean0 = elements0.removeIf(predicate0);
      assertEquals(0, elements0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse(".KK`)n7Yo+S(:._|)", ".KK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getAllElements();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) elements0);
      boolean boolean0 = elements0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = new Tag("", "");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getAllElements();
      boolean boolean0 = elements0.retainAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H", "http://www.w3.org/1998/Math/MathML");
      List<Node> list0 = Parser.parseFragment("http://www.w3.org/XML/1998/namespace", (Element) document0, "*v<=j[/ WPG-");
      Elements elements0 = document0.getElementsByAttributeValueNot("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/1998/Math/MathML");
      boolean boolean0 = elements0.removeAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeAll(elements0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document(" ", " ");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.last();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*", "*");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev("*");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is(":containsWholeText(String must not be empty)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("o3S|A", "o3S|A");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("o3S|A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.eq((-996));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(16);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.remove();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.empty();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.unwrap();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String muGt dot be empty", "String muGt dot be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.wrap("String muGt dot be empty");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("#declaration");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.after("#declaration");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("String must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.before("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell(".PK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.append(".PK`)n7Yo+S(:._|)");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prepend("String must not be empty");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document("/tring must not be mpty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.html("org.jsoup.nodes.Attributes$Dataset");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("|", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.tagName("String must not be empty");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.tagName("missing semicolon on [&#%s]");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("=3=", "=3=");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("=3="));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Elements elements0 = new Elements();
      List<String> list0 = elements0.eachText();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("Z\"", "Z\"");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Strng muGt dot be empty", "Strng muGt dot be empty");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("S$tsk F", "S$tsk F");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("S$\tsk F", "S$\tsk F");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.toggleClass("S$\tsk F");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must nov be empty", "String must nov be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeClass("String must nov be empty");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("/tring must not be mpty", "/tring must not be mpty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.addClass("/tring must not be mpty");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeAttr("String must not be empty");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      elements0.attr("String must not be empty", "String must not be empty");
      List<String> list0 = elements0.eachAttr("String must not be empty");
      assertTrue(list0.contains("String must not be empty"));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("String must not be mpty", "String must not be mpty");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachAttr("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = new Tag("ismap", "ismap");
      Element element0 = new Element(tag0, "\"");
      Elements elements0 = element0.getAllElements();
      elements0.attr("", "\"");
      boolean boolean0 = elements0.hasAttr("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("String muGt dot be empty");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasAttr("String muGt dot be empty");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String muGt dot be empty", "String muGt dot be empty");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("String muGt dot be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertEquals(4, elements1.size());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next();
      elements1.add((Element) document0);
      boolean boolean0 = elements1.removeAll(elements0);
      assertEquals(0, elements1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("#declaration");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev("#declaration");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.set(410, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Elements elements0 = new Elements();
      ArrayList<Element> arrayList0 = elements0.asList();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.deselect(3);
      assertEquals("body", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.expectFirst("iq]S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'iq]S': unexpected token at ']S'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H", "http://www.w3.org/1998/Math/MathML");
      Elements elements0 = document0.getElementsByAttributeValueNot("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/1998/Math/MathML");
      List<TextNode> list0 = elements0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse(".KK`)n7Yo+S(:._|)", ".KK`)n7Yo+S(:._|)");
      Elements elements0 = document0.getAllElements();
      List<Comment> list0 = elements0.comments();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = new Tag("E", "E");
      Element element0 = new Element(tag0, "E");
      Elements elements0 = element0.getAllElements();
      String string0 = elements0.toString();
      assertEquals("<E></E>", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.clear();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H", "http://www.w3.org/1998/Math/MathML");
      Elements elements0 = document0.getElementsByAttributeValueNot("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/1998/Math/MathML");
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body>H</body>\n</html>\n<head></head>\n<body>H</body>\n\nH", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = new Elements((List<Element>) elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Tag tag0 = new Tag("", "");
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getAllElements();
      List<DataNode> list0 = elements0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-996));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -996
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H", "http://www.w3.org/1998/Math/MathML");
      Elements elements0 = document0.getElementsByAttributeValueNot("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/1998/Math/MathML");
      Elements elements1 = elements0.prevAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.deselectAll();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Elements elements0 = new Elements();
      Object object0 = new Object();
      boolean boolean0 = elements0.deselect(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H", "http://www.w3.org/1998/Math/MathML");
      Elements elements0 = document0.getElementsByAttributeValueNot("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/1998/Math/MathML");
      Elements elements1 = elements0.nextAll("H");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell(".K`)n7Yo}SK._)");
      Elements elements0 = document0.getAllElements();
      Element[] elementArray0 = new Element[6];
      Elements elements1 = new Elements(elementArray0);
      boolean boolean0 = elements0.retainAll(elements1);
      assertTrue(elements0.isEmpty());
      assertTrue(boolean0);
  }
}
