/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:39:41 GMT 2025
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.eq(4);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.expectFirst("BogusComment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No elements matched the query 'BogusComment' in the elements.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.wrap("91S%gN|]>`");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.val("}X2q[rR~");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("]RCd 5P[V");
      Element element0 = document0.body();
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.unwrap();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Elements elements0 = new Elements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.toggleClass("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Elements elements0 = new Elements();
      List<TextNode> list0 = elements0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.tagName("<m-2,eXTA:N5y7");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.set(1, (Element) document0);
      assertEquals("html", element0.normalName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.selectFirst("Bb,76");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("]RCd 5P[V");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.select(" H-zp5");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeClass("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr("No elements matched the query '%s' in the elements.");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = new Elements((List<Element>) elements0);
      boolean boolean0 = elements0.removeAll(elements1);
      assertEquals(0, elements0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("b*RY=0r*g]q0");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.remove(0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.children();
      Element element0 = elements0.remove(0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.remove();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eSTL:N5y7", "<m-2,eSTL:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prevAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev("Bb,76");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prepend("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.parents();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.not("DQw|");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.not(":containsWholeOwnText(%s)");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll((String) null);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Only http & https protocols supported", "Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("*Vq9|=C*", "ch}9X");
      Elements elements0 = document0.getElementsByAttributeValueNot("*Vq9|=C*", "*Vq9|=C*");
      Elements elements1 = elements0.next();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      Document document1 = (Document)elements0.last();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.html("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTAN5y");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev();
      elements0.prepend("<m-2,eXTA:N5y7");
      Element element0 = elements1.first();
      assertEquals(1, elements1.size());
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Invalid xmlns attribute [%s] on tag [%s]", "\"D%\fn");
      Elements elements0 = document0.children();
      Element element0 = elements0.first();
      assertEquals("html", element0.normalName());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Elements elements0 = new Elements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("b*RY=0r*g]q0");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.eq(0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.empty();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.deselect((Object) document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.deselect(3);
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("Bb,Y6");
      Elements elements0 = document0.getAllElements();
      Document document1 = (Document)elements0.deselect(0);
      assertEquals("Bb,Y6", document1.location());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA:N5y7", "<m-2,eXTA:N5y7");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.before("<m-2,eXTA:N5y7");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.attr("INXd(U<", "INXd(U<");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      ArrayList<Element> arrayList0 = elements0.asList();
      assertEquals(4, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.append("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("]RCd 5P[V");
      Element element0 = document0.body();
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.after("]RCd 5P[V");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.addClass("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.wrap("org.jsoup.parser.Token$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA:N5y7", "<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.wrap("<m-2,eXTA:N5y7");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.val("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y6", "Bb,Y6");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA:N5y7", "<m-2,eXTA:N5y7");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'tagName' parameter must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.set((-1), (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("ol");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.set(126, (Element) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = new Element("4[]rS^,A(7");
      // Undeclared exception!
      try { 
        elements0.set((-1588), element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.selectFirst(",P<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ',P<': unexpected token at ',P<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        elements0.replaceAll(unaryOperator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.replaceAll((UnaryOperator<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeIf((Predicate<? super Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Only http & https protocols supported", "Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("X");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.remove(401);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 401, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.prevAll("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("fC4Ep$");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.next("AQkzr.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // CSS identifier expected, but end of input found
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element[] elementArray0 = new Element[20];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.next("Bb,76");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.is("{xrk0 ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{xrk0': unexpected token at '{xrk0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA)>:N5y7", "<m-2,eXTA)>:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.deselect((-2136991809));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("No elements matched the query '%s' in the elements.");
      Elements elements0 = document0.getAllElements();
      document0.appendChildren(elements0);
      // Undeclared exception!
      elements0.before("No elements matched the query '%s' in the elements.");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA)>:N5y7", "<m-2,eXTA)>:N5y7");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "<m-2,eXTA)>:N5y7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("Bb,76");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.append("PkaW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("Bb,76");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.remove((Object) document0);
      assertTrue(elements0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.remove((Object) elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("");
      Element element0 = elements0.first();
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Elements elements0 = new Elements(115);
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("b*LY=0yr*g]q30");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.remove((-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.getAllElements();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) document_OutputSettings_Syntax0);
      boolean boolean0 = elements0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("Bb,Y6");
      Elements elements0 = document0.getAllElements();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) document0);
      boolean boolean0 = elements0.removeIf(predicate0);
      assertTrue(elements0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<m-2,eXTA:N5y7", "<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = elements0.retainAll(linkedList0);
      assertEquals(0, elements0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("I");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.retainAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Elements elements0 = new Elements();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add(elements0);
      boolean boolean0 = elements0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("");
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.last();
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Elements elements0 = new Elements();
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.parents();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("T5r?AQ)SywgoY6", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prevAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev("*");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*", "*");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y6", "Bb,Y6");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("Bb,Y6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.eq((-2129));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(409);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y|aK", "Bb,Y|aK");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.remove();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y|6", "Bb,Y|6");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.empty();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("Bb,Y|aK", "Bb,Y|aK");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.unwrap();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("<m-2,eXTA)>:N5y7", "<m-2,eXTA)>:N5y7");
      Elements elements0 = document0.getAllElements();
      elements0.wrap("<m-2,eXTA)>:N5y7");
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b,Y6", "b,Y6");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.after("b,Y6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("No elements matched the query '%s' in the elements.");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("No elements matched the query '%s' in the elements.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.before("3\"S4UaramE=:hhtC");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("");
      Elements elements1 = elements0.append("");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b-];s%E8k", "b-];s%E8k");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.html("b-];s%E8k");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Element[] elementArray0 = new Element[12];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.tagName("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.tagName("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y6", "Bb,Y6");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("Bb,Y6"));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.children();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Only http & https protocols supported", "Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("nly http & htps prtocols supported", "nly http & htps prtocols supported");
      Elements elements0 = document0.getAllElements();
      elements0.val("*mxmNg");
      String string0 = elements0.val();
      assertEquals("*mxmNg", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("nly http & htps prtocols supported", "nly http & htps prtocols supported");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("No elements matched the query '%s' in the elements.");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("No elements matched the query '%s' in the elements.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("");
      Elements elements1 = elements0.toggleClass("   ");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeClass("UWU-l)n?KV");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("I");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.addClass("org.jsoup.helper.HttpConnection$Response");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("Bb,Y6");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeAttr("Bb,Y6");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.attr("x", "x");
      List<String> list0 = elements1.eachAttr("x");
      assertTrue(list0.contains("x"));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("Bb,76");
      Elements elements0 = document0.children();
      List<String> list0 = elements0.eachAttr("Bb,76");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("<m-2,eXTA:N5y7");
      Elements elements0 = document0.getAllElements();
      elements0.attr("", "\n");
      boolean boolean0 = elements0.hasAttr("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Only http & https protocols supported", "Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasAttr("Only http & https protocols supported");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("Bb,76");
      document0.attr("Bb,76", "Bb,76");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("Bb,76");
      assertEquals("Bb,76", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.children();
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bb,Y|aK", "Bb,Y|aK");
      Elements elements0 = document0.getAllElements();
      elements0.set(3, (Element) document0);
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      elements0.replaceAll(unaryOperator0);
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.select("<_+];Lxz(u?A|i1x");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<_+];Lxz(u?A|i1x': unexpected token at '<_+];Lxz(u?A|i1x'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Elements elements0 = new Elements();
      ArrayList<Element> arrayList0 = elements0.asList();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.deselect(665);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 665, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.expectFirst(")XEN M$jX~$HL\"kq-_^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ')XEN M$jX~$HL\"kq-_^': unexpected token at ')XEN M$jX~$HL\"kq-_^'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsContainingText("");
      String string0 = elements0.text();
      assertEquals("   ", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tm", "Tm");
      Elements elements0 = document0.getAllElements();
      List<TextNode> list0 = elements0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("Bb,76");
      Elements elements0 = document0.getAllElements();
      List<Comment> list0 = elements0.comments();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.children();
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.not("XS,a&m{A4{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'XS,a&m{A4{': unexpected token at '&m{A4{'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.clear();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Element[] elementArray0 = new Element[9];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("Bb,Y6");
      Elements elements0 = document0.getAllElements();
      List<DataNode> list0 = elements0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("Bb,Y|a8", "Bb,Y|a8");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll((String) null);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.deselectAll();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Only http & https protocols supported", "Only http & https protocols supported");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next("o");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Elements elements0 = new Elements();
      boolean boolean0 = elements0.deselect((Object) elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("nly http & htps prtocols supported", "nly http & htps prtocols supported");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.nextAll("lkr.7#E@P2PwMVQQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'lkr.7#E@P2PwMVQQ': unexpected token at '@P2PwMVQQ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.removeAll(elements0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }
}
