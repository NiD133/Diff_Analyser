/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:10:06 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.FilterListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilterListIterator_ESTest extends FilterListIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      linkedList0.iterator();
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        filterListIterator0.hasPrevious();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>((Integer) null);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0, predicate0);
      filterListIterator0.hasPrevious();
      filterListIterator1.hasNext();
      filterListIterator0.previous();
      int int0 = filterListIterator0.nextIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator1.setListIterator(listIterator0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>((Integer) null);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator1, predicate0);
      // Undeclared exception!
      try { 
        filterListIterator2.hasPrevious();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      Integer integer0 = new Integer(0);
      predicate1.test(integer0);
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer1 = new Integer(0);
      linkedList0.add(integer1);
      linkedList0.iterator();
      Integer integer2 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer2);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      ListIterator<? extends Boolean> listIterator1 = new FilterListIterator<Boolean>();
      filterListIterator0.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicate0.and(predicate1);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      Integer integer0 = new Integer(5795);
      Integer integer1 = null;
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      filterListIterator0.setListIterator(listIterator0);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate2);
      filterListIterator2.hasNext();
      Integer integer2 = new Integer(1);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>(integer2);
      FilterListIterator<Boolean> filterListIterator3 = new FilterListIterator<Boolean>();
      filterListIterator3.getListIterator();
      filterListIterator0.hasPrevious();
      filterListIterator3.setPredicate(predicate1);
      filterListIterator2.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator2.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      filterListIterator0.hasPrevious();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate1);
      filterListIterator2.hasPrevious();
      filterListIterator2.hasPrevious();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      filterListIterator0.hasPrevious();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      ListIterator<Integer> listIterator1 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator1);
      filterListIterator0.hasNext();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Predicate<Integer> predicate2 = new EqualPredicate<Integer>(integer0);
      predicate2.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(listIterator0, predicate1);
      filterListIterator2.hasPrevious();
      FilterListIterator<Integer> filterListIterator3 = new FilterListIterator<Integer>();
      filterListIterator3.hasNext();
      filterListIterator2.previous();
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicate0.and(predicate1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.iterator();
      Integer integer0 = new Integer((-1));
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasPrevious();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      filterListIterator0.hasPrevious();
      filterListIterator1.setPredicate(predicate2);
      filterListIterator0.hasNext();
      filterListIterator0.previous();
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      Predicate<Integer> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Integer>) predicate0);
      predicate2.and(predicate1);
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      filterListIterator1.hasPrevious();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator2.setListIterator(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator2.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Integer integer0 = new Integer((-2175));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(listIterator0);
      filterListIterator1.hasPrevious();
      ListIterator<Integer> listIterator1 = linkedList0.listIterator(1);
      filterListIterator1.setListIterator(listIterator1);
      filterListIterator1.hasNext();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator2 = new FilterListIterator<Boolean>();
      filterListIterator2.getListIterator();
      FilterListIterator<Integer> filterListIterator3 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator3.setPredicate(predicate0);
      filterListIterator3.hasPrevious();
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0, predicate0);
      filterListIterator0.hasPrevious();
      filterListIterator1.hasNext();
      filterListIterator0.previous();
      filterListIterator1.next();
      assertEquals(0, filterListIterator1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator1.hasPrevious();
      filterListIterator0.hasPrevious();
      filterListIterator1.previous();
      assertEquals((-1), filterListIterator1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Object object0 = new Object();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(filterListIterator0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Predicate<Integer> predicate2 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Integer>>) linkedList1);
      predicate2.and(predicate1);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(listIterator0, predicate1);
      filterListIterator1.hasPrevious();
      linkedList0.listIterator(1);
      filterListIterator1.setListIterator(listIterator0);
      filterListIterator1.hasNext();
      java.util.function.Predicate<Integer> predicate3 = new IdentityPredicate<Integer>(integer0);
      FilterListIterator<Boolean> filterListIterator2 = new FilterListIterator<Boolean>();
      FilterListIterator<Boolean> filterListIterator3 = new FilterListIterator<Boolean>();
      FilterListIterator<Integer> filterListIterator4 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator1.hasPrevious();
      // Undeclared exception!
      try { 
        filterListIterator4.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      filterListIterator0.setListIterator(listIterator0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0, predicate0);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(predicate0);
      filterListIterator2.hasPrevious();
      filterListIterator1.hasNext();
      assertEquals(1, filterListIterator0.nextIndex());
      
      filterListIterator0.previous();
      assertEquals((-1), filterListIterator0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Integer> predicate0 = new UniquePredicate<Integer>();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[5] = predicate1;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = new UniquePredicate<Object>();
      predicateArray0[7] = predicate2;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      FilterListIterator<Boolean> filterListIterator2 = new FilterListIterator<Boolean>(filterListIterator1, predicate2);
      FilterListIterator<Boolean> filterListIterator3 = new FilterListIterator<Boolean>(filterListIterator2);
      // Undeclared exception!
      try { 
        filterListIterator3.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(988);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      filterListIterator1.setListIterator(listIterator0);
      IdentityPredicate<Integer> identityPredicate0 = new IdentityPredicate<Integer>((Integer) null);
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(listIterator0, identityPredicate0);
      // Undeclared exception!
      try { 
        filterListIterator1.hasPrevious();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate(object0, comparator0);
      predicateArray0[2] = predicate1;
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(filterListIterator0);
      filterListIterator0.setListIterator(filterListIterator1);
      DefaultEquator.defaultEquator();
      Predicate<Object> predicate2 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[5] = predicate2;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate3 = ComparatorPredicate.comparatorPredicate(object0, comparator1);
      predicateArray0[6] = predicate3;
      Predicate<Object> predicate4 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate4;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasPrevious();
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator2 = new FilterListIterator<Boolean>();
      filterListIterator2.getListIterator();
      filterListIterator2.hasPrevious();
      filterListIterator0.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator2.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate1);
      filterListIterator2.hasPrevious();
      filterListIterator2.hasNext();
      filterListIterator0.previous();
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      MapTransformer.mapTransformer((Map<? super Object, ?>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[5] = predicate1;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate2 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate2;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      filterListIterator1.hasPrevious();
      filterListIterator0.hasNext();
      filterListIterator0.previous();
      assertEquals((-1), filterListIterator0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FilterListIterator<Boolean> filterListIterator0 = new FilterListIterator<Boolean>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      equalPredicate0.and(predicate0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      Integer integer0 = new Integer(5795);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(5795);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(0);
      linkedList0.add(integer2);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      filterListIterator1.setListIterator(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator1.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      filterListIterator0.hasPrevious();
      filterListIterator0.hasNext();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Integer> predicate0 = new UniquePredicate<Integer>();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[3] = predicate1;
      linkedList0.add((Integer) null);
      filterListIterator0.hasPrevious();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      java.util.function.Predicate<Integer> predicate2 = new EqualPredicate<Integer>((Integer) null);
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator0.hasPrevious();
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      NullPredicate.nullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>(listIterator0, predicate0);
      filterListIterator1.hasPrevious();
      filterListIterator1.hasNext();
      filterListIterator1.previous();
      assertFalse(listIterator0.hasPrevious());
      assertEquals((-1), filterListIterator1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(1876);
      predicate0.test(integer0);
      Integer integer1 = new Integer(5795);
      linkedList0.add((Integer) null);
      linkedList0.add(integer1);
      java.util.function.Predicate.isEqual((Object) comparator0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasPrevious();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate1);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      nonePredicate0.and(predicate1);
      filterListIterator1.setPredicate(nonePredicate0);
      filterListIterator2.hasPrevious();
      filterListIterator2.hasNext();
      FilterListIterator<Boolean> filterListIterator3 = new FilterListIterator<Boolean>((ListIterator<? extends Boolean>) null);
      FilterListIterator<Object> filterListIterator4 = new FilterListIterator<Object>(filterListIterator3, predicate1);
      // Undeclared exception!
      try { 
        filterListIterator4.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ExceptionPredicate.exceptionPredicate();
      Predicate<Object> predicate1 = NullPredicate.nullPredicate();
      predicate0.and(predicate1);
      Integer integer0 = new Integer(5795);
      linkedList0.add(integer0);
      filterListIterator0.hasPrevious();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate1);
      filterListIterator0.hasPrevious();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.listIterator(0);
      Integer integer0 = new Integer(0);
      linkedList0.offerLast(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.listIterator(0);
      Integer integer0 = new Integer(681);
      linkedList0.offerLast(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      Integer integer0 = new Integer(681);
      linkedList0.offerLast(integer0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(listIterator0);
      Integer integer0 = new Integer(682);
      linkedList0.add(integer0);
      linkedList0.offerLast(integer0);
      // Undeclared exception!
      try { 
        filterListIterator0.hasNext();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
      Integer integer0 = new Integer(0);
      linkedList0.offerLast(integer0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.poll();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(listIterator0);
      Integer integer0 = new Integer(512);
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      Transformer<Object, Object> transformer0 = ClosureTransformer.closureTransformer((Closure<? super Object>) closure0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, nullIsExceptionPredicate0);
      java.util.function.Predicate.isEqual((Object) nullIsExceptionPredicate0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(transformedPredicate0, closure0, closure0);
      Closure<Object> closure1 = IfClosure.ifClosure((Predicate<? super Object>) nullIsExceptionPredicate0, (Closure<? super Object>) ifClosure0, (Closure<? super Object>) ifClosure0);
      filterListIterator0.forEachRemaining(closure1);
      FilterListIterator<InstanceofPredicate> filterListIterator1 = new FilterListIterator<InstanceofPredicate>();
      FilterListIterator<Predicate<Object>> filterListIterator2 = new FilterListIterator<Predicate<Object>>(filterListIterator1, transformedPredicate0);
      filterListIterator2.getPredicate();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      int int0 = filterListIterator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      Object object0 = new Object();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator1);
      filterListIterator2.nextIndex();
      FilterListIterator<Object> filterListIterator3 = new FilterListIterator<Object>(filterListIterator0);
      FilterListIterator<Integer> filterListIterator4 = new FilterListIterator<Integer>((ListIterator<? extends Integer>) null);
      // Undeclared exception!
      try { 
        filterListIterator4.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      int int0 = filterListIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      predicateArray0[1] = predicate1;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate2 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[2] = predicate2;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) nonePredicate0;
      Predicate<Object> predicate3 = UniquePredicate.uniquePredicate();
      predicateArray0[4] = predicate3;
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      predicateArray0[5] = (Predicate<Object>) nullIsTruePredicate0;
      nullIsTruePredicate0.test(predicate2);
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(predicate4);
      filterListIterator0.previousIndex();
      FilterListIterator<Transformer<Object, Object>> filterListIterator1 = new FilterListIterator<Transformer<Object, Object>>(predicate1);
      FilterListIterator<Transformer<Object, Object>> filterListIterator2 = new FilterListIterator<Transformer<Object, Object>>(filterListIterator1, predicateArray0[3]);
      FilterListIterator<Transformer<Object, Object>> filterListIterator3 = new FilterListIterator<Transformer<Object, Object>>(filterListIterator2);
      // Undeclared exception!
      try { 
        filterListIterator3.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      FilterListIterator<Integer> filterListIterator1 = new FilterListIterator<Integer>();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator1, (Predicate<? super Integer>) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      filterListIterator2.setListIterator(listIterator0);
      // Undeclared exception!
      try { 
        filterListIterator2.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FilterListIterator<Transformer<Object, Object>> filterListIterator0 = new FilterListIterator<Transformer<Object, Object>>();
      FilterListIterator<Transformer<Object, Object>> filterListIterator1 = new FilterListIterator<Transformer<Object, Object>>(filterListIterator0);
      filterListIterator1.setListIterator(filterListIterator0);
      boolean boolean0 = filterListIterator1.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate(integer0, comparator0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("' threw an exception");
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      predicate0.and(transformerPredicate0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(listIterator0, predicate0);
      Predicate<Object> predicate1 = null;
      filterListIterator0.setPredicate((Predicate<? super Integer>) null);
      // Undeclared exception!
      try { 
        predicate0.or((java.util.function.Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      filterListIterator0.setPredicate((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      // Undeclared exception!
      try { 
        filterListIterator0.set(filterListIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer((-227));
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Integer> predicate0 = EqualPredicate.equalPredicate(integer0, (Equator<Integer>) defaultEquator0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      Integer integer1 = new Integer((-227));
      // Undeclared exception!
      try { 
        filterListIterator0.set(integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.set(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      filterListIterator0.getListIterator();
      FilterListIterator<Transformer<Integer, Integer>> filterListIterator1 = new FilterListIterator<Transformer<Integer, Integer>>();
      filterListIterator0.hasNext();
      filterListIterator1.hasNext();
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // closure
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      ListIterator<?> listIterator0 = filterListIterator0.getListIterator();
      assertNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      FilterListIterator<Predicate<Integer>> filterListIterator0 = new FilterListIterator<Predicate<Integer>>(predicate0);
      filterListIterator0.hasPrevious();
      filterListIterator0.getListIterator();
      Predicate<Integer> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) predicate0);
      Object object0 = new Object();
      java.util.function.Predicate.isEqual(object0);
      predicate1.or(predicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.add(predicate1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate1 = new UniquePredicate<Object>();
      predicateArray0[7] = predicate1;
      predicate0.and(predicate0);
      Integer integer0 = new Integer(5781);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator(1);
      filterListIterator0.setListIterator(listIterator0);
      filterListIterator0.hasNext();
      predicate1.or(predicate1);
      predicate0.negate();
      FilterListIterator<Boolean> filterListIterator1 = new FilterListIterator<Boolean>();
      filterListIterator1.getListIterator();
      FilterListIterator<Integer> filterListIterator2 = new FilterListIterator<Integer>(filterListIterator0, predicate1);
      filterListIterator2.hasPrevious();
      filterListIterator2.hasNext();
      filterListIterator0.previous();
      FilterListIterator<Object> filterListIterator3 = new FilterListIterator<Object>();
      filterListIterator3.nextIndex();
      FilterListIterator<Transformer<Boolean, Integer>> filterListIterator4 = new FilterListIterator<Transformer<Boolean, Integer>>();
      filterListIterator4.previousIndex();
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      assertEquals((-1), filterListIterator0.previousIndex());
      
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      assertEquals((-1), filterListIterator1.previousIndex());
      
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>((ListIterator<?>) null);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      identityPredicate0.negate();
      identityPredicate0.or(uniquePredicate0);
      uniquePredicate0.or(identityPredicate0);
      // Undeclared exception!
      try { 
        filterListIterator0.forEachRemaining((Consumer<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicate0.negate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      filterListIterator0.getPredicate();
      Integer integer0 = new Integer(559);
      Integer integer1 = new Integer(559);
      filterListIterator0.getListIterator();
      FilterListIterator<Closure<Object>> filterListIterator1 = new FilterListIterator<Closure<Object>>();
      FilterListIterator<Predicate<Integer>> filterListIterator2 = new FilterListIterator<Predicate<Integer>>((Predicate<? super Predicate<Integer>>) null);
      int int0 = filterListIterator2.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      // Undeclared exception!
      try { 
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      filterListIterator0.getPredicate();
      // Undeclared exception!
      try { 
        filterListIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.remove() is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      // Undeclared exception!
      try { 
        filterListIterator0.add((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>((Predicate<? super Object>) null);
      // Undeclared exception!
      try { 
        filterListIterator0.add((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // FilterListIterator.add(Object) is not supported.
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FilterListIterator<Transformer<Object, Object>> filterListIterator0 = new FilterListIterator<Transformer<Object, Object>>();
      boolean boolean0 = filterListIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      // Undeclared exception!
      try { 
        filterListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0, uniquePredicate0);
      // Undeclared exception!
      try { 
        filterListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0);
      boolean boolean0 = filterListIterator1.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(predicate0);
      int int0 = filterListIterator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FilterListIterator<Integer> filterListIterator0 = new FilterListIterator<Integer>();
      boolean boolean0 = filterListIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(filterListIterator0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0, identityPredicate0);
      assertEquals((-1), filterListIterator1.previousIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>();
      // Undeclared exception!
      try { 
        filterListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      equalPredicate0.test(object0);
      equalPredicate0.test(object0);
      FilterListIterator<Object> filterListIterator0 = new FilterListIterator<Object>(equalPredicate0);
      FilterListIterator<Object> filterListIterator1 = new FilterListIterator<Object>(filterListIterator0, equalPredicate0);
      // Undeclared exception!
      try { 
        filterListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.FilterListIterator", e);
      }
  }
}
