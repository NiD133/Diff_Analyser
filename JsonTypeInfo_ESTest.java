/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:38 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.OptBoolean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonTypeInfo_ESTest extends JsonTypeInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
      String string0 = jsonTypeInfo_Id0.getDefaultPropertyName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withPropertyName((String) null);
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withPropertyName("EXTERNAL_PROPERTY");
      boolean boolean0 = jsonTypeInfo_Value0.equals(jsonTypeInfo_Value1);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
      assertFalse(boolean0);
      assertFalse(jsonTypeInfo_Value1.equals((Object)jsonTypeInfo_Value0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      Boolean boolean0 = new Boolean("EXTERNAL_PROPERTY");
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withRequireTypeIdForSubtypes(boolean0);
      boolean boolean1 = jsonTypeInfo_Value1.equals(jsonTypeInfo_Value0);
      assertFalse(boolean1);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
      assertFalse(jsonTypeInfo_Value0.equals((Object)jsonTypeInfo_Value1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withIdVisible(true);
      boolean boolean0 = jsonTypeInfo_Value1.equals(jsonTypeInfo_Value0);
      assertFalse(boolean0);
      assertFalse(jsonTypeInfo_Value0.equals((Object)jsonTypeInfo_Value1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.DEDUCTION;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.FALSE;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "", class0, false, boolean0);
      boolean boolean1 = jsonTypeInfo_Value1.equals(jsonTypeInfo_Value0);
      assertFalse(boolean1);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      boolean boolean0 = jsonTypeInfo_Value0.equals("EXTERNAL_PROPERTY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      boolean boolean0 = jsonTypeInfo_Value0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      boolean boolean1 = jsonTypeInfo_Value0.equals(jsonTypeInfo_Value0);
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value0.getPropertyName());
      assertTrue(boolean1);
      assertFalse(jsonTypeInfo_Value0.getIdVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      String string0 = jsonTypeInfo_Value0.toString();
      assertEquals("JsonTypeInfo.Value(idType=NONE,includeAs=PROPERTY,propertyName=null,defaultImpl=NULL,idVisible=false,requireTypeIdForSubtypes=null)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      String string0 = jsonTypeInfo_Value0.toString();
      assertEquals("JsonTypeInfo.Value(idType=MINIMAL_CLASS,includeAs=WRAPPER_OBJECT,propertyName=@2LLQRbW9{J2*\"1GY,defaultImpl=java.lang.Object,idVisible=false,requireTypeIdForSubtypes=false)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      boolean boolean0 = JsonTypeInfo.Value.isEnabled(jsonTypeInfo_Value0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      boolean boolean1 = JsonTypeInfo.Value.isEnabled(jsonTypeInfo_Value0);
      assertFalse(jsonTypeInfo_Value0.getIdVisible());
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value0.getPropertyName());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = JsonTypeInfo.Value.isEnabled((JsonTypeInfo.Value) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withRequireTypeIdForSubtypes((Boolean) null);
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      Boolean boolean1 = new Boolean("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withRequireTypeIdForSubtypes(boolean1);
      boolean boolean2 = jsonTypeInfo_Value1.equals(jsonTypeInfo_Value0);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
      assertTrue(boolean2);
      assertNotSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withIdVisible(false);
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withInclusionType(jsonTypeInfo_As0);
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withInclusionType(jsonTypeInfo_As0);
      boolean boolean0 = jsonTypeInfo_Value1.equals(jsonTypeInfo_Value0);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
      assertFalse(boolean0);
      assertFalse(jsonTypeInfo_Value0.equals((Object)jsonTypeInfo_Value1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withIdType(jsonTypeInfo_Id0);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value1.getPropertyName());
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withIdType(jsonTypeInfo_Id0);
      assertEquals(JsonTypeInfo.Id.CLASS, jsonTypeInfo_Value1.getIdType());
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      Class<Object> class0 = Object.class;
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withDefaultImpl(class0);
      assertFalse(jsonTypeInfo_Value1.equals((Object)jsonTypeInfo_Value0));
      assertNotSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.from((JsonTypeInfo) null);
      assertNull(jsonTypeInfo_Value0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonTypeInfo jsonTypeInfo0 = mock(JsonTypeInfo.class, CALLS_REAL_METHODS);
      doReturn((Class) null).when(jsonTypeInfo0).defaultImpl();
      doReturn((JsonTypeInfo.As) null).when(jsonTypeInfo0).include();
      doReturn((String) null).when(jsonTypeInfo0).property();
      doReturn((OptBoolean) null).when(jsonTypeInfo0).requireTypeIdForSubtypes();
      doReturn((JsonTypeInfo.Id) null).when(jsonTypeInfo0).use();
      doReturn(false).when(jsonTypeInfo0).visible();
      // Undeclared exception!
      try { 
        JsonTypeInfo.Value.from(jsonTypeInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JsonTypeInfo$Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      Boolean boolean0 = new Boolean("");
      Class<JsonTypeInfo> class0 = jsonTypeInfo_Value0.valueFor();
      JsonTypeInfo.Value jsonTypeInfo_Value1 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "F%n af6M@k!62Ai", class0, true, boolean0);
      assertTrue(jsonTypeInfo_Value1.getIdVisible());
      assertEquals("F%n af6M@k!62Ai", jsonTypeInfo_Value1.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      Class<Integer> class0 = Integer.class;
      Boolean boolean0 = Boolean.FALSE;
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, (String) null, class0, false, boolean0);
      assertEquals("@type", jsonTypeInfo_Value0.getPropertyName());
      assertFalse(jsonTypeInfo_Value0.getIdVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Integer> class0 = Integer.class;
      Boolean boolean0 = Boolean.TRUE;
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "dwi]|QzT;beNe4DG", class0, false, boolean0);
      Class<?> class1 = jsonTypeInfo_Value0.getDefaultImpl();
      assertNotNull(class1);
      assertFalse(jsonTypeInfo_Value0.getIdVisible());
      assertEquals("dwi]|QzT;beNe4DG", jsonTypeInfo_Value0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      boolean boolean0 = jsonTypeInfo_Value0.getIdVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.DEDUCTION;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Integer> class0 = Integer.class;
      Boolean boolean0 = Boolean.TRUE;
      JsonTypeInfo.Value jsonTypeInfo_Value0 = new JsonTypeInfo.Value(jsonTypeInfo_Id0, jsonTypeInfo_As0, "H:a", class0, true, boolean0);
      String string0 = jsonTypeInfo_Value0.getPropertyName();
      assertTrue(jsonTypeInfo_Value0.getIdVisible());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf(false);
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "<CLLX)Xg+tvh?s;", class0, true, boolean0);
      jsonTypeInfo_Value0.getIdType();
      assertTrue(jsonTypeInfo_Value0.getIdVisible());
      assertEquals("<CLLX)Xg+tvh?s;", jsonTypeInfo_Value0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.EMPTY;
      Boolean boolean0 = jsonTypeInfo_Value0.getRequireTypeIdForSubtypes();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf(false);
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "<CLLX)Xg+tvh?s;", class0, true, boolean0);
      jsonTypeInfo_Value0.getInclusionType();
      assertTrue(jsonTypeInfo_Value0.getIdVisible());
      assertEquals("<CLLX)Xg+tvh?s;", jsonTypeInfo_Value0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      Class<Object> class0 = Object.class;
      Boolean boolean0 = Boolean.valueOf("@2LLQRbW9{J2*\"1GY");
      JsonTypeInfo.Value jsonTypeInfo_Value0 = JsonTypeInfo.Value.construct(jsonTypeInfo_Id0, jsonTypeInfo_As0, "@2LLQRbW9{J2*\"1GY", class0, false, boolean0);
      JsonTypeInfo.Value jsonTypeInfo_Value1 = jsonTypeInfo_Value0.withDefaultImpl(class0);
      assertSame(jsonTypeInfo_Value1, jsonTypeInfo_Value0);
      assertEquals("@2LLQRbW9{J2*\"1GY", jsonTypeInfo_Value1.getPropertyName());
      assertFalse(jsonTypeInfo_Value1.getIdVisible());
  }
}
