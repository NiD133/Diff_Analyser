/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:14:31 GMT 2025
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.util.Collection;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StandardEntityCollection_ESTest extends StandardEntityCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Dimension dimension0 = new Dimension((-1), 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      ChartEntity chartEntity0 = new ChartEntity(rectangle0, ">", (String) null);
      standardEntityCollection0.add(chartEntity0);
      ChartEntity chartEntity1 = standardEntityCollection0.getEntity(1.0, 674.587836228879);
      assertNull(chartEntity1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      ChartEntity chartEntity0 = new ChartEntity(line2D_Double0);
      standardEntityCollection0.add(chartEntity0);
      standardEntityCollection0.add(chartEntity0);
      ChartEntity chartEntity1 = standardEntityCollection0.getEntity(0.0, 0.0);
      assertNull(chartEntity1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Point point0 = new Point(380, 4376);
      Rectangle rectangle0 = new Rectangle(point0);
      ChartEntity chartEntity0 = new ChartEntity(rectangle0, "E',gl8z/3O[2/[", "E',gl8z/3O[2/[");
      standardEntityCollection0.add(chartEntity0);
      int int0 = standardEntityCollection0.getEntityCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Dimension dimension0 = new Dimension((-1), 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      ChartEntity chartEntity0 = new ChartEntity(rectangle0, ">", (String) null);
      standardEntityCollection0.add(chartEntity0);
      ChartEntity chartEntity1 = standardEntityCollection0.getEntity(0);
      assertSame(chartEntity1, chartEntity0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        standardEntityCollection0.addAll((EntityCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.StandardEntityCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        standardEntityCollection0.add((ChartEntity) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'entity' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Collection<ChartEntity> collection0 = standardEntityCollection0.getEntities();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      ChartEntity chartEntity0 = new ChartEntity(line2D_Float0, " -ZHr,Q8I`#,X{EAHK", " -ZHr,Q8I`#,X{EAHK");
      standardEntityCollection0.add(chartEntity0);
      standardEntityCollection0.clone();
      assertEquals(1, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      boolean boolean0 = standardEntityCollection0.equals(standardEntityCollection1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      boolean boolean0 = standardEntityCollection0.equals(standardEntityCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Object object0 = new Object();
      boolean boolean0 = standardEntityCollection0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Dimension dimension0 = new Dimension((-1), 0);
      Rectangle rectangle0 = new Rectangle(dimension0);
      rectangle0.setFrameFromDiagonal((double) (-1), (-3226.3016161567016), (-1490.292), (double) 0);
      ChartEntity chartEntity0 = new ChartEntity(rectangle0, ">", ">");
      standardEntityCollection0.add(chartEntity0);
      ChartEntity chartEntity1 = standardEntityCollection0.getEntity((double) (-1491), (double) (-1491));
      assertEquals("rect", chartEntity1.getShapeType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Iterator<ChartEntity> iterator0 = standardEntityCollection0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      int int0 = standardEntityCollection0.getEntityCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.addAll(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      // Undeclared exception!
      try { 
        standardEntityCollection0.getEntity(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.clear();
      assertEquals(0, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.hashCode();
  }
}
