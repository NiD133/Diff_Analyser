package com.itextpdf.text.pdf;

import org.junit.Test;
import java.io.IOException;
import static org.junit.Assert.assertEquals;

/**
 * This test class contains tests for the RandomAccessFileOrArray class.
 * The original name, generated by a testing tool, has been kept for traceability.
 */
public class RandomAccessFileOrArray_ESTestTest121 extends RandomAccessFileOrArray_ESTest_scaffolding {

    /**
     * Tests the behavior of the read(byte[], int, int) method when it is called
     * after the end of the source has already been reached by a readLine() call.
     *
     * <p>This test verifies two specific outcomes:
     * <ul>
     *     <li>The read() method should return -1 to indicate the end of the file (EOF).</li>
     *     <li>The file pointer should be at a specific position (9L), which reveals a
     *         non-obvious behavior of the readLine() implementation.</li>
     * </ul>
     */
    @Test
    public void read_afterReadLineReachesEof_returnsMinusOneAndAssertsPointerPosition() throws IOException {
        // Arrange: Set up a RandomAccessFileOrArray with an 8-byte source.
        byte[] sourceData = new byte[8];
        RandomAccessFileOrArray reader = new RandomAccessFileOrArray(sourceData);
        final int EOF = -1;

        // Act:
        // 1. Consume the entire source with readLine() to advance the file pointer to the end.
        reader.readLine();

        // 2. Attempt to read from the source again, now that it's at EOF.
        // The parameters for the destination buffer (offset 52, length 16) are intentionally
        // out of bounds for the 'sourceData' array. This is safe because the read() method
        // is expected to check for EOF and return -1 *before* attempting to write to the buffer.
        int bytesRead = reader.read(sourceData, 52, 16);

        // Assert:
        // Verify that the read operation returned -1, indicating the end of the file.
        assertEquals("Reading at EOF should return -1.", EOF, bytesRead);

        // This assertion checks a specific, non-intuitive behavior of the implementation.
        // After readLine() consumes the 8-byte source, the file pointer is expected to be at 9.
        // This suggests that readLine() advances the pointer one position past the last byte.
        assertEquals("File pointer should be at the position expected after readLine() reaches EOF.", 9L, reader.getFilePointer());
    }
}