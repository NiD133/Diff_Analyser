/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 01:00:10 GMT 2025
 */

package org.apache.commons.io.file.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.DateTimeException;
import java.time.Instant;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileTimes_ESTest extends FileTimes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileTimes.isUnixTime(2147483647L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileTimes.isUnixTime((-2147483648L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      long long0 = FileTimes.toUnixTime(fileTime0);
      assertEquals(1392409281L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime(0L);
      long long0 = FileTimes.toUnixTime(fileTime0);
      assertEquals((-11644473600L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Date date0 = FileTimes.ntfsTimeToDate(0L);
      long long0 = FileTimes.toNtfsTime(date0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-9223372036854775808L));
      Date date0 = FileTimes.ntfsTimeToDate(bigDecimal0);
      long long0 = FileTimes.toNtfsTime(date0);
      assertEquals((-9223372036854775808L), long0);
      assertEquals("Thu Nov 14 21:11:54 GMT 27628", date0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = FileTimes.ntfsTimeToInstant(0L);
      long long0 = FileTimes.toNtfsTime(instant0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-1978L));
      long long0 = FileTimes.toNtfsTime(instant0);
      assertEquals(116444735980220000L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Date date0 = FileTimes.ntfsTimeToDate(bigDecimal0);
      FileTime fileTime0 = FileTimes.toFileTime(date0);
      long long0 = FileTimes.toNtfsTime(fileTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime((-1401L));
      long long0 = FileTimes.toNtfsTime(fileTime0);
      assertEquals((-1401L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FileTimes.toNtfsTime((-11644473600000L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileTime fileTime0 = FileTimes.EPOCH;
      FileTime fileTime1 = FileTimes.plusSeconds(fileTime0, 690L);
      assertNotSame(fileTime0, fileTime1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      FileTime fileTime1 = FileTimes.plusNanos(fileTime0, 1395L);
      assertNotSame(fileTime0, fileTime1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Instant instant0 = FileTimes.ntfsTimeToInstant(bigDecimal0);
      assertNotNull(instant0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      FileTime fileTime1 = FileTimes.minusSeconds(fileTime0, (-3169L));
      assertFalse(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      FileTime fileTime1 = FileTimes.minusNanos(fileTime0, 0L);
      assertTrue(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime((-165L));
      boolean boolean0 = FileTimes.isUnixTime(fileTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.toNtfsTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.toNtfsTime((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(116444736000820005L);
      // Undeclared exception!
      try { 
        FileTimes.toNtfsTime(instant0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Overflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.toNtfsTime((FileTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(9223372036854775807L);
      FileTime fileTime0 = FileTime.from(instant0);
      // Undeclared exception!
      try { 
        FileTimes.toNtfsTime(fileTime0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Overflow
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime(116444736024990000L);
      // Undeclared exception!
      try { 
        FileTimes.plusSeconds(fileTime0, 116444736024990000L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.plusSeconds((FileTime) null, 848L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileTime fileTime0 = FileTimes.fromUnixTime((-9223372036854775808L));
      // Undeclared exception!
      try { 
        FileTimes.plusNanos(fileTime0, (-9223372036854775808L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileTime fileTime0 = FileTimes.fromUnixTime((-116444736000000000L));
      // Undeclared exception!
      try { 
        FileTimes.plusMillis(fileTime0, (-116444736000000000L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.plusMillis((FileTime) null, 24L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.ntfsTimeToInstant((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(82.953588012);
      // Undeclared exception!
      try { 
        FileTimes.ntfsTimeToInstant(bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.ntfsTimeToDate((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1104.7219));
      // Undeclared exception!
      try { 
        FileTimes.ntfsTimeToDate(bigDecimal0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      // Undeclared exception!
      try { 
        FileTimes.minusSeconds(fileTime0, 130368828813200000L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.minusSeconds((FileTime) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.minusNanos((FileTime) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileTime fileTime0 = FileTimes.fromUnixTime(116444735987950000L);
      // Undeclared exception!
      try { 
        FileTimes.minusMillis(fileTime0, (-1205L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.minusMillis((FileTime) null, 2332L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileTime fileTime0 = FileTimes.EPOCH;
      long long0 = FileTimes.toUnixTime(fileTime0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = FileTimes.toUnixTime((FileTime) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = FileTimes.toNtfsTime(0L);
      assertEquals(116444736000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileTimes.isUnixTime((FileTime) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = FileTimes.toNtfsTime((-9223372036854775808L));
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = FileTimes.toNtfsTime(9223372036854775790L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileTime fileTime0 = FileTimes.toFileTime((Date) null);
      assertNull(fileTime0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Date date0 = FileTimes.toDate((FileTime) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = FileTimes.isUnixTime(9223372036854775790L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileTimes.isUnixTime((-9223372036854775808L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      long long0 = FileTimes.toNtfsTime(fileTime0);
      assertEquals(130368828813200000L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.plusNanos((FileTime) null, (-1240L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.attribute.FileTimes", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      // Undeclared exception!
      try { 
        FileTimes.plusSeconds(fileTime0, 9223372036854775800L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime(369L);
      FileTime fileTime1 = FileTimes.minusMillis(fileTime0, 0L);
      assertTrue(fileTime1.equals((Object)fileTime0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = FileTimes.ntfsTimeToInstant((-1L));
      long long0 = FileTimes.toNtfsTime(instant0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTimes.setLastModifiedTime((Path) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileTime fileTime0 = FileTimes.fromUnixTime(116444735988260000L);
      // Undeclared exception!
      try { 
        FileTimes.minusNanos(fileTime0, (-1174L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileTime fileTime0 = FileTimes.now();
      // Undeclared exception!
      try { 
        FileTimes.minusSeconds(fileTime0, (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileTime fileTime0 = FileTime.fromMillis(120L);
      Date date0 = FileTimes.toDate(fileTime0);
      assertNotNull(date0);
      
      long long0 = FileTimes.toNtfsTime(date0);
      assertEquals(116444736001200000L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileTime fileTime0 = FileTimes.ntfsTimeToFileTime(369L);
      FileTime fileTime1 = FileTimes.plusMillis(fileTime0, 369L);
      assertFalse(fileTime1.equals((Object)fileTime0));
  }
}
