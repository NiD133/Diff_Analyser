/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 01:00:10 GMT 2025
 */
package org.apache.commons.io.file.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.time.DateTimeException;
import java.time.Instant;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class FileTimes_ESTest extends FileTimes_ESTest_scaffolding {

    // Constants for commonly used values
    private static final long NTFS_EPOCH_OFFSET = -11644473600L;
    private static final long MAX_INT_VALUE = 2147483647L;
    private static final long MIN_INT_VALUE = -2147483648L;
    private static final long MIN_LONG_VALUE = Long.MIN_VALUE;
    private static final long MAX_LONG_VALUE = Long.MAX_VALUE;

    // Tests for isUnixTime()
    @Test(timeout = 4000)
    public void isUnixTime_returnsTrueForMaxIntegerValue() {
        assertTrue(FileTimes.isUnixTime(MAX_INT_VALUE));
    }

    @Test(timeout = 4000)
    public void isUnixTime_returnsTrueForMinIntegerValue() {
        assertTrue(FileTimes.isUnixTime(MIN_INT_VALUE));
    }

    @Test(timeout = 4000)
    public void isUnixTime_returnsFalseForFileTimeBeforeUnixEpoch() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(-165L);
        assertFalse(FileTimes.isUnixTime(fileTime));
    }

    @Test(timeout = 4000)
    public void isUnixTime_returnsTrueForNullFileTime() {
        assertTrue(FileTimes.isUnixTime((FileTime) null));
    }

    @Test(timeout = 4000)
    public void isUnixTime_returnsFalseForNearMaxLongValue() {
        assertFalse(FileTimes.isUnixTime(MAX_LONG_VALUE - 10));
    }

    @Test(timeout = 4000)
    public void isUnixTime_returnsFalseForMinLongValue() {
        assertFalse(FileTimes.isUnixTime(MIN_LONG_VALUE));
    }

    // Tests for toUnixTime()
    @Test(timeout = 4000)
    public void toUnixTime_returnsCurrentTimeWithMockedClock() {
        FileTime now = FileTimes.now();
        long unixTime = FileTimes.toUnixTime(now);
        assertEquals(1392409281L, unixTime);
    }

    @Test(timeout = 4000)
    public void toUnixTime_handlesNtfsEpochCorrectly() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(0L);
        long unixTime = FileTimes.toUnixTime(fileTime);
        assertEquals(NTFS_EPOCH_OFFSET, unixTime);
    }

    @Test(timeout = 4000)
    public void toUnixTime_returnsZeroForNullInput() {
        long unixTime = FileTimes.toUnixTime((FileTime) null);
        assertEquals(0L, unixTime);
    }

    @Test(timeout = 4000)
    public void toUnixTime_handlesEpochCorrectly() {
        long unixTime = FileTimes.toUnixTime(FileTimes.EPOCH);
        assertEquals(0L, unixTime);
    }

    // Tests for toNtfsTime() variants
    @Test(timeout = 4000)
    public void toNtfsTime_fromDate_handlesNtfsEpoch() {
        Date date = FileTimes.ntfsTimeToDate(0L);
        long ntfsTime = FileTimes.toNtfsTime(date);
        assertEquals(0L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromDate_handlesExtremeValues() {
        BigDecimal bigDecimal = new BigDecimal(MIN_LONG_VALUE);
        Date date = FileTimes.ntfsTimeToDate(bigDecimal);
        long ntfsTime = FileTimes.toNtfsTime(date);
        assertEquals(MIN_LONG_VALUE, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromInstant_handlesNtfsEpoch() {
        Instant instant = FileTimes.ntfsTimeToInstant(0L);
        long ntfsTime = FileTimes.toNtfsTime(instant);
        assertEquals(0L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromInstant_handlesPreEpoch() {
        Instant instant = MockInstant.ofEpochMilli(-1978L);
        long ntfsTime = FileTimes.toNtfsTime(instant);
        assertEquals(116444735980220000L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromFileTime_handlesNtfsEpoch() {
        BigDecimal bigDecimal = new BigDecimal(0.0);
        Date date = FileTimes.ntfsTimeToDate(bigDecimal);
        FileTime fileTime = FileTimes.toFileTime(date);
        long ntfsTime = FileTimes.toNtfsTime(fileTime);
        assertEquals(0L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromFileTime_handlesNegativeValues() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(-1401L);
        long ntfsTime = FileTimes.toNtfsTime(fileTime);
        assertEquals(-1401L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromLong_handlesUnixEpoch() {
        long ntfsTime = FileTimes.toNtfsTime(-11644473600000L);
        assertEquals(0L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromLong_handlesMinLongValue() {
        long ntfsTime = FileTimes.toNtfsTime(MIN_LONG_VALUE);
        assertEquals(MIN_LONG_VALUE, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromLong_clampsToMaxNtfsValue() {
        long ntfsTime = FileTimes.toNtfsTime(MAX_LONG_VALUE - 10);
        assertEquals(MAX_LONG_VALUE, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromLong_handlesZero() {
        long ntfsTime = FileTimes.toNtfsTime(0L);
        assertEquals(116444736000000000L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromNow_returnsExpectedValue() {
        FileTime now = FileTimes.now();
        long ntfsTime = FileTimes.toNtfsTime(now);
        assertEquals(130368828813200000L, ntfsTime);
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromInstant_handlesNegativeOne() {
        Instant instant = FileTimes.ntfsTimeToInstant(-1L);
        long ntfsTime = FileTimes.toNtfsTime(instant);
        assertEquals(-1L, ntfsTime);
    }

    // Tests for time arithmetic operations
    @Test(timeout = 4000)
    public void plusSeconds_createsNewInstance() {
        FileTime result = FileTimes.plusSeconds(FileTimes.EPOCH, 690L);
        assertNotSame(FileTimes.EPOCH, result);
    }

    @Test(timeout = 4000)
    public void plusNanos_createsNewInstance() {
        FileTime now = FileTimes.now();
        FileTime result = FileTimes.plusNanos(now, 1395L);
        assertNotSame(now, result);
    }

    @Test(timeout = 4000)
    public void minusSeconds_createsNewInstance() {
        FileTime now = FileTimes.now();
        FileTime result = FileTimes.minusSeconds(now, -3169L);
        assertFalse(result.equals(now));
    }

    @Test(timeout = 4000)
    public void minusNanos_handlesZeroChange() {
        FileTime now = FileTimes.now();
        FileTime result = FileTimes.minusNanos(now, 0L);
        assertEquals(now, result);
    }

    @Test(timeout = 4000)
    public void minusMillis_handlesZeroChange() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(369L);
        FileTime result = FileTimes.minusMillis(fileTime, 0L);
        assertEquals(fileTime, result);
    }

    @Test(timeout = 4000)
    public void plusMillis_createsNewInstance() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(369L);
        FileTime result = FileTimes.plusMillis(fileTime, 369L);
        assertNotSame(fileTime, result);
    }

    // Tests for conversion methods
    @Test(timeout = 4000)
    public void ntfsTimeToInstant_handlesBigDecimalTen() {
        Instant instant = FileTimes.ntfsTimeToInstant(BigDecimal.TEN);
        assertNotNull(instant);
    }

    @Test(timeout = 4000)
    public void toDate_returnsNullForNullInput() {
        assertNull(FileTimes.toDate(null));
    }

    @Test(timeout = 4000)
    public void toFileTime_returnsNullForNullInput() {
        assertNull(FileTimes.toFileTime(null));
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromDate_handlesStandardConversion() {
        FileTime fileTime = FileTime.fromMillis(120L);
        Date date = FileTimes.toDate(fileTime);
        long ntfsTime = FileTimes.toNtfsTime(date);
        assertEquals(116444736001200000L, ntfsTime);
    }

    // Exception handling tests
    @Test(timeout = 4000)
    public void toNtfsTime_fromDate_throwsNullPointerException() {
        try {
            FileTimes.toNtfsTime((Date) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromInstant_throwsNullPointerException() {
        try {
            FileTimes.toNtfsTime((Instant) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromInstant_throwsArithmeticExceptionOnOverflow() {
        Instant instant = MockInstant.ofEpochMilli(116444736000820005L);
        try {
            FileTimes.toNtfsTime(instant);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromFileTime_throwsNullPointerException() {
        try {
            FileTimes.toNtfsTime((FileTime) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void toNtfsTime_fromFileTime_throwsArithmeticExceptionOnOverflow() {
        Instant instant = MockInstant.ofEpochMilli(MAX_LONG_VALUE);
        FileTime fileTime = FileTime.from(instant);
        try {
            FileTimes.toNtfsTime(fileTime);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusSeconds_throwsDateTimeExceptionOnOverflow() {
        FileTime fileTime = FileTimes.ntfsTimeToFileTime(116444736024990000L);
        try {
            FileTimes.plusSeconds(fileTime, 116444736024990000L);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusSeconds_throwsNullPointerException() {
        try {
            FileTimes.plusSeconds(null, 848L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusNanos_throwsDateTimeExceptionOnOverflow() {
        FileTime fileTime = FileTimes.fromUnixTime(MIN_LONG_VALUE);
        try {
            FileTimes.plusNanos(fileTime, MIN_LONG_VALUE);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusNanos_throwsNullPointerException() {
        try {
            FileTimes.plusNanos(null, -1240L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusMillis_throwsDateTimeExceptionOnOverflow() {
        FileTime fileTime = FileTimes.fromUnixTime(-116444736000000000L);
        try {
            FileTimes.plusMillis(fileTime, -116444736000000000L);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusMillis_throwsNullPointerException() {
        try {
            FileTimes.plusMillis(null, 24L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void ntfsTimeToInstant_throwsNullPointerException() {
        try {
            FileTimes.ntfsTimeToInstant((BigDecimal) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void ntfsTimeToInstant_throwsArithmeticException() {
        BigDecimal bigDecimal = new BigDecimal(82.953588012);
        try {
            FileTimes.ntfsTimeToInstant(bigDecimal);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void ntfsTimeToDate_throwsNullPointerException() {
        try {
            FileTimes.ntfsTimeToDate((BigDecimal) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void ntfsTimeToDate_throwsArithmeticException() {
        BigDecimal bigDecimal = BigDecimal.valueOf(-1104.7219);
        try {
            FileTimes.ntfsTimeToDate(bigDecimal);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusSeconds_throwsDateTimeExceptionOnOverflow() {
        FileTime now = FileTimes.now();
        try {
            FileTimes.minusSeconds(now, 130368828813200000L);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusSeconds_throwsNullPointerException() {
        try {
            FileTimes.minusSeconds(null, 0L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusNanos_throwsNullPointerException() {
        try {
            FileTimes.minusNanos(null, 0L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusMillis_throwsDateTimeExceptionOnOverflow() {
        FileTime fileTime = FileTimes.fromUnixTime(116444735987950000L);
        try {
            FileTimes.minusMillis(fileTime, -1205L);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusMillis_throwsNullPointerException() {
        try {
            FileTimes.minusMillis(null, 2332L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void setLastModifiedTime_throwsNullPointerException() {
        try {
            FileTimes.setLastModifiedTime((Path) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusNanos_throwsDateTimeExceptionOnOverflow() {
        FileTime fileTime = FileTimes.fromUnixTime(116444735988260000L);
        try {
            FileTimes.minusNanos(fileTime, -1174L);
            fail("Expected DateTimeException");
        } catch (DateTimeException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void plusSeconds_throwsArithmeticExceptionOnLargeValue() {
        FileTime now = FileTimes.now();
        try {
            FileTimes.plusSeconds(now, MAX_LONG_VALUE - 8);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void minusSeconds_throwsArithmeticExceptionOnLargeValue() {
        FileTime now = FileTimes.now();
        try {
            FileTimes.minusSeconds(now, MIN_LONG_VALUE);
            fail("Expected ArithmeticException");
        } catch (ArithmeticException e) {
            // Expected behavior
        }
    }
}