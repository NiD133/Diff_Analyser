/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:40:53 GMT 2025
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.SystemColor;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.api.HorizontalAlignment;
import org.jfree.chart.api.RectangleAnchor;
import org.jfree.chart.api.VerticalAlignment;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.block.Size2D;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.data.Range;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GridArrangement_ESTest extends GridArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      GridArrangement gridArrangement1 = new GridArrangement(2084, 15);
      assertNotNull(gridArrangement1);
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
      
      boolean boolean0 = gridArrangement1.equals(gridArrangement0);
      assertNotSame(gridArrangement0, gridArrangement1);
      assertNotSame(gridArrangement1, gridArrangement0);
      assertFalse(boolean0);
      assertFalse(gridArrangement0.equals((Object)gridArrangement1));
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      GridArrangement gridArrangement1 = new GridArrangement(0, (-1901));
      assertNotNull(gridArrangement1);
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
      
      boolean boolean0 = gridArrangement1.equals(gridArrangement0);
      assertNotSame(gridArrangement0, gridArrangement1);
      assertNotSame(gridArrangement1, gridArrangement0);
      assertFalse(boolean0);
      assertFalse(gridArrangement0.equals((Object)gridArrangement1));
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(105, 105);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      SystemColor systemColor0 = SystemColor.textInactiveText;
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, 0.0, Double.NEGATIVE_INFINITY);
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, colorBlock0.getHeight(), 0.01);
      assertNotNull(colorBlock0);
      
      blockContainer0.add((Block) colorBlock0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, colorBlock0.getHeight(), 0.01);
      
      blockContainer0.add((Block) colorBlock0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals(128, systemColor0.getGreen());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, colorBlock0.getHeight(), 0.01);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals("Size2D[width=105.0, height=0.0]", size2D0.toString());
      assertEquals(105.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(105.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(4, (-649));
      assertNotNull(gridArrangement0);
      
      CenterArrangement centerArrangement0 = new CenterArrangement();
      assertNotNull(centerArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(centerArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.MONTHS;
      TimeSeries<ChronoUnit> timeSeries0 = new TimeSeries<ChronoUnit>(chronoUnit0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-827), (-649), (-649), 1, 39, (-320));
      assertNotNull(mockGregorianCalendar0);
      
      Range range0 = timeSeries0.findValueRange((Range) null, timePeriodAnchor0, (Calendar) mockGregorianCalendar0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-827,MONTH=-649,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-649,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=-320,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertTrue(range0.isNaNRange());
      assertEquals("Range[NaN,NaN]", range0.toString());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-827,MONTH=-649,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-649,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=-320,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertTrue(range0.isNaNRange());
      assertEquals("Range[NaN,NaN]", range0.toString());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-873), (-873));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      GridArrangement gridArrangement1 = new GridArrangement(212, (-297));
      assertNotNull(gridArrangement1);
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(212, (Range) null);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(212.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement1.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 4326);
      assertNotNull(gridArrangement0);
      
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 1623.165750936);
      assertNotNull(flowArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=0.0, height=NaN]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(15, 1.7976931348623157E308);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01);
      assertEquals(1.7976931348623157E308, emptyBlock0.getHeight(), 0.01);
      assertEquals(15.0, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01);
      assertNotNull(emptyBlock0);
      
      blockContainer0.add((Block) emptyBlock0, (Object) gridArrangement0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01);
      assertEquals(1.7976931348623157E308, emptyBlock0.getHeight(), 0.01);
      assertEquals(15.0, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(59, 59);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertNotNull(systemColor0);
      
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, (-1.0), 306.1);
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals(306.1, colorBlock0.getHeight(), 0.01);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      assertNotNull(colorBlock0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      blockContainer0.add((Block) colorBlock0, object0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(128, systemColor0.getBlue());
      assertEquals(128, systemColor0.getRed());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals(306.1, colorBlock0.getHeight(), 0.01);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(18059.9, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=0.0, height=18059.9]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(18059.9, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-3031), (-3031));
      assertNotNull(gridArrangement0);
      
      gridArrangement0.clear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Range range0 = new Range((-3367.341901), 219.4320566834);
      assertEquals(3586.7739576833997, range0.getLength(), 0.01);
      assertEquals(219.4320566834, range0.getUpperBound(), 0.01);
      assertEquals((-3367.341901), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-3367.341901,219.4320566834]", range0.toString());
      assertEquals((-1573.9549221583), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(3586.7739576833997, range0.getLength(), 0.01);
      assertEquals(219.4320566834, range0.getUpperBound(), 0.01);
      assertEquals((-3367.341901), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-3367.341901,219.4320566834]", range0.toString());
      assertEquals((-1573.9549221583), range0.getCentralValue(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(3586.7739576833997, range0.getLength(), 0.01);
      assertEquals(219.4320566834, range0.getUpperBound(), 0.01);
      assertEquals((-3367.341901), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-3367.341901,219.4320566834]", range0.toString());
      assertEquals((-1573.9549221583), range0.getCentralValue(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(527.2633130861806, 1317.5620888757064);
      assertEquals("Range[527.2633130861806,1317.5620888757064]", range0.toString());
      assertEquals(527.2633130861806, range0.getLowerBound(), 0.01);
      assertEquals(922.4127009809436, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(790.2987757895258, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals("Range[527.2633130861806,1317.5620888757064]", range0.toString());
      assertEquals(527.2633130861806, range0.getLowerBound(), 0.01);
      assertEquals(922.4127009809436, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(790.2987757895258, range0.getLength(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Range[527.2633130861806,1317.5620888757064]", range0.toString());
      assertEquals(527.2633130861806, range0.getLowerBound(), 0.01);
      assertEquals(922.4127009809436, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(790.2987757895258, range0.getLength(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals("Size2D[width=527.2633130861806, height=527.2633130861806]", size2D0.toString());
      assertEquals(527.2633130861806, size2D0.getHeight(), 0.01);
      assertEquals(527.2633130861806, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(527.2633130861806, size2D0.height, 0.01);
      assertEquals(527.2633130861806, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1616), (-1616));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-1616), (-1616));
      assertEquals((-1616.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1616.0,-1616.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1616.0), range0.getCentralValue(), 0.01);
      assertEquals((-1616.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals((-1616.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1616.0,-1616.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1616.0), range0.getCentralValue(), 0.01);
      assertEquals((-1616.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-1616.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1616.0,-1616.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1616.0), range0.getCentralValue(), 0.01);
      assertEquals((-1616.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals((-1616.0), size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=-1616.0, height=-1616.0]", size2D0.toString());
      assertEquals((-1616.0), size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-1616.0), size2D0.width, 0.01);
      assertEquals((-1616.0), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(49, 49);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-1966.702450689393), (-1966.702450689393));
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-1966.702450689393), size2D0.getHeight(), 0.01);
      assertEquals((-1966.702450689393), size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-1966.702450689393, height=-1966.702450689393]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals((-1966.702450689393), size2D0.width, 0.01);
      assertEquals((-1966.702450689393), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-919), (-919));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-919), (-919));
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals((-919.0), size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-919.0, height=-919.0]", size2D0.toString());
      assertEquals((-919.0), size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-919.0), size2D0.width, 0.01);
      assertEquals((-919.0), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-827), (-827));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(-0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=0.0, height=-0.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(-0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Range range0 = new Range(0.0, 45.53941763);
      assertEquals("Range[0.0,45.53941763]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(22.769708815, range0.getCentralValue(), 0.01);
      assertEquals(45.53941763, range0.getUpperBound(), 0.01);
      assertEquals(45.53941763, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3506.7306618706652, range0);
      assertEquals("Range[0.0,45.53941763]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(22.769708815, range0.getCentralValue(), 0.01);
      assertEquals(45.53941763, range0.getUpperBound(), 0.01);
      assertEquals(45.53941763, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(3506.7306618706652, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement(30, 1328);
      assertNotNull(gridArrangement0);
      
      Size2D size2D0 = gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals("Range[0.0,45.53941763]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(22.769708815, range0.getCentralValue(), 0.01);
      assertEquals(45.53941763, range0.getUpperBound(), 0.01);
      assertEquals(45.53941763, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(3506.7306618706652, rectangleConstraint0.getWidth(), 0.01);
      assertEquals("Size2D[width=3506.730661870665, height=0.0]", size2D0.toString());
      assertEquals(3506.730661870665, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(3506.730661870665, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(105, 105);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(105.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=105.0, height=105.0]", size2D0.toString());
      assertEquals(105.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(105.0, size2D0.height, 0.01);
      assertEquals(105.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-919), (-919));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-919), (-919));
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals((-919.0), size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-919.0, height=-919.0]", size2D0.toString());
      assertEquals((-919.0), size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-919.0), size2D0.height, 0.01);
      assertEquals((-919.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=NaN, height=NaN]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(123, 123);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals("Size2D[width=NaN, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, (-827));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(-0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-0.0, height=NaN]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(-0.0, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-919), (-919));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-919), (-919));
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals((-919.0), range0.getUpperBound(), 0.01);
      assertEquals((-919.0), range0.getLowerBound(), 0.01);
      assertEquals((-919.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-919.0,-919.0]", range0.toString());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals("Size2D[width=-0.0, height=-919.0]", size2D0.toString());
      assertEquals(-0.0, size2D0.getWidth(), 0.01);
      assertEquals((-919.0), size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-919.0), size2D0.height, 0.01);
      assertEquals(-0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(65, 65);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(65, 65);
      assertEquals(65.0, range0.getUpperBound(), 0.01);
      assertEquals(65.0, range0.getCentralValue(), 0.01);
      assertEquals(65.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[65.0,65.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-555.02928076), range0);
      assertEquals(65.0, range0.getUpperBound(), 0.01);
      assertEquals(65.0, range0.getCentralValue(), 0.01);
      assertEquals(65.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[65.0,65.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-555.02928076), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(65.0, range0.getUpperBound(), 0.01);
      assertEquals(65.0, range0.getCentralValue(), 0.01);
      assertEquals(65.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[65.0,65.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals((-555.02928076), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-555.02928076), size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-555.02928076, height=65.0]", size2D0.toString());
      assertEquals(65.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(65.0, size2D0.height, 0.01);
      assertEquals((-555.02928076), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(0.0, 0.0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, (-2116));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(0.0, 1317.5620888757064);
      assertEquals(658.7810444378532, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,1317.5620888757064]", range0.toString());
      assertEquals(1317.5620888757064, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(658.7810444378532, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,1317.5620888757064]", range0.toString());
      assertEquals(1317.5620888757064, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(658.7810444378532, range0.getCentralValue(), 0.01);
      assertEquals(1317.5620888757064, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[0.0,1317.5620888757064]", range0.toString());
      assertEquals(1317.5620888757064, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(-0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-0.0, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(-0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(4, 3136);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Range range0 = new Range((-1833.62112), (-59.797977));
      assertEquals((-59.797977), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-1833.62112,-59.797977]", range0.toString());
      assertEquals(1773.823143, range0.getLength(), 0.01);
      assertEquals((-946.7095485), range0.getCentralValue(), 0.01);
      assertEquals((-1833.62112), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(3136, range0, lengthConstraintType0, 3136, range0, lengthConstraintType0);
      assertEquals((-59.797977), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-1833.62112,-59.797977]", range0.toString());
      assertEquals(1773.823143, range0.getLength(), 0.01);
      assertEquals((-946.7095485), range0.getCentralValue(), 0.01);
      assertEquals((-1833.62112), range0.getLowerBound(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(3136.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(3136.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals((-59.797977), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[-1833.62112,-59.797977]", range0.toString());
      assertEquals(1773.823143, range0.getLength(), 0.01);
      assertEquals((-946.7095485), range0.getCentralValue(), 0.01);
      assertEquals((-1833.62112), range0.getLowerBound(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(3136.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(3136.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-59.797977), size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=3136.0, height=-59.797977]", size2D0.toString());
      assertEquals(3136.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-59.797977), size2D0.height, 0.01);
      assertEquals(3136.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      assertNotNull(columnArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(columnArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      GridArrangement gridArrangement0 = new GridArrangement((-1), 1301);
      assertNotNull(gridArrangement0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-1), (Range) null);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals("Size2D[width=-1.0, height=-0.0]", size2D0.toString());
      assertEquals(-0.0, size2D0.getHeight(), 0.01);
      assertEquals((-1.0), size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(-0.0, size2D0.height, 0.01);
      assertEquals((-1.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=NaN, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 1);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Range range0 = new Range((-2347.4), 0.0);
      assertEquals("Range[-2347.4,0.0]", range0.toString());
      assertEquals(2347.4, range0.getLength(), 0.01);
      assertEquals((-1173.7), range0.getCentralValue(), 0.01);
      assertEquals((-2347.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-3036.4844585497153), range0);
      assertEquals("Range[-2347.4,0.0]", range0.toString());
      assertEquals(2347.4, range0.getLength(), 0.01);
      assertEquals((-1173.7), range0.getCentralValue(), 0.01);
      assertEquals((-2347.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3036.4844585497153), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals("Range[-2347.4,0.0]", range0.toString());
      assertEquals(2347.4, range0.getLength(), 0.01);
      assertEquals((-1173.7), range0.getCentralValue(), 0.01);
      assertEquals((-2347.4), range0.getLowerBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3036.4844585497153), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals((-3036.4844585497153), size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=-3036.4844585497153, height=0.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals((-3036.4844585497153), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(65, 65);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-1966.702450689393), (-1966.702450689393));
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0, range0);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=NaN, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(Double.NaN, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(81, 81);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(81, (-2677.7593688945217));
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(81.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-2677.7593688945217), rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(81.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-2677.7593688945217), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-2677.7593688945217), size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=81.0, height=-2677.7593688945217]", size2D0.toString());
      assertEquals(81.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals((-2677.7593688945217), size2D0.height, 0.01);
      assertEquals(81.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2187, 2187);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2187, 2187);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2187.0, range0.getCentralValue(), 0.01);
      assertEquals(2187.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[2187.0,2187.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(2187.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2187.0, range0.getCentralValue(), 0.01);
      assertEquals(2187.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[2187.0,2187.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(2187.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2187.0, range0.getCentralValue(), 0.01);
      assertEquals(2187.0, range0.getUpperBound(), 0.01);
      assertEquals("Range[2187.0,2187.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(2187.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(2187.0, size2D0.getHeight(), 0.01);
      assertEquals(2187.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=2187.0, height=2187.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(2187.0, size2D0.width, 0.01);
      assertEquals(2187.0, size2D0.height, 0.01);
      
      // Undeclared exception!
      gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(10, 10);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2865, 2865);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2865, 2865);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2865.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2865.0, range0.getCentralValue(), 0.01);
      assertEquals(2865.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[2865.0,2865.0]", range0.toString());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2865.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(2865.0, range0.getCentralValue(), 0.01);
      assertEquals(2865.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[2865.0,2865.0]", range0.toString());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(80, 80);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2236, 2236);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1717.132829611028, 1717.132829611028);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(1717.132829611028, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(1717.132829611028, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2852, 2852);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2852, 2852);
      assertEquals("Range[2852.0,2852.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(2852.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2852.0, range0.getCentralValue(), 0.01);
      assertEquals(2852.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals("Range[2852.0,2852.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(2852.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2852.0, range0.getCentralValue(), 0.01);
      assertEquals(2852.0, range0.getUpperBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(97, 97);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(97, 97);
      assertEquals(97.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(97.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(77, 77);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      CenterArrangement centerArrangement0 = new CenterArrangement();
      assertNotNull(centerArrangement0);
      
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertNotNull(blockContainer1);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2808, 2808);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2808, 2808);
      assertEquals(2808.0, range0.getLowerBound(), 0.01);
      assertEquals(2808.0, range0.getCentralValue(), 0.01);
      assertEquals(2808.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[2808.0,2808.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(2808.0, range0.getLowerBound(), 0.01);
      assertEquals(2808.0, range0.getCentralValue(), 0.01);
      assertEquals(2808.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[2808.0,2808.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(52, 52);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(105, 105);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(105.0, range0.getUpperBound(), 0.01);
      assertEquals(105.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[105.0,105.0]", range0.toString());
      assertEquals(105.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      BlockContainer blockContainer1 = new BlockContainer();
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNotNull(blockContainer1);
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement((-2760), (-2760));
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2222, 2222);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2222, 2222);
      assertEquals(2222.0, range0.getUpperBound(), 0.01);
      assertEquals(2222.0, range0.getLowerBound(), 0.01);
      assertEquals(2222.0, range0.getCentralValue(), 0.01);
      assertEquals("Range[2222.0,2222.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(2222.0, range0.getUpperBound(), 0.01);
      assertEquals(2222.0, range0.getLowerBound(), 0.01);
      assertEquals(2222.0, range0.getCentralValue(), 0.01);
      assertEquals("Range[2222.0,2222.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(2222.0, range0.getUpperBound(), 0.01);
      assertEquals(2222.0, range0.getLowerBound(), 0.01);
      assertEquals(2222.0, range0.getCentralValue(), 0.01);
      assertEquals("Range[2222.0,2222.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(2222.0, size2D0.getHeight(), 0.01);
      assertEquals(2222.0, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=2222.0, height=2222.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(2222.0, size2D0.width, 0.01);
      assertEquals(2222.0, size2D0.height, 0.01);
      
      // Undeclared exception!
      gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(11, 11);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-653), (-653));
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNN((BlockContainer) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      CenterArrangement centerArrangement0 = new CenterArrangement();
      assertNotNull(centerArrangement0);
      
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertNotNull(blockContainer1);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      GridArrangement gridArrangement0 = new GridArrangement((-973), (-973));
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(52, 52);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(52, 52);
      assertEquals(52.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(52.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(305, 305);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      FlowArrangement flowArrangement0 = new FlowArrangement();
      assertNotNull(flowArrangement0);
      
      blockContainer0.setArrangement(flowArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(65, 65);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1529, 1529);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement((-2506), (-2506));
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2333.9152700999625, 2333.9152700999625);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2333.9152700999625, range0.getLowerBound(), 0.01);
      assertEquals(2333.9152700999625, range0.getCentralValue(), 0.01);
      assertEquals(2333.9152700999625, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[2333.9152700999625,2333.9152700999625]", range0.toString());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2333.9152700999625, range0.getLowerBound(), 0.01);
      assertEquals(2333.9152700999625, range0.getCentralValue(), 0.01);
      assertEquals(2333.9152700999625, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[2333.9152700999625,2333.9152700999625]", range0.toString());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      BlockContainer blockContainer1 = new BlockContainer();
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNotNull(blockContainer1);
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer1.add((Block) blockContainer0);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertFalse(blockContainer1.isEmpty());
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer1, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1179), (-1179));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      BlockContainer blockContainer1 = new BlockContainer();
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertNotNull(blockContainer1);
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(68, 68);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-374.0), (Range) null);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals((-374.0), rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-5.5).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement(2958465, 2958465);
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      gridArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      GridArrangement gridArrangement0 = new GridArrangement(2172, 2172);
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeFF((BlockContainer) null, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2850, 2850);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range(2850, 2850);
      assertFalse(range0.isNaNRange());
      assertEquals(2850.0, range0.getCentralValue(), 0.01);
      assertEquals(2850.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[2850.0,2850.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2850.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(2850.0, range0.getCentralValue(), 0.01);
      assertEquals(2850.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[2850.0,2850.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2850.0, range0.getUpperBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertFalse(range0.isNaNRange());
      assertEquals(2850.0, range0.getCentralValue(), 0.01);
      assertEquals(2850.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[2850.0,2850.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2850.0, range0.getUpperBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(2850.0, size2D0.getWidth(), 0.01);
      assertEquals(2850.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=2850.0, height=2850.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(2850.0, size2D0.width, 0.01);
      assertEquals(2850.0, size2D0.height, 0.01);
      
      // Undeclared exception!
      gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(65, 65);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(305, 305);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      
      Range range0 = new Range(305, 305);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(305.0, range0.getLowerBound(), 0.01);
      assertEquals(305.0, range0.getCentralValue(), 0.01);
      assertEquals(305.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[305.0,305.0]", range0.toString());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, 305);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(305.0, range0.getLowerBound(), 0.01);
      assertEquals(305.0, range0.getCentralValue(), 0.01);
      assertEquals(305.0, range0.getUpperBound(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals("Range[305.0,305.0]", range0.toString());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(305.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = new Range(97, 97);
      assertFalse(range0.isNaNRange());
      assertEquals(97.0, range0.getCentralValue(), 0.01);
      assertEquals(97.0, range0.getUpperBound(), 0.01);
      assertEquals(97.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[97.0,97.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertFalse(range0.isNaNRange());
      assertEquals(97.0, range0.getCentralValue(), 0.01);
      assertEquals(97.0, range0.getUpperBound(), 0.01);
      assertEquals(97.0, range0.getLowerBound(), 0.01);
      assertEquals("Range[97.0,97.0]", range0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      CenterArrangement centerArrangement0 = new CenterArrangement();
      assertNotNull(centerArrangement0);
      
      BlockContainer blockContainer1 = new BlockContainer(centerArrangement0);
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertNotNull(blockContainer1);
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer1.getWidth(), 0.01);
      assertTrue(blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      GridArrangement gridArrangement0 = new GridArrangement(105, 60);
      assertNotNull(gridArrangement0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(68, 68);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-374.0), (Range) null);
      assertEquals((-374.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-5.5).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2394, 2394);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-900), (-2.147483648E9));
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-2.147483648E9), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-900.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-2.147483648E9), rectangleConstraint0.getHeight(), 0.01);
      assertEquals((-900.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals((-900.0), size2D0.getWidth(), 0.01);
      assertEquals((-2.147483648E9), size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=-900.0, height=-2.147483648E9]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals((-900.0), size2D0.width, 0.01);
      assertEquals((-2.147483648E9), size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, (-827));
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((-827), (Range) null, lengthConstraintType1, 0, (Range) null, lengthConstraintType0);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-827.0), rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getWidthConstraintType());
      assertEquals((-827.0), rectangleConstraint0.getWidth(), 0.01);
      assertEquals((-827.0), size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=-827.0, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals((-827.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null, lengthConstraintType0, 0.0, (Range) null, lengthConstraintType1);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-1966.702450689393), (-1966.702450689393));
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertNotNull(range0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.NONE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(Double.POSITIVE_INFINITY, range0, lengthConstraintType0, 0.0, (Range) null, lengthConstraintType1);
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(Double.POSITIVE_INFINITY, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNotSame(lengthConstraintType0, lengthConstraintType1);
      assertNotSame(lengthConstraintType1, lengthConstraintType0);
      assertEquals((-1966.702450689393), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1966.702450689393,-1966.702450689393]", range0.toString());
      assertEquals((-1966.702450689393), range0.getCentralValue(), 0.01);
      assertEquals((-1966.702450689393), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range0.isNaNRange());
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.FIXED, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(Double.POSITIVE_INFINITY, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals("Size2D[width=NaN, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertFalse(lengthConstraintType0.equals((Object)lengthConstraintType1));
      assertFalse(lengthConstraintType1.equals((Object)lengthConstraintType0));
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(Double.NaN, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(59, 59);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(3306, 3306);
      assertNotNull(gridArrangement0);
      
      LabelBlock labelBlock0 = new LabelBlock("org.jfree.chart.block.FlowArrangement");
      assertEquals(TextBlockAnchor.CENTER, labelBlock0.getContentAlignmentPoint());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
      assertNotNull(labelBlock0);
      
      gridArrangement0.add(labelBlock0, "org.jfree.chart.block.FlowArrangement");
      assertEquals(TextBlockAnchor.CENTER, labelBlock0.getContentAlignmentPoint());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(RectangleAnchor.CENTER, labelBlock0.getTextAnchor());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01);
      assertNull(labelBlock0.getURLText());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(29, 698);
      assertNotNull(gridArrangement0);
      
      GridArrangement gridArrangement1 = new GridArrangement(81, 698);
      assertNotNull(gridArrangement1);
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
      
      boolean boolean0 = gridArrangement0.equals(gridArrangement1);
      assertNotSame(gridArrangement0, gridArrangement1);
      assertNotSame(gridArrangement1, gridArrangement0);
      assertFalse(boolean0);
      assertFalse(gridArrangement0.equals((Object)gridArrangement1));
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      GridArrangement gridArrangement1 = new GridArrangement(0, 3646);
      assertNotNull(gridArrangement1);
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
      
      boolean boolean0 = gridArrangement1.equals(gridArrangement0);
      assertNotSame(gridArrangement0, gridArrangement1);
      assertNotSame(gridArrangement1, gridArrangement0);
      assertFalse(boolean0);
      assertFalse(gridArrangement0.equals((Object)gridArrangement1));
      assertFalse(gridArrangement1.equals((Object)gridArrangement0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      GridArrangement gridArrangement1 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement1);
      assertTrue(gridArrangement1.equals((Object)gridArrangement0));
      
      boolean boolean0 = gridArrangement0.equals(gridArrangement1);
      assertNotSame(gridArrangement0, gridArrangement1);
      assertNotSame(gridArrangement1, gridArrangement0);
      assertTrue(boolean0);
      assertTrue(gridArrangement0.equals((Object)gridArrangement1));
      assertTrue(gridArrangement1.equals((Object)gridArrangement0));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      assertNotNull(gridArrangement0);
      
      boolean boolean0 = gridArrangement0.equals(gridArrangement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(30, 30);
      assertNotNull(gridArrangement0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = gridArrangement0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(118, 118);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      blockContainer0.add((Block) null);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertFalse(blockContainer0.isEmpty());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
      assertEquals(0.0, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1, 0);
      assertNotNull(gridArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer(gridArrangement0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = gridArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.NONE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals("Size2D[width=NaN, height=0.0]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getWidth(), 0.01);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1068), (-1068));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-1068), (-1068));
      assertEquals("Range[-1068.0,-1068.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1068.0), range0.getCentralValue(), 0.01);
      assertEquals((-1068.0), range0.getUpperBound(), 0.01);
      assertEquals((-1068.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.expandToInclude(range0, 1.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Range[-1068.0,-1068.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1068.0), range0.getCentralValue(), 0.01);
      assertEquals((-1068.0), range0.getUpperBound(), 0.01);
      assertEquals((-1068.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1068.0,1.0]", range1.toString());
      assertEquals(1069.0, range1.getLength(), 0.01);
      assertEquals((-1068.0), range1.getLowerBound(), 0.01);
      assertEquals((-533.5), range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range1);
      assertEquals("Range[-1068.0,-1068.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1068.0), range0.getCentralValue(), 0.01);
      assertEquals((-1068.0), range0.getUpperBound(), 0.01);
      assertEquals((-1068.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1068.0,1.0]", range1.toString());
      assertEquals(1069.0, range1.getLength(), 0.01);
      assertEquals((-1068.0), range1.getLowerBound(), 0.01);
      assertEquals((-533.5), range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertEquals("Range[-1068.0,-1068.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1068.0), range0.getCentralValue(), 0.01);
      assertEquals((-1068.0), range0.getUpperBound(), 0.01);
      assertEquals((-1068.0), range0.getLowerBound(), 0.01);
      assertEquals("Range[-1068.0,1.0]", range1.toString());
      assertEquals(1069.0, range1.getLength(), 0.01);
      assertEquals((-1068.0), range1.getLowerBound(), 0.01);
      assertEquals((-533.5), range1.getCentralValue(), 0.01);
      assertFalse(range1.isNaNRange());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals((-1068.0), size2D0.getWidth(), 0.01);
      assertEquals(-0.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=-1068.0, height=-0.0]", size2D0.toString());
      assertNotNull(size2D0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(-0.0, size2D0.height, 0.01);
      assertEquals((-1068.0), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range range0 = new Range(0, 0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNotNull(blockContainer0);
      
      GridArrangement gridArrangement0 = new GridArrangement(0, (-2597));
      assertNotNull(gridArrangement0);
      
      Size2D size2D0 = gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Range[0.0,0.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals("Size2D[width=-0.0, height=NaN]", size2D0.toString());
      assertEquals(Double.NaN, size2D0.getHeight(), 0.01);
      assertEquals(-0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertEquals(Double.NaN, size2D0.height, 0.01);
      assertEquals(-0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-3619), (-3619));
      assertNotNull(gridArrangement0);
      
      Range range0 = new Range((-3619), (-3619));
      assertEquals("Range[-3619.0,-3619.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3619.0), range0.getCentralValue(), 0.01);
      assertEquals((-3619.0), range0.getLowerBound(), 0.01);
      assertEquals((-3619.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals("Range[-3619.0,-3619.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3619.0), range0.getCentralValue(), 0.01);
      assertEquals((-3619.0), range0.getLowerBound(), 0.01);
      assertEquals((-3619.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertNotNull(rectangleConstraint0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertNotNull(blockContainer0);
      
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals("Range[-3619.0,-3619.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3619.0), range0.getCentralValue(), 0.01);
      assertEquals((-3619.0), range0.getLowerBound(), 0.01);
      assertEquals((-3619.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertNotNull(rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      Size2D size2D0 = gridArrangement0.arrangeRN(blockContainer0, (Graphics2D) null, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals("Range[-3619.0,-3619.0]", range0.toString());
      assertFalse(range0.isNaNRange());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3619.0), range0.getCentralValue(), 0.01);
      assertEquals((-3619.0), range0.getLowerBound(), 0.01);
      assertEquals((-3619.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getWidthConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint0.getHeightConstraintType());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01);
      assertTrue(blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getHeightConstraintType());
      assertEquals(LengthConstraintType.RANGE, rectangleConstraint1.getWidthConstraintType());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01);
      assertEquals(-0.0, size2D0.getHeight(), 0.01);
      assertEquals("Size2D[width=-0.0, height=-0.0]", size2D0.toString());
      assertEquals(-0.0, size2D0.getWidth(), 0.01);
      assertNotNull(size2D0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertEquals(-0.0, size2D0.height, 0.01);
      assertEquals(-0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(2878, 2878);
      Range range0 = new Range(2878, 2878);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      gridArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, rectangleConstraint0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      Range range0 = new Range(0.0, 0.0);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      BlockContainer blockContainer0 = new BlockContainer();
      Size2D size2D0 = gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(15, 15);
      Range range0 = new Range((-2250.587925944), 15);
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      Size2D size2D0 = gridArrangement0.arrangeNF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Size2D[width=0.0, height=0.0]", size2D0.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.add((Block) null);
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      // Undeclared exception!
      try { 
        gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      BlockContainer blockContainer0 = new BlockContainer();
      Range range0 = new Range(105, 105);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      SystemColor systemColor0 = SystemColor.activeCaption;
      ColorBlock colorBlock0 = new ColorBlock(systemColor0, 0.0, Double.NEGATIVE_INFINITY);
      blockContainer0.add((Block) colorBlock0);
      Size2D size2D0 = gridArrangement0.arrangeRF(blockContainer0, (Graphics2D) null, rectangleConstraint0);
      assertEquals("Size2D[width=105.0, height=105.0]", size2D0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(105, 105);
      BlockContainer blockContainer0 = new BlockContainer();
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      LengthConstraintType lengthConstraintType1 = LengthConstraintType.NONE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, (Range) null, lengthConstraintType0, (-1.0), (Range) null, lengthConstraintType1);
      // Undeclared exception!
      try { 
        gridArrangement0.arrange(blockContainer0, (Graphics2D) null, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.GridArrangement", e);
      }
  }
}
