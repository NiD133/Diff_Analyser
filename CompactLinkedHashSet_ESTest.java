/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:08:07 GMT 2025
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.CompactLinkedHashSet;
import com.google.common.collect.EmptyImmutableSetMultimap;
import com.google.common.collect.ImmutableCollection;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSortedSet;
import java.util.Collection;
import java.util.Locale;
import java.util.Set;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompactLinkedHashSet_ESTest extends CompactLinkedHashSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create(integerArray0);
      compactLinkedHashSet0.moveLastEntry(0, 0);
      assertEquals(1, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      Integer[] integerArray0 = new Integer[7];
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create(integerArray0);
      compactLinkedHashSet0.insertEntry(2, (Integer) int0, int0, 2788);
      assertEquals(1, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create(objectArray0);
      compactLinkedHashSet0.init(0);
      assertFalse(compactLinkedHashSet0.contains(0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create(objectArray0);
      compactLinkedHashSet0.resizeEntries(41);
      assertEquals(1, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create(integerArray0);
      Integer[] integerArray1 = compactLinkedHashSet0.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = new CompactLinkedHashSet<Locale.Category>();
      Object[] objectArray0 = compactLinkedHashSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.createWithExpectedSize(31);
      Spliterator<Integer> spliterator0 = compactLinkedHashSet0.spliterator();
      assertNotNull(spliterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create(locale_CategoryArray0);
      int int0 = compactLinkedHashSet0.firstEntryIndex();
      assertEquals(1, compactLinkedHashSet0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create();
      int int0 = compactLinkedHashSet0.firstEntryIndex();
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = new CompactLinkedHashSet<Locale.Category>();
      CompactLinkedHashSet<Object> compactLinkedHashSet1 = CompactLinkedHashSet.create((Collection<?>) compactLinkedHashSet0);
      assertTrue(compactLinkedHashSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = new CompactLinkedHashSet<Integer>(8232);
      Set<Integer> set0 = compactLinkedHashSet0.convertToHashFloodingResistantImplementation();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompactLinkedHashSet<Comparable<Object>> compactLinkedHashSet0 = CompactLinkedHashSet.createWithExpectedSize(133);
      int int0 = compactLinkedHashSet0.adjustAfterRemove(1941, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create(objectArray0);
      int int0 = compactLinkedHashSet0.adjustAfterRemove(1941, 1941);
      assertEquals(1941, int0);
      assertEquals(1, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create(integerArray0);
      int int0 = compactLinkedHashSet0.adjustAfterRemove(73, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ImmutableSet<Locale.Category> immutableSet0 = ImmutableSet.of(locale_Category0);
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create((Collection<? extends Locale.Category>) immutableSet0);
      Object[] objectArray0 = new Object[0];
      compactLinkedHashSet0.elements = objectArray0;
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.common.collect.CompactHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = new CompactLinkedHashSet<Integer>(1);
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.resizeEntries(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = new CompactLinkedHashSet<Locale.Category>();
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.moveLastEntry(17, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.moveLastEntry(1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.common.collect.CompactHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.insertEntry(91, locale_Category0, 91, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ImmutableSortedSet<Locale.Category> immutableSortedSet0 = ImmutableSortedSet.of(locale_Category0, locale_Category0, locale_Category0);
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create((Collection<? extends Locale.Category>) immutableSortedSet0);
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.insertEntry(133, locale_Category0, 133, 1485);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 133
         //
         verifyException("com.google.common.collect.CompactHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = new CompactLinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.init((-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create();
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.getSuccessor(1296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactLinkedHashSet.createWithExpectedSize((-1086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactLinkedHashSet.create((Locale.Category[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompactLinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompactLinkedHashSet.create((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.CompactLinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create(locale_CategoryArray0);
      CompactLinkedHashSet<Object> compactLinkedHashSet1 = CompactLinkedHashSet.create((Collection<?>) compactLinkedHashSet0);
      // Undeclared exception!
      try { 
        compactLinkedHashSet1.allocArrays();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Arrays already allocated
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = null;
      try {
        compactLinkedHashSet0 = new CompactLinkedHashSet<Locale.Category>((-439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected size must be >= 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.createWithExpectedSize(2497);
      compactLinkedHashSet0.clear();
      assertEquals(0, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create((Object[]) locale_CategoryArray0);
      compactLinkedHashSet0.clear();
      assertEquals(0, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create(objectArray0);
      EmptyImmutableSetMultimap emptyImmutableSetMultimap0 = EmptyImmutableSetMultimap.INSTANCE;
      ImmutableCollection<Object> immutableCollection0 = emptyImmutableSetMultimap0.createValues();
      boolean boolean0 = compactLinkedHashSet0.retainAll(immutableCollection0);
      assertTrue(compactLinkedHashSet0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      CompactLinkedHashSet<Object> compactLinkedHashSet0 = CompactLinkedHashSet.create();
      Object[] objectArray0 = compactLinkedHashSet0.toArray((Object[]) locale_CategoryArray0);
      assertSame(locale_CategoryArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create(locale_CategoryArray0);
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.resizeEntries((-1131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create(integerArray0);
      compactLinkedHashSet0.convertToHashFloodingResistantImplementation();
      assertEquals(1, compactLinkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ImmutableSet<Locale.Category> immutableSet0 = ImmutableSet.of(locale_Category0);
      CompactLinkedHashSet<Locale.Category> compactLinkedHashSet0 = CompactLinkedHashSet.create((Collection<? extends Locale.Category>) immutableSet0);
      compactLinkedHashSet0.toArray();
      assertTrue(compactLinkedHashSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompactLinkedHashSet<Integer> compactLinkedHashSet0 = CompactLinkedHashSet.create();
      compactLinkedHashSet0.allocArrays();
      // Undeclared exception!
      try { 
        compactLinkedHashSet0.getSuccessor(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.common.collect.CompactLinkedHashSet", e);
      }
  }
}
