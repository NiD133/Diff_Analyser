/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:56 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Pattern;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.filefilter.CanExecuteFileFilter;
import org.apache.commons.io.filefilter.CanReadFileFilter;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.io.function.IOBiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccumulatorPathVisitor_ESTest extends AccumulatorPathVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CanReadFileFilter canReadFileFilter0 = (CanReadFileFilter)CanReadFileFilter.CAN_READ;
      String[] stringArray0 = new String[7];
      PrefixFileFilter prefixFileFilter0 = new PrefixFileFilter(stringArray0);
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) canReadFileFilter0, (PathFilter) prefixFileFilter0);
      assertNotNull(accumulatorPathVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      MockFile mockFile0 = new MockFile("q`;c", "CgHQW32?+phrjUX\"");
      Path path0 = mockFile0.toPath();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, false, comparator0);
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.updateFileCounters(path0, basicFileAttributes0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeFiles(path0, true, comparator0);
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(">", (-1));
      RegexFileFilter regexFileFilter0 = new RegexFileFilter(pattern0);
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters((PathFilter) null, (PathFilter) regexFileFilter0);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.AccumulatorPathVisitor$1");
      Path path0 = mockFile0.toPath();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeDirectories(path0, false, comparator0);
      assertFalse(list0.contains(path0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      MockIOException mockIOException0 = new MockIOException("CgHQW32?+phrjUX\"");
      MockFile mockFile0 = new MockFile("q`;c", "CgHQW32?+phrjUX\"");
      Path path0 = mockFile0.toPath();
      accumulatorPathVisitor0.updateDirCounter(path0, mockIOException0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Path> list0 = accumulatorPathVisitor0.relativizeDirectories(path0, false, comparator0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.updateFileCounters(path0, basicFileAttributes0);
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      MockIOException mockIOException0 = new MockIOException();
      accumulatorPathVisitor0.updateDirCounter(path0, mockIOException0);
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HiddenFileFilter hiddenFileFilter0 = (HiddenFileFilter)HiddenFileFilter.HIDDEN;
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters((PathFilter) hiddenFileFilter0, (PathFilter) hiddenFileFilter0);
      MockFile mockFile0 = new MockFile("org.apache.commons.io.file.AccumulatorPathVisitor$Builder", "9|ng{v.vnRUd<'l0fW");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.updateFileCounters(path0, basicFileAttributes0);
      MockFile mockFile1 = new MockFile("9|ng{v.vnRUd<'l0fW");
      Path path1 = mockFile1.toPath();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeFiles(path1, true, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      MockIOException mockIOException0 = new MockIOException();
      accumulatorPathVisitor0.updateDirCounter(path0, mockIOException0);
      MockFile mockFile1 = new MockFile("c+{ [lS|rLx6");
      Path path1 = mockFile1.toPath();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeDirectories(path1, true, (Comparator<? super Path>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccumulatorPathVisitor.Builder accumulatorPathVisitor_Builder0 = AccumulatorPathVisitor.builder();
      Counters.PathCounters counters_PathCounters0 = accumulatorPathVisitor_Builder0.getPathCounters();
      AccumulatorPathVisitor accumulatorPathVisitor0 = null;
      try {
        accumulatorPathVisitor0 = new AccumulatorPathVisitor(counters_PathCounters0, (PathFilter) null, (PathFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fileFilter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccumulatorPathVisitor.Builder accumulatorPathVisitor_Builder0 = new AccumulatorPathVisitor.Builder();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      List<Path> list0 = accumulatorPathVisitor0.getFileList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      accumulatorPathVisitor0.visitFile(path0, basicFileAttributes0);
      AccumulatorPathVisitor accumulatorPathVisitor1 = new AccumulatorPathVisitor();
      boolean boolean0 = accumulatorPathVisitor1.equals(accumulatorPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      AccumulatorPathVisitor accumulatorPathVisitor1 = new AccumulatorPathVisitor();
      assertTrue(accumulatorPathVisitor1.equals((Object)accumulatorPathVisitor0));
      
      MockFile mockFile0 = new MockFile("+By\"=^s%<");
      Path path0 = mockFile0.toPath();
      MockIOException mockIOException0 = new MockIOException();
      accumulatorPathVisitor1.postVisitDirectory(path0, (IOException) mockIOException0);
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CountingPathVisitor.withBigIntegerCounters();
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(countingPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccumulatorPathVisitor.Builder accumulatorPathVisitor_Builder0 = AccumulatorPathVisitor.builder();
      AccumulatorPathVisitor accumulatorPathVisitor0 = accumulatorPathVisitor_Builder0.get();
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      AccumulatorPathVisitor accumulatorPathVisitor1 = AccumulatorPathVisitor.withBigIntegerCounters();
      boolean boolean0 = accumulatorPathVisitor0.equals(accumulatorPathVisitor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor(counters_PathCounters0);
      List<Path> list0 = accumulatorPathVisitor0.getDirList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      CanExecuteFileFilter canExecuteFileFilter0 = (CanExecuteFileFilter)CanExecuteFileFilter.CAN_EXECUTE;
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor(counters_PathCounters0, canExecuteFileFilter0, canExecuteFileFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      CanWriteFileFilter canWriteFileFilter0 = (CanWriteFileFilter)CanWriteFileFilter.CAN_WRITE;
      AccumulatorPathVisitor accumulatorPathVisitor0 = null;
      try {
        accumulatorPathVisitor0 = new AccumulatorPathVisitor(counters_PathCounters0, canWriteFileFilter0, canWriteFileFilter0, (IOBiFunction<Path, IOException, FileVisitResult>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // visitFileFailedFunction
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      MockFile mockFile0 = new MockFile("h?d:E`l.T");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.updateFileCounters(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CountingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      accumulatorPathVisitor0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = new AccumulatorPathVisitor();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeDirectories((Path) null, true, (Comparator<? super Path>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withLongCounters();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.relativizeFiles((Path) null, true, (Comparator<? super Path>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccumulatorPathVisitor accumulatorPathVisitor0 = AccumulatorPathVisitor.withBigIntegerCounters();
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        accumulatorPathVisitor0.updateDirCounter((Path) null, mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.AccumulatorPathVisitor", e);
      }
  }
}
