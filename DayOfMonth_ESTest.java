/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:49:21 GMT 2025
 */

package org.threeten.extra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Month;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.Chronology;
import java.time.chrono.HijrahDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockYearMonth;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import org.threeten.extra.DayOfMonth;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DayOfMonth_ESTest extends DayOfMonth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.of(31);
      DayOfMonth dayOfMonth1 = DayOfMonth.now();
      boolean boolean0 = dayOfMonth0.equals(dayOfMonth1);
      assertFalse(dayOfMonth1.equals((Object)dayOfMonth0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      String string0 = dayOfMonth0.toString();
      assertEquals("DayOfMonth:14", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      dayOfMonth0.range(chronoField0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      TemporalQuery<Object> temporalQuery0 = (TemporalQuery<Object>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      dayOfMonth0.query(temporalQuery0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      DayOfMonth dayOfMonth0 = DayOfMonth.now(clock0);
      TemporalQuery<String> temporalQuery0 = (TemporalQuery<String>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn("").when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      dayOfMonth0.query(temporalQuery0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      DayOfMonth dayOfMonth0 = DayOfMonth.now((ZoneId) zoneOffset0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      DayOfMonth dayOfMonth1 = DayOfMonth.of(1);
      int int0 = dayOfMonth0.compareTo(dayOfMonth1);
      assertEquals(14, dayOfMonth0.getValue());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      DayOfMonth dayOfMonth1 = DayOfMonth.of(28);
      int int0 = dayOfMonth0.compareTo(dayOfMonth1);
      assertEquals((-14), int0);
      assertEquals(28, dayOfMonth1.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      YearMonth yearMonth0 = MockYearMonth.now();
      dayOfMonth0.atYearMonth(yearMonth0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      dayOfMonth0.atMonth(1);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      Clock clock0 = MockClock.systemUTC();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now(clock0);
      Temporal temporal0 = dayOfMonth0.adjustInto(zonedDateTime0);
      assertTrue(temporal0.equals((Object)zonedDateTime0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.ERA;
      // Undeclared exception!
      try { 
        dayOfMonth0.range(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: Era
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.query((TemporalQuery<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfMonth.of((-510));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth: -510
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        DayOfMonth.now(clock1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfMonth.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_DAY;
      // Undeclared exception!
      try { 
        dayOfMonth0.get(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: ClockHourOfDay
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.get((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfMonth.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.compareTo((DayOfMonth) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      long long0 = dayOfMonth0.getLong(chronoField0);
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.AMPM_OF_DAY;
      boolean boolean0 = dayOfMonth0.isSupported(chronoField0);
      assertEquals(14, dayOfMonth0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      dayOfMonth0.isSupported(chronoField0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.range((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      DayOfMonth dayOfMonth1 = DayOfMonth.of(31);
      boolean boolean0 = dayOfMonth0.equals(dayOfMonth1);
      assertFalse(boolean0);
      assertFalse(dayOfMonth1.equals((Object)dayOfMonth0));
      assertEquals(31, dayOfMonth1.getValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      DayOfMonth dayOfMonth0 = DayOfMonth.now(clock0);
      boolean boolean0 = dayOfMonth0.equals(dayOfMonth0);
      assertEquals(14, dayOfMonth0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      boolean boolean0 = dayOfMonth0.equals(zoneOffset0);
      assertEquals(14, dayOfMonth0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.adjustInto(hijrahDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Adjustment only supported on ISO date-time
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      YearMonth yearMonth0 = MockYearMonth.now();
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.adjustInto(yearMonth0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: DayOfMonth
         //
         verifyException("java.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      Chronology.from(dayOfMonth0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      YearMonth yearMonth0 = MockYearMonth.now((ZoneId) zoneOffset0);
      DayOfMonth dayOfMonth0 = DayOfMonth.of(31);
      boolean boolean0 = dayOfMonth0.isValidYearMonth(yearMonth0);
      assertFalse(boolean0);
      assertEquals(31, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      YearMonth yearMonth0 = MockYearMonth.now((ZoneId) zoneOffset0);
      boolean boolean0 = dayOfMonth0.isValidYearMonth(yearMonth0);
      assertEquals(14, dayOfMonth0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      boolean boolean0 = dayOfMonth0.isValidYearMonth((YearMonth) null);
      assertFalse(boolean0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.INSTANT_SECONDS;
      // Undeclared exception!
      try { 
        dayOfMonth0.getLong(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: InstantSeconds
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.getLong((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      boolean boolean0 = dayOfMonth0.isSupported((TemporalField) null);
      assertEquals(14, dayOfMonth0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        DayOfMonth.from(zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain DayOfMonth from TemporalAccessor: +18:00 of type java.time.ZoneOffset
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      DayOfMonth dayOfMonth0 = DayOfMonth.now(clock0);
      DayOfMonth dayOfMonth1 = DayOfMonth.from(dayOfMonth0);
      assertEquals(14, dayOfMonth1.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      DayOfMonth dayOfMonth0 = DayOfMonth.from(minguoDate0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      Month month0 = Month.AUGUST;
      dayOfMonth0.atMonth(month0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfMonth.now((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      // Undeclared exception!
      try { 
        dayOfMonth0.atYearMonth((YearMonth) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.DayOfMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.of(31);
      // Undeclared exception!
      try { 
        dayOfMonth0.atMonth((-550));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear: -550
         //
         verifyException("java.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      DayOfMonth dayOfMonth0 = DayOfMonth.now(clock0);
      int int0 = dayOfMonth0.getValue();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      dayOfMonth0.hashCode();
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      int int0 = dayOfMonth0.compareTo(dayOfMonth0);
      assertEquals(0, int0);
      assertEquals(14, dayOfMonth0.getValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DayOfMonth dayOfMonth0 = DayOfMonth.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      int int0 = dayOfMonth0.get(chronoField0);
      assertEquals(14, int0);
  }
}
