/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:45:04 GMT 2025
 */

package org.apache.commons.compress.compressors.lzma;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.compressors.lzma.LZMAUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LZMAUtils_ESTest extends LZMAUtils_ESTest_scaffolding {

    private static final int TIMEOUT = 4000;

    // ========================================================================
    // Tests for matches(byte[], int)
    // ========================================================================

    @Test(timeout = TIMEOUT)
    public void testMatches_NonMagicFirstByte_ReturnsFalse() throws Throwable {
        // Test non-magic first byte (117 != 93)
        byte[] data = {117, 0, 0, 0, 0};
        assertFalse(LZMAUtils.matches(data, data.length));
    }

    @Test(timeout = TIMEOUT)
    public void testMatches_EmptyArrayWithInvalidLength_ThrowsException() throws Throwable {
        // Test empty array with invalid length (3) causes index error
        byte[] emptyData = new byte[0];
        try {
            LZMAUtils.matches(emptyData, 3);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("0", e.getMessage());
        }
    }

    @Test(timeout = TIMEOUT)
    public void testMatches_ShortArrayWithMagicByte_ReturnsTrue() throws Throwable {
        // Test valid magic byte (93) at start returns true
        byte[] data = new byte[4];
        data[0] = (byte) 93;
        assertTrue(LZMAUtils.matches(data, data.length));
    }

    @Test(timeout = TIMEOUT)
    public void testMatches_EmptyArray_ReturnsFalse() throws Throwable {
        // Test empty array returns false (insufficient length)
        byte[] emptyData = new byte[0];
        assertFalse(LZMAUtils.matches(emptyData, 0));
    }

    @Test(timeout = TIMEOUT)
    public void testMatches_NullArray_ThrowsNullPointerException() throws Throwable {
        // Test null array throws NullPointerException
        try {
            LZMAUtils.matches(null, (byte) 93);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // ========================================================================
    // Tests for isCompressedFilename / isCompressedFileName
    // ========================================================================

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFilename_ValidLzmaExtension_ReturnsTrue() throws Throwable {
        // Test filename with ".lzma" extension returns true
        assertTrue(LZMAUtils.isCompressedFilename("$VALUES.lzma"));
    }

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFileName_NoLzmaExtension_ReturnsFalse() throws Throwable {
        // Test filename without LZMA extension returns false
        assertFalse(LZMAUtils.isCompressedFileName("CACHED_UNAVAILABLE"));
    }

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFilename_InvalidExtension_ReturnsFalse() throws Throwable {
        // Test filename with non-LZMA extension returns false
        assertFalse(LZMAUtils.isCompressedFilename("Jz[y2){c^no"));
    }

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFileName_ValidLzmaExtension_ReturnsTrue() throws Throwable {
        // Test filename with ".lzma" extension returns true
        assertTrue(LZMAUtils.isCompressedFileName("Kj-M[Oi{g@l@.lzma"));
    }

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFilename_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.isCompressedFilename(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = TIMEOUT)
    public void testIsCompressedFileName_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.isCompressedFileName(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // ========================================================================
    // Tests for getUncompressedFilename / getUncompressedFileName
    // ========================================================================

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFilename_NoExtension_ReturnsOriginal() throws Throwable {
        // Test filename without extension remains unchanged
        assertEquals("CACHED_UNAVAILABLE", LZMAUtils.getUncompressedFilename("CACHED_UNAVAILABLE"));
    }

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFilename_EmptyString_ReturnsEmpty() throws Throwable {
        // Test empty filename returns empty string
        assertEquals("", LZMAUtils.getUncompressedFilename(""));
    }

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFileName_EmptyString_ReturnsEmpty() throws Throwable {
        // Test empty filename returns empty string
        assertEquals("", LZMAUtils.getUncompressedFileName(""));
    }

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFileName_NoExtension_ReturnsOriginal() throws Throwable {
        // Test filename without extension remains unchanged
        assertEquals("Kj-M[Oi{g@l@", LZMAUtils.getUncompressedFileName("Kj-M[Oi{g@l@"));
    }

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFilename_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.getUncompressedFilename(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = TIMEOUT)
    public void testGetUncompressedFileName_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.getUncompressedFileName(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // ========================================================================
    // Tests for getCompressedFilename / getCompressedFileName
    // ========================================================================

    @Test(timeout = TIMEOUT)
    public void testGetCompressedFilename_AppendsLzmaExtension() throws Throwable {
        // Test appends ".lzma" to filename
        assertEquals("h6n.lzma", LZMAUtils.getCompressedFilename("h6n"));
    }

    @Test(timeout = TIMEOUT)
    public void testGetCompressedFileName_AppendsLzmaExtension() throws Throwable {
        // Test appends ".lzma" to filename
        assertEquals("Kj-M[Oi{g@l@.lzma", LZMAUtils.getCompressedFileName("Kj-M[Oi{g@l@"));
    }

    @Test(timeout = TIMEOUT)
    public void testGetCompressedFilename_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.getCompressedFilename(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = TIMEOUT)
    public void testGetCompressedFileName_NullInput_ThrowsNullPointerException() throws Throwable {
        // Test null filename throws NullPointerException
        try {
            LZMAUtils.getCompressedFileName(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // ========================================================================
    // Tests for LZMA availability caching
    // ========================================================================

    @Test(timeout = TIMEOUT)
    public void testSetCacheLZMAAvailablity_CanSetTrueAndFalse() throws Throwable {
        // Test setting cache availability to false then true
        LZMAUtils.setCacheLZMAAvailablity(false);
        LZMAUtils.setCacheLZMAAvailablity(true);
    }

    @Test(timeout = TIMEOUT)
    public void testSetCacheLZMAAvailablity_CanSetTrue() throws Throwable {
        // Test setting cache availability to true
        LZMAUtils.setCacheLZMAAvailablity(true);
    }

    @Test(timeout = TIMEOUT)
    public void testIsLZMACompressionAvailable_Default_ReturnsFalse() throws Throwable {
        // Test LZMA not available by default
        assertFalse(LZMAUtils.isLZMACompressionAvailable());
    }

    @Test(timeout = TIMEOUT)
    public void testIsLZMACompressionAvailable_AfterDisablingCache_ReturnsFalse() throws Throwable {
        // Test disabling cache doesn't affect availability
        LZMAUtils.setCacheLZMAAvailablity(false);
        assertFalse(LZMAUtils.isLZMACompressionAvailable());
    }
}