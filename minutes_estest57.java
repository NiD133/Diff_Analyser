package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.fail;

/**
 * This test class contains tests for the {@link Minutes} class.
 * The original test was generated by EvoSuite, and this version has been
 * refactored for improved understandability.
 */
public class Minutes_ESTestTest57 extends Minutes_ESTest_scaffolding {

    /**
     * Tests that {@link Minutes#minutesBetween(ReadablePartial, ReadablePartial)} throws a
     * NullPointerException when given a {@link ReadablePartial} that is internally
     * inconsistent (i.e., its internal array of field types is null).
     *
     * This test case ensures the method's robustness against malformed input objects.
     */
    @Test
    public void minutesBetween_givenPartialWithNullFieldTypes_throwsNullPointerException() {
        // Arrange: Create a ReadablePartial that is internally inconsistent to simulate
        // a corrupt object state.
        int[] dummyValues = new int[1];

        // This Partial object is invalid because its array of field types is null.
        // Note: The public constructor of Partial would normally throw an
        // IllegalArgumentException for null types. This test relies on an
        // environment (like the original EvoSuite test generation tool) that can
        // create such an object to test this specific edge case.
        ReadablePartial partialWithNullFields = new Partial(null, null, dummyValues);

        // Act & Assert: Expect a NullPointerException when minutesBetween attempts to
        // access the (null) field types of the Partial to ensure they match.
        try {
            Minutes.minutesBetween(partialWithNullFields, partialWithNullFields);
            fail("Expected a NullPointerException, but none was thrown.");
        } catch (NullPointerException expected) {
            // Success: The expected exception was caught, confirming that the method
            // fails as anticipated when handling this invalid state.
        }
    }
}