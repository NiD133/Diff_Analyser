/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:41:16 GMT 2025
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.image.BufferedImage;
import java.time.chrono.ChronoLocalDate;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.pie.PiePlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.data.time.Day;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYLineAnnotation_ESTest extends XYLineAnnotation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-3139.810815486518), (-3139.810815486518), (-3139.810815486518), (-605.8001));
      xYLineAnnotation0.hashCode();
      assertEquals((-605.8001), xYLineAnnotation0.getY2(), 0.01);
      assertEquals((-3139.810815486518), xYLineAnnotation0.getX2(), 0.01);
      assertEquals((-3139.810815486518), xYLineAnnotation0.getX1(), 0.01);
      assertEquals((-3139.810815486518), xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(10, 1.0F, 1.0F, 1562.446, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals(1.0, xYLineAnnotation1.getY1(), 0.01);
      assertEquals(10.0, xYLineAnnotation1.getX1(), 0.01);
      assertEquals(1562.446, xYLineAnnotation1.getY2(), 0.01);
      assertEquals(1.0, xYLineAnnotation1.getX2(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Stroke stroke0 = combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(10, 1.0F, (-14.36318469711), 180.0, stroke0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals(180.0, xYLineAnnotation1.getY2(), 0.01);
      assertEquals(10.0, xYLineAnnotation1.getX1(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, xYLineAnnotation1.getY1(), 0.01);
      assertEquals((-14.36318469711), xYLineAnnotation1.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, (-7304.15211577795), 1447.795, 1447.795);
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(0.0, 2448.47017008, 0.0, 2448.47017008);
      boolean boolean0 = xYLineAnnotation1.equals(xYLineAnnotation0);
      assertEquals((-7304.15211577795), xYLineAnnotation0.getY1(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1447.795, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(1447.795, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(2448.47017008, xYLineAnnotation1.getY2(), 0.01);
      assertEquals(0.0, xYLineAnnotation1.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2327.1622629400345, (-1.0));
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0, (-222.60413), 0.05, 500);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1160.6), 1402.8869869359344, 1.0F, 1.0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, spiderWebPlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      boolean boolean0 = xYLineAnnotation1.equals(xYLineAnnotation0);
      assertEquals(500.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(1402.8869869359344, xYLineAnnotation1.getY1(), 0.01);
      assertEquals(0.05, xYLineAnnotation0.getX2(), 0.01);
      assertEquals((-1160.6), xYLineAnnotation1.getX1(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      DateAxis dateAxis0 = new DateAxis();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 10.0, 5193.5984, (-1711.1007449), dateAxis0.DEFAULT_AXIS_LINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(972.9942880626711, 138.7250706690693, (String) null);
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw((Graphics2D) null, combinedRangeXYPlot0, defaultCaret0, cyclicNumberAxis0, dateAxis0, 0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-1.0));
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>(cyclicNumberAxis0);
      Stroke stroke0 = combinedRangeXYPlot0.getRangeGridlineStroke();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-496.0), 1036.4647693410504, 1036.4647693410504, (-1.0), stroke0, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      Day day0 = new Day();
      PeriodAxis periodAxis0 = new PeriodAxis("", day0, day0);
      // Undeclared exception!
      try { 
        xYLineAnnotation0.draw((Graphics2D) null, combinedRangeXYPlot0, rectangle0, periodAxis0, cyclicNumberAxis0, 0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYLineAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2545.5, (-909.0), (-1423.676), (double) samplingXYLineRenderer0.ZERO, samplingXYLineRenderer0.DEFAULT_OUTLINE_STROKE, samplingXYLineRenderer0.DEFAULT_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getY2();
      assertEquals((-1423.676), xYLineAnnotation0.getX2(), 0.01);
      assertEquals((-909.0), xYLineAnnotation0.getY1(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2545.5, xYLineAnnotation0.getX1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-123.579630569), 1.0, 1.0, (-123.579630569));
      double double0 = xYLineAnnotation0.getY2();
      assertEquals((-123.579630569), double0, 0.01);
      assertEquals((-123.579630569), xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((double) samplingXYLineRenderer0.ZERO, (double) samplingXYLineRenderer0.ZERO, (-1423.7460088225328), (double) samplingXYLineRenderer0.ZERO, samplingXYLineRenderer0.DEFAULT_OUTLINE_STROKE, samplingXYLineRenderer0.DEFAULT_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getY1();
      assertEquals(0.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(0.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1423.7460088225328), xYLineAnnotation0.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2545.5, (-909.0), (-1423.676), (double) samplingXYLineRenderer0.ZERO, samplingXYLineRenderer0.DEFAULT_OUTLINE_STROKE, samplingXYLineRenderer0.DEFAULT_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getY1();
      assertEquals((-1423.676), xYLineAnnotation0.getX2(), 0.01);
      assertEquals(2545.5, xYLineAnnotation0.getX1(), 0.01);
      assertEquals((-909.0), double0, 0.01);
      assertEquals(0.0, xYLineAnnotation0.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 2448.47017008, 0.0, 2448.47017008);
      double double0 = xYLineAnnotation0.getX2();
      assertEquals(2448.47017008, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2448.47017008, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(0.0, xYLineAnnotation0.getX1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      Stroke stroke0 = ringPlot0.getLabelLinkStroke();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1758.773285), (-1758.773285), (-1758.773285), (-1758.773285), stroke0, ringPlot0.DEFAULT_LABEL_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getX2();
      assertEquals((-1758.773285), double0, 0.01);
      assertEquals((-1758.773285), xYLineAnnotation0.getY1(), 0.01);
      assertEquals((-1758.773285), xYLineAnnotation0.getY2(), 0.01);
      assertEquals((-1758.773285), xYLineAnnotation0.getX1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((double) samplingXYLineRenderer0.ZERO, (double) samplingXYLineRenderer0.ZERO, (-1423.7460088225328), (double) samplingXYLineRenderer0.ZERO, samplingXYLineRenderer0.DEFAULT_OUTLINE_STROKE, samplingXYLineRenderer0.DEFAULT_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getX1();
      assertEquals((-1423.7460088225328), xYLineAnnotation0.getX2(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(0.0, xYLineAnnotation0.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("P'-0@M@(yUV", (-1992.0), 0.0, 0.0);
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1992.0), 1.0, 0.04, 1.0, stroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      double double0 = xYLineAnnotation0.getX1();
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals((-1992.0), double0, 0.01);
      assertEquals(0.04, xYLineAnnotation0.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicStroke basicStroke0 = (BasicStroke)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE;
      XYLineAnnotation xYLineAnnotation0 = null;
      try {
        xYLineAnnotation0 = new XYLineAnnotation(4572.497046246, 4572.497046246, 4572.497046246, 4572.497046246, basicStroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = null;
      try {
        xYLineAnnotation0 = new XYLineAnnotation(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'x1' (-Infinity) to be finite.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1105.3772825455044, 1105.3772825455044, 1105.3772825455044, 1105.3772825455044);
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_GRIDLINE_STROKE;
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_OUTLINE_PAINT;
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation(1105.3772825455044, 1105.3772825455044, 1105.3772825455044, 1105.3772825455044, basicStroke0, color0);
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals(1105.3772825455044, xYLineAnnotation1.getY2(), 0.01);
      assertEquals(1105.3772825455044, xYLineAnnotation1.getX1(), 0.01);
      assertFalse(boolean0);
      assertEquals(1105.3772825455044, xYLineAnnotation1.getX2(), 0.01);
      assertEquals(1105.3772825455044, xYLineAnnotation1.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1433.6686122229353), (-1433.6686122229353), (-1433.6686122229353), (-1433.6686122229353));
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      Paint paint0 = waferMapRenderer0.getDefaultPaint();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1433.6686122229353), (-1433.6686122229353), (-1433.6686122229353), (-1433.6686122229353), basicStroke0, paint0);
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals((-1433.6686122229353), xYLineAnnotation1.getY1(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1433.6686122229353), xYLineAnnotation1.getX1(), 0.01);
      assertEquals((-1433.6686122229353), xYLineAnnotation1.getY2(), 0.01);
      assertEquals((-1433.6686122229353), xYLineAnnotation1.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1433.3628948685941), (-1433.3628948685941), (-1433.3628948685941), (-1433.3628948685941));
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1433.3628948685941), (-1433.3628948685941), (-1433.3628948685941), (-2735.140907063));
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertFalse(boolean0);
      assertEquals((-1433.3628948685941), xYLineAnnotation0.getY2(), 0.01);
      assertFalse(xYLineAnnotation1.equals((Object)xYLineAnnotation0));
      assertEquals((-1433.3628948685941), xYLineAnnotation1.getX1(), 0.01);
      assertEquals((-1433.3628948685941), xYLineAnnotation1.getX2(), 0.01);
      assertEquals((-1433.3628948685941), xYLineAnnotation1.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1433.6156858015083), (-1433.6156858015083), (-1433.6156858015083), (-1433.6156858015083));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(135.0);
      Stroke stroke0 = cyclicNumberAxis0.getAdvanceLineStroke();
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1433.6156858015083), (-1433.6156858015083), 1505.073663087376, 2995.807896, stroke0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals(2995.807896, xYLineAnnotation1.getY2(), 0.01);
      assertEquals((-1433.6156858015083), xYLineAnnotation1.getX1(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1433.6156858015083), xYLineAnnotation1.getY1(), 0.01);
      assertEquals(1505.073663087376, xYLineAnnotation1.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1433.6156858015083), (-680.09064275326), (-1433.6156858015083), (-1433.6156858015083));
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-1433.6156858015083), (-1433.6156858015083), (-680.09064275326), (-680.09064275326));
      boolean boolean0 = xYLineAnnotation1.equals(xYLineAnnotation0);
      assertEquals((-1433.6156858015083), xYLineAnnotation0.getX1(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1433.6156858015083), xYLineAnnotation1.getX1(), 0.01);
      assertEquals((-680.09064275326), xYLineAnnotation0.getY1(), 0.01);
      assertEquals((-680.09064275326), xYLineAnnotation1.getX2(), 0.01);
      assertEquals((-680.09064275326), xYLineAnnotation1.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-53.47315429574957), (-53.47315429574957), (-53.47315429574957), (-53.47315429574957));
      XYLineAnnotation xYLineAnnotation1 = new XYLineAnnotation((-38.86920817274897), (-53.47315429574957), (-53.47315429574957), (-53.47315429574957));
      boolean boolean0 = xYLineAnnotation1.equals(xYLineAnnotation0);
      assertEquals((-53.47315429574957), xYLineAnnotation0.getX1(), 0.01);
      assertFalse(xYLineAnnotation0.equals((Object)xYLineAnnotation1));
      assertFalse(boolean0);
      assertEquals((-53.47315429574957), xYLineAnnotation1.getY1(), 0.01);
      assertEquals((-53.47315429574957), xYLineAnnotation1.getX2(), 0.01);
      assertEquals((-53.47315429574957), xYLineAnnotation1.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", (-349.265651518481), 2569.775065, (-349.265651518481));
      Stroke stroke0 = xYPointerAnnotation0.getOutlineStroke();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(4758.2062432043, (-1125.1681310373674), 2569.775065, 1350.0, stroke0, xYPointerAnnotation0.DEFAULT_PAINT);
      boolean boolean0 = xYLineAnnotation0.equals(xYPointerAnnotation0);
      assertFalse(boolean0);
      assertEquals((-1125.1681310373674), xYLineAnnotation0.getY1(), 0.01);
      assertEquals(2569.775065, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(1350.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(4758.2062432043, xYLineAnnotation0.getX1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis("rk<Dtq7=E");
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.util.DefaultShadowenerator", periodAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2718);
      boolean boolean0 = xYLineAnnotation0.equals(bufferedImage0);
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getX2(), 0.01);
      assertFalse(boolean0);
      assertEquals(10.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-1433.6156858015083), (-1433.6156858015083), (-1433.6156858015083), (-1433.6156858015083));
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation0);
      assertTrue(boolean0);
      assertEquals((-1433.6156858015083), xYLineAnnotation0.getX2(), 0.01);
      assertEquals((-1433.6156858015083), xYLineAnnotation0.getY2(), 0.01);
      assertEquals((-1433.6156858015083), xYLineAnnotation0.getX1(), 0.01);
      assertEquals((-1433.6156858015083), xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Rectangle rectangle0 = new Rectangle(10, 0, 10, 10);
      PeriodAxis periodAxis0 = new PeriodAxis("rk<Dtq7=E");
      xYLineAnnotation0.setURL("rk<Dtq7=E");
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYLineAnnotation0.draw(graphics2D0, combinedRangeXYPlot0, rectangle0, periodAxis0, periodAxis0, 10, (PlotRenderingInfo) null);
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Rectangle rectangle0 = new Rectangle(10, 10);
      PeriodAxis periodAxis0 = new PeriodAxis("rk<Dtq7=E");
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.util.DefaultShadowenerator", periodAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2718);
      xYLineAnnotation0.setToolTipText("x2");
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYLineAnnotation0.draw(graphics2D0, combinedRangeXYPlot0, rectangle0, periodAxis0, periodAxis0, 10, (PlotRenderingInfo) null);
      assertEquals(10.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Rectangle rectangle0 = new Rectangle(10, 0, 10, 10);
      PeriodAxis periodAxis0 = new PeriodAxis("rk<Dtq7=E");
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      periodAxis0.resizeRange(919.776899567977);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYLineAnnotation0.draw(graphics2D0, combinedRangeXYPlot0, rectangle0, periodAxis0, periodAxis0, 10, (PlotRenderingInfo) null);
      assertEquals(1.0, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(10.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1.0, xYLineAnnotation0.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500, 1069.473, 0.25, 0.25);
      double double0 = xYLineAnnotation0.getY2();
      assertEquals(0.25, double0, 0.01);
      assertEquals(0.25, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(1069.473, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(500.0, xYLineAnnotation0.getX1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, (-7304.15211577795), 1447.795, 1447.795);
      double double0 = xYLineAnnotation0.getX2();
      assertEquals(1447.795, double0, 0.01);
      assertEquals(1447.795, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(0.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals((-7304.15211577795), xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500, 1069.473, 0.25, 0.25);
      double double0 = xYLineAnnotation0.getY1();
      assertEquals(1069.473, double0, 0.01);
      assertEquals(500.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedRangeXYPlot<ChronoLocalDate> combinedRangeXYPlot0 = new CombinedRangeXYPlot<ChronoLocalDate>();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 1.0F, 1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      XYLineAnnotation xYLineAnnotation1 = (XYLineAnnotation)xYLineAnnotation0.clone();
      boolean boolean0 = xYLineAnnotation0.equals(xYLineAnnotation1);
      assertEquals(10.0, xYLineAnnotation1.getX1(), 0.01);
      assertEquals(10.0, xYLineAnnotation1.getY2(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0, xYLineAnnotation1.getY1(), 0.01);
      assertEquals(1.0, xYLineAnnotation1.getX2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2545.5, (-909.0), (-1423.676), (double) samplingXYLineRenderer0.ZERO, samplingXYLineRenderer0.DEFAULT_OUTLINE_STROKE, samplingXYLineRenderer0.DEFAULT_OUTLINE_PAINT);
      double double0 = xYLineAnnotation0.getX1();
      assertEquals(0.0, xYLineAnnotation0.getY2(), 0.01);
      assertEquals((-1423.676), xYLineAnnotation0.getX2(), 0.01);
      assertEquals(2545.5, double0, 0.01);
      assertEquals((-909.0), xYLineAnnotation0.getY1(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500, 1069.473, 0.25, 0.25);
      xYLineAnnotation0.getPaint();
      assertEquals(500.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1069.473, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getX2(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getY2(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(500, 1069.473, 0.25, 0.25);
      xYLineAnnotation0.getStroke();
      assertEquals(500.0, xYLineAnnotation0.getX1(), 0.01);
      assertEquals(1069.473, xYLineAnnotation0.getY1(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getY2(), 0.01);
      assertEquals(0.25, xYLineAnnotation0.getX2(), 0.01);
  }
}
