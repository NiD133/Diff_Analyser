package com.itextpdf.text.xml.xmp;

import com.itextpdf.text.pdf.PdfAction;
import org.junit.Test;

import java.io.IOException;
import java.io.PipedOutputStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

/**
 * This test class contains improved versions of tests for the {@link XmpWriter} class.
 * The original test was auto-generated by EvoSuite.
 */
public class XmpWriter_ESTestTest27 extends XmpWriter_ESTest_scaffolding {

    /**
     * Verifies that the {@code close()} method throws an {@code IOException}
     * when the underlying output stream is not writable.
     * <p>
     * This scenario is simulated by providing an unconnected {@link PipedOutputStream},
     * which inherently throws an exception upon any write attempt.
     */
    @Test
    public void close_onUnwritableStream_throwsIOException() {
        // Arrange: Create an XmpWriter with an output stream that is guaranteed to fail on write.
        PipedOutputStream unwritableOutputStream = new PipedOutputStream();
        
        // The PdfAction is a required parameter for the constructor under test, but its state
        // is not relevant to this specific test.
        PdfAction dummyAction = PdfAction.gotoRemotePage("any-file.pdf", "any-page", true, false);
        
        // Note: The constructor XmpWriter(OutputStream, PdfAction) is not in the provided source code,
        // but its existence is inferred from the original auto-generated test.
        XmpWriter xmpWriter = new XmpWriter(unwritableOutputStream, dummyAction);

        // Act & Assert: Expect an IOException when attempting to close the writer,
        // as this triggers a write to the unwritable stream.
        IOException thrown = assertThrows(IOException.class, xmpWriter::close);

        // The original test's comment suggests a specific error message is expected.
        // Verifying the message makes the test more precise.
        assertEquals("Error writing to the OutputStream", thrown.getMessage());
    }
}