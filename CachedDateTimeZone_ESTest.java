/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 18:21:54 GMT 2025
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CachedDateTimeZone_ESTest extends CachedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testGetName_ForDefaultZone_AtSpecificInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      String actual = cachedDateTimeZone0.getName(212544000000L);
      assertEquals("Coordinated Universal Time", actual);
  }

  @Test(timeout = 4000)
  public void testGetName_ForWET_AtLargeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      String actual = dateTimeZone0.getName(686653601480704L);
      assertEquals("Western European Time", actual);
  }

  @Test(timeout = 4000)
  public void testHashCode_ForDefaultZone()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void testPreviousTransition_ForFixedZone_PositiveInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long actual = cachedDateTimeZone0.previousTransition(1);
      assertEquals(1L, actual);
  }

  @Test(timeout = 4000)
  public void testPreviousTransition_ForUTC_NegativeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long actual = cachedDateTimeZone0.previousTransition((-983L));
      assertEquals((-983L), actual);
  }

  @Test(timeout = 4000)
  public void testNextTransition_ForFixedOffsetZone_PositiveInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2614));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long actual = cachedDateTimeZone0.nextTransition(1L);
      assertEquals(1L, actual);
  }

  @Test(timeout = 4000)
  public void testNextTransition_ForFixedOffsetZone_NegativeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2614));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long actual = cachedDateTimeZone0.nextTransition((-2614));
      assertEquals((-2614L), actual);
  }

  @Test(timeout = 4000)
  public void testIsFixed_ForDefaultZone()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      boolean actual = cachedDateTimeZone0.isFixed();
      assertTrue(actual);
  }

  @Test(timeout = 4000)
  public void testIsFixed_ForWET()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      boolean actual = dateTimeZone0.isFixed();
      assertFalse(actual);
  }

  @Test(timeout = 4000)
  public void testGetStandardOffset_ForWET_AtLargeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      int actual = dateTimeZone0.getStandardOffset(999999992896684031L);
      assertEquals(0, actual);
  }

  @Test(timeout = 4000)
  public void testGetStandardOffset_ForFixedOffsetZone()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2614));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int actual = cachedDateTimeZone0.getStandardOffset(0L);
      assertEquals((-2614), actual);
  }

  @Test(timeout = 4000)
  public void testGetOffset_ForUTC_AtZero()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int actual = cachedDateTimeZone0.getOffset(0L);
      assertEquals(0, actual);
  }

  @Test(timeout = 4000)
  public void testGetOffset_ForDefaultZone_NegativeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int actual = cachedDateTimeZone0.getOffset((-418L));
      assertEquals(0, actual);
  }

  @Test(timeout = 4000)
  public void testGetOffset_ForFixedOffsetZone_AtSpecificInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2614));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int actual = cachedDateTimeZone0.getOffset(86400000L);
      assertEquals((-2614), actual);
  }

  @Test(timeout = 4000)
  public void testGetNameKey_ForDefaultZone_NegativeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      String actual = cachedDateTimeZone0.getNameKey((-1048L));
      assertEquals("UTC", actual);
  }

  @Test(timeout = 4000)
  public void testGetNameKey_ForWET_NegativeInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      String actual = dateTimeZone0.getNameKey((-4294967296L));
      assertEquals("CET", actual);
  }

  @Test(timeout = 4000)
  public void testEquals_CachedVsUncachedDefaultZone()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      boolean actual = cachedDateTimeZone0.equals(dateTimeZone0);
      assertFalse(actual);
  }

  @Test(timeout = 4000)
  public void testPreviousTransition_ForDefaultZone_WithNegativeInstant_ThrowsIllegalArgumentException()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.previousTransition((-1748L));
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testNextTransition_ForDefaultZone_WithNegativeInstant_ThrowsIllegalArgumentException()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.nextTransition((-1L));
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testIsFixed_ForDefaultZone_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.isFixed();
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testHashCode_ForDefaultZone_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.hashCode();
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testGetStandardOffset_ForDefaultZone_AtLargeInstant_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.getStandardOffset(100000000000000000L);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testGetOffset_ForDefaultZone_AtLargeInstant_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.getOffset(100000000000000000L);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testGetNameKey_ForDefaultZone_NegativeInstant_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      try { 
        dateTimeZone0.getNameKey((-458L));
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testEquals_UncachedDefaultZoneVsCached_DoesNotThrow()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      try { 
        dateTimeZone0.equals(cachedDateTimeZone0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void testEquals_SameCachedInstance()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      boolean actual = cachedDateTimeZone0.equals(cachedDateTimeZone0);
      assertTrue(actual);
  }

  @Test(timeout = 4000)
  public void testForZone_WithWET_ReturnsCachedInstance()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      assertSame(dateTimeZone0, cachedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void testGetStandardOffset_ForCachedDefaultZone()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      int actual = cachedDateTimeZone0.getStandardOffset(6);
      assertEquals(0, actual);
  }

  @Test(timeout = 4000)
  public void testGetName_ForWET_AtSpecificInstant()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      String actual = dateTimeZone0.getName(212544000000L);
      assertEquals("Western European Time", actual);
  }

  @Test(timeout = 4000)
  public void testGetUncachedZone_ReturnsOriginal()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTimeZone dateTimeZone0 = instant0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      DateTimeZone actual = cachedDateTimeZone0.getUncachedZone();
      assertSame(dateTimeZone0, actual);
  }

  @Test(timeout = 4000)
  public void testIsLocalDateTimeGap_ForWET_ReturnsFalse()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("WET");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(9999998125080576L, (Chronology) gregorianChronology0);
      boolean actual = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(actual);
  }

  @Test(timeout = 4000)
  public void testNextTransition_ForCachedDefaultZone_AtZero()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      long actual = cachedDateTimeZone0.nextTransition(0L);
      assertEquals(0L, actual);
  }

  @Test(timeout = 4000)
  public void testForZone_WithNull_ThrowsNullPointerException()  throws Throwable  {
      try { 
        CachedDateTimeZone.forZone((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         verifyException("org.joda.time.tz.CachedDateTimeZone", e);
      }
  }
}