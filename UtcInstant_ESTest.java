/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:48:43 GMT 2025
 */

package org.threeten.extra.scale;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;
import org.threeten.extra.scale.TaiInstant;
import org.threeten.extra.scale.UtcInstant;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
)
public class UtcInstant_ESTest extends UtcInstant_ESTest_scaffolding {

    // ========== Constructor & Basic Properties Tests ==========
    
    @Test(timeout = 4000)
    public void testHashCode_ConsistencyForLargeModifiedJulianDay() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(73281320003518L, 73281320003518L);
        instant.hashCode();  // Should not throw
        assertEquals(73281320003518L, instant.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testHashCode_ConsistencyForNegativeModifiedJulianDay() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(-2985L, 0L);
        instant.hashCode();  // Should not throw
        assertEquals(-2985L, instant.getModifiedJulianDay());
    }

    // ========== Equality & Comparison Tests ==========
    
    @Test(timeout = 4000)
    public void testEquals_DifferentNanoOfDay() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(301L, 301L);
        UtcInstant instant2 = UtcInstant.ofModifiedJulianDay(301L, 70L);
        assertNotEquals(instant1, instant2);
    }

    @Test(timeout = 4000)
    public void testEquals_DifferentModifiedJulianDay() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(1285L, 2341L);
        UtcInstant instant2 = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertNotEquals(instant1, instant2);
    }

    @Test(timeout = 4000)
    public void testCompareTo_SameDayDifferentNano() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant instant2 = UtcInstant.ofModifiedJulianDay(0L, 1891L);
        assertTrue(instant2.compareTo(instant1) > 0);
    }

    @Test(timeout = 4000)
    public void testIsBefore_WhenFirstInstantIsAfter() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 73281320003515L);
        UtcInstant instant2 = instant1.withModifiedJulianDay(6400000041317L);
        assertFalse(instant1.isBefore(instant2));
    }

    @Test(timeout = 4000)
    public void testIsAfter_WhenFirstInstantIsBefore() throws Throwable {
        TaiInstant taiInstant = TaiInstant.ofTaiSeconds(3217L, 1000L);
        UtcInstant instant1 = taiInstant.toUtcInstant();
        UtcInstant instant2 = UtcInstant.of(taiInstant.withTaiSeconds(0L));
        assertFalse(instant2.isAfter(instant1));
    }

    @Test(timeout = 4000)
    public void testIsAfter_WhenCurrentIsAfterOther() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(83843999999988L, 83843999999988L);
        UtcInstant instant2 = instant1.withModifiedJulianDay(-1406L);
        assertTrue(instant1.isAfter(instant2));
    }

    @Test(timeout = 4000)
    public void testCompareTo_SameInstance() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertEquals(0, instant.compareTo(instant));
    }

    @Test(timeout = 4000)
    public void testIsBefore_SameInstance() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 73281320003515L);
        assertFalse(instant.isBefore(instant));
    }

    @Test(timeout = 4000)
    public void testIsAfter_SameInstance() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertFalse(instant.isAfter(instant));
    }

    // ========== Parsing Tests ==========
    
    @Test(timeout = 4000)
    public void testParse_ValidString() throws Throwable {
        UtcInstant instant = UtcInstant.parse("1958-01-01T00:53:27.000001Z");
        assertEquals(3207000001000L, instant.getNanoOfDay());
        assertEquals(36204L, instant.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testParse_DateWithoutFractionalSeconds() throws Throwable {
        UtcInstant instant = UtcInstant.parse("1859-09-09T00:00:00Z");
        assertEquals(0L, instant.getNanoOfDay());
        assertEquals(296L, instant.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testParse_DateWithFractionalSeconds() throws Throwable {
        UtcInstant instant = UtcInstant.parse("1857-01-29T00:00:00.000001876Z");
        assertEquals(1876L, instant.getNanoOfDay());
        assertEquals(-657L, instant.getModifiedJulianDay());
    }

    @Test(timeout = 4000, expected = DateTimeParseException.class)
    public void testParse_InvalidCharSequence() throws Throwable {
        UtcInstant.parse(CharBuffer.allocate(2278));
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testParse_NullInput() throws Throwable {
        UtcInstant.parse((CharSequence) null);
    }

    // ========== Conversion Tests ==========
    
    @Test(timeout = 4000)
    public void testToTaiInstant_FromZeroTaiSeconds() throws Throwable {
        TaiInstant taiInstant = TaiInstant.ofTaiSeconds(0L, 1000L);
        UtcInstant utcInstant = UtcInstant.of(taiInstant);
        TaiInstant result = utcInstant.toTaiInstant();
        assertEquals(0L, result.getTaiSeconds());
    }

    @Test(timeout = 4000)
    public void testToTaiInstant_RoundTripConversion() throws Throwable {
        TaiInstant original = TaiInstant.ofTaiSeconds(3217L, 1000L);
        UtcInstant utcInstant = original.toUtcInstant();
        TaiInstant converted = utcInstant.toTaiInstant();
        assertEquals(3217L, converted.getTaiSeconds());
    }

    @Test(timeout = 4000)
    public void testToTaiInstant_FromModifiedJulianDay() throws Throwable {
        UtcInstant utcInstant = UtcInstant.ofModifiedJulianDay(296L, 0L);
        TaiInstant taiInstant = utcInstant.toTaiInstant();
        assertEquals(0, taiInstant.getNano());
        assertEquals(-3102451190L, taiInstant.getTaiSeconds());
    }

    @Test(timeout = 4000)
    public void testToInstant_FromEpochSecondZero() throws Throwable {
        Instant epochInstant = MockInstant.ofEpochSecond(0L);
        UtcInstant utcInstant = UtcInstant.of(epochInstant);
        assertEquals(0L, utcInstant.getNanoOfDay());
        assertEquals(40587L, utcInstant.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testToUtcInstant_FromTaiInstantRoundTrip() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(0L, 0L);
        TaiInstant taiInstant = TaiInstant.of(original);
        UtcInstant result = UtcInstant.of(taiInstant);
        assertEquals(0L, result.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testToUtcInstant_FromTaiInstantWithNegativeModifiedJulianDay() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(-127L, 41317L);
        TaiInstant taiInstant = TaiInstant.of(original);
        UtcInstant result = UtcInstant.of(taiInstant);
        assertEquals(-127L, result.getModifiedJulianDay());
        assertEquals(41317L, result.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testToUtcInstant_FromInstantRoundTrip() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(-127L, 41317L);
        Instant instant = original.toInstant();
        UtcInstant result = UtcInstant.of(instant);
        assertEquals(-127L, result.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testToInstant_FromMjdZero() throws Throwable {
        UtcInstant utcInstant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        Instant instant = MockInstant.parse("1858-11-17T00:00:00Z");
        UtcInstant result = UtcInstant.of(instant);
        assertEquals(0L, result.getNanoOfDay());
    }

    // ========== Modification Tests ==========
    
    @Test(timeout = 4000)
    public void testWithNanoOfDay_Zero() throws Throwable {
        Instant epochInstant = MockInstant.ofEpochSecond(0L);
        UtcInstant original = UtcInstant.of(epochInstant);
        UtcInstant modified = original.withNanoOfDay(0L);
        assertEquals(0L, modified.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testWithNanoOfDay_LargeValue() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant modified = original.withNanoOfDay(82636000000001L);
        assertEquals(82636000000001L, modified.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testWithNanoOfDay_SmallPositiveValue() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(-2985L, 0L);
        UtcInstant modified = original.withNanoOfDay(1000L);
        assertEquals(1000L, modified.getNanoOfDay());
        assertEquals(-2985L, modified.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testWithModifiedJulianDay_SameValue() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant modified = original.withModifiedJulianDay(0L);
        assertEquals(0L, modified.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testWithModifiedJulianDay_NegativeValue() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant modified = original.withModifiedJulianDay(-2547L);
        assertEquals(-2547L, modified.getModifiedJulianDay());
    }

    // ========== Arithmetic Operations ==========
    
    @Test(timeout = 4000)
    public void testPlus_ZeroDuration() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        Duration zero = Duration.ZERO;
        UtcInstant result = instant.plus(zero);
        assertEquals(instant, result);
    }

    @Test(timeout = 4000)
    public void testPlus_NegativeDuration() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(-571L, 0L);
        Duration duration = Duration.ofNanos(-1606L);
        UtcInstant result = original.plus(duration);
        assertEquals(-572L, result.getModifiedJulianDay());
        assertEquals(86399999998394L, result.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testMinus_Duration() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(140L, 140L);
        Duration duration = Duration.ofMinutes(140L);
        UtcInstant result = original.minus(duration);
        assertEquals(139L, result.getModifiedJulianDay());
        assertEquals(78000000000140L, result.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testDurationUntil_SameInstant() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        Duration duration = instant.durationUntil(instant);
        assertEquals(Duration.ZERO, duration);
    }

    @Test(timeout = 4000)
    public void testPlus_DurationThenCompare() throws Throwable {
        UtcInstant original = UtcInstant.ofModifiedJulianDay(73281320003518L, 73281320003518L);
        Duration duration = Duration.ofMillis(73281320003518L);
        UtcInstant later = original.plus(duration);
        assertTrue(original.isBefore(later));
    }

    // ========== Property Accessors ==========
    
    @Test(timeout = 4000)
    public void testGetNanoOfDay_FromEpochSecondZero() throws Throwable {
        Instant epochInstant = MockInstant.ofEpochSecond(0L);
        UtcInstant utcInstant = UtcInstant.of(epochInstant);
        assertEquals(0L, utcInstant.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testGetNanoOfDay_SmallValue() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(54L, 54L);
        assertEquals(54L, instant.getNanoOfDay());
    }

    @Test(timeout = 4000)
    public void testGetModifiedJulianDay_Zero() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertEquals(0L, instant.getModifiedJulianDay());
    }

    @Test(timeout = 4000)
    public void testGetModifiedJulianDay_FromEpochSecondZero() throws Throwable {
        Instant epochInstant = MockInstant.ofEpochSecond(0L);
        UtcInstant utcInstant = UtcInstant.of(epochInstant);
        assertEquals(40587L, utcInstant.getModifiedJulianDay());
    }

    // ========== Edge Cases & Exception Tests ==========
    
    @Test(timeout = 4000, expected = DateTimeException.class)
    public void testOfModifiedJulianDay_InvalidNegativeNanoOfDay() {
        UtcInstant.ofModifiedJulianDay(-361L, -361L);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testOf_NullTaiInstant() {
        UtcInstant.of((TaiInstant) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testOf_NullInstant() {
        UtcInstant.of((Instant) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testPlus_NullDuration() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(86399999998838L, 86399999998838L);
        instant.plus(null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testMinus_NullDuration() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(2775000000000L, 2775000000000L);
        instant.minus(null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testIsBefore_NullInput() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(2775000000000L, 2775000000000L);
        instant.isBefore(null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testIsAfter_NullInput() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(2775000000000L, 2775000000000L);
        instant.isAfter(null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testDurationUntil_NullInput() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(1000000000L, 1000000000L);
        instant.durationUntil(null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testCompareTo_NullInput() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(2775000000000L, 2775000000000L);
        instant.compareTo(null);
    }

    @Test(timeout = 4000, expected = DateTimeException.class)
    public void testToString_InvalidLargeModifiedJulianDay() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(83844000000000L, 83844000000000L);
        instant.toString();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testToTaiInstant_Overflow() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 490L);
        instant.toTaiInstant();
    }

    @Test(timeout = 4000, expected = DateTimeException.class)
    public void testToInstant_ExceedsRange() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(73281320003633L, 73281320003633L);
        instant.toInstant();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testToInstant_ArithmeticOverflow() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 0L);
        instant.toInstant();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testPlus_DurationOverflow() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(86399999999628L, 86399999999628L);
        Duration duration = Duration.ofDays(86399999999628L);
        instant.plus(duration);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinus_DurationOverflow() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 490L);
        Duration duration = Duration.ofNanos(490L);
        instant.minus(duration);
    }

    @Test(timeout = 4000, expected = DateTimeException.class)
    public void testWithNanoOfDay_InvalidNegativeValue() {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(86340000001821L, 86340000001821L);
        instant.withNanoOfDay(-892L);
    }

    // ========== Type & Value Semantics ==========
    
    @Test(timeout = 4000)
    public void testEquals_SameNanoDifferentDay() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant instant2 = UtcInstant.ofModifiedJulianDay(0L, 1891L);
        assertNotEquals(instant1, instant2);
    }

    @Test(timeout = 4000)
    public void testEquals_DifferentInstants() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(0L, 0L);
        Duration duration = Duration.ofSeconds(1526L);
        UtcInstant instant2 = instant1.minus(duration);
        assertNotEquals(instant1, instant2);
    }

    @Test(timeout = 4000)
    public void testEquals_NonInstantObject() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertFalse(instant.equals(new Boolean("GeO")));
    }

    @Test(timeout = 4000)
    public void testEquals_SameObject() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertTrue(instant.equals(instant));
    }

    @Test(timeout = 4000)
    public void testEquals_EquivalentInstants() throws Throwable {
        UtcInstant instant1 = UtcInstant.ofModifiedJulianDay(0L, 0L);
        UtcInstant instant2 = UtcInstant.parse("1858-11-17T00:00:00Z");
        assertEquals(instant1, instant2);
    }

    @Test(timeout = 4000)
    public void testIsLeapSecond_RegularInstant() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(83843999999988L, 83843999999988L);
        assertFalse(instant.isLeapSecond());
    }

    @Test(timeout = 4000)
    public void testToString_BasicInstant() throws Throwable {
        UtcInstant instant = UtcInstant.ofModifiedJulianDay(0L, 0L);
        assertEquals("1858-11-17T00:00:00Z", instant.toString());
    }
}