/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:06:50 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.sql.SQLNonTransientConnectionException;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Stack;
import org.apache.commons.collections4.iterators.CartesianProductIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CartesianProductIterator_ESTest extends CartesianProductIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testHasNext_WhenNonEmptyIterables_ReturnsTrue() throws Throwable {
      // Test that hasNext() returns true when iterables contain elements
      // Create an array of two iterables (both PriorityQueues)
      Iterable<Locale.Category>[] iterableArray = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 2);
      PriorityQueue<Locale.Category> queue = new PriorityQueue<>();
      
      // Add an element to both queues in the array
      Locale.Category category = Locale.Category.FORMAT;
      iterableArray[0] = queue;
      iterableArray[1] = queue;
      queue.add(category);

      // Create iterator and verify it has elements
      CartesianProductIterator<Object> iterator = new CartesianProductIterator<>(iterableArray);
      assertTrue(iterator.hasNext());
  }

  @Test(timeout = 4000)
  public void testNext_WhenConcurrentModification_ThrowsConcurrentModificationException() throws Throwable {
      // Test that next() throws ConcurrentModificationException when underlying collection changes
      // Create a stack and add an element
      Stack<Locale.Category> stack = new Stack<>();
      Locale.Category category = Locale.Category.DISPLAY;
      stack.add(category);
      
      // Create iterator with the stack
      Iterable<Locale.Category>[] iterableArray = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 1);
      iterableArray[0] = stack;
      CartesianProductIterator<Locale.Category> iterator = new CartesianProductIterator<>(iterableArray);
      
      // Modify the stack after iterator creation
      stack.add(category);
      
      // Verify concurrent modification is detected
      try {
          iterator.next();
          fail("Expected ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
          // Expected behavior
      }
  }

  @Test(timeout = 4000)
  public void testConstructor_WhenNullIterable_ThrowsNullPointerException() throws Throwable {
      // Test that constructor throws NPE when any iterable is null
      // Create array with one null element
      Iterable<Locale.Category>[] iterableArray = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 1);
      
      try {
          new CartesianProductIterator<>(iterableArray);
          fail("Expected NullPointerException");
      } catch(NullPointerException e) {
          // Verify exception message
          assertEquals("iterable", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testHasNext_WhenFirstIterableEmpty_ReturnsFalse() throws Throwable {
      // Test that hasNext() returns false when first iterable is empty
      // Create array with two iterables:
      //   [0]: Empty PriorityQueue
      //   [1]: null (but not processed since first is empty)
      Iterable<Locale.Category>[] iterableArray = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 2);
      PriorityQueue<Locale.Category> emptyQueue = new PriorityQueue<>();
      iterableArray[0] = emptyQueue;
      
      // Create iterator (second element not set, but skipped due to empty first iterable)
      CartesianProductIterator<Object> iterator = new CartesianProductIterator<>(iterableArray);
      
      // Verify no elements
      assertFalse(iterator.hasNext());
  }

  @Test(timeout = 4000)
  public void testNext_WhenTwoNonEmptyIterables_ReturnsCorrectTuples() throws Throwable {
      // Test next() returns correct tuples for cartesian product
      // Create EnumSet with all Locale.Category values (size=2)
      EnumSet<Locale.Category> enumSet = EnumSet.allOf(Locale.Category.class);
      
      // Create array with two identical EnumSet iterables
      Iterable<Locale.Category>[] iterableArray = (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 2);
      iterableArray[0] = enumSet;
      iterableArray[1] = enumSet;
      
      // Create iterator and retrieve tuples
      CartesianProductIterator<Locale.Category> iterator = new CartesianProductIterator<>(iterableArray);
      
      // Skip first two tuples
      iterator.next();
      iterator.next();
      
      // Verify third tuple exists and is non-empty
      List<Locale.Category> tuple = iterator.next();
      assertFalse(tuple.isEmpty());
  }

  @Test(timeout = 4000)
  public void testNext_WhenEmptyIterablesArray_ThrowsNoSuchElementException() throws Throwable {
      // Test next() throws NoSuchElementException when no iterables provided
      // Create empty iterables array
      Iterable<SQLNonTransientConnectionException>[] emptyArray = 
          (Iterable<SQLNonTransientConnectionException>[]) Array.newInstance(Iterable.class, 0);
      
      CartesianProductIterator<SQLNonTransientConnectionException> iterator = 
          new CartesianProductIterator<>(emptyArray);
      
      try {
          iterator.next();
          fail("Expected NoSuchElementException");
      } catch(NoSuchElementException e) {
          // Expected behavior
      }
  }

  @Test(timeout = 4000)
  public void testRemove_WhenCalled_ThrowsUnsupportedOperationException() throws Throwable {
      // Test remove() always throws UnsupportedOperationException
      // Create empty iterables array
      Iterable<Locale.Category>[] emptyArray = 
          (Iterable<Locale.Category>[]) Array.newInstance(Iterable.class, 0);
      
      CartesianProductIterator<Locale.Category> iterator = 
          new CartesianProductIterator<>(emptyArray);
      
      try {
          iterator.remove();
          fail("Expected UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
          // Verify exception message
          assertEquals("remove", e.getMessage());
      }
  }
}