package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.parser.LocationTextExtractionStrategy.TextChunkLocationDefaultImp;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * This test class focuses on the behavior of the TextChunkLocationDefaultImp class.
 * The original test class name 'LocationTextExtractionStrategy_ESTestTest15'
 * suggests it was auto-generated by a tool like EvoSuite.
 */
public class LocationTextExtractionStrategy_ESTestTest15 {

    /**
     * Verifies that comparing a TextChunkLocation instance to itself returns 0,
     * adhering to the contract of the Comparable interface.
     *
     * This test also validates the initial state of the location object created
     * with identical start and end vectors (representing a zero-length chunk),
     * as this state is what the comparison logic is based on.
     */
    @Test
    public void compareTo_whenComparingInstanceToItself_shouldReturnZero() {
        // --- Arrange ---
        // Create a location for a zero-length text chunk where the start and end points are identical.
        // According to the implementation, such a chunk is assigned a default horizontal orientation.
        Vector startAndEndVector = new Vector(1128.28F, 1128.28F, 1128.28F);
        float charSpaceWidth = 1.0f;
        TextChunkLocationDefaultImp location = new TextChunkLocationDefaultImp(startAndEndVector, startAndEndVector, charSpaceWidth);

        // --- Act ---
        // Compare the location object to itself.
        int comparisonResult = location.compareTo(location);

        // --- Assert ---
        // The primary assertion is that the comparison result is 0 (indicating equality).
        assertEquals("A location compared to itself should result in 0 (equality).", 0, comparisonResult);

        // Additionally, verify the calculated properties of the location object.
        // This confirms the test setup is correct and makes the behavior of compareTo understandable,
        // as the comparison logic relies on these properties.
        assertEquals(0, location.orientationMagnitude());
        assertEquals(-1128, location.distPerpendicular());
        assertEquals(1128.28F, location.distParallelStart(), 0.01F);
        assertEquals(1128.28F, location.distParallelEnd(), 0.01F);
        assertEquals(charSpaceWidth, location.getCharSpaceWidth(), 0.01F);
    }
}