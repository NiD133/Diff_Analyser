/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:20:07 GMT 2025
 */

package org.mockito.internal.creation.instance;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.creation.instance.ConstructorInstantiator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstructorInstantiator_ESTest extends ConstructorInstantiator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = objectArray0[0];
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(false, objectArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(false, (Object[]) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.creation.instance.ConstructorInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(false, objectArray0);
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Integer> class0 = Integer.class;
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(true, objectArray0);
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(true, objectArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(true, objectArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        constructorInstantiator0.newInstance(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ConstructorInstantiator constructorInstantiator0 = new ConstructorInstantiator(true, objectArray0);
      Class<Object> class0 = Object.class;
      Object object0 = constructorInstantiator0.newInstance(class0);
      assertNotNull(object0);
  }
}
