/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:00:02 GMT 2025
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.reflect.Invokable;
import com.google.common.reflect.Parameter;
import com.google.common.reflect.TypeToken;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class Parameter_ESTest extends Parameter_ESTest_scaffolding {

    // Constants for position values to improve readability
    private static final int POSITION_0 = 0;
    private static final int POSITION_1 = 1;
    private static final int POSITION_8 = 8;
    private static final int POSITION_11 = 11;
    private static final int NEGATIVE_POSITION = -3591;
    private static final int POSITION_1021 = 1021;
    private static final int POSITION_1296 = 1296;
    private static final int POSITION_1563 = 1563;
    private static final int POSITION_2473 = 2473;
    private static final int POSITION_2844 = 2844;

    @Test(timeout = 4000)
    public void testEquals_whenDifferentDeclaringInvokable_returnsFalse() throws Throwable {
        Invokable<Object, Annotation> invokable1 = mock(Invokable.class, new ViolatedAssumptionAnswer());
        Invokable<Object, Annotation> invokable2 = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Annotation> typeToken = TypeToken.of(Annotation.class);
        Annotation[] noAnnotations = new Annotation[0];
        Object annotatedType = new Object();

        Parameter param1 = new Parameter(invokable1, POSITION_1563, typeToken, noAnnotations, annotatedType);
        Parameter param2 = new Parameter(invokable2, POSITION_1563, typeToken, noAnnotations, annotatedType);

        assertFalse(param1.equals(param2));
    }

    @Test(timeout = 4000)
    public void testEquals_whenDifferentPositions_returnsFalse() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Annotation> typeToken = TypeToken.of(Annotation.class);
        Annotation[] noAnnotations = new Annotation[0];
        Object annotatedType = new Object();

        Parameter param1 = new Parameter(invokable, POSITION_2473, typeToken, noAnnotations, annotatedType);
        Parameter param2 = new Parameter(invokable, POSITION_1021, typeToken, noAnnotations, annotatedType);

        assertFalse(param1.equals(param2));
    }

    @Test(timeout = 4000)
    public void testEquals_whenSameInstance_returnsTrue() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Annotation> typeToken = TypeToken.of(Annotation.class);
        Annotation[] noAnnotations = new Annotation[0];
        Object annotatedType = new Object();

        Parameter param = new Parameter(invokable, POSITION_1563, typeToken, noAnnotations, annotatedType);
        assertTrue(param.equals(param));
    }

    @Test(timeout = 4000)
    public void testEquals_whenNull_returnsFalse() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        assertFalse(param.equals(null));
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testEquals_whenNullDeclaringInvokable_throwsException() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        param.equals(param); // Should throw NPE
    }

    @Test(timeout = 4000)
    public void testGetDeclaredAnnotations_returnsEmptyArray() throws Throwable {
        TypeToken<Object> typeToken = TypeToken.of(Object.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_2844, typeToken, noAnnotations, null);
        
        Annotation[] result = param.getDeclaredAnnotations();
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testGetAnnotations_returnsEmptyArray() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(invokable, POSITION_0, null, noAnnotations, null);
        
        Annotation[] result = param.getAnnotations();
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testGetAnnotation_whenNotPresent_returnsNull() throws Throwable {
        TypeToken<Object> typeToken = TypeToken.of(Object.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_2844, typeToken, noAnnotations, null);
        
        assertNull(param.getAnnotation(Annotation.class));
    }

    @Test(timeout = 4000)
    public void testGetDeclaredAnnotation_whenNotPresent_returnsNull() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        
        assertNull(param.getDeclaredAnnotation(Annotation.class));
    }

    @Test(timeout = 4000)
    public void testIsAnnotationPresent_whenNotPresent_returnsFalse() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Annotation> typeToken = TypeToken.of(Annotation.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(invokable, POSITION_0, typeToken, noAnnotations, invokable);
        
        assertFalse(param.isAnnotationPresent(Annotation.class));
    }

    @Test(timeout = 4000)
    public void testGetAnnotationsByType_returnsEmptyArray() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(invokable, POSITION_0, null, noAnnotations, null);
        
        Annotation[] result = param.getAnnotationsByType(Annotation.class);
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testGetDeclaredAnnotationsByType_returnsEmptyArray() throws Throwable {
        TypeToken<Object> typeToken = TypeToken.of(Object.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_2844, typeToken, noAnnotations, null);
        
        Annotation[] result = param.getDeclaredAnnotationsByType(Annotation.class);
        assertNotSame(noAnnotations, result);
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testGetDeclaringInvokable_whenNull_returnsNull() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        assertNull(param.getDeclaringInvokable());
    }

    @Test(timeout = 4000)
    public void testGetType_whenNull_returnsNull() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        assertNull(param.getType());
    }

    @Test(timeout = 4000)
    public void testToString_formatsCorrectly() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_11, null, noAnnotations, null);
        assertEquals("null arg11", param.toString());
    }

    @Test(timeout = 4000)
    public void testHashCode_doesNotThrowException() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Object> typeToken = TypeToken.of(Object.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(invokable, POSITION_8, typeToken, noAnnotations, Object.class);
        param.hashCode(); // Should not throw
    }

    // Tests for expected exceptions
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testIsAnnotationPresent_withNullArgument_throwsException() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_1296, null, noAnnotations, null);
        param.isAnnotationPresent(null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetDeclaredAnnotation_withNullArgument_throwsException() throws Throwable {
        TypeToken<Object> typeToken = TypeToken.of(Object.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, POSITION_2844, typeToken, noAnnotations, null);
        param.getDeclaredAnnotation(null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAnnotationsByType_withNullArgument_throwsException() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        param.getAnnotationsByType(null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAnnotation_withNullArgument_throwsException() throws Throwable {
        Invokable<Object, Annotation> invokable = mock(Invokable.class, new ViolatedAssumptionAnswer());
        TypeToken<Annotation> typeToken = TypeToken.of(Annotation.class);
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(invokable, POSITION_0, typeToken, noAnnotations, invokable);
        param.getAnnotation(null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructor_withNullAnnotations_throwsException() throws Throwable {
        new Parameter(null, 14, null, null, null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructor_withNullElementInAnnotations_throwsException() throws Throwable {
        Annotation[] annotationsWithNull = new Annotation[1]; // Contains null element
        new Parameter(null, NEGATIVE_POSITION, null, annotationsWithNull, null); // Should throw NPE
    }

    @Test(timeout = 4000, expected = ClassCastException.class)
    public void testGetAnnotatedType_whenInvalidType_throwsException() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Object invalidAnnotatedType = new Object(); // Not AnnotatedType
        Parameter param = new Parameter(null, -948, null, noAnnotations, invalidAnnotatedType);
        param.getAnnotatedType(); // Should throw ClassCastException
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAnnotatedType_whenNull_throwsException() throws Throwable {
        Annotation[] noAnnotations = new Annotation[0];
        Parameter param = new Parameter(null, NEGATIVE_POSITION, null, noAnnotations, null);
        param.getAnnotatedType(); // Should throw NPE
    }
}