/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:00:02 GMT 2025
 */

package com.google.common.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.reflect.Invokable;
import com.google.common.reflect.Parameter;
import com.google.common.reflect.TypeToken;
import java.lang.annotation.Annotation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parameter_ESTest extends Parameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Object object0 = new Object();
      Parameter parameter0 = new Parameter(invokable0, 2473, typeToken0, annotationArray0, object0);
      Parameter parameter1 = new Parameter((Invokable<?, ?>) null, 1021, typeToken0, annotationArray0, parameter0);
      boolean boolean0 = parameter0.equals(parameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 2844, typeToken0, annotationArray0, (Object) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray1 = parameter0.getDeclaredAnnotationsByType(class1);
      assertNotSame(annotationArray0, annotationArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 1296, (TypeToken<?>) null, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.isAnnotationPresent((Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 2844, typeToken0, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.getDeclaredAnnotation((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-2148), (TypeToken<?>) null, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.getAnnotationsByType((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 0, typeToken0, annotationArray0, invokable0);
      // Undeclared exception!
      try { 
        parameter0.getAnnotation((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Object object0 = new Object();
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-948), (TypeToken<?>) null, annotationArray0, object0);
      // Undeclared exception!
      try { 
        parameter0.getAnnotatedType();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.reflect.AnnotatedType
         //
         verifyException("com.google.common.reflect.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parameter parameter0 = null;
      try {
        parameter0 = new Parameter((Invokable<?, ?>) null, 14, (TypeToken<?>) null, (Annotation[]) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[1];
      Parameter parameter0 = null;
      try {
        parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 2844, typeToken0, annotationArray0, (Object) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = parameter0.getAnnotation(class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, (-751), (TypeToken<?>) null, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.getDeclaredAnnotationsByType((Class<Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 2844, typeToken0, annotationArray0, (Object) null);
      Annotation[] annotationArray1 = parameter0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 1563, typeToken0, annotationArray0, class0);
      boolean boolean0 = parameter0.equals(parameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 1563, typeToken0, annotationArray0, class0);
      Invokable<Parameter, Annotation> invokable1 = (Invokable<Parameter, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Parameter parameter1 = new Parameter(invokable1, 1563, typeToken0, annotationArray0, class0);
      boolean boolean0 = parameter0.equals(parameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3558), (TypeToken<?>) null, annotationArray0, (Object) null);
      Parameter parameter1 = new Parameter((Invokable<?, ?>) null, 1, (TypeToken<?>) null, annotationArray0, parameter0);
      boolean boolean0 = parameter0.equals(parameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3558), (TypeToken<?>) null, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.equals(parameter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.reflect.Parameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
      boolean boolean0 = parameter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 0, typeToken0, annotationArray0, invokable0);
      boolean boolean0 = parameter0.isAnnotationPresent(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
      Invokable<?, ?> invokable0 = parameter0.getDeclaringInvokable();
      assertNull(invokable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 0, typeToken0, annotationArray0, invokable0);
      Annotation[] annotationArray1 = parameter0.getAnnotations();
      assertEquals(0, annotationArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
      // Undeclared exception!
      try { 
        parameter0.getAnnotatedType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
      TypeToken<?> typeToken0 = parameter0.getType();
      assertNull(typeToken0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, 11, (TypeToken<?>) null, annotationArray0, (Object) null);
      String string0 = parameter0.toString();
      assertEquals("null arg11", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter((Invokable<?, ?>) null, (-3591), (TypeToken<?>) null, annotationArray0, (Object) null);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = parameter0.getDeclaredAnnotation(class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 8, typeToken0, annotationArray0, class0);
      parameter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Invokable<Object, Annotation> invokable0 = (Invokable<Object, Annotation>) mock(Invokable.class, new ViolatedAssumptionAnswer());
      Class<Annotation> class0 = Annotation.class;
      TypeToken<Annotation> typeToken0 = TypeToken.of(class0);
      Annotation[] annotationArray0 = new Annotation[0];
      Parameter parameter0 = new Parameter(invokable0, 0, typeToken0, annotationArray0, invokable0);
      Annotation[] annotationArray1 = parameter0.getAnnotationsByType(class0);
      assertNotSame(annotationArray0, annotationArray1);
  }
}
