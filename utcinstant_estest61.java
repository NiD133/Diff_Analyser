package org.threeten.extra.scale;

import org.junit.Test;
import java.time.DateTimeException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
 * Tests for {@link UtcInstant}.
 * This class contains an improved version of a test originally generated by EvoSuite.
 */
public class UtcInstant_ESTestTest61 {

    /**
     * Tests that withNanoOfDay() throws a DateTimeException for a negative nano-of-day value.
     * The nano-of-day must always be a positive value, starting from zero.
     */
    @Test
    public void withNanoOfDay_whenNanoIsNegative_throwsDateTimeException() {
        // Arrange: Create a valid UtcInstant on a simple, known date (MJD 0).
        // The initial nano-of-day is an arbitrary but valid positive value.
        UtcInstant initialInstant = UtcInstant.ofModifiedJulianDay(0L, 1_000L);
        long negativeNanoOfDay = -1L;

        // Act & Assert: Attempt to set a negative nano-of-day and verify the resulting exception.
        try {
            initialInstant.withNanoOfDay(negativeNanoOfDay);
            fail("Expected DateTimeException was not thrown for negative nano-of-day.");
        } catch (DateTimeException e) {
            // Verify that the exception message is correct and informative.
            // For MJD 0 (a non-leap-second day), the valid range is 0 to 86,400,000,000,000 - 1.
            String expectedMessage = "Nanosecond-of-day must be between 0 and 86400000000000 on date 0";
            assertEquals(expectedMessage, e.getMessage());
        }
    }
}