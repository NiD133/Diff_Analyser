/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 06 11:16:25 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.TagSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TagSet_ESTest extends TagSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      TagSet tagSet1 = new TagSet(tagSet0);
      boolean boolean0 = tagSet1.equals(tagSet0);
      assertFalse(tagSet0.equals((Object)tagSet1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      Tag tag0 = new Tag("}8Cd3eib\"Gy]x~@");
      Tag.PreserveWhitespace = 2667;
      Tag tag1 = tag0.namespace("el >71z4>");
      tagSet0.add(tag1);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag2 = tagSet0.valueOf("}8Cd3eib\"Gy]x~@", "el >71z4>", parseSettings0);
      assertTrue(tag2.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      Tag tag0 = tagSet0.valueOf(">=", ">=", ">=", true);
      Tag.FormSubmittable = 4;
      Tag.Known = 4;
      tagSet0.add(tag0);
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag1 = tagSet0.valueOf(">=", ">=", parseSettings0);
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isBlock());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TagSet tagSet0 = TagSet.HtmlTagSet;
      Tag tag0 = new Tag("optgroup");
      Tag tag1 = tag0.namespace("j");
      tag1.tagName = "Z";
      tag1.set(10);
      tagSet0.add(tag0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag2 = tagSet0.valueOf("Z", "j", parseSettings0);
      assertFalse(tag2.isBlock());
      assertEquals("optgroup", tag2.normalName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      Tag.PreserveWhitespace = 67;
      Tag tag0 = tagSet0.valueOf("Y{#3uHilaVA[yt%", "Y{#3uHilaVA[yt%");
      tag0.set(18);
      Tag tag1 = tagSet0.valueOf("Y{#3uHilaVA[yt%", "Y{#3uHilaVA[yt%", "Y{#3uHilaVA[yt%", true);
      assertEquals("y{#3uhilava[yt%", tag1.normalName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      Tag tag0 = tagSet0.valueOf(">=", ">=", ">=", true);
      tag0.namespace = "f";
      Tag.FormSubmittable = 4;
      Tag.Known = 4;
      tagSet0.add(tag0);
      Tag tag1 = tagSet0.valueOf(">=", "/Wkfi)Aq_", "f", false);
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag.Block = 38;
      TagSet tagSet0 = TagSet.Html();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = tagSet0.valueOf("0{rMVHTn@", "Z", parseSettings0);
      Tag.Block = 3;
      Tag tag1 = tag0.set(8);
      Tag tag2 = tagSet0.valueOf("Z", "0{rMVHTn@", "Z", true);
      assertEquals("0{rmvhtn@", tag2.normalName());
      assertNotSame(tag2, tag1);
      assertFalse(tag2.equals((Object)tag1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TagSet tagSet0 = TagSet.HtmlTagSet;
      Tag tag0 = new Tag("x`+x11EqmZ9U0bv", "x`+x11EqmZ9U0bv", "x`+x11EqmZ9U0bv");
      Tag tag1 = tag0.namespace("body");
      Tag.Known = 2791;
      tagSet0.add(tag1);
      Tag tag2 = tagSet0.valueOf("x`+x11EqmZ9U0bv", "body");
      assertFalse(tag2.formatAsBlock());
      assertTrue(tag2.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      Tag tag0 = tagSet0.valueOf("[+f(SHxkwl4Y", "center", "rOJH{QYSGKolJ4", false);
      Tag.FormSubmittable = (-3765);
      TagSet tagSet1 = tagSet0.add(tag0);
      Tag tag1 = tagSet1.valueOf("center", "rOJH{QYSGKolJ4");
      assertSame(tag1, tag0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TagSet tagSet0 = TagSet.HtmlTagSet;
      Tag tag0 = new Tag("x`+x11EqmZ9U0bv", "x`+x11EqmZ9U0bv", "x`+x11EqmZ9U0bv");
      Tag tag1 = tag0.set(3515);
      Tag tag2 = tag1.namespace("body");
      tagSet0.add(tag2);
      Tag tag3 = tagSet0.valueOf("x`+x11EqmZ9U0bv", "body");
      assertTrue(tag3.isSelfClosing());
      assertFalse(tag3.isFormSubmittable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TagSet tagSet0 = TagSet.HtmlTagSet;
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("9?#2", "thead", parseSettings0);
      assertNotNull(tag0);
      
      tag0.set(732);
      TagSet tagSet1 = tagSet0.add(tag0);
      Tag tag1 = tagSet1.get("9?#2", "thead");
      assertEquals("9?#2", tag1.normalName());
      assertNotNull(tag1);
      assertFalse(tag1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      Tag tag0 = tagSet0.get("hr", "http://www.w3.org/1999/xhtml");
      assertNotNull(tag0);
      assertEquals("hr", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      Tag tag0 = new Tag("v?", "!!", "!!");
      Tag.InlineContainer = 25;
      tagSet0.add(tag0);
      Tag tag1 = tagSet0.get("v?", "!!");
      assertNotNull(tag1);
      assertFalse(tag1.isSelfClosing());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        tagSet0.valueOf("", "", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      // Undeclared exception!
      try { 
        tagSet0.valueOf("area", "area", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TagSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      // Undeclared exception!
      try { 
        tagSet0.valueOf("", "", "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      // Undeclared exception!
      try { 
        tagSet0.onNewTag((Consumer<Tag>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      // Undeclared exception!
      try { 
        tagSet0.get((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TagSet tagSet0 = TagSet.HtmlTagSet;
      // Undeclared exception!
      try { 
        tagSet0.add((Tag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      tagSet0.valueOf("=", "=", parseSettings0);
      TagSet tagSet1 = new TagSet(tagSet0);
      Tag tag0 = tagSet1.get("=", "=");
      assertTrue(tagSet1.equals((Object)tagSet0));
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      Tag tag0 = tagSet0.get("<fd;IrW{", "f,mTPmI~gx");
      assertNull(tag0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      tagSet0.valueOf("=", "=", parseSettings0);
      Tag tag0 = tagSet0.get("G", "=");
      assertNull(tag0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      boolean boolean0 = tagSet0.equals("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TagSet tagSet0 = TagSet.initHtmlDefault();
      boolean boolean0 = tagSet0.equals(tagSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      Consumer<Tag> consumer0 = (Consumer<Tag>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TagSet tagSet1 = tagSet0.onNewTag(consumer0);
      Consumer<Tag> consumer1 = (Consumer<Tag>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TagSet tagSet2 = tagSet1.onNewTag(consumer1);
      assertSame(tagSet2, tagSet1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      Tag tag0 = tagSet0.valueOf("0{rMVHTn@", "0{rMVHTn@", "0{rMVHTn@", true);
      Tag tag1 = tagSet0.valueOf("^+", "0{rMVHTn@", "0{rMVHTn@", false);
      assertSame(tag1, tag0);
      assertNotNull(tag1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertEquals("A", tag0.name());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      Consumer<Tag> consumer0 = (Consumer<Tag>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      TagSet tagSet1 = tagSet0.onNewTag(consumer0);
      Tag tag0 = tagSet1.valueOf("0/", "O!)Ui^'DIOx\",<!'", "Z", true);
      assertEquals("O!)Ui^'DIOx\",<!'", tag0.normalName());
      assertEquals("0/", tag0.localName());
      assertEquals("Z", tag0.namespace());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TagSet tagSet0 = TagSet.Html();
      tagSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TagSet tagSet0 = new TagSet();
      // Undeclared exception!
      try { 
        tagSet0.valueOf((String) null, "f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
