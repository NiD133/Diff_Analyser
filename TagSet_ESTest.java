/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:39:15 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.parser.TagSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TagSet_ESTest extends TagSet_ESTest_scaffolding {
    // Constants for common tag names to improve readability
    private static final String TEST_TAG_NAME = "wtt=`D4p|";
    private static final String COMPLEX_TAG_NAME = ":_{P!x%}X,o'^63]{>";
    private static final String NAMESPACE = "pr!";

    @Test(timeout = 4000)
    public void test_TagSetEquality_WhenEqual_ReturnsTrue() throws Throwable {
        TagSet tagSet0 = TagSet.Html();
        TagSet tagSet1 = new TagSet(tagSet0);
        assertTrue(tagSet1.equals(tagSet0));
    }

    @Test(timeout = 4000)
    public void test_TagSetEquality_WhenDifferent_ReturnsFalse() throws Throwable {
        TagSet tagSet0 = new TagSet();
        TagSet tagSet1 = new TagSet(tagSet0);
        tagSet1.valueOf("wtt=`d4p|", "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        assertFalse(tagSet1.equals(tagSet0));
    }

    @Test(timeout = 4000)
    public void test_TagSetEquality_WithNonTagSetObject_ReturnsFalse() throws Throwable {
        TagSet tagSet0 = new TagSet();
        Object object0 = new Object();
        assertFalse(tagSet0.equals(object0));
    }

    @Test(timeout = 4000)
    public void test_TagSetHashCode_ConsistentWithEquals() throws Throwable {
        TagSet tagSet0 = new TagSet();
        tagSet0.hashCode();  // Just verify no exception
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithPreserveCaseSettings_ReturnsCorrectTag() throws Throwable {
        TagSet tagSet0 = new TagSet();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = tagSet0.valueOf(COMPLEX_TAG_NAME, COMPLEX_TAG_NAME, parseSettings0);
        assertNotNull(tag0);
        assertEquals(COMPLEX_TAG_NAME.toLowerCase(), tag0.normalName());
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithHtmlDefaultSettings_ReturnsNormalizedTag() throws Throwable {
        TagSet tagSet0 = new TagSet();
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = tagSet0.valueOf(TEST_TAG_NAME, TEST_TAG_NAME, parseSettings0);
        assertEquals("wtt=`d4p|", tag0.normalName());
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithModifiedTagOptions_ReturnsUpdatedTag() throws Throwable {
        TagSet tagSet0 = new TagSet();
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = tagSet0.valueOf(TEST_TAG_NAME, TEST_TAG_NAME, parseSettings0);
        
        // Modify tag options
        tag0.options = 46;
        Tag.FormSubmittable = -41;  // Warning: static field modification
        
        Tag tag1 = tagSet0.valueOf(TEST_TAG_NAME, TEST_TAG_NAME);
        assertEquals("wtt=`d4p|", tag1.normalName());
        assertNotSame(tag1, tag0);
        assertFalse(tag1.isInline());
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithNamespaceAndPreserveCase_ReturnsCorrectTag() throws Throwable {
        TagSet tagSet0 = new TagSet();
        Tag tag0 = tagSet0.valueOf("_-$>", NAMESPACE, NAMESPACE, true);
        assertEquals(NAMESPACE, tag0.normalName());
    }

    @Test(timeout = 4000)
    public void test_AddTag_ThenGet_ReturnsSameTag() throws Throwable {
        TagSet tagSet0 = new TagSet();
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        Tag tag0 = tagSet0.valueOf(COMPLEX_TAG_NAME, COMPLEX_TAG_NAME, parseSettings0);
        
        // Modify static field - use with caution
        Tag.Known = 55;  // Warning: static field modification
        tagSet0.add(tag0);
        
        Tag tag1 = tagSet0.get(COMPLEX_TAG_NAME, COMPLEX_TAG_NAME);
        assertNotNull(tag1);
        assertEquals(COMPLEX_TAG_NAME.toLowerCase(), tag1.normalName());
        assertFalse(tag1.formatAsBlock());
    }

    @Test(timeout = 4000)
    public void test_Get_WhenTagExists_ReturnsTag() throws Throwable {
        TagSet tagSet0 = TagSet.Html();
        Tag tag0 = tagSet0.get("pre", "http://www.w3.org/1999/xhtml");
        assertNotNull(tag0);
    }

    @Test(timeout = 4000)
    public void test_Get_WhenTagMissing_ReturnsNull() throws Throwable {
        TagSet tagSet0 = TagSet.Html();
        Tag tag0 = tagSet0.get("}+z\")6FP@lJ{n*Mufp", "org.jsoup.nodes.Document$OutputSettings$Syntax");
        assertNull(tag0);
    }

    @Test(timeout = 4000)
    public void test_OnNewTag_Callback_ExecutesForNewTags() throws Throwable {
        TagSet tagSet0 = TagSet.initHtmlDefault();
        Consumer<Tag> consumer0 = mock(Consumer.class, new ViolatedAssumptionAnswer());
        TagSet tagSet1 = tagSet0.onNewTag(consumer0);
        Tag tag0 = tagSet1.valueOf("bp", "bp");
        assertEquals("bp", tag0.toString());
    }

    @Test(timeout = 4000)
    public void test_OnNewTag_MultipleCallbacks_AreChained() throws Throwable {
        TagSet tagSet0 = TagSet.Html();
        Consumer<Tag> consumer0 = mock(Consumer.class, new ViolatedAssumptionAnswer());
        TagSet tagSet1 = tagSet0.onNewTag(consumer0);
        Consumer<Tag> consumer1 = mock(Consumer.class, new ViolatedAssumptionAnswer());
        TagSet tagSet2 = tagSet1.onNewTag(consumer1);
        assertSame(tagSet0, tagSet2);
    }

    // Edge case tests for exception handling
    @Test(timeout = 4000)
    public void test_ValueOf_WithEmptyTagName_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.HtmlTagSet;
        ParseSettings parseSettings0 = ParseSettings.preserveCase;
        try {
            tagSet0.valueOf("", "", parseSettings0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("String must not be empty", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithNullSettings_ThrowsException() throws Throwable {
        TagSet tagSet0 = new TagSet();
        try {
            tagSet0.valueOf("org.jsoup.select.Evaluator$AttributeWithValueMatching", 
                             "org.jsoup.select.Evaluator$AttributeWithValueMatching", 
                             null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithEmptyTagNameAndNamespace_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.initHtmlDefault();
        try {
            tagSet0.valueOf("", "", "", true);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("String must not be empty", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_ValueOf_WithNullTagName_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.initHtmlDefault();
        try {
            tagSet0.valueOf(null, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_OnNewTag_WithNullConsumer_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.initHtmlDefault();
        try {
            tagSet0.onNewTag(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_Get_WithNullArguments_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.initHtmlDefault();
        try {
            tagSet0.get(null, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_Add_WithNullTag_ThrowsException() throws Throwable {
        TagSet tagSet0 = TagSet.Html();
        try {
            tagSet0.add(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // Additional tests for Tag functionality
    @Test(timeout = 4000)
    public void test_TagValueOf_WithParseSettings_ReturnsKnownTag() throws Throwable {
        ParseSettings parseSettings0 = ParseSettings.htmlDefault;
        Tag tag0 = Tag.valueOf("U", parseSettings0);
        assertNotNull(tag0);
        assertTrue(tag0.isKnownTag());
        assertEquals("u", tag0.toString());
    }

    @Test(timeout = 4000)
    public void test_TagValueOf_WithoutSettings_ReturnsKnownTag() throws Throwable {
        Tag tag0 = Tag.valueOf("U");
        assertNotNull(tag0);
        assertEquals("U", tag0.toString());
        assertTrue(tag0.isKnownTag());
    }

    @Test(timeout = 4000)
    public void test_IsKnownTag_ForUnknownTag_ReturnsFalse() throws Throwable {
        assertFalse(Tag.isKnownTag("cxpPE"));
    }
}