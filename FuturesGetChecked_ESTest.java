/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:01:49 GMT 2025
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.FuturesGetChecked;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuturesGetChecked_ESTest extends FuturesGetChecked_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.isCheckedException(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<Exception> callable0 = (Callable<Exception>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Exception> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Exception>) callable0);
      ForkJoinTask<Exception> forkJoinTask1 = forkJoinTask0.fork();
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      FuturesGetChecked.getChecked((Future<Exception>) forkJoinTask1, class0, 422L, timeUnit0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLException sQLException0 = new SQLException("8Ov");
      CompletableFuture<Exception> completableFuture0 = CompletableFuture.completedFuture((Exception) sQLException0);
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.getChecked((Future<Exception>) completableFuture0, class0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator futuresGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator0 = FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator.INSTANCE;
      Class<Exception> class0 = Exception.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Supplier<Exception> supplier0 = (Supplier<Exception>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(sQLInvalidAuthorizationSpecException0).when(supplier0).get();
      CompletableFuture<Exception> completableFuture0 = CompletableFuture.supplyAsync(supplier0);
      FuturesGetChecked.getChecked((FuturesGetChecked.GetCheckedTypeValidator) futuresGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator0, (Future<Exception>) completableFuture0, class0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      try { 
        FuturesGetChecked.getChecked((Future<Delayed>) null, class0, (-4303L), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      try { 
        FuturesGetChecked.getChecked((Future<Exception>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.GetCheckedTypeValidator futuresGetChecked_GetCheckedTypeValidator0 = FuturesGetChecked.GetCheckedTypeValidatorHolder.getBestValidator();
      try { 
        FuturesGetChecked.getChecked(futuresGetChecked_GetCheckedTypeValidator0, (Future<Delayed>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.util.concurrent.FuturesGetChecked", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FuturesGetChecked.checkExceptionClassValidity((Class<? extends Exception>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidatorHolder futuresGetChecked_GetCheckedTypeValidatorHolder0 = new FuturesGetChecked.GetCheckedTypeValidatorHolder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "KEY");
      ForkJoinTask<Delayed> forkJoinTask0 = ForkJoinTask.adapt((Runnable) mockThread0, (Delayed) null);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      try { 
        FuturesGetChecked.getChecked((Future<Delayed>) forkJoinTask0, class0, 0L, timeUnit0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Class<Delayed>> supplier0 = (Supplier<Class<Delayed>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CompletableFuture<Class<Delayed>> completableFuture0 = CompletableFuture.supplyAsync(supplier0);
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.getChecked((Future<Class<Delayed>>) completableFuture0, class0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FuturesGetChecked.GetCheckedTypeValidator futuresGetChecked_GetCheckedTypeValidator0 = FuturesGetChecked.classValueValidator();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(798, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      Callable<Class<Exception>> callable0 = (Callable<Class<Exception>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Class<Exception>> forkJoinTask0 = forkJoinPool0.submit(callable0);
      Class<Exception> class0 = Exception.class;
      Class<Exception> class1 = FuturesGetChecked.getChecked(futuresGetChecked_GetCheckedTypeValidator0, (Future<Class<Exception>>) forkJoinTask0, class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      FuturesGetChecked.checkExceptionClassValidity(class0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FuturesGetChecked.weakSetValidator();
  }
}
