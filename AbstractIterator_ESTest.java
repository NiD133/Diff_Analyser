/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:16:41 GMT 2025
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ConsumingQueueIterator;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class AbstractIterator_ESTest extends AbstractIterator_ESTest_scaffolding {

    // Tests for basic iterator functionality
    @Test(timeout = 4000)
    public void next_returnsElementWhenAvailable() throws Throwable {
        PriorityQueue<Locale.FilteringMode> queue = new PriorityQueue<>();
        Locale.FilteringMode expectedElement = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        queue.add(expectedElement);
        
        ConsumingQueueIterator<Locale.FilteringMode> iterator = 
            new ConsumingQueueIterator<>(queue);
        Locale.FilteringMode actualElement = iterator.next();
        
        assertSame("Iterator should return the added element", expectedElement, actualElement);
    }

    @Test(timeout = 4000)
    public void hasNext_returnsTrueWhenElementsAvailable() {
        PriorityQueue<Locale.FilteringMode> queue = new PriorityQueue<>();
        queue.add(Locale.FilteringMode.REJECT_EXTENDED_RANGES);
        
        ConsumingQueueIterator<Locale.FilteringMode> iterator = 
            new ConsumingQueueIterator<>(queue);
        boolean hasNext = iterator.hasNext();
        
        assertTrue("Iterator should have next element", hasNext);
    }

    @Test(timeout = 4000)
    public void endOfData_returnsNull() throws Throwable {
        ArrayDeque<Object> emptyQueue = new ArrayDeque<>();
        ConsumingQueueIterator<Object> iterator = new ConsumingQueueIterator<>(emptyQueue);
        
        Object endMarker = iterator.endOfData();
        
        assertNull("endOfData() should return null", endMarker);
    }

    @Test(timeout = 4000)
    public void forEachRemaining_marksIteratorAsExhausted() {
        ArrayDeque<Object> emptyQueue = new ArrayDeque<>();
        ConsumingQueueIterator<Object> iterator = new ConsumingQueueIterator<>(emptyQueue);
        Consumer<Object> mockConsumer = mock(Consumer.class, new ViolatedAssumptionAnswer());
        
        iterator.forEachRemaining(mockConsumer);
        boolean hasNext = iterator.hasNext();
        
        assertFalse("Iterator should be exhausted after forEachRemaining", hasNext);
    }

    // Tests for iterator behavior after peeking
    @Test(timeout = 4000)
    public void forEachRemaining_afterPeek_processesRemainingElements() {
        LinkedList<Object> queue = new LinkedList<>();
        Object element = new Object();
        queue.add(element);
        ConsumingQueueIterator<Object> iterator = new ConsumingQueueIterator<>(queue);
        Consumer<Object> mockConsumer = mock(Consumer.class, new ViolatedAssumptionAnswer());
        
        iterator.peek();  // Look at element without consuming
        iterator.forEachRemaining(mockConsumer);
        
        // Verify mockConsumer was called with the element
        verify(mockConsumer).accept(element);
    }

    // Tests for error cases
    @Test(timeout = 4000)
    public void next_throwsExceptionWhenNoElements() {
        PriorityQueue<Locale.FilteringMode> emptyQueue = new PriorityQueue<>();
        ConsumingQueueIterator<Locale.FilteringMode> iterator = 
            new ConsumingQueueIterator<>(emptyQueue);
        
        try {
            iterator.next();
            fail("Expected NoSuchElementException when next() called on empty iterator");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void peek_throwsExceptionAfterExhaustingIterator() {
        LinkedList<Object> emptyQueue = new LinkedList<>();
        ConsumingQueueIterator<Object> iterator = new ConsumingQueueIterator<>(emptyQueue);
        Consumer<Object> mockConsumer = mock(Consumer.class, new ViolatedAssumptionAnswer());
        
        iterator.forEachRemaining(mockConsumer);
        
        try {
            iterator.peek();
            fail("Expected NoSuchElementException when peek() called on exhausted iterator");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }
}