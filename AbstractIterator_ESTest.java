/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:16:41 GMT 2025
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ConsumingQueueIterator;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIterator_ESTest extends AbstractIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      priorityQueue0.add(locale_FilteringMode0);
      ConsumingQueueIterator<Locale.FilteringMode> consumingQueueIterator0 = new ConsumingQueueIterator<Locale.FilteringMode>(priorityQueue0);
      Locale.FilteringMode locale_FilteringMode1 = consumingQueueIterator0.next();
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      priorityQueue0.add(locale_FilteringMode0);
      ConsumingQueueIterator<Locale.FilteringMode> consumingQueueIterator0 = new ConsumingQueueIterator<Locale.FilteringMode>(priorityQueue0);
      boolean boolean0 = consumingQueueIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ConsumingQueueIterator<Object> consumingQueueIterator0 = new ConsumingQueueIterator<Object>(arrayDeque0);
      Object object0 = consumingQueueIterator0.endOfData();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ConsumingQueueIterator<Object> consumingQueueIterator0 = new ConsumingQueueIterator<Object>(arrayDeque0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      consumingQueueIterator0.forEachRemaining(consumer0);
      boolean boolean0 = consumingQueueIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ConsumingQueueIterator<Object> consumingQueueIterator0 = new ConsumingQueueIterator<Object>(linkedList0);
      consumingQueueIterator0.peek();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      consumingQueueIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      ConsumingQueueIterator<Locale.FilteringMode> consumingQueueIterator0 = new ConsumingQueueIterator<Locale.FilteringMode>(priorityQueue0);
      // Undeclared exception!
      try { 
        consumingQueueIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.AbstractIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConsumingQueueIterator<Object> consumingQueueIterator0 = new ConsumingQueueIterator<Object>(linkedList0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      consumingQueueIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        consumingQueueIterator0.peek();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.AbstractIterator", e);
      }
  }
}
