package com.google.common.io;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

/**
 * Tests for {@link CharSequenceReader}.
 */
@RunWith(JUnit4.class)
public class CharSequenceReaderTest {

    /**
     * This test was improved from a version generated by EvoSuite.
     * The original test had a very complex and confusing setup to verify
     * that skip() returns -1 at the end of the stream.
     */
    @Test
    public void skip_whenAtEndOfSequence_returnsNegativeOne() throws IOException {
        // Arrange: Create a reader and read all its content to reach the end.
        CharSequenceReader reader = new CharSequenceReader("A");
        
        // First, read the only character to exhaust the reader.
        int charRead = reader.read();
        assertEquals('A', charRead);
        
        // Verify we are at the end of the sequence.
        assertEquals(-1, reader.read());

        // Act: Attempt to skip characters when no characters are remaining.
        // The original test used skip(0), which is a valid edge case.
        long skippedCount = reader.skip(0);

        // Assert: skip() should return -1 to indicate the end of the stream,
        // as per the implementation's behavior.
        assertEquals(-1L, skippedCount);
    }
}