/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability and maintainability
 */
package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class JsonWriteContext_ESTest extends JsonWriteContext_ESTest_scaffolding {

    // ============================================================
    // Root Context Tests
    // ============================================================
    
    @Test(timeout = 4000)
    public void testRootContextParentIsNull() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        assertNull(root.getParent());
        assertEquals(0, root.getNestingDepth());
        assertTrue(root.inRoot());
    }

    @Test(timeout = 4000)
    public void testRootContextHasNoCurrentNameByDefault() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        assertFalse(root.hasCurrentName());
        assertEquals(0, root.getEntryCount());
    }

    @Test(timeout = 4000)
    public void testRootContextWriteValueUpdatesIndex() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        root.writeValue();
        root.writeValue();
        assertEquals(2, root.getEntryCount());
        assertEquals(1, root.getCurrentIndex());
    }

    @Test(timeout = 4000)
    public void testRootContextWriteFieldNameFails() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        int result = root.writeFieldName("field");
        assertEquals(JsonWriteContext.STATUS_EXPECT_VALUE, result);
    }

    @Test(timeout = 4000)
    public void testRootContextWithDupDetector() {
        DupDetector dupDetector = DupDetector.rootDetector((JsonGenerator) null);
        JsonWriteContext root = JsonWriteContext.createRootContext(dupDetector);
        assertNotNull(root.getDupDetector());
        assertEquals(0, root.getEntryCount());
    }

    @Test(timeout = 4000)
    public void testResetRootContextToObjectType() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        root.reset(JsonWriteContext.TYPE_OBJECT, null);
        assertEquals("OBJECT", root.getTypeDesc());
        assertFalse(root.inRoot());
    }

    // ============================================================
    // Array Context Tests
    // ============================================================
    
    @Test(timeout = 4000)
    public void testArrayContextWriteValueUpdatesIndex() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext array = root.createChildArrayContext();
        
        array.writeValue();
        array.writeValue();
        int result = array.writeValue();
        
        assertEquals(2, array.getCurrentIndex());
        assertEquals(JsonWriteContext.STATUS_OK_AFTER_COMMA, result);
    }

    @Test(timeout = 4000)
    public void testArrayContextWriteFieldNameFails() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext array = root.createChildArrayContext();
        int result = array.writeFieldName("invalid");
        assertEquals(JsonWriteContext.STATUS_EXPECT_VALUE, result);
    }

    @Test(timeout = 4000)
    public void testArrayContextClearParent() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext array = root.createChildArrayContext();
        JsonWriteContext parent = array.clearAndGetParent();
        
        assertSame(root, parent);
        assertEquals(1, array.getNestingDepth());
        assertEquals(0, array.getEntryCount());
    }

    // ============================================================
    // Object Context Tests
    // ============================================================
    
    @Test(timeout = 4000)
    public void testObjectContextWriteFieldNameSucceeds() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext obj = root.createChildObjectContext();
        
        int result = obj.writeFieldName("field1");
        assertEquals(JsonWriteContext.STATUS_OK_AFTER_COLON, result);
        assertTrue(obj.hasCurrentName());
    }

    @Test(timeout = 4000)
    public void testObjectContextWriteDuplicateFieldNameThrows() throws IOException {
        DupDetector dupDetector = DupDetector.rootDetector((JsonGenerator) null);
        JsonWriteContext root = JsonWriteContext.createRootContext(dupDetector);
        JsonWriteContext obj = root.createChildObjectContext();
        
        obj.writeFieldName("duplicate");
        obj.writeValue();
        
        try {
            obj.writeFieldName("duplicate");
            fail("Should throw duplicate field exception");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Duplicate field"));
        }
    }

    @Test(timeout = 4000)
    public void testObjectContextWriteValueWithoutFieldNameFails() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext obj = root.createChildObjectContext();
        
        int result = obj.writeValue();
        assertEquals(JsonWriteContext.STATUS_EXPECT_NAME, result);
    }

    @Test(timeout = 4000)
    public void testObjectContextCurrentNameManagement() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext obj = root.createChildObjectContext();
        
        obj.writeFieldName("testField");
        assertTrue(obj.hasCurrentName());
        assertEquals("testField", obj.getCurrentName());
    }

    // ============================================================
    // Child Context Creation Tests
    // ============================================================
    
    @Test(timeout = 4000)
    public void testCreateChildArrayContext() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext array = root.createChildArrayContext();
        
        assertEquals(1, array.getNestingDepth());
        assertEquals(0, array.getEntryCount());
        assertTrue(array.inArray());
    }

    @Test(timeout = 4000)
    public void testCreateChildObjectContext() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext obj = root.createChildObjectContext();
        
        assertEquals(1, obj.getNestingDepth());
        assertEquals(0, obj.getEntryCount());
        assertTrue(obj.inObject());
    }

    @Test(timeout = 4000)
    public void testParentChildRelationship() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        JsonWriteContext child = root.createChildArrayContext();
        JsonWriteContext grandChild = child.createChildObjectContext();
        
        assertSame(child, grandChild.getParent());
        assertSame(root, child.getParent());
        assertEquals(2, grandChild.getNestingDepth());
    }

    // ============================================================
    // Edge Case Tests
    // ============================================================
    
    @Test(timeout = 4000)
    public void testResetToInvalidType() {
        JsonWriteContext ctx = JsonWriteContext.createRootContext();
        ctx.reset(50000, null);
        
        assertEquals(1, ctx.getEntryCount());
        assertEquals("?", ctx.getTypeDesc());
    }

    @Test(timeout = 4000)
    public void testCurrentValueManagement() {
        JsonWriteContext ctx = JsonWriteContext.createRootContext();
        Object value = new Object();
        
        ctx.setCurrentValue(value);
        assertSame(value, ctx.getCurrentValue());
    }

    @Test(timeout = 4000)
    public void testDupDetectorWithNullFieldName() {
        DupDetector dupDetector = DupDetector.rootDetector((JsonGenerator) null);
        JsonWriteContext obj = JsonWriteContext.createRootContext(dupDetector)
            .createChildObjectContext();
        
        obj.writeFieldName(null);
        obj.writeValue();
        int result = obj.writeFieldName(null);
        
        assertEquals(JsonWriteContext.STATUS_OK_AFTER_COMMA, result);
        assertEquals(2, obj.getEntryCount());
    }

    @Test(timeout = 4000)
    public void testClearAndGetParentAfterWriteOperations() {
        JsonWriteContext root = JsonWriteContext.createRootContext();
        root.writeValue();
        
        JsonWriteContext child = root.createChildObjectContext();
        root.writeValue();
        
        JsonWriteContext parent = child.clearAndGetParent();
        assertSame(root, parent);
        assertEquals(2, root.getEntryCount());
    }
}