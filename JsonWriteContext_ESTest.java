/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:56 GMT 2025
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriteContext_ESTest extends JsonWriteContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext((Object) "");
      jsonWriteContext1.writeValue();
      jsonWriteContext1.writeValue();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(2, jsonWriteContext1.getCurrentIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.reset(50000, (Object) null);
      int int0 = jsonWriteContext0.writeValue();
      assertEquals(1, jsonWriteContext0.getEntryCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      
      jsonWriteContext0.reset(240);
      int int0 = jsonWriteContext0.writeFieldName("");
      assertFalse(jsonWriteContext0.inRoot());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext((byte) (-16), (JsonWriteContext) null, dupDetector0);
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext(object0);
      assertNotNull(jsonWriteContext1);
      
      jsonWriteContext1.writeFieldName("I=b]y/#@HKfkg#;");
      jsonWriteContext1.withDupDetector(dupDetector0);
      assertTrue(jsonWriteContext1.hasCurrentName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.withDupDetector((DupDetector) null);
      assertEquals(1, jsonWriteContext2.getNestingDepth());
      assertTrue(jsonWriteContext2.inArray());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertFalse(jsonWriteContext0.inArray());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(0, object0);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext1.getNestingDepth());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext((DupDetector) null);
      assertFalse(jsonWriteContext0.inObject());
      
      jsonWriteContext0.reset(2, (Object) null);
      assertEquals("OBJECT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      assertTrue(jsonWriteContext0.inRoot());
      
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1, (Object) null);
      assertFalse(jsonWriteContext1.inRoot());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext(object0);
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertNotNull(jsonWriteContext1);
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0._child.reset(2);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(1, jsonWriteContext2.getNestingDepth());
      assertFalse(jsonWriteContext2.hasCurrentIndex());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertEquals("OBJECT", jsonWriteContext2.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1);
      jsonWriteContext1._currentName = "{?4P :";
      boolean boolean0 = jsonWriteContext0.hasCurrentName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      boolean boolean0 = jsonWriteContext0.hasCurrentName();
      assertFalse(boolean0);
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.getParent();
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertNull(jsonWriteContext1);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext(object0);
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
      assertNotNull(jsonWriteContext3);
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals(2, jsonWriteContext2.getNestingDepth());
      assertTrue(jsonWriteContext3.inObject());
      assertEquals("ARRAY", jsonWriteContext2.getTypeDesc());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0._currentName = "";
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.getParent();
      assertNotNull(jsonWriteContext2);
      assertTrue(jsonWriteContext2.inRoot());
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals(1, jsonWriteContext1.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.writeValue();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext0.writeValue();
      jsonWriteContext1.getParent();
      assertEquals(1, jsonWriteContext0.getCurrentIndex());
      assertTrue(jsonWriteContext0.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      DupDetector dupDetector1 = jsonWriteContext0.getDupDetector();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertNotNull(dupDetector1);
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      jsonWriteContext0._currentValue = object0;
      jsonWriteContext0.getCurrentValue();
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.getCurrentName();
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(1);
      jsonWriteContext1._currentName = "{?4P :";
      jsonWriteContext0.getCurrentName();
      assertFalse(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset((-248), object0);
      jsonWriteContext1._currentName = "v;grA ol7R@";
      jsonWriteContext1._currentName = "";
      jsonWriteContext0.getCurrentName();
      assertFalse(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext(object0);
      jsonWriteContext1._child = jsonWriteContext0;
      assertFalse(jsonWriteContext1._child.inObject());
      
      jsonWriteContext1.createChildObjectContext(object0);
      assertEquals("Object", jsonWriteContext0.typeDesc());
      assertFalse(jsonWriteContext1.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0._child = jsonWriteContext0;
      assertFalse(jsonWriteContext0._child.inArray());
      
      jsonWriteContext0.createChildArrayContext((Object) jsonWriteContext0);
      assertEquals("ARRAY", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = JsonWriteContext.createRootContext();
      jsonWriteContext1._child = jsonWriteContext0;
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
      assertTrue(jsonWriteContext2.inArray());
      assertSame(jsonWriteContext2, jsonWriteContext0);
      assertEquals(0, jsonWriteContext1.getCurrentIndex());
      assertFalse(jsonWriteContext2.hasCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext(object0);
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.clearAndGetParent();
      assertEquals(2, jsonWriteContext2.getNestingDepth());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertTrue(jsonWriteContext3.inObject());
      assertNotNull(jsonWriteContext3);
      assertTrue(jsonWriteContext2.inArray());
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildArrayContext();
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.clearAndGetParent();
      assertNotNull(jsonWriteContext3);
      assertEquals(2, jsonWriteContext2.getNestingDepth());
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertEquals("Array", jsonWriteContext3.typeDesc());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(1, jsonWriteContext3.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0._currentName = "";
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext(object0);
      assertNotNull(jsonWriteContext1);
      
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.clearAndGetParent();
      assertEquals("Array", jsonWriteContext1.typeDesc());
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertEquals("ROOT", jsonWriteContext2.getTypeDesc());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertNotNull(jsonWriteContext2);
      assertEquals(1, jsonWriteContext1.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(65599, jsonWriteContext0, (DupDetector) null, object0);
      JsonWriteContext jsonWriteContext2 = new JsonWriteContext(5, jsonWriteContext1, (DupDetector) null);
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.clearAndGetParent();
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertNotSame(jsonWriteContext3, jsonWriteContext2);
      assertEquals(2, jsonWriteContext2.getNestingDepth());
      assertEquals("?", jsonWriteContext3.getTypeDesc());
      assertNotNull(jsonWriteContext3);
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
      assertFalse(jsonWriteContext2.inRoot());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.writeValue();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext0.writeValue();
      jsonWriteContext1.clearAndGetParent();
      assertEquals(1, jsonWriteContext0.getCurrentIndex());
      assertEquals(2, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1.writeFieldName(": was expecting closing '*/' for comment");
      jsonWriteContext1.writeValue();
      // Undeclared exception!
      try { 
        jsonWriteContext1.writeFieldName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.DupDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext(object0);
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      assertNotNull(jsonWriteContext1);
      
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0._child.reset(5, object0);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(1, jsonWriteContext2.getNestingDepth());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals("?", jsonWriteContext2.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext((-1), (JsonWriteContext) null, dupDetector0, (Object) null);
      assertFalse(jsonWriteContext0.inObject());
      
      jsonWriteContext0.reset(2);
      assertEquals("OBJECT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.reset(0);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext1.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(5, int0);
      assertEquals(1, jsonWriteContext1.getNestingDepth());
      assertEquals("root", jsonWriteContext0.typeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0.writeValue();
      jsonWriteContext0.writeValue();
      jsonWriteContext0.withDupDetector(dupDetector0);
      assertEquals(2, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1.writeFieldName("root");
      jsonWriteContext1.writeValue();
      try { 
        jsonWriteContext1.writeFieldName("root");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Duplicate field 'root'
         //
         verifyException("com.fasterxml.jackson.core.json.JsonWriteContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) jsonGeneratorDelegate0);
      JsonWriteContext jsonWriteContext1 = JsonWriteContext.createRootContext(dupDetector0);
      jsonWriteContext0._child = jsonWriteContext1;
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext2.writeFieldName("/");
      jsonWriteContext2.writeValue();
      try { 
        jsonWriteContext2.writeFieldName("/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Duplicate field '/'
         //
         verifyException("com.fasterxml.jackson.core.json.JsonWriteContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      jsonWriteContext1.writeFieldName("NRN=M&Q");
      int int0 = jsonWriteContext1.writeFieldName("):<z");
      assertTrue(jsonWriteContext1.hasCurrentName());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      assertNotNull(jsonWriteContext1);
      
      jsonWriteContext1.writeFieldName((String) null);
      jsonWriteContext1.writeValue();
      jsonWriteContext1.writeFieldName((String) null);
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(2, jsonWriteContext1.getEntryCount());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      int int0 = jsonWriteContext0.writeFieldName((String) null);
      assertEquals(4, int0);
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("root", jsonWriteContext0.typeDesc());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext((Object) dupDetector0);
      assertEquals(1, jsonWriteContext1.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertNotNull(jsonWriteContext1);
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals("ARRAY", jsonWriteContext1.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      assertNotNull(jsonWriteContext1);
      assertTrue(jsonWriteContext1.inObject());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, tokenFilter_Inclusion0, false);
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildArrayContext((Object) filteringGeneratorDelegate0);
      assertEquals(1, jsonWriteContext2.getNestingDepth());
      assertFalse(jsonWriteContext2.inObject());
      assertSame(jsonWriteContext2, jsonWriteContext1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext((byte) (-16), (JsonWriteContext) null, dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      assertNotNull(jsonWriteContext1);
      
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.createChildObjectContext(object0);
      JsonWriteContext jsonWriteContext3 = jsonWriteContext2.getParent();
      assertFalse(jsonWriteContext0.inArray());
      assertEquals(0, jsonWriteContext3.getEntryCount());
      assertNotNull(jsonWriteContext3);
      assertEquals(2, jsonWriteContext2.getNestingDepth());
      assertTrue(jsonWriteContext3.inArray());
      assertEquals(0, jsonWriteContext2.getEntryCount());
      assertEquals("Object", jsonWriteContext2.typeDesc());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.withDupDetector(dupDetector0);
      assertTrue(jsonWriteContext1.inRoot());
      
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext2 = jsonWriteContext1.reset((-940), object0);
      assertEquals("?", jsonWriteContext2.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildArrayContext();
      assertNotNull(jsonWriteContext1);
      assertEquals("Array", jsonWriteContext1.typeDesc());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonWriteContext jsonWriteContext2 = jsonWriteContext0.createChildObjectContext((Object) dataInputStream0);
      assertSame(jsonWriteContext2, jsonWriteContext1);
      assertEquals(1, jsonWriteContext2.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("OBJECT", jsonWriteContext2.getTypeDesc());
      assertFalse(jsonWriteContext0.inArray());
      assertEquals(0, jsonWriteContext2.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext((-1), (JsonWriteContext) null, dupDetector0, (Object) null);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      assertNotNull(jsonWriteContext1);
      assertEquals("?", jsonWriteContext0.typeDesc());
      assertEquals(1, jsonWriteContext1.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext(2033, (JsonWriteContext) null, (DupDetector) null);
      jsonWriteContext0.getCurrentValue();
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals("?", jsonWriteContext0.typeDesc());
      assertEquals(0, jsonWriteContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.clearAndGetParent();
      assertEquals(0, jsonWriteContext0.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertNull(jsonWriteContext1);
      assertTrue(jsonWriteContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      jsonWriteContext0.setCurrentValue(jsonWriteContext0);
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertTrue(jsonWriteContext0.inRoot());
      assertEquals(0, jsonWriteContext0.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext();
      Object object0 = new Object();
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext(object0);
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertNotNull(jsonWriteContext1);
      assertEquals("OBJECT", jsonWriteContext1.getTypeDesc());
      assertEquals(1, jsonWriteContext1.getNestingDepth());
      
      jsonWriteContext0._child.getDupDetector();
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals("root", jsonWriteContext0.typeDesc());
      assertTrue(jsonWriteContext0.inRoot());
  }
}
