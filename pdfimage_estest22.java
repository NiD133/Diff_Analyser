package com.itextpdf.text.pdf;

import com.itextpdf.text.BadPdfFormatException;
import com.itextpdf.text.ImgJBIG2;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Test suite for the {@link PdfImage} class.
 */
public class PdfImageTest {

    /**
     * Verifies that a unique resource name is automatically generated for a PdfImage
     * when the constructor is called with a null name argument.
     */
    @Test
    public void nameIsAutoGeneratedWhenConstructorIsCalledWithNullName() throws BadPdfFormatException {
        // Arrange: Create a JBIG2 image and a dummy mask reference.
        // The specific image content and reference details are not relevant for this test.
        byte[] emptyImageData = new byte[0];
        ImgJBIG2 jbig2Image = new ImgJBIG2(100, 100, emptyImageData, emptyImageData);
        PdfIndirectReference dummyMaskReference = new PdfIndirectReference(0, 1);

        // Act: Construct a PdfImage, passing null for the name.
        PdfImage pdfImage = new PdfImage(jbig2Image, null, dummyMaskReference);
        PdfName generatedName = pdfImage.name();

        // Assert: A non-null name should be generated, and it should follow the expected format.
        assertNotNull("The generated name should not be null when the input name is null.", generatedName);
        assertTrue(
            "The generated name should start with the '/img_' prefix.",
            generatedName.toString().startsWith("/img_")
        );
    }
}