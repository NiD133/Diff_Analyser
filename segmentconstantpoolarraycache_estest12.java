package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;

// The original test class was generated by a tool and extended a scaffolding class.
// We retain the extension for potential compatibility, though it may not be strictly
// necessary for this specific, refactored test case.
public class SegmentConstantPoolArrayCache_ESTestTest12 extends SegmentConstantPoolArrayCache_ESTest_scaffolding {

    /**
     * Tests that {@link SegmentConstantPoolArrayCache#indexesForArrayKey(String[], String)}
     * returns an empty list when the specified key does not exist in the array.
     * <p>
     * This behavior is verified for both the initial call (when the array is not yet cached)
     * and a subsequent call (when the result should be retrieved from the cache).
     * </p>
     */
    @Test
    public void indexesForArrayKey_whenKeyNotFound_shouldReturnEmptyList() {
        // Arrange: Create a cache, an array of strings, and a key that is not in the array.
        SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
        String[] arrayToSearch = {"apple", "banana", "orange"};
        String nonExistentKey = "grape";

        // Act & Assert (First Call - Uncached)
        // The first call searches the array and populates the cache.
        List<Integer> foundIndexesFirstCall = cache.indexesForArrayKey(arrayToSearch, nonExistentKey);

        assertNotNull("The returned list should not be null for the first call.", foundIndexesFirstCall);
        assertTrue("Expected an empty list for a non-existent key (uncached array).",
                foundIndexesFirstCall.isEmpty());

        // Act & Assert (Second Call - Cached)
        // The second call should retrieve the result from the cache.
        List<Integer> foundIndexesSecondCall = cache.indexesForArrayKey(arrayToSearch, nonExistentKey);

        assertNotNull("The returned list should not be null for the second call.", foundIndexesSecondCall);
        assertTrue("Expected an empty list for a non-existent key (cached array).",
                foundIndexesSecondCall.isEmpty());
    }
}