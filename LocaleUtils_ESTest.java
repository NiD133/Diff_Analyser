/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:22:01 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

    // ========================================================================
    // Tests for toLocale(String)
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testToLocale_WithNull_ReturnsNull() {
        Locale locale = LocaleUtils.toLocale((String) null);
        assertNull(locale);
    }

    @Test(timeout = 4000)
    public void testToLocale_WithEmptyString_ReturnsEmptyLocale() {
        Locale locale = LocaleUtils.toLocale("");
        assertEquals("", locale.getLanguage());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithValidLanguage_ReturnsLocale() {
        Locale locale = LocaleUtils.toLocale("fr");
        assertEquals("fr", locale.getLanguage());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithValidLanguageCountry_ReturnsLocale() {
        Locale locale = LocaleUtils.toLocale("zh-CN");
        assertEquals("zh_CN", locale.toString());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithDashCountry_ReturnsChinaLocale() {
        Locale locale = LocaleUtils.toLocale("-CN");
        assertEquals("CHN", locale.getISO3Country());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithDashDYn_ReturnsLocaleWithUnderscore() {
        Locale locale = LocaleUtils.toLocale("-DY-n");
        assertEquals("_DY_n", locale.toString());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithValidVariant_ReturnsLocale() {
        Locale locale = LocaleUtils.toLocale("biTN-009");
        assertEquals("bitn_009", locale.toString());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithMultiSegmentVariant_ReturnsLocale() {
        Locale locale = LocaleUtils.toLocale("bfi-TN-D9");
        assertEquals("bfi_TN_D9", locale.toString());
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_uiTN_0029_ThrowsException() {
        LocaleUtils.toLocale("uiTN-0029");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_NonAscii_ThrowsException() {
        LocaleUtils.toLocale("\u00EDslenska");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_zh_XCN_ThrowsException() {
        LocaleUtils.toLocale("zh-XCN");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_UnderscoreHUP_ThrowsException() {
        LocaleUtils.toLocale("_HUP");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_DashCIIN_ThrowsException() {
        LocaleUtils.toLocale("-CIIN");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_DashJ_ThrowsException() {
        LocaleUtils.toLocale("-j");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_DashCExclamationN_ThrowsException() {
        LocaleUtils.toLocale("-C!N");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_LongUnderscoreString_ThrowsException() {
        LocaleUtils.toLocale("_9DSQCbSw^!e Mr4eg6");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_SinglePlus_ThrowsException() {
        LocaleUtils.toLocale("+");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_SingleHash_ThrowsException() {
        LocaleUtils.toLocale("#");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_AtDoubleDash_ThrowsException() {
        LocaleUtils.toLocale("at--");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_LongString_ThrowsException() {
        LocaleUtils.toLocale(")g%EOd_,G_0^e~VZj");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_zh_uCN_ThrowsException() {
        LocaleUtils.toLocale("zh-uCN");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_DXQuoteNFC_ThrowsException() {
        LocaleUtils.toLocale("DX\"n{f!cA_1");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_UnderscoreInVariant_ThrowsException() {
        LocaleUtils.toLocale("q_]:a$7mI");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testToLocale_InvalidFormat_bi_KD9_ThrowsException() {
        LocaleUtils.toLocale("bi-K-D9");
    }

    // ========================================================================
    // Tests for toLocale(Locale)
    // ========================================================================

    @Test(timeout = 4000)
    public void testToLocale_WithNullLocale_ReturnsDefaultLocale() {
        Locale locale = LocaleUtils.toLocale((Locale) null);
        assertEquals("eng", locale.getISO3Language());
    }

    @Test(timeout = 4000)
    public void testToLocale_WithNonNullLocale_ReturnsSameLocale() {
        Locale input = Locale.ITALIAN;
        Locale result = LocaleUtils.toLocale(input);
        assertEquals("ita", result.getISO3Language());
    }

    // ========================================================================
    // Tests for localeLookupList()
    // ========================================================================

    @Test(timeout = 4000)
    public void testLocaleLookupList_WithNullLocaleAndNullDefault_ReturnsEmptyList() {
        List<Locale> list = LocaleUtils.localeLookupList(null, null);
        assertTrue(list.isEmpty());
    }

    @Test(timeout = 4000)
    public void testLocaleLookupList_WithNullLocale_ReturnsEmptyList() {
        List<Locale> list = LocaleUtils.localeLookupList(null);
        assertEquals(0, list.size());
    }

    @Test(timeout = 4000)
    public void testLocaleLookupList_WithSingleLocale_ReturnsOneElement() {
        Locale locale = Locale.ENGLISH;
        List<Locale> list = LocaleUtils.localeLookupList(locale, locale);
        assertEquals(1, list.size());
    }

    @Test(timeout = 4000)
    public void testLocaleLookupList_WithDifferentLocales_ReturnsFourElements() {
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Locale locale1 = new Locale("Italy", "und", "LV");
        List<Locale> list = LocaleUtils.localeLookupList(locale1, locale0);
        assertEquals(4, list.size());
    }

    @Test(timeout = 4000)
    public void testLocaleLookupList_WithEnglishAndRoot_ReturnsTwoLocales() {
        Locale locale0 = Locale.ENGLISH;
        Locale locale1 = Locale.ROOT;
        List<Locale> list = LocaleUtils.localeLookupList(locale0, locale1);
        assertEquals(2, list.size());
        assertTrue(list.contains(locale1));
    }

    // ========================================================================
    // Tests for languagesByCountry()
    // ========================================================================

    @Test(timeout = 4000)
    public void testLanguagesByCountry_WithNull_ReturnsEmptyList() {
        List<Locale> list = LocaleUtils.languagesByCountry(null);
        assertTrue(list.isEmpty());
    }

    @Test(timeout = 4000)
    public void testLanguagesByCountry_WithValidCountry_ReturnsNonEmptyList() {
        List<Locale> list = LocaleUtils.languagesByCountry("RO");
        assertEquals(1, list.size());
    }

    // ========================================================================
    // Tests for countriesByLanguage()
    // ========================================================================

    @Test(timeout = 4000)
    public void testCountriesByLanguage_WithNull_ReturnsEmptyList() {
        List<Locale> list = LocaleUtils.countriesByLanguage(null);
        assertTrue(list.isEmpty());
    }

    @Test(timeout = 4000)
    public void testCountriesByLanguage_WithInvalidLanguage_ReturnsEmptyList() {
        List<Locale> list = LocaleUtils.countriesByLanguage("q@:a$7mI");
        assertEquals(0, list.size());
    }

    // ========================================================================
    // Tests for isAvailableLocale()
    // ========================================================================

    @Test(timeout = 4000)
    public void testIsAvailableLocale_WithNull_ReturnsFalse() {
        assertFalse(LocaleUtils.isAvailableLocale(null));
    }

    @Test(timeout = 4000)
    public void testIsAvailableLocale_WithItaly_ReturnsTrue() {
        assertTrue(LocaleUtils.isAvailableLocale(Locale.ITALY));
    }

    // ========================================================================
    // Tests for isLanguageUndetermined()
    // ========================================================================

    @Test(timeout = 4000)
    public void testIsLanguageUndetermined_WithNull_ReturnsTrue() {
        assertTrue(LocaleUtils.isLanguageUndetermined(null));
    }

    @Test(timeout = 4000)
    public void testIsLanguageUndetermined_WithRootLocale_ReturnsTrue() {
        assertTrue(LocaleUtils.isLanguageUndetermined(Locale.ROOT));
    }

    @Test(timeout = 4000)
    public void testIsLanguageUndetermined_WithGermany_ReturnsFalse() {
        assertFalse(LocaleUtils.isLanguageUndetermined(Locale.GERMANY));
    }

    // ========================================================================
    // Tests for available locales
    // ========================================================================

    @Test(timeout = 4000)
    public void testAvailableLocaleList_ReturnsNonEmptyList() {
        List<Locale> list = LocaleUtils.availableLocaleList();
        assertFalse(list.isEmpty());
    }

    @Test(timeout = 4000)
    public void testAvailableLocaleSet_ReturnsNonEmptySet() {
        Set<Locale> set = LocaleUtils.availableLocaleSet();
        assertFalse(set.isEmpty());
    }

    // ========================================================================
    // Tests for constructor
    // ========================================================================

    @Test(timeout = 4000)
    public void testConstructor_InstantiationSucceeds() {
        new LocaleUtils();
    }
}