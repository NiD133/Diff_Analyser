/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:56:08 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.function.UnaryOperator;
import org.apache.commons.io.file.AccumulatorPathVisitor;
import org.apache.commons.io.file.CleaningPathVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.DeletingPathVisitor;
import org.apache.commons.io.file.PathFilter;
import org.apache.commons.io.file.StandardDeleteOption;
import org.apache.commons.io.filefilter.CanWriteFileFilter;
import org.apache.commons.io.filefilter.EmptyFileFilter;
import org.apache.commons.io.filefilter.FileFileFilter;
import org.apache.commons.io.filefilter.HiddenFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PathEqualsFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.io.function.IOBiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
) 
public class CountingPathVisitor_ESTest extends CountingPathVisitor_ESTest_scaffolding {

    // ===========================================================
    // = Constructor and Builder Tests                           =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testBuilderSetPathCounters() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        Counters.PathCounters pathCounters = builder.getPathCounters();
        CountingPathVisitor.Builder result = builder.setPathCounters(pathCounters);
        assertSame(result, builder);
    }

    @Test(timeout = 4000)
    public void testBuilderSetDirectoryFilter() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        NotFileFilter filter = (NotFileFilter) CanWriteFileFilter.CANNOT_WRITE;
        CountingPathVisitor.Builder result = builder.setDirectoryFilter(filter);
        assertSame(result, builder);
    }

    @Test(timeout = 4000)
    public void testBuilderSetFileFilter() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        PathFilter filter = builder.getFileFilter();
        CountingPathVisitor.Builder result = builder.setFileFilter(filter);
        assertSame(builder, result);
    }

    @Test(timeout = 4000)
    public void testConstructorWithPathCountersAndFilters() {
        Counters.PathCounters pathCounters = CountingPathVisitor.defaultPathCounters();
        EmptyFileFilter filter = (EmptyFileFilter) EmptyFileFilter.EMPTY;
        new CountingPathVisitor(pathCounters, filter, filter);
    }

    @Test(timeout = 4000)
    public void testConstructorWithPathCountersAndFilters2() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        NotFileFilter notFilter = (NotFileFilter) CanWriteFileFilter.CANNOT_WRITE;
        Counters.PathCounters pathCounters = builder.getPathCounters();
        IOFileFilter fileFilter = CountingPathVisitor.defaultFileFilter();
        new CountingPathVisitor(pathCounters, notFilter, fileFilter);
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullBuilderThrowsNPE() {
        try {
            new CountingPathVisitor((CountingPathVisitor.AbstractBuilder<?, ?>) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullFileFilterThrowsNPE() {
        Counters.PathCounters pathCounters = CountingPathVisitor.defaultPathCounters();
        try {
            new CountingPathVisitor(pathCounters, null, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("fileFilter", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullVisitFileFailedFunctionThrowsNPE() {
        Counters.PathCounters pathCounters = CountingPathVisitor.defaultPathCounters();
        FileFileFilter filter = (FileFileFilter) FileFileFilter.INSTANCE;
        try {
            new CountingPathVisitor(pathCounters, filter, filter, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("visitFileFailedFunction", e.getMessage());
        }
    }

    // ===========================================================
    // = Static Method Tests                                     =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testDefaultDirectoryTransformer() {
        UnaryOperator<Path> transformer = CountingPathVisitor.defaultDirectoryTransformer();
        assertNotNull(transformer);
    }

    @Test(timeout = 4000)
    public void testDefaultDirectoryFilter() {
        IOFileFilter filter = CountingPathVisitor.defaultDirectoryFilter();
        AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withBigIntegerCounters(filter, filter);
        assertNotNull(visitor);
    }

    // ===========================================================
    // = Core Functionality Tests                                =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testVisitFileSuccess() throws Throwable {
        CountingPathVisitor visitor = CountingPathVisitor.withLongCounters();
        MockFile mockFile = new MockFile("");
        Path path = mockFile.toPath();
        BasicFileAttributes attrs = mock(BasicFileAttributes.class);
        doReturn(0L).when(attrs).size();
        
        FileVisitResult result = visitor.visitFile(path, attrs);
        assertEquals(FileVisitResult.CONTINUE, result);
    }

    @Test(timeout = 4000)
    public void testAcceptFileWithoutAttributes() {
        CountingPathVisitor visitor = CountingPathVisitor.withBigIntegerCounters();
        MockFile mockFile = new MockFile("");
        Path path = mockFile.toPath();
        assertTrue(visitor.accept(path, null));
    }

    @Test(timeout = 4000)
    public void testUpdateDirCounter() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        CountingPathVisitor visitor = builder.getUnchecked();
        MockFile mockFile = new MockFile("pathCounters", "pathCounters");
        Path path = mockFile.toPath();
        visitor.updateDirCounter(path, null);
    }

    @Test(timeout = 4000)
    public void testPostVisitDirectoryAfterException() {
        CountingPathVisitor visitor = CleaningPathVisitor.withBigIntegerCounters();
        MockIOException exception = new MockIOException();
        FileVisitResult result = visitor.postVisitDirectory(null, exception);
        assertEquals(FileVisitResult.CONTINUE, result);
    }

    @Test(timeout = 4000)
    public void testUpdateFileCountersWithNullThrowsNPE() {
        CountingPathVisitor visitor = CountingPathVisitor.withBigIntegerCounters();
        try {
            visitor.updateFileCounters(null, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    // ===========================================================
    // = AccumulatorPathVisitor Tests                            =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testAccumulatorUpdateFileCounters() throws Throwable {
        AccumulatorPathVisitor.Builder builder = new AccumulatorPathVisitor.Builder();
        AccumulatorPathVisitor visitor = builder.get();
        MockFile mockFile = new MockFile("");
        Path path = mockFile.toPath();
        BasicFileAttributes attrs = mock(BasicFileAttributes.class);
        doReturn(0L).when(attrs).size();
        visitor.updateFileCounters(path, attrs);
    }

    @Test(timeout = 4000)
    public void testAccumulatorAcceptWithNullAttributes() {
        AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withBigIntegerCounters();
        MockFile mockFile = new MockFile("96UM\"T>:Dps");
        Path path = mockFile.toPath();
        assertFalse(visitor.accept(path, null));
    }

    @Test(timeout = 4000)
    public void testAccumulatorPreVisitDirectorySkip() {
        SuffixFileFilter filter = new SuffixFileFilter("org.apache.commons.io.file.CountingPathVisitor");
        AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(filter, filter);
        FileVisitResult result = visitor.preVisitDirectory(null, null);
        assertEquals(FileVisitResult.SKIP_SUBTREE, result);
    }

    @Test(timeout = 4000)
    public void testAccumulatorToString() {
        AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withBigIntegerCounters();
        assertEquals("0 files, 0 directories, 0 bytes", visitor.toString());
    }

    @Test(timeout = 4000)
    public void testAccumulatorGetPathCounters() {
        AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withBigIntegerCounters(null, null);
        assertNotNull(visitor.getPathCounters());
    }

    // ===========================================================
    // = Exception Handling Tests                                =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testVisitFileThrowsNPE() throws Throwable {
        CountingPathVisitor visitor = CountingPathVisitor.withLongCounters();
        MockFile mockFile = new MockFile("");
        Path path = mockFile.toPath();
        try {
            visitor.visitFile(path, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testDeletingVisitorThrowsIOException() {
        Counters.PathCounters pathCounters = CountingPathVisitor.defaultPathCounters();
        DeleteOption[] options = new DeleteOption[3];
        options[2] = StandardDeleteOption.OVERRIDE_READ_ONLY;
        DeletingPathVisitor visitor = new DeletingPathVisitor(pathCounters, options, new String[0]);
        MockFile mockFile = new MockFile("");
        Path path = mockFile.toPath();
        
        try {
            visitor.visitFile(path, null);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("DOS or POSIX file operations not available"));
        }
    }

    @Test(timeout = 4000)
    public void testPostVisitDirectoryThrowsNoSuchFileException() {
        CountingPathVisitor.Builder builder = new CountingPathVisitor.Builder();
        Counters.PathCounters pathCounters = builder.getPathCounters();
        String[] patterns = {"hCUJ&KIcnhn", "*Qus;#HzV)I)", "&V8coOO1NH$"};
        DeletingPathVisitor visitor = new DeletingPathVisitor(pathCounters, patterns);
        File tempFile = MockFile.createTempFile("-i8e'2;3AOg#yY!", "fileFilter");
        Path path = tempFile.toPath();
        MockIOException mockException = new MockIOException();
        
        try {
            visitor.postVisitDirectory(path, mockException);
            fail("Expected NoSuchFileException");
        } catch (NoSuchFileException e) {
            // Expected
        }
    }

    // ===========================================================
    // = Edge Case Tests                                         =
    // ===========================================================
    
    @Test(timeout = 4000)
    public void testEqualsSameInstance() {
        CountingPathVisitor visitor = CountingPathVisitor.withLongCounters();
        assertTrue(visitor.equals(visitor));
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentTypes() {
        AccumulatorPathVisitor visitor1 = AccumulatorPathVisitor.withBigIntegerCounters();
        CountingPathVisitor visitor2 = CleaningPathVisitor.withBigIntegerCounters();
        assertFalse(visitor2.equals(visitor1));
    }

    @Test(timeout = 4000)
    public void testHashCode() {
        CountingPathVisitor visitor = CountingPathVisitor.withLongCounters();
        visitor.hashCode();
    }
}