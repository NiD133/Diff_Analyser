package org.locationtech.spatial4j.context;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.locationtech.spatial4j.io.PolyshapeReader;
import org.locationtech.spatial4j.shape.ShapeFactory;

// Note: The class name and runner suggest this test was auto-generated by EvoSuite.
// For better maintainability, it could be renamed to a more conventional 'SpatialContextFactoryTest'.
public class SpatialContextFactory_ESTestTest2 extends SpatialContextFactory_ESTest_scaffolding {

    /**
     * Tests that makeSpatialContext throws a RuntimeException when the 'writers'
     * configuration property contains an invalid, unresolvable class name.
     */
    @Test(timeout = 4000)
    public void makeSpatialContext_withInvalidWriterClass_shouldThrowRuntimeException() {
        // Arrange: Create a configuration where the 'writers' list is malformed.
        // The value ", worldBounds=" will be split by a comma, resulting in an empty string
        // for the first class name. An empty string is not a valid class name and cannot be loaded.
        Map<String, String> config = new HashMap<>();
        config.put("writers", ", worldBounds=");

        ClassLoader classLoader = ClassLoader.getSystemClassLoader();

        // Act & Assert
        try {
            SpatialContextFactory.makeSpatialContext(config, classLoader);
            fail("Expected a RuntimeException because the 'writers' list contains an invalid class name.");
        } catch (RuntimeException e) {
            // The factory should throw an exception indicating it couldn't find the specified class.
            String expectedMessageFragment = "Unable to find format class";
            assertTrue(
                "Exception message should indicate failure to find the class. Got: " + e.getMessage(),
                e.getMessage().contains(expectedMessageFragment)
            );
        }
    }
}