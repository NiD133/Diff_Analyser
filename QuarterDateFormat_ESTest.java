/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:44:30 GMT 2025
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.axis.QuarterDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class QuarterDateFormat_ESTest extends QuarterDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testEquals_differentQuarterSymbolsAndQuarterFirst_instance1NotEqualToInstance2() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat regularFormat = new QuarterDateFormat(defaultTimeZone);
      QuarterDateFormat romanFormat = new QuarterDateFormat(
          defaultTimeZone, 
          regularFormat.ROMAN_QUARTERS, 
          true
      );
      
      boolean areEqual = romanFormat.equals(regularFormat);
      assertFalse(areEqual);
  }

  @Test(timeout = 4000)
  public void testFormat_customTimeZoneAndQuarterSymbols_stringBufferLengthAsExpected() throws Throwable {
      // Create custom time zone and quarter symbols
      SimpleTimeZone customTimeZone = new SimpleTimeZone(712, "");
      String[] customQuarterSymbols = new String[1];
      QuarterDateFormat formatter = new QuarterDateFormat(customTimeZone, customQuarterSymbols);
      
      // Create a mock date (year=-1, month=3, day=-1, hour=-1, minute=1943, second=-2263)
      MockDate mockDate = new MockDate((-1), 3, (-1), (-1), 1943, (-2263));
      
      // Mock field position
      Format.Field mockField = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition = new FieldPosition(mockField, 712);
      
      StringBuffer buffer = new StringBuffer("{F@~<xQ@d0");
      formatter.format(mockDate, buffer, fieldPosition);
      
      assertEquals(19, buffer.length());
  }

  @Test(timeout = 4000)
  public void testFormat_romanQuartersAndQuarterFirst_returnsExpectedString() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat regularFormat = new QuarterDateFormat(defaultTimeZone);
      QuarterDateFormat romanFormat = new QuarterDateFormat(
          defaultTimeZone, 
          regularFormat.ROMAN_QUARTERS, 
          true
      );
      
      // Create a mock date (year=-2355, month=0, day=2123, hour=584, minute=0, second=-797)
      MockDate mockDate = new MockDate((-2355), 0, 2123, 584, 0, (-797));
      
      StringWriter writer = new StringWriter();
      StringBuffer buffer = writer.getBuffer();
      romanFormat.format(mockDate, buffer, (FieldPosition) null);
      
      assertEquals("IV 451", buffer.toString());
      assertEquals("IV 451", writer.toString());
  }

  @Test(timeout = 4000)
  public void testFormat_nullStringBuffer_throwsNullPointerException() throws Throwable {
      SimpleTimeZone customTimeZone = new SimpleTimeZone(4, "");
      QuarterDateFormat formatter = new QuarterDateFormat(customTimeZone);
      MockDate mockDate = new MockDate(1L);
      FieldPosition fieldPosition = new FieldPosition(80);
      
      try {
          formatter.format(mockDate, (StringBuffer) null, fieldPosition);
          fail("Expected NullPointerException");
      } catch (NullPointerException e) {
          // Expected due to null StringBuffer
      }
  }

  @Test(timeout = 4000)
  public void testEquals_afterSettingNumberFormatToNull_throwsNullPointerException() throws Throwable {
      QuarterDateFormat formatter1 = new QuarterDateFormat();
      formatter1.setNumberFormat(null); // Makes superclass methods vulnerable to NPE
      
      QuarterDateFormat formatter2 = new QuarterDateFormat();
      
      try {
          formatter1.equals(formatter2);
          fail("Expected NullPointerException");
      } catch (NullPointerException e) {
          // Expected from DateFormat.equals
      }
  }

  @Test(timeout = 4000)
  public void testConstructor_nullTimeZoneWithQuarterSymbolsAndQuarterFirst_throwsIllegalArgumentException() {
      String[] quarterSymbols = new String[1];
      
      try {
          new QuarterDateFormat(null, quarterSymbols, true);
          fail("Expected IllegalArgumentException for null time zone");
      } catch (IllegalArgumentException e) {
          assertEquals("Null 'zone' argument.", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testConstructor_nullTimeZoneWithQuarterSymbols_throwsIllegalArgumentException() {
      String[] quarterSymbols = new String[1];
      
      try {
          new QuarterDateFormat(null, quarterSymbols);
          fail("Expected IllegalArgumentException for null time zone");
      } catch (IllegalArgumentException e) {
          assertEquals("Null 'zone' argument.", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testEquals_sameConfiguration_returnsTrue() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat formatter1 = new QuarterDateFormat(defaultTimeZone);
      QuarterDateFormat formatter2 = new QuarterDateFormat(defaultTimeZone);
      
      assertTrue(formatter1.equals(formatter2));
  }

  @Test(timeout = 4000)
  public void testEquals_arbitraryObject_returnsFalse() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat formatter = new QuarterDateFormat(defaultTimeZone);
      Object otherObject = new Object();
      
      assertFalse(formatter.equals(otherObject));
  }

  @Test(timeout = 4000)
  public void testEquals_sameInstance_returnsTrue() throws Throwable {
      QuarterDateFormat formatter = new QuarterDateFormat();
      assertTrue(formatter.equals(formatter));
  }

  @Test(timeout = 4000)
  public void testEquals_differentQuarterSymbolsAndQuarterFirst_instance2NotEqualToInstance1() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat regularFormat = new QuarterDateFormat(defaultTimeZone);
      QuarterDateFormat romanFormat = new QuarterDateFormat(
          defaultTimeZone, 
          regularFormat.ROMAN_QUARTERS, 
          true
      );
      
      boolean areEqual = regularFormat.equals(romanFormat);
      assertFalse(areEqual);
  }

  @Test(timeout = 4000)
  public void testFormat_emptyQuarterSymbols_throwsArrayIndexOutOfBoundsException() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      String[] emptyQuarterSymbols = new String[0];
      QuarterDateFormat formatter = new QuarterDateFormat(defaultTimeZone, emptyQuarterSymbols, true);
      
      MockDate currentDate = new MockDate();
      FieldPosition fieldPosition = new FieldPosition(-1375);
      
      try {
          formatter.format(currentDate, (StringBuffer) null, fieldPosition);
          fail("Expected ArrayIndexOutOfBoundsException");
      } catch (ArrayIndexOutOfBoundsException e) {
          assertEquals("Index 0 out of bounds for length 0", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testFormat_specificDate_returnsExpectedString() throws Throwable {
      TimeZone defaultTimeZone = TimeZone.getDefault();
      QuarterDateFormat formatter = new QuarterDateFormat(defaultTimeZone);
      
      // Create a mock date (year=-2355, month=0, day=2123, hour=584, minute=0, second=-797)
      MockDate mockDate = new MockDate((-2355), 0, 2123, 584, 0, (-797));
      
      StringWriter writer = new StringWriter();
      StringBuffer buffer = writer.getBuffer();
      formatter.format(mockDate, buffer, (FieldPosition) null);
      
      assertEquals("451 4", buffer.toString());
      assertEquals(5, buffer.length());
  }

  @Test(timeout = 4000)
  public void testParse_invalidString_returnsNull() {
      QuarterDateFormat formatter = new QuarterDateFormat();
      Date parsedDate = formatter.parse(" ", (ParsePosition) null);
      assertNull(parsedDate);
  }

  @Test(timeout = 4000)
  public void testConstructor_nullTimeZone_throwsIllegalArgumentException() {
      try {
          new QuarterDateFormat(null);
          fail("Expected IllegalArgumentException for null time zone");
      } catch (IllegalArgumentException e) {
          assertEquals("Null 'zone' argument.", e.getMessage());
      }
  }
}