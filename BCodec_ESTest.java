/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 20:24:05 GMT 2025
 */

package org.apache.commons.codec.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.net.BCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
) 
public class BCodec_ESTest extends BCodec_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullCharsetThrowsException() {
        new BCodec((Charset) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullCharsetAndStrictPolicyThrowsException() {
        new BCodec((Charset) null, CodecPolicy.STRICT);
    }

    @Test(timeout = 4000, expected = UnsupportedCharsetException.class)
    public void testConstructorWithUnsupportedCharsetThrowsException() {
        new BCodec("p-Ubb");
    }

    @Test(timeout = 4000, expected = IllegalCharsetNameException.class)
    public void testConstructorWithInvalidCharsetNameThrowsException() {
        new BCodec("encodeTable must have exactly 64 entries.");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testConstructorWithNullCharsetNameThrowsException() {
        new BCodec((String) null);
    }

    // Getter Tests
    @Test(timeout = 4000)
    public void testGetEncodingReturnsB() {
        BCodec bCodec = new BCodec();
        assertEquals("B", bCodec.getEncoding());
    }

    @Test(timeout = 4000)
    public void testIsStrictDecodingReturnsTrueWhenStrictPolicy() {
        Charset charset = Charset.defaultCharset();
        BCodec bCodec = new BCodec(charset, CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }

    @Test(timeout = 4000)
    public void testIsStrictDecodingReturnsFalseByDefault() {
        BCodec bCodec = new BCodec();
        assertFalse(bCodec.isStrictDecoding());
    }

    // Encoding Tests
    @Test(timeout = 4000)
    public void testEncodeWithNullInputReturnsNull() {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.encode((String) null));
        assertNull(bCodec.encode((String) null, (String) null));
        assertNull(bCodec.encode((String) null, Charset.defaultCharset()));
    }

    @Test(timeout = 4000)
    public void testEncodeWithValidString() {
        BCodec bCodec = new BCodec();
        String encoded = bCodec.encode("^QOTD7,4PZ$(<r", Charset.defaultCharset());
        assertEquals("=?UTF-8?B?XlFPVEQ3LDRQWiQoPHI=?=", encoded);
    }

    @Test(timeout = 4000)
    public void testEncodeWithGivenCharset() {
        BCodec bCodec = new BCodec("l9");
        assertEquals("=?ISO-8859-15?B?bDk=?=", bCodec.encode("l9"));
        assertEquals("=?ISO-8859-15?B?bDk=?=", bCodec.encode("l9", "l9"));
    }

    @Test(timeout = 4000)
    public void testEncodeObjectHandlesString() {
        BCodec bCodec = new BCodec();
        Object result = bCodec.encode((Object) " encoded content");
        assertEquals("=?UTF-8?B?IGVuY29kZWQgY29udGVudA==?=", result);
    }

    @Test(timeout = 4000)
    public void testEncodeObjectWithNullReturnsNull() {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.encode((Object) null));
    }

    @Test(timeout = 4000, expected = EncoderException.class)
    public void testEncodeObjectWithInvalidTypeThrowsException() throws Exception {
        BCodec bCodec = new BCodec();
        bCodec.encode((Object) bCodec);
    }

    // Decoding Tests
    @Test(timeout = 4000)
    public void testDecodeWithNullInputReturnsNull() {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.decode((String) null));
        assertNull(bCodec.decode((Object) null));
    }

    @Test(timeout = 4000)
    public void testDecodeEmptyStringReturnsEmpty() {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        assertEquals("", bCodec.decode("=?UTF-8?B??="));
    }

    @Test(timeout = 4000)
    public void testDecodeValidContent() {
        BCodec bCodec = new BCodec();
        assertEquals(" encoded content", bCodec.decode("=?UTF-8?B?IGVuY29kZWQgY29udGVudA==?="));
    }

    @Test(timeout = 4000)
    public void testDecodeObjectWithEncodedString() {
        BCodec bCodec = new BCodec();
        Object result = bCodec.decode((Object) "=?UTF-8?B?LHcuLHAlKw==?=");
        assertEquals(",w.,p%+", result);
    }

    @Test(timeout = 4000, expected = DecoderException.class)
    public void testDecodeObjectWithInvalidTypeThrowsException() throws Exception {
        BCodec bCodec = new BCodec();
        bCodec.decode((Object) bCodec);
    }

    // Internal Method Tests
    @Test(timeout = 4000)
    public void testDoEncodingWithNullReturnsNull() {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.doEncoding(null));
    }

    @Test(timeout = 4000)
    public void testDoDecodingWithNullReturnsNull() {
        BCodec bCodec = new BCodec();
        assertNull(bCodec.doDecoding(null));
    }

    @Test(timeout = 4000)
    public void testDoEncodingProducesExpectedLength() {
        BCodec bCodec = new BCodec(Charset.defaultCharset());
        byte[] input = new byte[7];
        assertEquals(12, bCodec.doEncoding(input).length);
    }

    @Test(timeout = 4000)
    public void testDoDecodingHandlesSpecificBytePattern() {
        BCodec bCodec = new BCodec();
        byte[] input = new byte[7];
        input[0] = (byte) 52;
        input[6] = (byte) 75;
        assertEquals(1, bCodec.doDecoding(input).length);
    }

    // Error Handling Tests
    @Test(timeout = 4000, expected = EncoderException.class)
    public void testEncodeWithInvalidCharsetNameThrowsException() throws Exception {
        BCodec bCodec = new BCodec();
        bCodec.encode("B", "B");
    }

    @Test(timeout = 4000, expected = IllegalCharsetNameException.class)
    public void testEncodeWithEmptyCharsetNameThrowsException() {
        BCodec bCodec = new BCodec();
        bCodec.encode("gK1C.|((", "");
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testEncodeWithNullCharsetNameThrowsException() {
        BCodec bCodec = new BCodec();
        bCodec.encode(" encoded content", (String) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testEncodeWithNullCharsetThrowsException() {
        BCodec bCodec = new BCodec();
        bCodec.encode(".LC", (Charset) null);
    }

    @Test(timeout = 4000, expected = DecoderException.class)
    public void testDecodeMalformedContentThrowsException() throws Exception {
        BCodec bCodec = new BCodec();
        bCodec.decode("WgJp7)");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testDoDecodingWithNullPolicyThrowsException() {
        BCodec bCodec = new BCodec(Charset.defaultCharset(), null);
        bCodec.doDecoding(new byte[22]);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testStrictDecodingWithInvalidTrailingCharacterThrowsException() {
        Charset charset = Charset.defaultCharset();
        BCodec bCodec = new BCodec(charset, CodecPolicy.STRICT);
        byte[] input = new byte[22];
        input[3] = (byte) 45;
        bCodec.doDecoding(input);
    }
}