/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:29:00 GMT 2025
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultIndenter_ESTest extends DefaultIndenter_ESTest_scaffolding {

  // Constructor Tests
  @Test(timeout = 4000)
  public void testConstructor_NullArgumentsThrowsNPE()  {
      try {
        new DefaultIndenter(null, null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  // getEol() Tests
  @Test(timeout = 4000)
  public void testGetEol_DefaultInstance()  {
      DefaultIndenter defaultIndenter = new DefaultIndenter();
      assertEquals("\n", defaultIndenter.getEol());
  }

  @Test(timeout = 4000)
  public void testGetEol_EmptyString()  {
      DefaultIndenter indenter = new DefaultIndenter().withLinefeed("");
      assertEquals("", indenter.getEol());
  }

  @Test(timeout = 4000)
  public void testGetEol_NullWhenConstructedWithNull()  {
      DefaultIndenter indenter = new DefaultIndenter("*e/0*h`h7+", null);
      assertNull(indenter.getEol());
  }

  // getIndent() Tests
  @Test(timeout = 4000)
  public void testGetIndent_DefaultInstance()  {
      DefaultIndenter.SYSTEM_LINEFEED_INSTANCE.getIndent();
      DefaultIndenter defaultIndenter = new DefaultIndenter();
      assertEquals("\n", defaultIndenter.getEol());
  }

  @Test(timeout = 4000)
  public void testGetIndent_CustomInstance()  {
      DefaultIndenter indenter = new DefaultIndenter("", "As4M!C");
      indenter.getIndent();
      assertEquals("As4M!C", indenter.getEol());
  }

  // withLinefeed() Tests
  @Test(timeout = 4000)
  public void testWithLinefeed_UpdatesEol()  {
      DefaultIndenter original = new DefaultIndenter("", "As4M!C");
      DefaultIndenter updated = original.withLinefeed("JSON");
      assertEquals("JSON", updated.getEol());
  }

  @Test(timeout = 4000)
  public void testWithLinefeed_SameValueReturnsSameInstance()  {
      DefaultIndenter original = new DefaultIndenter();
      DefaultIndenter updated = original.withLinefeed("\n");
      assertSame(original, updated);
  }

  @Test(timeout = 4000)
  public void testWithLinefeed_NullThrowsNPE()  {
      DefaultIndenter indenter = new DefaultIndenter();
      try { 
        indenter.SYSTEM_LINEFEED_INSTANCE.withLinefeed(null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  // withIndent() Tests
  @Test(timeout = 4000)
  public void testWithIndent_SameValueReturnsSameInstance()  {
      DefaultIndenter original = new DefaultIndenter();
      DefaultIndenter updated = original.SYSTEM_LINEFEED_INSTANCE.withIndent("");
      DefaultIndenter updatedAgain = updated.withIndent("");
      assertSame(updatedAgain, updated);
  }

  @Test(timeout = 4000)
  public void testWithIndent_NullThrowsNPE()  {
      DefaultIndenter indenter = new DefaultIndenter();
      try { 
        indenter.withIndent(null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  // isInline() Test
  @Test(timeout = 4000)
  public void testIsInline_ReturnsFalse()  {
      DefaultIndenter indenter = new DefaultIndenter();
      assertFalse(indenter.isInline());
      assertEquals("\n", indenter.getEol());
  }

  // writeIndentation() Tests
  @Test(timeout = 4000)
  public void testWriteIndentation_ZeroLevelWritesEolOnly() throws Throwable {
      DefaultIndenter indenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
      JsonFactoryBuilder factoryBuilder = new JsonFactoryBuilder();
      JsonFactory factory = new JsonFactory(factoryBuilder);
      MockFile file = new MockFile("JSON", "a");
      JsonGenerator generator = factory.createGenerator(file, JsonEncoding.UTF32_BE);
      JsonGeneratorDelegate delegatedGenerator = new JsonGeneratorDelegate(generator, true);
      
      indenter.writeIndentation(delegatedGenerator, 0);
      
      assertEquals(1, delegatedGenerator.getOutputBuffered());
      assertEquals(1, generator.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_NegativeLevelWritesEolOnly() throws Throwable {
      DefaultIndenter indenter = new DefaultIndenter("", "As4M!C");
      JsonFactory factory = new JsonFactory();
      StringWriter writer = new StringWriter();
      JsonGenerator generator = factory.createGenerator(writer);
      
      indenter.writeIndentation(generator, -1909562014);
      
      assertEquals(6, generator.getOutputBuffered());
      assertEquals("As4M!C", indenter.getEol());
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_HighLevelWritesExpectedBytes() throws Throwable {
      DefaultIndenter base = new DefaultIndenter("", "");
      DefaultIndenter indenter = base.withIndent("M");
      
      // Setup generator with mocked context
      StreamReadConstraints readConstraints = StreamReadConstraints.defaults();
      StreamWriteConstraints writeConstraints = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorConfig = ErrorReportConfiguration.defaults();
      BufferRecycler recycler = new BufferRecycler(500, 1936);
      ContentReference contentRef = ContentReference.construct(true, base, 1, 16, errorConfig);
      IOContext context = new IOContext(readConstraints, writeConstraints, errorConfig, recycler, contentRef, true);
      StringWriter stringWriter = new StringWriter();
      WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(context, 806, null, stringWriter, 'Y');
      
      indenter.writeIndentation(generator, 2048);
      assertEquals(2048, generator.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_NullGeneratorThrowsNPE()  {
      DefaultIndenter indenter = new DefaultIndenter();
      try { 
        indenter.SYSTEM_LINEFEED_INSTANCE.writeIndentation(null, -110);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_InvalidLevelThrowsException()  {
      DefaultIndenter indenter = new DefaultIndenter();
      JsonFactory factory = new JsonFactory();
      MockFile file = new MockFile("\n");
      try {
        JsonGenerator generator = factory.createGenerator(file, JsonEncoding.UTF8);
        indenter.SYSTEM_LINEFEED_INSTANCE.writeIndentation(generator, 56319);
        fail("Expecting exception: Exception");
      } catch (Throwable e) {
         // Expected exception due to high indentation level
      }
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_ArrayIndexOutOfBounds()  {
      DefaultIndenter indenter = new DefaultIndenter("<", "=");
      // Setup generator with constrained buffer
      StreamReadConstraints readConstraints = StreamReadConstraints.defaults();
      StreamWriteConstraints writeConstraints = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorConfig = ErrorReportConfiguration.defaults();
      BufferRecycler recycler = new BufferRecycler();
      ContentReference contentRef = ContentReference.construct(true, "=", errorConfig);
      IOContext context = new IOContext(readConstraints, writeConstraints, errorConfig, recycler, contentRef, true);
      byte[] initialBuffer = new byte[4];
      ByteArrayBuilder builder = ByteArrayBuilder.fromInitial(initialBuffer, 0);
      UTF8JsonGenerator generator = new UTF8JsonGenerator(context, 2, null, builder, '\'', initialBuffer, 8, true);
      
      try { 
        indenter.SYSTEM_LINEFEED_INSTANCE.writeIndentation(generator, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
         // Expected due to small buffer
      }
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_SimulatedIOException() throws Throwable {
      DefaultIndenter indenter = new DefaultIndenter();
      EvoSuiteFile mockFile = new EvoSuiteFile("\n/JSON");
      FileSystemHandling.shouldThrowIOException(mockFile);
      
      JsonFactory factory = new JsonFactory();
      MockFile file = new MockFile("\n", "JSON");
      try {
        JsonGenerator generator = factory.createGenerator(file, JsonEncoding.UTF32_LE);
        indenter.SYSTEM_LINEFEED_INSTANCE.writeIndentation(generator, 56319);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void testWriteIndentation_InvalidLevelCausesIOException() throws Throwable {
      DefaultIndenter indenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
      JsonFactory factory = new JsonFactory();
      MockFile file = new MockFile("\n", "\n");
      MockFileOutputStream fileStream = new MockFileOutputStream(file, false);
      MockPrintStream printStream = new MockPrintStream(fileStream, true);
      JsonGenerator generator = factory.createGenerator(printStream);
      FilteringGeneratorDelegate filteredGenerator = new FilteringGeneratorDelegate(
          generator, TokenFilter.INCLUDE_ALL, TokenFilter.Inclusion.ONLY_INCLUDE_ALL, false
      );
      
      try { 
        indenter.writeIndentation(filteredGenerator, Integer.MAX_VALUE - 2);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }
}