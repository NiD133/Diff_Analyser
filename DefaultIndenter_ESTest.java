/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:29:00 GMT 2025
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultIndenter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultIndenter_ESTest extends DefaultIndenter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      MockFile mockFile0 = new MockFile("JSON", "a");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      defaultIndenter0.writeIndentation(jsonGeneratorDelegate0, 0);
      assertEquals(1, jsonGeneratorDelegate0.getOutputBuffered());
      assertEquals(1, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "As4M!C");
      DefaultIndenter defaultIndenter1 = defaultIndenter0.withLinefeed("JSON");
      assertEquals("JSON", defaultIndenter1.getEol());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "As4M!C");
      defaultIndenter0.getIndent();
      assertEquals("As4M!C", defaultIndenter0.getEol());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("*e/0*h`h7+", (String) null);
      String string0 = defaultIndenter0.getEol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      DefaultIndenter defaultIndenter1 = defaultIndenter0.withLinefeed("");
      String string0 = defaultIndenter1.getEol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("\n");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.writeIndentation(jsonGenerator0, 56319);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      // Undeclared exception!
      try { 
        defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.writeIndentation((JsonGenerator) null, (-110));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("<", "=");
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) "=", errorReportConfiguration0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      byte[] byteArray0 = new byte[4];
      ByteArrayBuilder byteArrayBuilder0 = ByteArrayBuilder.fromInitial(byteArray0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, byteArrayBuilder0, '\'', byteArray0, 8, true);
      // Undeclared exception!
      try { 
        defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.writeIndentation(uTF8JsonGenerator0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\n/JSON");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("\n", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.writeIndentation(jsonGenerator0, 56319);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.ONLY_INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, tokenFilter_Inclusion0, false);
      try { 
        defaultIndenter0.writeIndentation(filteringGeneratorDelegate0, 2147483645);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid 'offset' (0) and/or 'len' (-6) arguments for `char[]` of length 32
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      // Undeclared exception!
      try { 
        defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.withLinefeed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      // Undeclared exception!
      try { 
        defaultIndenter0.withIndent((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = null;
      try {
        defaultIndenter0 = new DefaultIndenter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.DefaultIndenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.getIndent();
      assertEquals("\n", defaultIndenter0.getEol());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "");
      DefaultIndenter defaultIndenter1 = defaultIndenter0.withIndent("M");
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler(500, 1936);
      ContentReference contentReference0 = ContentReference.construct(true, (Object) defaultIndenter0, 1, 16, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 806, (ObjectCodec) null, stringWriter0, 'Y');
      defaultIndenter1.writeIndentation(writerBasedJsonGenerator0, 2048);
      assertEquals(2048, writerBasedJsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter("", "As4M!C");
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      defaultIndenter0.writeIndentation(jsonGenerator0, (-1909562014));
      assertEquals(6, jsonGenerator0.getOutputBuffered());
      assertEquals("As4M!C", defaultIndenter0.getEol());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      DefaultIndenter defaultIndenter1 = defaultIndenter0.SYSTEM_LINEFEED_INSTANCE.withIndent("");
      DefaultIndenter defaultIndenter2 = defaultIndenter1.withIndent("");
      assertSame(defaultIndenter2, defaultIndenter1);
      assertEquals("\n", defaultIndenter2.getEol());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      DefaultIndenter defaultIndenter1 = defaultIndenter0.withLinefeed("\n");
      assertSame(defaultIndenter1, defaultIndenter0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      String string0 = defaultIndenter0.getEol();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultIndenter defaultIndenter0 = new DefaultIndenter();
      boolean boolean0 = defaultIndenter0.isInline();
      assertFalse(boolean0);
      assertEquals("\n", defaultIndenter0.getEol());
  }
}
