/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:39 GMT 2025
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.io.NumberOutput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberOutput_ESTest extends NumberOutput_ESTest_scaffolding {

    // ===========================================================
    // Tests for toString() methods
    // ===========================================================

    @Test(timeout = 4000)
    public void testToStringIntMinValue()  throws Throwable  {
        // Test toString with Integer.MIN_VALUE
        String result = NumberOutput.toString(Integer.MIN_VALUE);
        assertEquals("-2147483648", result);
    }

    @Test(timeout = 4000)
    public void testToStringIntMaxValue()  throws Throwable  {
        // Test toString with Integer.MAX_VALUE
        String result = NumberOutput.toString(Integer.MAX_VALUE);
        assertEquals("2147483647", result);
    }

    @Test(timeout = 4000)
    public void testToStringNegativeInt()  throws Throwable  {
        // Test toString with a negative integer
        String result = NumberOutput.toString(-11);
        assertEquals("-11", result);
    }

    @Test(timeout = 4000)
    public void testToStringPositiveInt()  throws Throwable  {
        // Test toString with a positive integer
        String result = NumberOutput.toString(1);
        assertEquals("1", result);
    }

    @Test(timeout = 4000)
    public void testToStringLongMinValue()  throws Throwable  {
        // Test toString with Long.MIN_VALUE
        String result = NumberOutput.toString(Long.MIN_VALUE);
        assertEquals("-9223372036854775808", result);
    }

    @Test(timeout = 4000)
    public void testToStringLongMaxValue()  throws Throwable  {
        // Test toString with Long.MAX_VALUE
        String result = NumberOutput.toString(2574686535532678828L);
        assertEquals("2574686535532678828", result);
    }

    @Test(timeout = 4000)
    public void testToStringDouble()  throws Throwable  {
        // Test toString with a double value
        String result = NumberOutput.toString(-1.0);
        assertEquals("-1.0", result);
    }

    @Test(timeout = 4000)
    public void testToStringDoubleScientificNotation()  throws Throwable  {
        // Test toString with a large double value requiring scientific notation
        String result = NumberOutput.toString(9.007199254740992E18, true);
        assertEquals("9.007199254740992E18", result);
    }

    @Test(timeout = 4000)
    public void testToStringFloat()  throws Throwable  {
        // Test toString with a float value
        String result = NumberOutput.toString(-310.243F);
        assertEquals("-310.243", result);
    }

    // ===========================================================
    // Tests for outputInt() with char[] buffer
    // ===========================================================

    @Test(timeout = 4000)
    public void testOutputIntToCharArrayZero()  throws Throwable  {
        // Test outputInt with zero value
        char[] buffer = new char[7];
        int offset = NumberOutput.outputInt(0, buffer, 1);
        assertEquals(2, offset);
        assertArrayEquals(new char[] {'\u0000', '0', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, buffer);
    }

    @Test(timeout = 4000)
    public void testOutputIntToCharArrayNullBuffer()  throws Throwable  {
        // Test outputInt with null buffer throws NullPointerException
        try {
            NumberOutput.outputInt(12, (char[]) null, 12);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void testOutputIntToCharArrayInvalidOffset()  throws Throwable  {
        // Test outputInt with negative offset throws ArrayIndexOutOfBoundsException
        char[] buffer = new char[3];
        try {
            NumberOutput.outputInt(-4804, buffer, 4118);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to invalid offset
        }
    }

    // ===========================================================
    // Tests for outputInt() with byte[] buffer
    // ===========================================================

    @Test(timeout = 4000)
    public void testOutputIntToByteArray()  throws Throwable  {
        // Test outputInt with a positive integer
        byte[] buffer = new byte[6];
        int offset = NumberOutput.outputInt(1497, buffer, 2);
        assertEquals(6, offset);
        assertArrayEquals(new byte[] {0, 0, '1', '4', '9', '7'}, buffer);
    }

    @Test(timeout = 4000)
    public void testOutputIntToByteArrayNullBuffer()  throws Throwable  {
        // Test outputInt with null buffer throws NullPointerException
        try {
            NumberOutput.outputInt(10, (byte[]) null, 199);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void testOutputIntToByteArrayInsufficientSize()  throws Throwable  {
        // Test outputInt with insufficient buffer size throws ArrayIndexOutOfBoundsException
        byte[] buffer = new byte[5];
        try {
            NumberOutput.outputInt(1000000, buffer, 0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to buffer overflow
        }
    }

    // ===========================================================
    // Tests for outputLong() with char[] buffer
    // ===========================================================

    @Test(timeout = 4000)
    public void testOutputLongToCharArray()  throws Throwable  {
        // Test outputLong with a positive long value
        char[] buffer = new char[14];
        int offset = NumberOutput.outputLong(2084322237L, buffer, 4);
        assertEquals(14, offset);
    }

    @Test(timeout = 4000)
    public void testOutputLongToCharArrayNegative()  throws Throwable  {
        // Test outputLong with a negative long value
        char[] buffer = new char[6];
        int offset = NumberOutput.outputLong(-3640L, buffer, 0);
        assertEquals(5, offset);
        assertArrayEquals(new char[] {'-', '3', '6', '4', '0', '\u0000'}, buffer);
    }

    @Test(timeout = 4000)
    public void testOutputLongToCharArrayNullBuffer()  throws Throwable  {
        // Test outputLong with null buffer throws NullPointerException
        try {
            NumberOutput.outputLong(10000000000000L, (char[]) null, -152);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void testOutputLongToCharArrayInsufficientSize()  throws Throwable  {
        // Test outputLong with insufficient buffer size throws ArrayIndexOutOfBoundsException
        char[] buffer = new char[7];
        try {
            NumberOutput.outputLong(274877907L, buffer, 0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to buffer overflow
        }
    }

    // ===========================================================
    // Tests for outputLong() with byte[] buffer
    // ===========================================================

    @Test(timeout = 4000)
    public void testOutputLongToByteArray()  throws Throwable  {
        // Test outputLong with a positive long value
        byte[] buffer = new byte[2];
        int offset = NumberOutput.outputLong(1L, buffer, 0);
        assertEquals(1, offset);
        assertArrayEquals(new byte[] {'1', 0}, buffer);
    }

    @Test(timeout = 4000)
    public void testOutputLongToByteArrayNullBuffer()  throws Throwable  {
        // Test outputLong with null buffer throws NullPointerException
        try {
            NumberOutput.outputLong(99L, (byte[]) null, 91);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
        }
    }

    @Test(timeout = 4000)
    public void testOutputLongToByteArrayNegativeOffset()  throws Throwable  {
        // Test outputLong with negative offset throws ArrayIndexOutOfBoundsException
        byte[] buffer = new byte[3];
        try {
            NumberOutput.outputLong(9164449253911987585L, buffer, -48);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to negative offset
        }
    }

    // ===========================================================
    // Tests for helper methods (divBy1000, notFinite)
    // ===========================================================

    @Test(timeout = 4000)
    public void testDivBy1000Zero()  throws Throwable  {
        // Test division by 1000 for zero
        int result = NumberOutput.divBy1000(0);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void testDivBy1000Negative()  throws Throwable  {
        // Test division by 1000 for a negative number
        int result = NumberOutput.divBy1000(-1652);
        assertEquals(67108862, result);
    }

    @Test(timeout = 4000)
    public void testNotFiniteFloat()  throws Throwable  {
        // Test notFinite with a finite float value
        boolean result = NumberOutput.notFinite(2650.0F);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testNotFiniteDouble()  throws Throwable  {
        // Test notFinite with a finite double value
        boolean result = NumberOutput.notFinite(-128.0);
        assertFalse(result);
    }

    // ===========================================================
    // Additional edge case tests for outputLong and outputInt
    // ===========================================================

    @Test(timeout = 4000)
    public void testOutputLongMinValueToCharArray()  throws Throwable  {
        // Test outputLong with Long.MIN_VALUE
        char[] buffer = new char[9];
        try {
            NumberOutput.outputLong(Long.MIN_VALUE, buffer, 0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to insufficient buffer size
        }
    }

    @Test(timeout = 4000)
    public void testOutputIntMinValueToByteArray()  throws Throwable  {
        // Test outputInt with Integer.MIN_VALUE
        byte[] buffer = new byte[23];
        try {
            NumberOutput.outputInt(Integer.MIN_VALUE, buffer, 45);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to high offset
        }
    }

    @Test(timeout = 4000)
    public void testOutputLongLargeValueToByteArray()  throws Throwable  {
        // Test outputLong with a large value
        byte[] buffer = new byte[8];
        try {
            NumberOutput.outputLong(10000000000008L, buffer, 1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected due to buffer overflow
        }
    }
}