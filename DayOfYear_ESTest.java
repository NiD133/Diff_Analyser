/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:49:16 GMT 2025
 */

package org.threeten.extra;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.Month;
import java.time.Year;
import java.time.YearMonth;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockYear;
import org.evosuite.runtime.mock.java.time.MockYearMonth;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import org.threeten.extra.DayOfYear;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DayOfYear_ESTest extends DayOfYear_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear1 = DayOfYear.now();
      boolean boolean0 = dayOfYear1.equals(dayOfYear0);
      assertFalse(boolean0);
      assertFalse(dayOfYear0.equals((Object)dayOfYear1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      dayOfYear0.range(chronoField0);
      assertEquals(45, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      TemporalQuery<ChronoField> temporalQuery0 = (TemporalQuery<ChronoField>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      dayOfYear0.query(temporalQuery0);
      assertEquals(46, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear1 = DayOfYear.now();
      int int0 = dayOfYear0.compareTo(dayOfYear1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(1);
      Clock clock0 = MockClock.systemDefaultZone();
      DayOfYear dayOfYear1 = DayOfYear.now(clock0);
      int int0 = dayOfYear0.compareTo(dayOfYear1);
      assertEquals((-44), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(1);
      Year year0 = MockYear.now();
      LocalDate localDate0 = dayOfYear0.atYear(year0);
      TemporalQuery<ChronoLocalDate> temporalQuery0 = (TemporalQuery<ChronoLocalDate>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn(localDate0).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      ChronoLocalDate chronoLocalDate0 = dayOfYear0.query(temporalQuery0);
      assertSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      LocalDate localDate0 = dayOfYear0.atYear((-2684));
      Temporal temporal0 = dayOfYear0.adjustInto(localDate0);
      assertEquals(45, dayOfYear0.getValue());
      assertSame(temporal0, localDate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      // Undeclared exception!
      try { 
        dayOfYear0.range(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: SecondOfMinute
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfYear.of(0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear: 0
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfYear.now((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        DayOfYear.now(clock1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.system(zoneOffset0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        DayOfYear.now(clock1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.ERA;
      // Undeclared exception!
      try { 
        dayOfYear0.get(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: Era
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      // Undeclared exception!
      try { 
        dayOfYear0.get((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfYear.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      DayOfYear dayOfYear0 = DayOfYear.now(zoneId0);
      // Undeclared exception!
      try { 
        dayOfYear0.compareTo((DayOfYear) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      // Undeclared exception!
      try { 
        dayOfYear0.atYear((Year) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // year
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(366);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      // Undeclared exception!
      try { 
        dayOfYear0.adjustInto(zonedDateTime0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 366' as '2014' is not a leap year
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      // Undeclared exception!
      try { 
        dayOfYear0.adjustInto((Temporal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      long long0 = dayOfYear0.getLong(chronoField0);
      assertEquals(45L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      dayOfYear0.isSupported(chronoField0);
      assertEquals(45, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      boolean boolean0 = dayOfYear0.isSupported(chronoField0);
      assertEquals(45, dayOfYear0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DayOfYear.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      // Undeclared exception!
      try { 
        dayOfYear0.range((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      String string0 = dayOfYear0.toString();
      assertEquals("DayOfYear:46", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      boolean boolean0 = dayOfYear0.equals(zoneOffset0);
      assertFalse(boolean0);
      assertEquals(46, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      boolean boolean0 = dayOfYear0.equals(dayOfYear0);
      assertTrue(boolean0);
      assertEquals(45, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear0 = DayOfYear.from(thaiBuddhistDate0);
      DayOfYear dayOfYear1 = DayOfYear.now();
      boolean boolean0 = dayOfYear0.equals(dayOfYear1);
      assertFalse(boolean0);
      assertFalse(dayOfYear1.equals((Object)dayOfYear0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      // Undeclared exception!
      try { 
        dayOfYear0.adjustInto(hijrahDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Adjustment only supported on ISO date-time
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      YearMonth yearMonth0 = MockYearMonth.now();
      // Undeclared exception!
      try { 
        dayOfYear0.adjustInto(yearMonth0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: DayOfYear
         //
         verifyException("java.time.YearMonth", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear0 = DayOfYear.from(thaiBuddhistDate0);
      // Undeclared exception!
      try { 
        dayOfYear0.query((TemporalQuery<ChronoField>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.TemporalAccessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(366);
      boolean boolean0 = dayOfYear0.isValidYear(366);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(366);
      boolean boolean0 = dayOfYear0.isValidYear(364);
      assertEquals(366, dayOfYear0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear0 = DayOfYear.from(thaiBuddhistDate0);
      boolean boolean0 = dayOfYear0.isValidYear(8);
      assertEquals(46, dayOfYear0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      // Undeclared exception!
      try { 
        dayOfYear0.getLong(chronoField0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        dayOfYear0.getLong((TemporalField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      int int0 = dayOfYear0.get(chronoField0);
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      // Undeclared exception!
      try { 
        DayOfYear.from(month0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain DayOfYear from TemporalAccessor: NOVEMBER of type java.time.Month
         //
         verifyException("org.threeten.extra.DayOfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      DayOfYear dayOfYear1 = DayOfYear.from(dayOfYear0);
      assertEquals(45, dayOfYear1.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(8, 8);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now((ZoneId) zoneOffset0);
      DayOfYear dayOfYear0 = DayOfYear.from(thaiBuddhistDate0);
      boolean boolean0 = dayOfYear0.isSupported((TemporalField) null);
      assertFalse(boolean0);
      assertEquals(46, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      int int0 = dayOfYear0.getValue();
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(1);
      dayOfYear0.hashCode();
      assertEquals(1, dayOfYear0.getValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      DayOfYear dayOfYear0 = DayOfYear.now((ZoneId) zoneOffset0);
      int int0 = dayOfYear0.compareTo(dayOfYear0);
      assertEquals(46, dayOfYear0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(366);
      // Undeclared exception!
      try { 
        dayOfYear0.atYear(366);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 366' as '366' is not a leap year
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.of(366);
      Year year0 = MockYear.of(366);
      // Undeclared exception!
      try { 
        dayOfYear0.atYear(year0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 366' as '366' is not a leap year
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DayOfYear dayOfYear0 = DayOfYear.now();
      // Undeclared exception!
      try { 
        MockYear.from(dayOfYear0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain Year from TemporalAccessor: DayOfYear:45 of type org.threeten.extra.DayOfYear
         //
         verifyException("java.time.Year", e);
      }
  }
}
