/*
 * This file was automatically generated by EvoSuite
 * Refactored for understandability
 */
package com.google.common.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.hash.Crc32cHashFunction;
import com.google.common.hash.Hasher;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class AbstractStreamingHasher_ESTest extends AbstractStreamingHasher_ESTest_scaffolding {

    // Tests for basic hashing operations
    @Test(timeout = 4000)
    public void putBytes_withByteBufferAfterPartialRead_returnsSameHasher() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        Charset charset = Charset.defaultCharset();
        ByteBuffer byteBuffer = charset.encode("maximum size was already set to %s");
        byteBuffer.getShort(); // Advance position
        Hasher result = hasher.putBytes(byteBuffer);
        assertSame(hasher, result);
    }

    @Test(timeout = 4000)
    public void putBytes_withPartialByteArray_returnsSameHasher() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        byte[] bytes = new byte[2];
        Hasher result = hasher.putBytes(bytes, 1, 1);
        assertSame(hasher, result);
    }

    @Test(timeout = 4000)
    public void putByte_withValidByte_returnsSameHasher() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        Hasher result = hasher.putByte((byte) -115);
        assertSame(hasher, result);
    }

    // Tests for buffer handling
    @Test(timeout = 4000)
    public void putBytes_withEmptyByteBuffer_returnsSameHasher() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer byteBuffer = ByteBuffer.allocate(23);
        Hasher result = hasher.putBytes(byteBuffer);
        assertSame(hasher, result);
    }

    // Tests for invalid operations after hash() is called
    @Test(timeout = 4000)
    public void putShort_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        assertThrows(BufferOverflowException.class, () -> hasher.putShort((short) 24366));
    }

    @Test(timeout = 4000)
    public void putLong_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        assertThrows(BufferOverflowException.class, () -> hasher.putLong(-1479L));
    }

    @Test(timeout = 4000)
    public void putInt_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        assertThrows(BufferOverflowException.class, () -> hasher.putInt(1101871998));
    }

    @Test(timeout = 4000)
    public void putChar_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        assertThrows(BufferOverflowException.class, () -> hasher.putChar('7'));
    }

    @Test(timeout = 4000)
    public void putBytes_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        byte[] bytes = new byte[2];
        assertThrows(BufferOverflowException.class, () -> hasher.putBytes(bytes, 1, 1));
    }

    @Test(timeout = 4000)
    public void putByte_afterHash_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.hash();
        assertThrows(BufferOverflowException.class, () -> hasher.putByte((byte) -115));
    }

    // Tests for invalid input parameters
    @Test(timeout = 4000)
    public void putBytes_withNullByteArray_throwsNullPointerException() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        assertThrows(NullPointerException.class, () -> hasher.putBytes(null, 703, 703));
    }

    @Test(timeout = 4000)
    public void putBytes_withNullByteBuffer_throwsNullPointerException() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        assertThrows(NullPointerException.class, () -> hasher.putBytes((ByteBuffer) null));
    }

    @Test(timeout = 4000)
    public void processRemaining_withNullByteBuffer_throwsNullPointerException() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        assertThrows(NullPointerException.class, () -> hasher.processRemaining(null));
    }

    // Tests for invalid operations after processing completes
    @Test(timeout = 4000)
    public void putShort_afterProcessing_throwsIllegalState() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer buffer = ByteBuffer.allocateDirect(2479);
        hasher.putBytes(buffer);
        hasher.processRemaining(buffer);
        assertThrows(IllegalStateException.class, () -> hasher.putShort((short) -648));
    }

    @Test(timeout = 4000)
    public void putChar_afterProcessing_throwsIllegalState() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer buffer = ByteBuffer.allocateDirect(2479);
        hasher.putBytes(buffer);
        hasher.processRemaining(buffer);
        assertThrows(IllegalStateException.class, () -> hasher.putChar('M'));
    }

    @Test(timeout = 4000)
    public void putInt_afterProcessing_throwsIllegalState() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer buffer = ByteBuffer.allocateDirect(13);
        hasher.putBytes(buffer);
        hasher.makeHash();
        assertThrows(IllegalStateException.class, () -> hasher.putInt(13));
    }

    @Test(timeout = 4000)
    public void putLong_afterProcessing_throwsIllegalState() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.makeHash();
        hasher.putLong(-4265267296055464877L);
        assertThrows(IllegalStateException.class, () -> hasher.putLong(2304L));
    }

    @Test(timeout = 4000)
    public void putBytes_afterProcessing_throwsIllegalState() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        hasher.makeHash();
        ByteBuffer buffer = ByteBuffer.allocateDirect(185);
        assertThrows(IllegalStateException.class, () -> hasher.putBytes(buffer));
    }

    // Tests for invalid operations after hash() with complex state
    @Test(timeout = 4000)
    public void putBytes_afterHashWithComplexState_throwsBufferOverflow() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        Charset charset = Charset.defaultCharset();
        ByteBuffer buffer = charset.encode("maximum size was already set to %s");
        hasher.putBytes(buffer);
        hasher.hash();
        byte[] bytes = new byte[2];
        assertThrows(BufferOverflowException.class, () -> hasher.putBytes(bytes, 1, 1));
    }

    // Tests for invalid range operations
    @Test(timeout = 4000)
    public void putBytes_withInvalidRange_throwsIndexOutOfBounds() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        byte[] bytes = new byte[3];
        assertThrows(IndexOutOfBoundsException.class, () -> hasher.putBytes(bytes, 0, 67));
    }

    // Note: The following tests are expected to throw exceptions that are handled by EvoSuite
    @Test(timeout = 4000)
    public void processRemaining_withLargeBuffer_throwsException() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer buffer = ByteBuffer.allocate(1317358741);
        assertThrows(Exception.class, () -> hasher.processRemaining(buffer));
    }

    @Test(timeout = 4000)
    public void putBytes_withVeryLargeDirectBuffer_throwsException() throws Throwable {
        Crc32cHashFunction.Crc32cHasher hasher = new Crc32cHashFunction.Crc32cHasher();
        ByteBuffer buffer = ByteBuffer.allocateDirect(1905808397);
        assertThrows(Exception.class, () -> hasher.putBytes(buffer));
    }
}