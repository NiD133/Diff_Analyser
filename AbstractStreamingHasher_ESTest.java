/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:00:05 GMT 2025
 */

package com.google.common.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.hash.Crc32cHashFunction;
import com.google.common.hash.Hasher;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractStreamingHasher_ESTest extends AbstractStreamingHasher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("maximum size was already set to %s");
      byteBuffer0.getShort();
      Hasher hasher0 = crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      assertSame(crc32cHashFunction_Crc32cHasher0, hasher0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes(byteArray0, 0, (int) (byte)67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putShort((short)24366);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2479);
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher1 = (Crc32cHashFunction.Crc32cHasher)crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      crc32cHashFunction_Crc32cHasher1.processRemaining(byteBuffer0);
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putShort((short) (-648));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putLong((-1479L));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.makeHash();
      crc32cHashFunction_Crc32cHasher0.putLong((-4265267296055464877L));
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putLong(2304L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putInt(1101871998);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(13);
      crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      crc32cHashFunction_Crc32cHasher0.makeHash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putInt(13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putChar('7');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2479);
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher1 = (Crc32cHashFunction.Crc32cHasher)crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      crc32cHashFunction_Crc32cHasher1.processRemaining(byteBuffer0);
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putChar('M');
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes(byteArray0, 1, 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes((byte[]) null, 703, 703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1905808397);
      // Undeclared exception!
      crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(80);
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.AbstractStreamingHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.makeHash();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(185);
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putByte((byte) (-115));
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1317358741);
      // Undeclared exception!
      crc32cHashFunction_Crc32cHasher0.processRemaining(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.processRemaining((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(23);
      Hasher hasher0 = crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      assertSame(crc32cHashFunction_Crc32cHasher0, hasher0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      crc32cHashFunction_Crc32cHasher0.hash();
      byte[] byteArray0 = new byte[0];
      crc32cHashFunction_Crc32cHasher0.putBytes(byteArray0);
      crc32cHashFunction_Crc32cHasher0.putBoolean(true);
      crc32cHashFunction_Crc32cHasher0.putChar('D');
      crc32cHashFunction_Crc32cHasher0.putInt(1347);
      crc32cHashFunction_Crc32cHasher0.putInt(7);
      crc32cHashFunction_Crc32cHasher0.putChar('D');
      crc32cHashFunction_Crc32cHasher0.putShort((short) (-32506));
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher0.putByte((byte)21);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The behavior of calling any method after calling hash() is undefined.
         //
         verifyException("com.google.common.hash.Crc32cHashFunction$Crc32cHasher", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("maximum size was already set to %s");
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher1 = (Crc32cHashFunction.Crc32cHasher)crc32cHashFunction_Crc32cHasher0.putBytes(byteBuffer0);
      crc32cHashFunction_Crc32cHasher0.hash();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        crc32cHashFunction_Crc32cHasher1.putBytes(byteArray0, 1, 1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      byte[] byteArray0 = new byte[2];
      Hasher hasher0 = crc32cHashFunction_Crc32cHasher0.putBytes(byteArray0, 1, 1);
      assertSame(hasher0, crc32cHashFunction_Crc32cHasher0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Crc32cHashFunction.Crc32cHasher crc32cHashFunction_Crc32cHasher0 = new Crc32cHashFunction.Crc32cHasher();
      Hasher hasher0 = crc32cHashFunction_Crc32cHasher0.putByte((byte) (-115));
      assertSame(hasher0, crc32cHashFunction_Crc32cHasher0);
  }
}
