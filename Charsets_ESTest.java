/*
 * This file was automatically generated by EvoSuite
 * Thu May 15 21:02:17 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.SortedMap;
import org.apache.commons.io.Charsets;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Charsets_ESTest extends Charsets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charsets.UTF_8;
      Charset charset1 = Charsets.toCharset((Charset) null, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charsets.toCharset((Charset) null);
      Charset charset1 = Charsets.toCharset(charset0, (Charset) null);
      assertEquals("UTF-8", charset1.toString());
      assertNotNull(charset1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      US_ASCII uS_ASCII0 = (US_ASCII)Charsets.US_ASCII;
      Charset charset0 = Charsets.toCharset((Charset) uS_ASCII0, (Charset) uS_ASCII0);
      assertEquals("US-ASCII", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charsets charsets0 = new Charsets();
      Charset charset0 = Charsets.toCharset(charsets0.US_ASCII);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("ISO-8859-1", charset0.name());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charsets.toCharset((String) null, (Charset) null);
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Charsets charsets0 = new Charsets();
      Charset charset0 = Charsets.toCharset((String) null, charsets0.US_ASCII);
      assertEquals("US-ASCII", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charsets.toCharset("L2");
      assertEquals("ISO-8859-2", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charsets.UTF_8;
      // Undeclared exception!
      try { 
        Charsets.toCharset("Tv&)_", charset0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Tv&)_
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Charsets.toCharset("?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charsets charsets0 = new Charsets();
      try { 
        Charsets.toCharset("org.apache.commons.io.Charsets", charsets0.UTF_8);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.Charsets
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charsets.toCharset((Charset) null, (Charset) null);
      assertNull(charset0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        Charsets.toCharset("org.apache.commons.io.serialization.ObjectStreamClassPredicate");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.io.serialization.ObjectStreamClassPredicate
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SortedMap<String, Charset> sortedMap0 = Charsets.requiredCharsets();
      assertFalse(sortedMap0.isEmpty());
  }
}
