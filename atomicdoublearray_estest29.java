package com.google.common.util.concurrent;

import static org.junit.Assert.assertThrows;

import java.util.function.DoubleBinaryOperator;
import org.junit.Test;

/*
 * The original test class name "AtomicDoubleArray_ESTestTest29" was generated by a tool.
 * A more conventional name would be "AtomicDoubleArrayTest".
 */
public class AtomicDoubleArray_ESTestTest29 { // Retaining original class name for context

    @Test
    public void getAndAccumulate_withNullAccumulator_shouldThrowNullPointerException() {
        // Arrange: Create an array and define a valid index. The accumulator function
        // is deliberately null to test the method's precondition check.
        AtomicDoubleArray array = new AtomicDoubleArray(5);
        int aValidIndex = 0;
        double aValue = 10.0;
        DoubleBinaryOperator nullAccumulator = null;

        // Act & Assert: Verify that calling getAndAccumulate with a null function
        // throws a NullPointerException. The assertThrows method clearly expresses
        // this expectation and pinpoints the exact call that should fail.
        assertThrows(
                NullPointerException.class,
                () -> array.getAndAccumulate(aValidIndex, aValue, nullAccumulator));
    }
}