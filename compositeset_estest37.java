package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class CompositeSet_ESTestTest37 extends CompositeSet_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
        assertNotNull(compositeSet0);
        boolean boolean0 = compositeSet0.isEmpty();
        assertTrue(boolean0);
        CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
        assertNotNull(compositeSet1);
        CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
        assertNotNull(compositeSet2);
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        Iterator<Integer> iterator0 = compositeSet2.iterator();
        assertNotNull(iterator0);
        assertNotSame(compositeSet1, compositeSet2);
        assertNotSame(compositeSet2, compositeSet1);
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        compositeSet2.clear();
        assertNotSame(compositeSet1, compositeSet2);
        assertNotSame(compositeSet2, compositeSet1);
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        Iterator<LinkedHashSet<Integer>> iterator1 = compositeSet0.iterator();
        assertNotNull(iterator1);
        CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(compositeSet_SetMutator0).addAll(any(org.apache.commons.collections4.set.CompositeSet.class), anyList(), anyCollection());
        compositeSet1.setMutator(compositeSet_SetMutator0);
        assertNotSame(compositeSet1, compositeSet2);
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
        assertNotNull(compositeSet3);
        assertTrue(compositeSet3.equals((Object) compositeSet0));
        compositeSet3.addComposited((Set<LinkedHashSet<Integer>>) compositeSet0, (Set<LinkedHashSet<Integer>>) compositeSet0);
        assertNotSame(compositeSet0, compositeSet3);
        assertNotSame(compositeSet3, compositeSet0);
        assertTrue(compositeSet0.equals((Object) compositeSet3));
        assertTrue(compositeSet3.equals((Object) compositeSet0));
        compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet3);
        assertNotSame(compositeSet0, compositeSet3);
        assertNotSame(compositeSet3, compositeSet0);
        Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
        assertNotNull(predicate0);
        EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
        assertNotNull(equalPredicate0);
        Predicate<Integer> predicate1 = FalsePredicate.falsePredicate();
        assertNotNull(predicate1);
        assertFalse(predicate1.equals((Object) predicate0));
        EqualPredicate<Integer> equalPredicate1 = new EqualPredicate<Integer>((Integer) null);
        assertNotNull(equalPredicate1);
        assertFalse(equalPredicate1.equals((Object) equalPredicate0));
        boolean boolean1 = compositeSet1.addAll(compositeSet2);
        assertNotSame(compositeSet1, compositeSet2);
        assertNotSame(compositeSet2, compositeSet1);
        assertTrue(boolean1 == boolean0);
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        assertTrue(boolean1);
        compositeSet2.removeComposited(compositeSet1);
        assertNotSame(compositeSet1, compositeSet2);
        assertNotSame(compositeSet2, compositeSet1);
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        int int0 = compositeSet2.size();
        assertNotSame(compositeSet1, compositeSet2);
        assertNotSame(compositeSet2, compositeSet1);
        assertFalse(compositeSet1.contains(int0));
        assertFalse(compositeSet2.contains(int0));
        assertTrue(compositeSet1.equals((Object) compositeSet2));
        assertTrue(compositeSet2.equals((Object) compositeSet1));
        assertEquals(0, int0);
    }
}
