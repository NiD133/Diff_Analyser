package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.parser.Parser;

// The original class name "NodeIterator_ESTestTest11" was generated by a tool.
// A more descriptive name would be "NodeIteratorTest".
public class NodeIterator_ESTestTest11 extends NodeIterator_ESTest_scaffolding {

    /**
     * Verifies that the restart() method resets the iterator to its initial state,
     * allowing traversal from the beginning again.
     */
    @Test
    public void restartResetsIteratorToBeginning() {
        // Arrange: Create a document and an iterator.
        Document document = Parser.parse("<div><p>Text</p></div>");
        NodeIterator<Node> iterator = NodeIterator.from(document);

        // To confirm the reset works, we first advance the iterator partway through the nodes.
        // The first node is the Document itself.
        assertTrue("Iterator should have a next node upon creation.", iterator.hasNext());
        assertSame("First node should be the document root.", document, iterator.next());

        // The second node is the <html> element.
        assertTrue("Iterator should still have nodes after the first call.", iterator.hasNext());
        Node htmlElement = iterator.next();
        assertEquals("html", htmlElement.nodeName());

        // Act: Restart the iterator from the same starting document node.
        iterator.restart(document);

        // Assert: The iterator is now back at the beginning. The next node should
        // be the Document again, not the <body> tag which would have been next.
        assertTrue("Iterator should have a next node after restart.", iterator.hasNext());
        Node nextNodeAfterRestart = iterator.next();
        assertSame("After restart, the iterator should return the start node again.", document, nextNodeAfterRestart);
    }
}