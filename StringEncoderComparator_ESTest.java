/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 17 09:40:55 GMT 2025
 */

package org.apache.commons.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.StringEncoderComparator;
import org.apache.commons.codec.language.ColognePhonetic;
import org.apache.commons.codec.language.Soundex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringEncoderComparator_ESTest extends StringEncoderComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColognePhonetic colognePhonetic0 = new ColognePhonetic();
      StringEncoderComparator stringEncoderComparator0 = new StringEncoderComparator(colognePhonetic0);
      Object object0 = new Object();
      int int0 = stringEncoderComparator0.compare(object0, object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Soundex soundex0 = Soundex.US_ENGLISH_GENEALOGY;
      StringEncoderComparator stringEncoderComparator0 = new StringEncoderComparator(soundex0);
      int int0 = stringEncoderComparator0.compare("kj9), b3h<5ue'[f$j?", "K120");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringEncoderComparator stringEncoderComparator0 = new StringEncoderComparator();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringEncoderComparator0.compare(object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.StringEncoderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ColognePhonetic colognePhonetic0 = new ColognePhonetic();
      StringEncoderComparator stringEncoderComparator0 = new StringEncoderComparator(colognePhonetic0);
      int int0 = stringEncoderComparator0.compare("The character is not mapped: ", "[kF8mLHifO??@&h>");
      assertEquals((-2), int0);
  }
}
