/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability
 */
package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.jxpath.util.ClassLoaderUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
) 
public class ClassLoaderUtil_ESTest extends ClassLoaderUtil_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testGetClassWithNullClassNameThrowsNPE() {
        // Attempting to get class with null name should throw NullPointerException
        try {
            ClassLoaderUtil.getClass(null, false);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Verify exception contains expected message
            assertEquals("className", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetClassWithInvalidClassNameThrowsClassNotFound() {
        // Attempting to get non-existent class should throw ClassNotFoundException
        try {
            ClassLoaderUtil.getClass("UQR~q#m;I=WyC", true);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testGetClassWithInvalidArraySyntaxThrowsClassNotFound() {
        // Array syntax with invalid primitive type should throw ClassNotFoundException
        try {
            ClassLoaderUtil.getClass("9[]", false);
            fail("Expected ClassNotFoundException");
        } catch (ClassNotFoundException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testGetClassWithPrimitiveType() throws Exception {
        // Verify primitive type loading
        Class<?> result = ClassLoaderUtil.getClass("long", true);
        // Primitive long should be identified as primitive
        assertTrue(result.isPrimitive());
        // Primitive types are not arrays
        assertFalse(result.isArray());
    }

    @Test(timeout = 4000)
    public void testGetClassWithArrayType() throws Exception {
        // Verify array type loading
        Class<?> result = ClassLoaderUtil.getClass("short[]", false);
        // Should identify as array type
        assertTrue(result.isArray());
        // Component type should be primitive short
        assertEquals(short.class, result.getComponentType());
    }
}