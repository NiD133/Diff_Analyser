/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:59:28 GMT 2025
 */

package org.apache.commons.compress.harmony.unpack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.IdentityHashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SegmentConstantPoolArrayCache_ESTest extends SegmentConstantPoolArrayCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[5];
      IdentityHashMap<String[], SegmentConstantPoolArrayCache.CachedArray> identityHashMap0 = new IdentityHashMap<String[], SegmentConstantPoolArrayCache.CachedArray>();
      segmentConstantPoolArrayCache0.knownArrays = identityHashMap0;
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray1);
      identityHashMap0.put(stringArray0, segmentConstantPoolArrayCache_CachedArray0);
      assertEquals(5, segmentConstantPoolArrayCache_CachedArray0.lastKnownSize());
      
      boolean boolean0 = segmentConstantPoolArrayCache0.arrayIsCached(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[8];
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray0);
      segmentConstantPoolArrayCache_CachedArray0.cacheIndexes();
      assertEquals(8, segmentConstantPoolArrayCache_CachedArray0.lastKnownSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[2];
      segmentConstantPoolArrayCache0.lastArray = stringArray0;
      segmentConstantPoolArrayCache0.cacheArray(stringArray0);
      segmentConstantPoolArrayCache0.lastArray = stringArray0;
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, stringArray0[1]);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      segmentConstantPoolArrayCache0.lastIndexes = (List<Integer>) linkedList0;
      String[] stringArray0 = new String[2];
      segmentConstantPoolArrayCache0.lastArray = stringArray0;
      segmentConstantPoolArrayCache0.cacheArray(stringArray0);
      segmentConstantPoolArrayCache0.lastArray = stringArray0;
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, (String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[8];
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, "Trying to cache an array that already exists");
      assertNotNull(list0);
      
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray0);
      boolean boolean0 = segmentConstantPoolArrayCache0.arrayIsCached(segmentConstantPoolArrayCache_CachedArray0.primaryArray);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      // Undeclared exception!
      try { 
        segmentConstantPoolArrayCache0.indexesForArrayKey((String[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      // Undeclared exception!
      try { 
        segmentConstantPoolArrayCache0.cacheArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[4];
      segmentConstantPoolArrayCache0.knownArrays = null;
      // Undeclared exception!
      try { 
        segmentConstantPoolArrayCache0.arrayIsCached(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[2];
      segmentConstantPoolArrayCache0.lastArray = stringArray0;
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(segmentConstantPoolArrayCache0.lastArray);
      List<Integer> list0 = segmentConstantPoolArrayCache_CachedArray0.indexesForKey("Ui/_\")");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray0);
      List<Integer> list0 = segmentConstantPoolArrayCache_CachedArray0.indexesForKey("");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[8];
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray0);
      int int0 = segmentConstantPoolArrayCache_CachedArray0.lastKnownSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[1];
      segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, " CZW9XcT");
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, " CZW9XcT");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[9];
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, stringArray0[0]);
      assertEquals(9, list0.size());
      assertNotNull(list0);
      
      List<Integer> list1 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, "");
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[8];
      segmentConstantPoolArrayCache0.cacheArray(stringArray0);
      // Undeclared exception!
      try { 
        segmentConstantPoolArrayCache0.cacheArray(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to cache an array that already exists
         //
         verifyException("org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SegmentConstantPoolArrayCache segmentConstantPoolArrayCache0 = new SegmentConstantPoolArrayCache();
      String[] stringArray0 = new String[1];
      IdentityHashMap<String[], SegmentConstantPoolArrayCache.CachedArray> identityHashMap0 = segmentConstantPoolArrayCache0.knownArrays;
      String[] stringArray1 = new String[0];
      SegmentConstantPoolArrayCache.CachedArray segmentConstantPoolArrayCache_CachedArray0 = segmentConstantPoolArrayCache0.new CachedArray(stringArray1);
      identityHashMap0.put(stringArray0, segmentConstantPoolArrayCache_CachedArray0);
      assertEquals(0, segmentConstantPoolArrayCache_CachedArray0.lastKnownSize());
      
      List<Integer> list0 = segmentConstantPoolArrayCache0.indexesForArrayKey(stringArray0, stringArray0[0]);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }
}
