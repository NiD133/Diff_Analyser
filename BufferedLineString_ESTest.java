/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:36:06 GMT 2025
 */

package org.locationtech.spatial4j.shape.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.spatial4j.context.SpatialContext;
import org.locationtech.spatial4j.context.SpatialContextFactory;
import org.locationtech.spatial4j.distance.GeodesicSphereDistCalc;
import org.locationtech.spatial4j.shape.Point;
import org.locationtech.spatial4j.shape.Rectangle;
import org.locationtech.spatial4j.shape.Shape;
import org.locationtech.spatial4j.shape.ShapeCollection;
import org.locationtech.spatial4j.shape.SpatialRelation;
import org.locationtech.spatial4j.shape.impl.BufferedLine;
import org.locationtech.spatial4j.shape.impl.BufferedLineString;
import org.locationtech.spatial4j.shape.impl.PointImpl;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BufferedLineString_ESTest extends BufferedLineString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testBufferedLineStringWithDifferentBuffers() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = contextFactory.newSpatialContext();
      
      // Create a BufferedLineString with no points and a buffer of 1071.39772
      BufferedLineString lineString1 = new BufferedLineString(points, 1071.39772, false, context);
      
      // Get the center point of the line string and add it to the list
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString with the same points but different buffer
      BufferedLineString lineString2 = new BufferedLineString(points, 1071.39772, context);
      
      // Check the hash code and equality of the two line strings
      lineString2.hashCode();
      assertEquals(1, points.size());
      assertFalse(lineString2.equals((Object)lineString1));
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringWithNegativeBuffer() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context using a factory and a class loader
      HashMap<String, String> config = new HashMap<>();
      ClassLoader classLoader = ClassLoader.getSystemClassLoader();
      SpatialContext context = SpatialContextFactory.makeSpatialContext(config, classLoader);
      
      // Create a BufferedLineString with a negative buffer
      BufferedLineString lineString = new BufferedLineString(points, -1498.3962, false, context);
      
      // Check the buffer value
      lineString.hashCode();
      assertEquals(-1498.3962, lineString.getBuf(), 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringEquality() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context using a factory and a class loader
      HashMap<String, String> config = new HashMap<>();
      ClassLoader classLoader = ClassLoader.getSystemClassLoader();
      SpatialContext context = SpatialContextFactory.makeSpatialContext(config, classLoader);
      
      // Create two BufferedLineStrings with different buffers
      BufferedLineString lineString1 = new BufferedLineString(points, 0.0, context);
      BufferedLineString lineString2 = new BufferedLineString(points, 1114.712856653245, context);
      
      // Check the equality of the two line strings
      boolean areEqual = lineString2.equals(lineString1);
      assertFalse(areEqual);
      assertFalse(lineString1.equals((Object)lineString2));
      assertEquals(1114.712856653245, lineString2.getBuf(), 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringToString() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = new SpatialContext(contextFactory);
      
      // Create a BufferedLineString with a negative buffer and add the center point multiple times
      BufferedLineString lineString1 = new BufferedLineString(points, -2877.398196062, true, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      points.add(centerPoint);
      points.add(centerPoint);
      
      // Create another BufferedLineString with the same points but different buffer
      BufferedLineString lineString2 = new BufferedLineString(points, -2877.398196062, false, context);
      
      // Check the string representation of the line string
      String lineString2Str = lineString2.toString();
      assertEquals("BufferedLineString(buf=-2877.398196062 pts=NaN NaN, NaN NaN, NaN NaN)", lineString2Str);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringGetBuffered() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = contextFactory.newSpatialContext();
      
      // Create a BufferedLineString and add the center point
      BufferedLineString lineString1 = new BufferedLineString(points, 1071.39772, false, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString with a different buffer
      BufferedLineString lineString2 = new BufferedLineString(points, -647.75083997, true, context);
      
      // Get the buffered shape
      lineString2.getBuffered(Double.NaN, context);
      assertEquals(1, points.size());
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringBoundingBox() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Use the GEO spatial context
      SpatialContext context = SpatialContext.GEO;
      
      // Create a BufferedLineString
      BufferedLineString lineString = new BufferedLineString(points, 2689.299973955, false, context);
      
      // Get the bounding box of the line string
      Rectangle boundingBox = lineString.getBoundingBox();
      
      // Calculate a bounding box by distance from a point
      GeodesicSphereDistCalc.LawOfCosines distCalc = new GeodesicSphereDistCalc.LawOfCosines();
      PointImpl point = new PointImpl(2689.299973955, -462.55989283748, context);
      distCalc.calcBoxByDistFromPt(point, 2689.299973955, context, boundingBox);
      
      // Relate the line string to the bounding box
      lineString.relate(boundingBox);
      assertEquals(2689.299973955, lineString.getBuf(), 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringIsEmpty() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = contextFactory.newSpatialContext();
      
      // Create a BufferedLineString and add the center point
      BufferedLineString lineString1 = new BufferedLineString(points, 1071.39772, false, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString
      BufferedLineString lineString2 = new BufferedLineString(points, 1071.39772, context);
      
      // Check if the line string is empty
      boolean isEmpty = lineString2.isEmpty();
      assertEquals(1, points.size());
      assertFalse(isEmpty);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringHasArea() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = contextFactory.newSpatialContext();
      
      // Create a BufferedLineString and add the center point
      BufferedLineString lineString1 = new BufferedLineString(points, 1071.39772, false, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString
      BufferedLineString lineString2 = new BufferedLineString(points, 1071.39772, context);
      
      // Check if the line string has area
      boolean hasArea = lineString2.hasArea();
      assertEquals(1, points.size());
      assertTrue(hasArea);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringGetSegments() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = new SpatialContext(contextFactory);
      
      // Create a BufferedLineString and add the center point
      BufferedLineString lineString1 = new BufferedLineString(points, -2877.398196062, true, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString with a different buffer
      BufferedLineString lineString2 = new BufferedLineString(points, 1569.552036879501, false, context);
      
      // Get the segments of the line string
      ShapeCollection<BufferedLine> segments = lineString2.getSegments();
      assertEquals(1, points.size());
      assertEquals(1, segments.size());
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringGetBuffer() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = contextFactory.newSpatialContext();
      
      // Create a BufferedLineString with a buffer of 0.0
      BufferedLineString lineString = new BufferedLineString(points, 0.0, context);
      
      // Check the buffer value
      double buffer = lineString.getBuf();
      assertEquals(0.0, buffer, 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringGetPoints() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = new SpatialContext(contextFactory);
      
      // Create a BufferedLineString and add the center point
      BufferedLineString lineString1 = new BufferedLineString(points, -2877.398196062, true, context);
      Point centerPoint = lineString1.getCenter();
      points.add(centerPoint);
      
      // Create another BufferedLineString with a different buffer
      BufferedLineString lineString2 = new BufferedLineString(points, 1569.552036879501, false, context);
      
      // Get the points of the line string
      lineString2.getPoints();
      assertEquals(1, points.size());
      assertEquals(1569.552036879501, lineString2.getBuf(), 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringGetArea() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = new SpatialContext(contextFactory);
      
      // Create a BufferedLineString with a buffer of 0.017453292519943295
      BufferedLineString lineString = new BufferedLineString(points, 0.017453292519943295, true, context);
      
      // Get the area of the line string
      lineString.getArea(context);
      assertEquals(0.017453292519943295, lineString.getBuf(), 0.01);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringRelate() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContext spatialContext = SpatialContext.GEO;
      
      // Create a point and add it to the list
      PointImpl point = new PointImpl(16.128532143886176, 16.128532143886176, spatialContext);
      points.add(point);
      
      // Create a BufferedLineString
      BufferedLineString lineString = new BufferedLineString(points, 16.128532143886176, spatialContext);
      
      // Relate the line string to itself
      SpatialRelation relation = lineString.relate(lineString);
      assertEquals(1, points.size());
      assertEquals(SpatialRelation.WITHIN, relation);
  }

  @Test(timeout = 4000)
  public void testBufferedLineStringEquals() throws Throwable {
      // Create an empty list of points
      LinkedList<Point> points = new LinkedList<>();
      
      // Create a spatial context
      SpatialContextFactory contextFactory = new SpatialContextFactory();
      SpatialContext context = new SpatialContext(contextFactory);
      
      // Create a BufferedLineString
      BufferedLineString lineString = new BufferedLineString(points, -2877.398196062, true, context);
      
      // Check equality with a different object
      boolean isEqual = lineString.equals(contextFactory);
      assertEquals(-2877.398196062, lineString.getBuf(), 0.01);
      assertFalse(isEqual);
  }
}