/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 16:27:59 GMT 2025
 */

package com.itextpdf.text.xml.xmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.awt.AsianFontMapper;
import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.xml.xmp.XmpWriter;
import com.itextpdf.xmp.XMPMeta;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import javax.swing.DebugGraphics;
import javax.swing.DropMode;
import javax.swing.JTree;
import javax.swing.tree.TreeModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmpWriter_ESTest extends XmpWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      PdfName pdfName0 = PdfName.KEYWORDS;
      xmpWriter0.addDocInfoProperty(pdfName0, "VM}5IU\"rA,G:V\"]1D");
      assertFalse(pdfName0.isNull());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qTF+8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("s'E=)qP", "Prducer");
      HashMap<String, String> hashMap0 = asianFontMapper0.getAliases();
      XmpWriter xmpWriter0 = new XmpWriter(mockPrintStream0, hashMap0);
      xmpWriter0.setProperty("http://ns.adobe.com/pdf/1.3/", "UniGB-UCS2-H", "</rdf:Description></rdf:RDF>\n");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("SpaceBefore");
      XmpWriter xmpWriter0 = new XmpWriter(mockPrintStream0, "SpaceBefore", 6229);
      xmpWriter0.close();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, "rPSJQGnS", (-1800));
      xmpWriter0.appendOrderedArrayItem("http://ns.adobe.com/pdf/1.3/", "UTF-16BE", "http://ns.adobe.com/pdf/1.3/");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Z>h7mej", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DefaultFontMapper defaultFontMapper0 = new DefaultFontMapper();
      HashMap<String, String> hashMap0 = defaultFontMapper0.getAliases();
      XmpWriter xmpWriter0 = new XmpWriter(mockPrintStream0, hashMap0);
      xmpWriter0.addRdfDescription("", "");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "kZE9PB", (-1915564823));
      xmpWriter0.xmpMeta = null;
      XMPMeta xMPMeta0 = xmpWriter0.getXmpMeta();
      assertNull(xMPMeta0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "kZE9PB", (-1915564823));
      xmpWriter0.xmpMeta = null;
      // Undeclared exception!
      try { 
        xmpWriter0.setProperty("kZE9PB", "kZE9PB", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0);
      try { 
        xmpWriter0.serialize(pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error writing to the OutputStream
         //
         verifyException("com.itextpdf.xmp.impl.XMPSerializerRDF", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "3Y'G95KH", 10633);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1024);
      // Undeclared exception!
      xmpWriter0.serialize(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      xmpWriter0.xmpMeta = null;
      // Undeclared exception!
      try { 
        xmpWriter0.serialize((OutputStream) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The serializing service works onlywith the XMPMeta implementation of this library
         //
         verifyException("com.itextpdf.xmp.XMPMetaFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      // Undeclared exception!
      try { 
        xmpWriter0.serialize((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.xmp.impl.CountOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("({");
      XmpWriter xmpWriter0 = new XmpWriter(mockFileOutputStream0, "({", 10796);
      // Undeclared exception!
      xmpWriter0.close();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "tZE9PB", 2097159);
      xmpWriter0.xmpMeta = null;
      // Undeclared exception!
      try { 
        xmpWriter0.appendOrderedArrayItem("UTF-16BE", "UTF-16BE", "UTF-16");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      try { 
        xmpWriter0.appendArrayItem((String) null, (String) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Empty schema namespace URI
         //
         verifyException("com.itextpdf.xmp.impl.ParameterAsserts", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      xmpWriter0.xmpMeta = null;
      // Undeclared exception!
      try { 
        xmpWriter0.appendArrayItem("HW0?X1pNW.`syp5", "HW0?X1pNW.`syp5", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      try { 
        xmpWriter0.appendAlternateArrayItem("UTF-16", "UTF-16", "UTF-16");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unregistered schema namespace URI
         //
         verifyException("com.itextpdf.xmp.impl.xpath.XMPPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      xmpWriter0.xmpMeta = null;
      // Undeclared exception!
      try { 
        xmpWriter0.addRdfDescription("|A", "|A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      PdfName pdfName0 = PdfName.KEYWORDS;
      // Undeclared exception!
      try { 
        xmpWriter0.addDocInfoProperty(pdfName0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      XmpWriter xmpWriter0 = new XmpWriter(printStream0);
      PdfName pdfName0 = PdfName.CREATIONDATE;
      xmpWriter0.addDocInfoProperty(pdfName0, "W<t@4^");
      assertFalse(pdfName0.isIndirect());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfAction pdfAction0 = PdfAction.gotoRemotePage("zhcsaI", "", true, false);
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, pdfAction0);
      xmpWriter0.addDocInfoProperty(pdfAction0.PAGES, "PDF");
      assertEquals(2048, PdfAction.SUBMIT_EXCL_F_KEY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PdfDocument pdfDocument0 = new PdfDocument();
      PdfWriter pdfWriter0 = PdfWriter.getInstance((Document) pdfDocument0, (OutputStream) null);
      PdfDictionary pdfDictionary0 = pdfWriter0.getInfo();
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, pdfDictionary0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "Producer", (-1));
      xmpWriter0.addDocInfoProperty("Producer", "illegal.p.value");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "E9vMPB", (-3497));
      PdfName pdfName0 = PdfName.KEYWORDS;
      xmpWriter0.addDocInfoProperty(pdfName0, "");
      assertEquals(8, PdfObject.NULL);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "Subject", 158);
      xmpWriter0.addDocInfoProperty("Subject", "P:Z|Bx");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, hashMap0);
      PdfName pdfName0 = PdfName.TITLE;
      xmpWriter0.addDocInfoProperty(pdfName0, "UnicodeBig");
      assertEquals(4, PdfObject.NAME);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      xmpWriter0.close();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfAction pdfAction0 = PdfAction.gotoRemotePage("zhcsaI", "", true, false);
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, pdfAction0);
      try { 
        xmpWriter0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error writing to the OutputStream
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.put("subject", "subject");
      hashMap0.replaceAll(biFunction0);
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, hashMap0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, map0);
      try { 
        xmpWriter0.addRdfDescription("UTF-16BE", "com.itextpdf.text.io.FileChannelRandomAccessSource");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XML parsing failure
         //
         verifyException("com.itextpdf.text.xml.xmp.XmpWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, (Map<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, (PdfDictionary) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "UTF-16LE", (-1912709396));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "UTF-16", (-1912709396));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "UTF-16BE", (-4));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qTF+8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("s'E=)qP", "Prducer");
      HashMap<String, String> hashMap0 = asianFontMapper0.getAliases();
      XmpWriter xmpWriter0 = new XmpWriter(mockPrintStream0, hashMap0);
      xmpWriter0.appendArrayItem("http://ns.adobe.com/pdf/1.3/", "UniGB-UCS2-V", "UniGB-UCS2-V");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("UTF-16");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      xmpWriter0.serialize(objectOutputStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, "Producer", (-1));
      JTree jTree0 = new JTree((TreeModel) null);
      DropMode dropMode0 = jTree0.getDropMode();
      try { 
        xmpWriter0.setProperty((String) null, (String) null, dropMode0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Empty schema namespace URI
         //
         verifyException("com.itextpdf.xmp.impl.ParameterAsserts", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      XMPMeta xMPMeta0 = xmpWriter0.getXmpMeta();
      assertNull(xMPMeta0.getPacketHeader());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfAction pdfAction0 = PdfAction.gotoRemotePage("zhcsaI", "", true, false);
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, pdfAction0);
      xmpWriter0.setAbout("|+)1]{?0s");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfAction pdfAction0 = PdfAction.gotoRemotePage("zhcsaI", "", true, false);
      XmpWriter xmpWriter0 = new XmpWriter(pipedOutputStream0, pdfAction0);
      xmpWriter0.setReadOnly();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null);
      xmpWriter0.appendAlternateArrayItem("http://purl.org/dc/elements/1.1/", "UTF-16LE", "gBP]3L}");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      XmpWriter xmpWriter0 = new XmpWriter((OutputStream) null, hashMap0);
      try { 
        xmpWriter0.appendOrderedArrayItem("Y}161VLEk*R", "Y}161VLEk*R", "flags");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unregistered schema namespace URI
         //
         verifyException("com.itextpdf.xmp.impl.xpath.XMPPathParser", e);
      }
  }
}
