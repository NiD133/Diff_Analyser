/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 01:03:16 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import org.apache.commons.io.input.QueueInputStream;
import org.apache.commons.io.output.QueueOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QueueInputStream_ESTest extends QueueInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Duration duration0 = chronoUnit0.getDuration();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout(duration0);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setBlockingQueue(linkedBlockingDeque0);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      Integer integer0 = new Integer((-728));
      priorityBlockingQueue0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      byte[] byteArray0 = new byte[8];
      int int0 = queueInputStream0.read(byteArray0, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      byte[] byteArray0 = new byte[4];
      int int0 = queueInputStream0.read(byteArray0, 1, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      Integer integer0 = new Integer(0);
      priorityBlockingQueue0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      int int0 = queueInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      int int0 = queueInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      Integer integer0 = new Integer((-728));
      priorityBlockingQueue0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      long long0 = queueInputStream0.skip(4014L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      byte[] byteArray0 = new byte[8];
      int int0 = queueInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        queueInputStream0.read(byteArray0, 2005, 2005);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Range [2005, 2005 + 2005) out of bounds for length 0
         //
         verifyException("org.apache.commons.io.input.QueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        queueInputStream0.read(byteArray0, 1557, (-1357));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Range [1557, 1557 + -1357) out of bounds for length 19
         //
         verifyException("org.apache.commons.io.input.QueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        queueInputStream0.read(byteArray0, (-3123), (-3123));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Range [-3123, -3123 + -3123) out of bounds for length 0
         //
         verifyException("org.apache.commons.io.input.QueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      // Undeclared exception!
      try { 
        queueInputStream0.read((byte[]) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.QueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      Integer integer0 = new Integer((-728));
      priorityBlockingQueue0.add(integer0);
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      int int0 = queueInputStream0.read();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      Duration duration0 = Duration.ofHours((-2277L));
      // Undeclared exception!
      try { 
        queueInputStream_Builder0.setTimeout(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout must not be negative
         //
         verifyException("org.apache.commons.io.input.QueueInputStream$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = new QueueInputStream.Builder();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout((Duration) null);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      QueueInputStream queueInputStream0 = queueInputStream_Builder0.get();
      assertNotNull(queueInputStream0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream((BlockingQueue<Integer>) null);
      BlockingQueue<Integer> blockingQueue0 = queueInputStream0.getBlockingQueue();
      assertNotNull(blockingQueue0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QueueInputStream queueInputStream0 = new QueueInputStream();
      QueueOutputStream queueOutputStream0 = queueInputStream0.newQueueOutputStream();
      assertNotNull(queueOutputStream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PriorityBlockingQueue<Integer> priorityBlockingQueue0 = new PriorityBlockingQueue<Integer>();
      QueueInputStream queueInputStream0 = new QueueInputStream(priorityBlockingQueue0);
      Duration duration0 = queueInputStream0.getTimeout();
      QueueInputStream.Builder queueInputStream_Builder0 = QueueInputStream.builder();
      QueueInputStream.Builder queueInputStream_Builder1 = queueInputStream_Builder0.setTimeout(duration0);
      assertSame(queueInputStream_Builder0, queueInputStream_Builder1);
  }
}
