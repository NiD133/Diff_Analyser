package org.apache.commons.collections4.iterators;

import org.apache.commons.collections4.Transformer;
import org.junit.Test;

import java.util.NoSuchElementException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
 * Contains tests for {@link ObjectGraphIterator}.
 * This is a refactored version of a test originally generated by EvoSuite.
 */
public class ObjectGraphIterator_ESTestTest18 {

    /**
     * Tests that the iterator is exhausted after the transformer returns a single, non-iterator object.
     * <p>
     * The first call to next() should return the transformed object, and any subsequent call should
     * throw a NoSuchElementException.
     */
    @Test
    public void testIteratorIsExhaustedAfterTransformerReturnsSingleObject() {
        // Arrange: A root object and a transformer that simply returns the object itself.
        final Integer rootObject = 5;
        final Transformer<Integer, Integer> identityTransformer = input -> input;
        final ObjectGraphIterator<Integer> iterator = new ObjectGraphIterator<>(rootObject, identityTransformer);

        // Act & Assert: The first call to next() should succeed and return the root object.
        assertEquals("The first element should be the root object.", rootObject, iterator.next());

        // Act & Assert: The second call to next() should fail as the iterator is now exhausted.
        try {
            iterator.next();
            fail("A NoSuchElementException should have been thrown as the iterator is exhausted.");
        } catch (final NoSuchElementException e) {
            // This is the expected behavior.
            assertEquals("No more elements in the iteration", e.getMessage());
        }
    }
}