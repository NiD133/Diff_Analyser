/*
 * ============================================================================
 * JFreeChart : a chart library for the Java(tm) platform
 * ============================================================================
 *
 * (C) Copyright 2000-present, by David Gilbert and Contributors.
 *
 * Project Info:  https://www.jfree.org/jfreechart/index.html
 *
 * A refactored version of an auto-generated test suite for the
 * IntervalCategoryItemLabelGenerator class. The original was generated by
 * EvoSuite. This version is focused on clarity and maintainability.
 */
package org.jfree.chart.labels;

import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.Test;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

/**
 * A collection of tests for the {@link IntervalCategoryItemLabelGenerator} class.
 * These tests cover constructor validation, exception handling, and the correct
 * creation of item arrays for label generation.
 */
public class IntervalCategoryItemLabelGeneratorTest {

    //region Constructor Tests

    @Test
    public void defaultConstructorSetsDefaultLabelFormat() {
        // Arrange & Act
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();

        // Assert
        assertEquals(IntervalCategoryItemLabelGenerator.DEFAULT_LABEL_FORMAT_STRING, generator.getLabelFormat());
    }

    @Test(expected = IllegalArgumentException.class)
    public void constructorWithNullNumberFormatterThrowsException() {
        // Act
        new IntervalCategoryItemLabelGenerator("{0}", (NumberFormat) null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void constructorWithNullDateFormatterThrowsException() {
        // Act
        new IntervalCategoryItemLabelGenerator("{0}", (DateFormat) null);
    }

    //endregion

    //region Exception Handling Tests for createItemArray

    @Test(expected = IllegalArgumentException.class)
    public void createItemArrayWithNullDatasetThrowsException() {
        // Arrange
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();

        // Act
        generator.createItemArray(null, 0, 0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void createItemArrayWithInvalidRowThrowsException() {
        // Arrange
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();
        // A dataset with 0 rows and 0 columns
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(new double[0][0], new double[0][0]);

        // Act: Accessing any row in an empty dataset should throw
        generator.createItemArray(dataset, 0, 0);
    }

    @Test(expected = ArrayIndexOutOfBoundsException.class)
    public void createItemArrayWithInvalidColumnThrowsException() {
        // Arrange
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();
        // A dataset with 1 row but 0 columns
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(new double[1][0], new double[1][0]);

        // Act: Accessing column 0 in a dataset with no columns should throw
        generator.createItemArray(dataset, 0, 0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void createItemArrayWithNullValueThrowsException() {
        // Arrange
        // The generator will attempt to format a null value, causing an exception from the NumberFormat.
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();
        DefaultStatisticalCategoryDataset dataset = new DefaultStatisticalCategoryDataset();
        dataset.add(10.0, 1.0, "Row1", "Col1"); // This populates (0,0)
        // The value at (row=0, col=1) is implicitly null in this sparse dataset.

        // Act: Accessing (0,1) where the value is null. The default NumberFormat cannot format null.
        generator.createItemArray(dataset, 0, 1);
    }

    //endregion

    //region Item Array Creation Tests

    @Test
    public void createItemArrayWithDefaultConstructorReturnsCorrectArray() {
        // Arrange
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator();
        Number[][] startValues = {{1.1, 1.2}, {1.3, 1.4}};
        Number[][] endValues = {{2.1, 2.2}, {2.3, 2.4}};
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(startValues, endValues);

        // Act
        Object[] items = generator.createItemArray(dataset, 1, 0);

        // Assert
        // The value for DefaultIntervalCategoryDataset is the midpoint of start and end.
        // For (row=1, col=0): start=1.3, end=2.3, so value is (1.3+2.3)/2 = 1.8.
        NumberFormat nf = NumberFormat.getInstance();
        Object[] expected = {
                "Series 2",     // {0} Row key
                "Category 1",   // {1} Column key
                nf.format(1.8), // {2} Value (midpoint)
                nf.format(1.3), // {3} Start value
                nf.format(2.3)  // {4} End value
        };
        assertArrayEquals(expected, items);
    }

    @Test
    public void createItemArrayWithNumberFormatConstructorReturnsCorrectArray() {
        // Arrange
        DecimalFormat formatter = new DecimalFormat("0.00");
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator("{0}", formatter);
        Number[][] startValues = {{10.123}, {20.456}};
        Number[][] endValues = {{15.123}, {25.456}};
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(startValues, endValues);

        // Act
        Object[] items = generator.createItemArray(dataset, 0, 0);

        // Assert
        // Value is midpoint: (10.123 + 15.123) / 2 = 12.623
        Object[] expected = {
                "Series 1",   // {0} Row key
                "Category 1", // {1} Column key
                "12.62",      // {2} Value, formatted
                "10.12",      // {3} Start value, formatted
                "15.12"       // {4} End value, formatted
        };
        assertArrayEquals(expected, items);
    }

    @Test
    public void createItemArrayWithDateFormatConstructorReturnsCorrectArray() {
        // Arrange
        DateFormat formatter = DateFormat.getDateInstance(DateFormat.SHORT);
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator("{0}", formatter);

        // Use timestamps for data (milliseconds since epoch)
        long startTime = 1000L * 60 * 60 * 24; // Day 1
        long endTime = 1000L * 60 * 60 * 24 * 3;   // Day 3
        long valueTime = (startTime + endTime) / 2; // Day 2

        Number[][] startValues = {{startTime}};
        Number[][] endValues = {{endTime}};
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(startValues, endValues);

        // Act
        Object[] items = generator.createItemArray(dataset, 0, 0);

        // Assert
        Object[] expected = {
                "Series 1",                    // {0} Row key
                "Category 1",                  // {1} Column key
                formatter.format(new Date(valueTime)), // {2} Value, formatted as date
                formatter.format(new Date(startTime)), // {3} Start value, formatted as date
                formatter.format(new Date(endTime))    // {4} End value, formatted as date
        };
        assertArrayEquals(expected, items);
    }

    @Test
    public void createItemArrayWithNonIntervalDatasetReturnsPartiallyFilledArray() {
        // Arrange
        DateFormat formatter = DateFormat.getDateInstance(DateFormat.SHORT);
        IntervalCategoryItemLabelGenerator generator = new IntervalCategoryItemLabelGenerator("{0}", formatter);
        long timeValue = 1000L * 60 * 60 * 24 * 5; // Day 5

        // Use a dataset that does NOT implement IntervalCategoryDataset
        DefaultStatisticalCategoryDataset dataset = new DefaultStatisticalCategoryDataset();
        dataset.add(timeValue, 0.0, "Row1", "Col1");

        // Act
        Object[] items = generator.createItemArray(dataset, 0, 0);

        // Assert
        // Since it's not an IntervalCategoryDataset, start and end values are not populated.
        Object[] expected = {
                "Row1",                              // {0} Row key
                "Col1",                              // {1} Column key
                formatter.format(new Date(timeValue)), // {2} Value, formatted as date
                null,                                // {3} Start value (not available)
                null                                 // {4} End value (not available)
        };
        assertArrayEquals(expected, items);
    }

    //endregion
}