/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:41:52 GMT 2025
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.chrono.ThaiBuddhistEra;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalCategoryItemLabelGenerator_ESTest extends IntervalCategoryItemLabelGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra> defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ThaiBuddhistEra thaiBuddhistEra1 = ThaiBuddhistEra.BEFORE_BE;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, thaiBuddhistEra1, thaiBuddhistEra1);
      defaultStatisticalCategoryDataset0.add((double) 0, (double) 0, thaiBuddhistEra0, thaiBuddhistEra0);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(defaultStatisticalCategoryDataset0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Number
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra> defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, thaiBuddhistEra0, thaiBuddhistEra0);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(defaultStatisticalCategoryDataset0, 0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray((CategoryDataset) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.labels.IntervalCategoryItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      double[][] doubleArray0 = new double[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      double[][] doubleArray0 = new double[7][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        intervalCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = null;
      try {
        intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("{2}", (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = null;
      try {
        intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("{2}", (DateFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatter' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("{2}", dateFormat0);
      Object[] objectArray0 = intervalCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 0, 0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra> defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset<ThaiBuddhistEra, ThaiBuddhistEra>();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      defaultStatisticalCategoryDataset0.add((-2270.359128073), (-2270.359128073), thaiBuddhistEra0, thaiBuddhistEra0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("({0}, {1}) = {3} - {4}", dateFormat0);
      Object[] objectArray0 = intervalCategoryItemLabelGenerator0.createItemArray(defaultStatisticalCategoryDataset0, 0, 0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator();
      double[][] doubleArray0 = new double[8][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Object[] objectArray0 = intervalCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 2, 2);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat("qa] ~&9");
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("O`zwofaJ", decimalFormat0);
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Object[] objectArray0 = intervalCategoryItemLabelGenerator0.createItemArray(defaultIntervalCategoryDataset0, 1, 0);
      assertEquals(5, objectArray0.length);
  }
}
