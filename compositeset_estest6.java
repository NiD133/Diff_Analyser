package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class CompositeSet_ESTestTest6 extends CompositeSet_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
        assertNotNull(linkedHashSet0);
        assertEquals(0, linkedHashSet0.size());
        assertTrue(linkedHashSet0.isEmpty());
        Integer integer0 = new Integer(113);
        assertNotNull(integer0);
        assertEquals(113, (int) integer0);
        boolean boolean0 = linkedHashSet0.add(integer0);
        assertTrue(linkedHashSet0.contains(integer0));
        assertEquals(1, linkedHashSet0.size());
        assertFalse(linkedHashSet0.isEmpty());
        assertTrue(boolean0);
        CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
        assertNotNull(compositeSet0);
        assertFalse(compositeSet0.contains(113));
        Set<Object> set0 = compositeSet0.toSet();
        assertNotNull(set0);
        assertFalse(compositeSet0.contains(113));
        assertFalse(set0.contains(113));
        assertEquals(0, set0.size());
        assertTrue(set0.isEmpty());
        compositeSet0.addComposited(set0);
        assertFalse(compositeSet0.contains(113));
        assertFalse(set0.contains(113));
        assertEquals(0, set0.size());
        assertTrue(set0.isEmpty());
        CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
        assertNotNull(compositeSet1);
        assertTrue(linkedHashSet0.contains(integer0));
        assertTrue(compositeSet1.contains(integer0));
        assertEquals(1, linkedHashSet0.size());
        assertFalse(linkedHashSet0.isEmpty());
        boolean boolean1 = compositeSet1.equals(compositeSet0);
        assertTrue(linkedHashSet0.contains(integer0));
        assertFalse(compositeSet0.contains(113));
        assertTrue(compositeSet1.contains(integer0));
        assertEquals(1, linkedHashSet0.size());
        assertFalse(linkedHashSet0.isEmpty());
        assertFalse(boolean1 == boolean0);
        assertFalse(boolean1);
        Set<CompositeSet<Integer>>[] setArray0 = (Set<CompositeSet<Integer>>[]) Array.newInstance(Set.class, 6);
        LinkedHashSet<CompositeSet<Integer>> linkedHashSet1 = new LinkedHashSet<CompositeSet<Integer>>();
        assertNotNull(linkedHashSet1);
        assertFalse(linkedHashSet1.contains(compositeSet1));
        assertEquals(0, linkedHashSet1.size());
        assertTrue(linkedHashSet1.isEmpty());
        setArray0[0] = (Set<CompositeSet<Integer>>) linkedHashSet1;
        CompositeSet<CompositeSet<Integer>> compositeSet2 = new CompositeSet<CompositeSet<Integer>>(setArray0);
        assertEquals(6, setArray0.length);
        assertNotNull(compositeSet2);
        assertFalse(compositeSet2.contains(compositeSet1));
        setArray0[1] = (Set<CompositeSet<Integer>>) compositeSet2;
        CompositeSet<CompositeSet<Integer>> compositeSet3 = new CompositeSet<CompositeSet<Integer>>(setArray0[1]);
        assertEquals(6, setArray0.length);
        assertNotNull(compositeSet3);
        assertFalse(compositeSet3.contains(compositeSet1));
        assertTrue(compositeSet3.equals((Object) compositeSet2));
        setArray0[2] = (Set<CompositeSet<Integer>>) compositeSet3;
        CompositeSet<CompositeSet<Integer>> compositeSet4 = new CompositeSet<CompositeSet<Integer>>(setArray0);
        assertEquals(6, setArray0.length);
        assertNotNull(compositeSet4);
        assertFalse(compositeSet4.contains(compositeSet1));
        assertTrue(compositeSet4.equals((Object) compositeSet3));
        assertTrue(compositeSet4.equals((Object) compositeSet2));
        setArray0[3] = (Set<CompositeSet<Integer>>) compositeSet4;
        LinkedHashSet<CompositeSet<Integer>> linkedHashSet2 = new LinkedHashSet<CompositeSet<Integer>>();
        assertNotNull(linkedHashSet2);
        assertFalse(linkedHashSet2.contains(compositeSet1));
        assertEquals(0, linkedHashSet2.size());
        assertTrue(linkedHashSet2.isEmpty());
        assertTrue(linkedHashSet2.equals((Object) linkedHashSet1));
        setArray0[4] = (Set<CompositeSet<Integer>>) linkedHashSet2;
        CompositeSet<CompositeSet<Integer>> compositeSet5 = new CompositeSet<CompositeSet<Integer>>(setArray0[4]);
        assertEquals(6, setArray0.length);
        assertNotNull(compositeSet5);
        assertFalse(compositeSet5.contains(compositeSet1));
        assertTrue(compositeSet5.equals((Object) compositeSet3));
        assertTrue(compositeSet5.equals((Object) compositeSet4));
        assertTrue(compositeSet5.equals((Object) compositeSet2));
        setArray0[5] = (Set<CompositeSet<Integer>>) compositeSet5;
        CompositeSet<CompositeSet<Integer>> compositeSet6 = new CompositeSet<CompositeSet<Integer>>(setArray0);
        assertEquals(6, setArray0.length);
        assertNotNull(compositeSet6);
        assertFalse(compositeSet6.contains(compositeSet1));
        assertTrue(compositeSet6.equals((Object) compositeSet2));
        assertTrue(compositeSet6.equals((Object) compositeSet5));
        assertTrue(compositeSet6.equals((Object) compositeSet4));
        assertTrue(compositeSet6.equals((Object) compositeSet3));
        Iterator<CompositeSet<Integer>> iterator0 = compositeSet6.iterator();
        assertEquals(6, setArray0.length);
        assertNotNull(iterator0);
        assertNotSame(compositeSet6, compositeSet5);
        assertNotSame(compositeSet6, compositeSet2);
        assertNotSame(compositeSet6, compositeSet3);
        assertNotSame(compositeSet6, compositeSet4);
        assertFalse(compositeSet6.contains(compositeSet1));
        assertTrue(compositeSet6.equals((Object) compositeSet2));
        assertTrue(compositeSet6.equals((Object) compositeSet5));
        assertTrue(compositeSet6.equals((Object) compositeSet4));
        assertTrue(compositeSet6.equals((Object) compositeSet3));
    }
}
