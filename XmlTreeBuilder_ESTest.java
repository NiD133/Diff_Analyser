/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:39:59 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.LeafNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.StreamParser;
import org.jsoup.parser.TagSet;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlTreeBuilder_ESTest extends XmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("http://www.w3.org/1998/Math/MathML", "http://www.w3.org/XML/1998/namespace");
      streamParser0.parseFragment("http://www.w3.org/2000/svg", element0, "{FDP|4G0#6");
      xmlTreeBuilder0.processStartTag("http://www.w3.org/1998/Math/MathML", (Attributes) null);
      Token.EndTag token_EndTag0 = new Token.EndTag(xmlTreeBuilder0);
      boolean boolean0 = xmlTreeBuilder0.processStartTag("~BQ~ug8>");
      assertTrue(boolean0);
      
      xmlTreeBuilder0.popStackToClose(token_EndTag0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("jHQIs@:5#c&", "2#0f[w|.T$lBU[oa^f");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.processStartTag(":contains(%s)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = new Document("d/uP=K>");
      Element element0 = document0.head();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParseFragment(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(">: ", ">: ");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("http://www.w3.org/2000/svg", (Element) document0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(">: ", document0.location());
      
      Token.EndTag token_EndTag0 = new Token.EndTag(xmlTreeBuilder0);
      xmlTreeBuilder0.popStackToClose(token_EndTag0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(">: ", ">: ");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("http://www.w3.org/2000/svg", (Element) document0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(">: ", document0.location());
      
      Comment comment0 = new Comment("KRq7");
      xmlTreeBuilder0.insertLeafNode(comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("http://www.w3.org/1999/xhtml", "http://www.w3.org/XML/1998/namespace");
      streamParser0.parseFragment("z>!GVh", element0, "u");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      xmlTreeBuilder0.insertDoctypeFor(token_Doctype0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(">: ", ">: ");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("}VF\"~1WF,kf?;\"Lf2", (Element) document0, "");
      assertEquals(">: ", document0.location());
      
      Token.Comment token_Comment0 = new Token.Comment();
      xmlTreeBuilder0.insertCommentFor(token_Comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("", "");
      Elements elements0 = document0.getAllElements();
      xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertEquals("", document0.location());
      
      Token.Character token_Character0 = new Token.Character();
      xmlTreeBuilder0.insertCharacterFor(token_Character0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("xmlns:#text");
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.initialiseParse(stringReader0, "xmlns:#text", parser0);
      assertEquals("http://www.w3.org/XML/1998/namespace", parser0.defaultNamespace());
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("ME;}", "ME;}");
      assertEquals("ME;}", document0.location());
      
      xmlTreeBuilder0.completeParseFragment();
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(">: ", ">: ");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("http://www.w3.org/2000/svg", (Element) document0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(">: ", document0.location());
      
      Token.XmlDecl token_XmlDecl0 = tokeniser0.createXmlDeclPending(true);
      boolean boolean0 = xmlTreeBuilder0.process(token_XmlDecl0);
      assertTrue(boolean0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("Doctype", "nfHa(P+.f");
      streamParser0.parseFragment("$M{RJ]hM9&ek.Vtk$I", element0, "http://www.w3.org/1999/xhtml");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.XmlDecl token_XmlDecl0 = tokeniser0.createXmlDeclPending(true);
      xmlTreeBuilder0.insertXmlDeclarationFor(token_XmlDecl0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("Doctype", "nfHa(P+.f");
      streamParser0.parseFragment("$M{RJ]hM9&ek.Vtk$I", element0, "http://www.w3.org/1999/xhtml");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = xmlTreeBuilder0.process(token_Doctype0);
      assertTrue(boolean0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(">: ", ">: ");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("http://www.w3.org/2000/svg", (Element) document0, "http://www.w3.org/XML/1998/namespace");
      assertEquals(">: ", document0.location());
      
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      boolean boolean0 = xmlTreeBuilder0.process(token_Comment0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("http://www.w3.org/2000/svg", "http://www.w3.org/1999/xhtml");
      streamParser0.parseFragment("7~n", element0, "7~n");
      boolean boolean0 = xmlTreeBuilder0.processStartTag("http://www.w3.org/2000/svg");
      assertTrue(boolean0);
      
      Element element1 = xmlTreeBuilder0.pop();
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
      assertEquals("http://www.w3.org/2000/svg", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      TagSet tagSet0 = xmlTreeBuilder0.defaultTagSet();
      assertNotNull(tagSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertTrue(parseSettings0.preserveTagCase());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.popStackToClose(token_EndTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse(",Ix<T(pi#>?mbGzH", ",Ix<T(pi#>?mbGzH");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("Doctype", "nfHa(P+.f");
      streamParser0.parseFragment("$M{RJ]hM9&ek.Vtk$I", element0, "http://www.w3.org/1999/xhtml");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(",Ix<T(pi#>?mbGzH", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(pipedReader0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'baseUri' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.parse(pipedReader0, "kxrewut");
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertXmlDeclarationFor((Token.XmlDecl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Document document0 = parser0.parseInput("class", "class");
      streamParser0.parseFragment("{FDP|4G0#6", (Element) document0, "_',=~G~eEf3?aX_HU");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertLeafNode((LeafNode) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      CDataNode cDataNode0 = new CDataNode("xl`t");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertLeafNode(cDataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse(",Ix<T(pi#>?mbGzH", "jsoup.xmlns-");
      Token.StartTag token_StartTag0 = new Token.StartTag(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertElementFor(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertElementFor((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertDoctypeFor(token_Doctype0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParse((Reader) null, "ScriptData", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter 'input' must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.initialiseParse(pipedReader0, "IuI=", parser0);
        fail("Expecting exception: UncheckedIOException");
      
      } catch(UncheckedIOException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.completeParseFragment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.XmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      String string0 = xmlTreeBuilder0.defaultNamespace();
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("http://www.w3.org/1998/Math/MathML", "http://www.w3.org/XML/1998/namespace");
      streamParser0.parseFragment("http://www.w3.org/XML/1998/namespace", element0, "http://www.w3.org/1999/xhtml");
      Token.EndTag token_EndTag0 = new Token.EndTag(xmlTreeBuilder0);
      boolean boolean0 = xmlTreeBuilder0.process(token_EndTag0);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.XmlDecl token_XmlDecl0 = new Token.XmlDecl(xmlTreeBuilder0);
      token_XmlDecl0.newAttribute();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_XmlDecl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("");
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertCharacterFor(token_CData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("xmlns:{2u;3rllkw{s)I", "xmlns:{2u;3rllkw{s)I");
      CDataNode cDataNode0 = new CDataNode("xmlns:{2u;3rllkw{s)I");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("xmlns:{2u;3rllkw{s)I", "6x J(VBX=|so_zGPsa");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      token_StartTag0.nameAttr((String) null, attributes1);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse(",Ix<T(pi#>?mbGzH", ",Ix<T(pi#>?mbGzH");
      Token.StartTag token_StartTag0 = new Token.StartTag(xmlTreeBuilder0);
      CDataNode cDataNode0 = new CDataNode("1'm<`CcR11r1m =@q");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.add("xmlns", "1'm<`CcR11r1m =@q");
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("X7,c,ddhqJ", attributes0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      attributes0.add("http://www.w3.org/XML/1998/namespace", "}5ov4zKP6");
      token_StartTag0.nameAttr("numeric referencD with no nu)erals", attributes0);
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      Element element0 = new Element("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/2000/svg");
      streamParser0.parseFragment("http://www.w3.org/2000/svg", element0, "http://www.w3.org/1998/Math/MathML");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("V#,{/v8G", attributes0);
      xmlTreeBuilder0.insertElementFor(token_StartTag1);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParseFragment((Element) null);
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder0.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("xmlns");
      xmlTreeBuilder0.parse(stringReader0, "xmlns");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.insertCommentFor(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder1 = xmlTreeBuilder0.newInstance();
      assertEquals("http://www.w3.org/XML/1998/namespace", xmlTreeBuilder1.defaultNamespace());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }
}
