/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:27:16 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.comparators.FixedOrderComparator;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedOrderComparator_ESTest extends FixedOrderComparator_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000)
    public void testConstructorWithList() throws Throwable {
        // Test that constructor initializes correctly with a list
        LinkedList<Object> list = new LinkedList<>();
        Object obj = new Object();
        list.add(obj);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(list);
        assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, comparator.getUnknownObjectBehavior());
    }

    @Test(timeout = 4000)
    public void testConstructorWithRecursiveArrayThrowsStackOverflow() throws Throwable {
        // Test handling of recursive array structure in constructor
        LinkedList<Object> list = new LinkedList<>();
        Object[] array = new Object[9];
        array[5] = list; // Create recursive reference
        list.add(array[5]);

        try {
            new FixedOrderComparator<>(array);
            fail("Expected StackOverflowError");
        } catch (StackOverflowError e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullArrayThrowsException() throws Throwable {
        // Test null array input validation
        try {
            new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>((FixedOrderComparator.UnknownObjectBehavior[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Verify exception message
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullListThrowsException() throws Throwable {
        // Test null list input validation
        try {
            new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>((List<FixedOrderComparator.UnknownObjectBehavior>) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Verify exception message
            verifyException("java.util.Objects", e);
        }
    }

    // Locking Behavior Tests
    @Test(timeout = 4000)
    public void testIsLockedWhenNotLocked() throws Throwable {
        // Test initial unlocked state
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        assertFalse(comparator.isLocked());
    }

    @Test(timeout = 4000)
    public void testCheckLockedWhenNotLocked() throws Throwable {
        // Test checkLocked doesn't throw when unlocked
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        comparator.checkLocked(); // Should not throw
        assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, comparator.getUnknownObjectBehavior());
    }

    @Test(timeout = 4000)
    public void testOperationsAfterComparisonThrowException() throws Throwable {
        // Test that operations are blocked after comparison
        LinkedList<Object> items = new LinkedList<>();
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(items);
        Object unknownObj = new Object();

        // Configure to place unknown objects at end
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        
        // Perform comparison to lock comparator
        comparator.compare(unknownObj, new Object());

        // Verify locked state
        assertTrue(comparator.isLocked());

        // Attempt to modify after locking
        try {
            comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }

        try {
            comparator.checkLocked();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }

        try {
            comparator.add(new Object());
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }

        try {
            comparator.addAsEqual(FixedOrderComparator.UnknownObjectBehavior.AFTER, new Object());
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }
    }

    @Test(timeout = 4000)
    public void testSetUnknownObjectBehaviorNullThrowsException() throws Throwable {
        // Test null behavior validation
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        try {
            comparator.setUnknownObjectBehavior(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("java.util.Objects", e);
        }
    }

    // Comparison Behavior Tests
    @Test(timeout = 4000)
    public void testCompareWithDifferentItemsInFixedOrder() throws Throwable {
        // Test correct ordering of known items
        ConstantTransformer<Boolean> transformer = new ConstantTransformer<>(null);
        Function<Boolean, Boolean>[] functions = (Function<Boolean, Boolean>[]) Array.newInstance(Function.class, 7);
        functions[0] = transformer;
        
        FixedOrderComparator<Function<Boolean, Boolean>> comparator = 
            new FixedOrderComparator<>(functions);
        
        int result = comparator.compare(transformer, functions[3]);
        assertTrue(comparator.isLocked());
        assertEquals(-1, result); // transformer comes before functions[3]
    }

    @Test(timeout = 4000)
    public void testCompareWithNullObjectAfterBehavior() throws Throwable {
        // Test AFTER behavior with null input
        Boolean[] items = new Boolean[21];
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(items);
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        
        int result = comparator.compare(null, FixedOrderComparator.UnknownObjectBehavior.AFTER);
        assertTrue(comparator.isLocked());
        assertEquals(-1, result); // null (unknown) comes AFTER known items
    }

    @Test(timeout = 4000)
    public void testCompareSameObjectWithBeforeBehavior() throws Throwable {
        // Test BEFORE behavior with same objects
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);
        
        int result = comparator.compare(comparator, comparator);
        assertTrue(comparator.isLocked());
        assertEquals(0, result); // Objects are equal
    }

    @Test(timeout = 4000)
    public void testCompareNullWithObjectWithBeforeBehavior() throws Throwable {
        // Test BEFORE behavior with null input
        FixedOrderComparator<Object>[] comparators = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 4);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(comparators);
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);
        
        int result = comparator.compare(null, new Object());
        assertTrue(comparator.isLocked());
        assertEquals(1, result); // null (unknown) comes BEFORE known items
    }

    @Test(timeout = 4000)
    public void testCompareObjectWithNullWithBeforeBehavior() throws Throwable {
        // Test BEFORE behavior with null comparison
        Predicate<Object>[] predicates = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(predicates);
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);
        
        int result = comparator.compare(comparator, null);
        assertTrue(comparator.isLocked());
        assertEquals(-1, result); // Known object comes before unknown (null)
    }

    @Test(timeout = 4000)
    public void testCompareObjectWithNullWithAfterBehavior() throws Throwable {
        // Test AFTER behavior with null comparison
        Predicate<Object>[] predicates = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(predicates);
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        
        int result = comparator.compare(comparator, null);
        assertTrue(comparator.isLocked());
        assertEquals(1, result); // Known object comes before unknown (null) when unknown is AFTER
    }

    @Test(timeout = 4000)
    public void testCompareNullWithObjectWithDefaultBehaviorThrowsException() throws Throwable {
        // Test default EXCEPTION behavior with null input
        Boolean[] items = new Boolean[21];
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(items);
        
        try {
            comparator.compare(null, FixedOrderComparator.UnknownObjectBehavior.AFTER);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }
    }

    @Test(timeout = 4000)
    public void testCompareObjectWithNullWithDefaultBehaviorThrowsException() throws Throwable {
        // Test default EXCEPTION behavior with null comparison
        Predicate<Object>[] predicates = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(predicates);
        
        try {
            comparator.compare(comparator, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }
    }

    @Test(timeout = 4000)
    public void testGetUnknownObjectBehaviorDefault() throws Throwable {
        // Test default unknown object behavior
        FixedOrderComparator<Predicate<Object>> comparator = new FixedOrderComparator<>();
        assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, comparator.getUnknownObjectBehavior());
    }

    // Object Addition Tests
    @Test(timeout = 4000)
    public void testAddNewItem() throws Throwable {
        // Test adding new item to comparator
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        assertTrue(comparator.add(new Object()));
    }

    @Test(timeout = 4000)
    public void testAddDuplicateItem() throws Throwable {
        // Test adding duplicate item returns false
        FixedOrderComparator<Object>[] comparators = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 5);
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        comparators[0] = comparator;
        
        FixedOrderComparator<FixedOrderComparator<Object>> mainComparator = 
            new FixedOrderComparator<>(comparators);
        
        assertFalse(mainComparator.add(comparator)); // Already exists
    }

    @Test(timeout = 4000)
    public void testAddAsEqualWithNewObject() throws Throwable {
        // Test adding equal mapping for new object
        InstanceofPredicate predicate = new InstanceofPredicate(Object.class);
        PredicateTransformer<Comparable<Boolean>> transformer = new PredicateTransformer<>(predicate);
        Boolean original = transformer.transform(null);
        
        Boolean[] items = new Boolean[4];
        items[0] = original;
        FixedOrderComparator<Boolean> comparator = new FixedOrderComparator<>(items);
        
        Boolean newObj = transformer.apply(original);
        assertTrue(comparator.addAsEqual(original, newObj)); // Successfully added
    }

    @Test(timeout = 4000)
    public void testAddAsEqualWithSameObject() throws Throwable {
        // Test adding equal mapping for same object returns false
        InstanceofPredicate predicate = new InstanceofPredicate(Object.class);
        PredicateTransformer<Comparable<Boolean>> transformer = new PredicateTransformer<>(predicate);
        Boolean obj = transformer.transform(null);
        
        Boolean[] items = new Boolean[4];
        items[0] = obj;
        FixedOrderComparator<Boolean> comparator = new FixedOrderComparator<>(items);
        
        assertFalse(comparator.addAsEqual(obj, obj)); // Already exists
    }

    @Test(timeout = 4000)
    public void testAddAsEqualWithUnknownObjectThrowsException() throws Throwable {
        // Test adding equal mapping for unknown object
        Object[] items = new Object[2];
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(items);
        Object unknownObj = new Object();
        
        try {
            comparator.addAsEqual(unknownObj, new Object());
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
        }
    }

    // Equality and Hash Code Tests
    @Test(timeout = 4000)
    public void testEqualsWithDifferentComparators() throws Throwable {
        // Test equality with different comparators
        Comparable<Object>[] items = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
        FixedOrderComparator<Comparable<Object>> comparator1 = new FixedOrderComparator<>(items);
        FixedOrderComparator<Object> comparator2 = new FixedOrderComparator<>();
        
        assertFalse(comparator2.equals(comparator1));
    }

    @Test(timeout = 4000)
    public void testEqualsAfterLocking() throws Throwable {
        // Test equality after locking comparator
        Boolean[] items = new Boolean[21];
        FixedOrderComparator<Object> lockedComparator = new FixedOrderComparator<>(items);
        lockedComparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        lockedComparator.compare(new Object(), items[0]); // Lock
        
        FixedOrderComparator<Object> unlockedComparator = new FixedOrderComparator<>();
        assertFalse(unlockedComparator.equals(lockedComparator));
    }

    @Test(timeout = 4000)
    public void testEqualsWithDifferentType() throws Throwable {
        // Test equality with different internal state
        FixedOrderComparator<Object>[] items = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 4);
        FixedOrderComparator<Object> comparator1 = new FixedOrderComparator<>(items);
        items[0] = comparator1;
        
        FixedOrderComparator<FixedOrderComparator<Object>> comparator2 = 
            new FixedOrderComparator<>(items);
        
        assertFalse(comparator2.equals(comparator1));
    }

    @Test(timeout = 4000)
    public void testEqualsWithDifferentLength() throws Throwable {
        // Test equality with different item counts
        FixedOrderComparator<Object> comparator1 = new FixedOrderComparator<>();
        FixedOrderComparator<Object>[] items = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 1);
        
        FixedOrderComparator<FixedOrderComparator<Object>> comparator2 = 
            new FixedOrderComparator<>(items);
        
        assertFalse(comparator2.equals(comparator1));
    }

    @Test(timeout = 4000)
    public void testEqualsWithSameEmptyComparator() throws Throwable {
        // Test equality with empty comparators
        FixedOrderComparator<Object> comparator1 = new FixedOrderComparator<>();
        FixedOrderComparator<Object> comparator2 = new FixedOrderComparator<>();
        assertTrue(comparator1.equals(comparator2));
    }

    @Test(timeout = 4000)
    public void testEqualsWithDifferentUnknownObjectBehavior() throws Throwable {
        // Test equality with different unknown object behaviors
        LinkedList<Object> list = new LinkedList<>();
        FixedOrderComparator<Object> comparator1 = new FixedOrderComparator<>(list);
        comparator1.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        
        FixedOrderComparator<Object> comparator2 = new FixedOrderComparator<>();
        assertFalse(comparator2.equals(comparator1));
    }

    @Test(timeout = 4000)
    public void testEqualsWithNull() throws Throwable {
        // Test equality with null
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        assertFalse(comparator.equals(null));
    }

    @Test(timeout = 4000)
    public void testEqualsWithSameInstance() throws Throwable {
        // Test equality with same instance
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        assertTrue(comparator.equals(comparator));
    }

    @Test(timeout = 4000)
    public void testEqualsWithDifferentClass() throws Throwable {
        // Test equality with different class
        FixedOrderComparator<Object> comparator = new FixedOrderComparator<>();
        assertFalse(comparator.equals(Object.class));
    }

    @Test(timeout = 4000)
    public void testHashCode() throws Throwable {
        // Test consistent hashCode implementation
        LinkedList<Comparable<Object>> list = new LinkedList<>();
        FixedOrderComparator<Comparable<Object>> comparator = new FixedOrderComparator<>(list);
        comparator.hashCode(); // Should not throw
    }
}