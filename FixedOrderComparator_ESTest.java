/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:27:16 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.comparators.FixedOrderComparator;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FixedOrderComparator_ESTest extends FixedOrderComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 8);
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>(comparableArray0);
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantTransformer<Boolean, Boolean> constantTransformer0 = new ConstantTransformer<Boolean, Boolean>((Boolean) null);
      Function<Boolean, Boolean>[] functionArray0 = (Function<Boolean, Boolean>[]) Array.newInstance(Function.class, 7);
      functionArray0[0] = (Function<Boolean, Boolean>) constantTransformer0;
      FixedOrderComparator<Function<Boolean, Boolean>> fixedOrderComparator0 = new FixedOrderComparator<Function<Boolean, Boolean>>(functionArray0);
      int int0 = fixedOrderComparator0.compare(constantTransformer0, functionArray0[3]);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        fixedOrderComparator0.addAsEqual(object1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Object@2fb7d513 not known to org.apache.commons.collections4.comparators.FixedOrderComparator@1cc73c3c
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      fixedOrderComparator0.checkLocked();
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator0.getUnknownObjectBehavior());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      Object object0 = new Object();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator0.compare(linkedList0, object0);
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean[] booleanArray0 = new Boolean[21];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      fixedOrderComparator0.compare(object0, booleanArray0[0]);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<FixedOrderComparator<Object>> linkedList0 = new LinkedList<FixedOrderComparator<Object>>();
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Object>>(linkedList0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.setUnknownObjectBehavior((FixedOrderComparator.UnknownObjectBehavior) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // unknownObjectBehavior
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean[] booleanArray0 = new Boolean[21];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      fixedOrderComparator0.compare(object0, booleanArray0[0]);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.checkLocked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      PredicateTransformer<Comparable<Boolean>> predicateTransformer0 = new PredicateTransformer<Comparable<Boolean>>(identityPredicate0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Boolean boolean0 = predicateTransformer0.transform(false);
      fixedOrderComparator0.compare(boolean0, object0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.add(linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object[] objectArray0 = new Object[9];
      objectArray0[5] = (Object) linkedList0;
      linkedList0.add(objectArray0[5]);
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>((FixedOrderComparator.UnknownObjectBehavior[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>((List<FixedOrderComparator.UnknownObjectBehavior>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 5);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      fixedOrderComparatorArray0[0] = fixedOrderComparator0;
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      boolean boolean0 = fixedOrderComparator1.add(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      Object object0 = new Object();
      boolean boolean0 = fixedOrderComparator0.add(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Comparable<Object>> linkedList0 = new LinkedList<Comparable<Object>>();
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator0 = new FixedOrderComparator<Comparable<Object>>(linkedList0);
      fixedOrderComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator0.isLocked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 4);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparatorArray0);
      fixedOrderComparatorArray0[0] = fixedOrderComparator0;
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[21];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      fixedOrderComparator0.compare(object0, booleanArray0[0]);
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator<Object>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Object>[]) Array.newInstance(FixedOrderComparator.class, 1);
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator<Object>>(fixedOrderComparatorArray0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator<Object>> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator<Object>>();
      boolean boolean0 = fixedOrderComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      FixedOrderComparator<Boolean> fixedOrderComparator0 = new FixedOrderComparator<Boolean>(linkedList0);
      boolean boolean0 = fixedOrderComparator0.equals(fixedOrderComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      boolean boolean0 = fixedOrderComparator0.equals(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[21];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(booleanArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator0.compare((Object) null, fixedOrderComparator_UnknownObjectBehavior0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator0.compare(fixedOrderComparator0, fixedOrderComparator0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedOrderComparator<Boolean>[] fixedOrderComparatorArray0 = (FixedOrderComparator<Boolean>[]) Array.newInstance(FixedOrderComparator.class, 4);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparatorArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      Object object0 = new Object();
      int int0 = fixedOrderComparator0.compare((Object) null, object0);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(predicateArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator0.compare(fixedOrderComparator0, (Object) null);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[21];
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(booleanArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      // Undeclared exception!
      try { 
        fixedOrderComparator0.compare((Object) null, fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object AFTER
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Comparable<Boolean>> predicateTransformer0 = new PredicateTransformer<Comparable<Boolean>>(instanceofPredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Comparable<Boolean>) null);
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = predicateTransformer0.apply(boolean0);
      booleanArray0[0] = boolean0;
      FixedOrderComparator<Boolean> fixedOrderComparator0 = new FixedOrderComparator<Boolean>(booleanArray0);
      boolean boolean2 = fixedOrderComparator0.addAsEqual(boolean0, boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicateTransformer<Comparable<Boolean>> predicateTransformer0 = new PredicateTransformer<Comparable<Boolean>>(instanceofPredicate0);
      Boolean boolean0 = predicateTransformer0.transform((Comparable<Boolean>) null);
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      FixedOrderComparator<Boolean> fixedOrderComparator0 = new FixedOrderComparator<Boolean>(booleanArray0);
      boolean boolean1 = fixedOrderComparator0.addAsEqual(boolean0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator0.getUnknownObjectBehavior());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator1 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      boolean boolean0 = fixedOrderComparator1.equals(fixedOrderComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(predicateArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator0.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator0.compare(fixedOrderComparator0, (Object) null);
      assertTrue(fixedOrderComparator0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 14);
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.compare(fixedOrderComparator0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attempting to compare unknown object org.apache.commons.collections4.comparators.FixedOrderComparator@1ccc9b9e
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedOrderComparator<Predicate<Object>> fixedOrderComparator0 = new FixedOrderComparator<Predicate<Object>>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = fixedOrderComparator0.getUnknownObjectBehavior();
      assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, fixedOrderComparator_UnknownObjectBehavior0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior> fixedOrderComparator0 = new FixedOrderComparator<FixedOrderComparator.UnknownObjectBehavior>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(linkedList0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.compare(fixedOrderComparator0, fixedOrderComparator0);
      // Undeclared exception!
      try { 
        fixedOrderComparator1.addAsEqual(fixedOrderComparator_UnknownObjectBehavior0, fixedOrderComparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }
}
