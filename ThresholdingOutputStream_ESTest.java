/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:55:54 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.apache.commons.io.output.DeferredFileOutputStream;
import org.apache.commons.io.output.ThresholdingOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThresholdingOutputStream_ESTest extends ThresholdingOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(76);
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertEquals(76, thresholdingOutputStream0.getThreshold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(0);
      thresholdingOutputStream0.write((byte[]) null, 0, 0);
      assertEquals(0, thresholdingOutputStream0.getThreshold());
      assertEquals(0L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(661);
      thresholdingOutputStream0.thresholdReached();
      assertEquals(661, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(76);
      int int0 = thresholdingOutputStream0.getThreshold();
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      thresholdingOutputStream0.getStream();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(0);
      thresholdingOutputStream0.getOutputStream();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      byte[] byteArray0 = new byte[1];
      thresholdingOutputStream0.write(byteArray0);
      long long0 = thresholdingOutputStream0.getByteCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, 76, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, (-122), (-122));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder1 = deferredFileOutputStream_Builder0.setPrefix("/-f5");
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder1.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write((byte[]) null, (-3053), 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid prefix or suffix
         //
         verifyException("java.nio.file.TempFileHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(379);
      // Undeclared exception!
      try { 
        thresholdingOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.output.ThresholdingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.write(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.thresholdReached();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeferredFileOutputStream.Builder deferredFileOutputStream_Builder0 = new DeferredFileOutputStream.Builder();
      DeferredFileOutputStream deferredFileOutputStream0 = deferredFileOutputStream_Builder0.get();
      // Undeclared exception!
      try { 
        deferredFileOutputStream0.checkThreshold(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.Files", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      byte[] byteArray0 = new byte[1];
      thresholdingOutputStream0.write(byteArray0);
      thresholdingOutputStream0.write(byteArray0, (-1473), 1950);
      assertEquals(1951L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      thresholdingOutputStream0.flush();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      byte[] byteArray0 = new byte[1];
      thresholdingOutputStream0.write(byteArray0);
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertEquals(1L, thresholdingOutputStream0.getByteCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      boolean boolean0 = thresholdingOutputStream0.isThresholdExceeded();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(1, (IOConsumer<ThresholdingOutputStream>) null, (IOFunction<ThresholdingOutputStream, OutputStream>) null);
      assertEquals(1, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(129);
      thresholdingOutputStream0.setByteCount((byte)1);
      assertEquals(1L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      thresholdingOutputStream0.getByteCount();
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      int int0 = thresholdingOutputStream0.getThreshold();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      thresholdingOutputStream0.resetByteCount();
      assertEquals(0L, thresholdingOutputStream0.getByteCount());
      assertEquals(0, thresholdingOutputStream0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      thresholdingOutputStream0.write(345);
      assertEquals(1L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream((-2596));
      byte[] byteArray0 = new byte[1];
      thresholdingOutputStream0.write(byteArray0);
      thresholdingOutputStream0.checkThreshold(0);
      assertEquals(1L, thresholdingOutputStream0.getByteCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(76);
      byte[] byteArray0 = new byte[3];
      thresholdingOutputStream0.write(byteArray0, (-2302), (int) (byte) (-58));
      long long0 = thresholdingOutputStream0.getByteCount();
      assertEquals((-58L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThresholdingOutputStream thresholdingOutputStream0 = new ThresholdingOutputStream(76);
      thresholdingOutputStream0.close();
      assertEquals(76, thresholdingOutputStream0.getThreshold());
  }
}
