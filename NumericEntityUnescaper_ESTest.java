/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, 
                     resetStaticState = true, separateClassLoader = true) 
public class NumericEntityUnescaper_ESTest extends NumericEntityUnescaper_ESTest_scaffolding {

    private static final NumericEntityUnescaper.OPTION[] NO_OPTIONS = new NumericEntityUnescaper.OPTION[0];
    private static final int TEST_TIMEOUT = 4000;

    @Test(timeout = TEST_TIMEOUT)
    public void testIncompleteNumericEntity_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        char[] input = {'\0', '&', '#', 'y', '\0', '\0', '\0', '\0'}; // Incomplete entity
        
        // Act
        unescaper.translate(CharBuffer.wrap(input), writer);
        
        // Assert
        assertEquals("Incomplete entity should be output unchanged", 
                     "\u0000&#y\u0000\u0000\u0000\u0000", writer.toString());
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testNoEntities_ReturnsOriginalString() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        String input = "D+RTgb,eb:&],ms";
        
        // Act
        unescaper.translate(input, writer);
        
        // Assert
        assertEquals("String without entities should be unchanged", 
                     input, writer.toString());
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testLoneAmpersand_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        char[] input = {'\0', '&'}; // Only ampersand with no entity
        
        // Act
        unescaper.translate(CharBuffer.wrap(input), writer);
        
        // Assert
        assertEquals("Position should remain unchanged when no entity is found", 
                     0, CharBuffer.wrap(input).position());
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testNonEntityInput_ReturnsZero() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        
        // Act
        int result = unescaper.translate("0", 0, null);
        
        // Assert
        assertEquals("Non-entity input should return 0", 0, result);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testValidNumericEntity_UnescapedCorrectly() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        char[] input = {'\0', '\0', '\0', '&', '#', '3', ';'}; // Valid entity &#3;
        
        // Act
        int result = unescaper.translate(CharBuffer.wrap(input), 3, writer);
        
        // Assert
        assertEquals("Should unescape to character with codepoint 3", "\u0003", writer.toString());
        assertEquals("Should consume 4 characters", 4, result);
    }

    @Test(timeout = TEST_TIMEOUT, expected = StringIndexOutOfBoundsException.class)
    public void testIndexBeyondInputLength_ThrowsException() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter(1416);
        
        // Act
        unescaper.translate(writer.getBuffer(), 1416, writer);
    }

    @Test(timeout = TEST_TIMEOUT, expected = NullPointerException.class)
    public void testNullInput_ThrowsNullPointerException() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        
        // Act
        unescaper.translate(null, Integer.MAX_VALUE, writer);
    }

    @Test(timeout = TEST_TIMEOUT, expected = IndexOutOfBoundsException.class)
    public void testIndexAtBufferLimit_ThrowsIndexOutOfBoundsException() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        CharBuffer buffer = CharBuffer.allocate(2261);
        
        // Act
        unescaper.translate(buffer, 2261, writer);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testHexEntityWithoutDigits_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        char[] input = {'\0', '\0', '&', '#', 'x', ';'}; // Entity without hex digits
        
        // Act
        String result = unescaper.translate(CharBuffer.wrap(input));
        
        // Assert
        assertEquals("Invalid hex entity should remain unchanged", 
                     "\u0000\u0000&#x;", result);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testIncompleteDecimalEntity_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        char[] input = {'\0', '\0', '\0', '\0', '\0', '&', '#', '5'}; // Incomplete decimal entity
        
        // Act
        String result = unescaper.translate(CharBuffer.wrap(input));
        
        // Assert
        assertEquals("Incomplete decimal entity should remain unchanged", 
                     "\u0000\u0000\u0000\u0000\u0000&#5", result);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testIncompleteHexEntity_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        char[] input = {'\0', '\0', '\0', '\0', '&', '#', 'x', '\0'}; // Incomplete hex entity
        
        // Act
        String result = unescaper.translate(CharBuffer.wrap(input));
        
        // Assert
        assertEquals("Incomplete hex entity should remain unchanged", 
                     "\u0000\u0000\u0000\u0000&#x\u0000", result);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testIncompleteUppercaseHexEntity_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        char[] input = {'\0', '\0', '\0', '\0', '\0', '&', '#', 'X'}; // Incomplete uppercase hex entity
        
        // Act
        String result = unescaper.translate(CharBuffer.wrap(input));
        
        // Assert
        assertEquals("Incomplete uppercase hex entity should remain unchanged", 
                     "\u0000\u0000\u0000\u0000\u0000&#X", result);
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testLoneAmpersand_OutputAsIsWithWriter() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        char[] input = {'&', '\0'}; // Only ampersand
        
        // Act
        unescaper.translate(CharBuffer.wrap(input), writer);
        
        // Assert
        assertTrue("CharBuffer should maintain backing array", CharBuffer.wrap(input).hasArray());
    }

    @Test(timeout = TEST_TIMEOUT)
    public void testAmpersandFollowedByNonHash_OutputAsIs() {
        // Arrange
        NumericEntityUnescaper unescaper = new NumericEntityUnescaper(NO_OPTIONS);
        StringWriter writer = new StringWriter();
        String input = "D+RTgb,eb:&s"; // Ampersand not followed by #
        
        // Act
        unescaper.translate(input, writer);
        
        // Assert
        assertEquals("Ampersand without # should remain unchanged", 
                     input, writer.toString());
    }

    @Test(timeout = TEST_TIMEOUT, expected = NullPointerException.class)
    public void testConstructorWithNullOption_ThrowsNullPointerException() {
        // Arrange
        NumericEntityUnescaper.OPTION[] options = new NumericEntityUnescaper.OPTION[1]; // Contains null
        
        // Act
        new NumericEntityUnescaper(options);
    }
}