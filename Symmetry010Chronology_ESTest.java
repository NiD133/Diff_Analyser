/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:48:51 GMT 2025
 */

package org.threeten.extra.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.Year;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Era;
import java.time.chrono.IsoEra;
import java.time.chrono.JapaneseEra;
import java.time.chrono.ThaiBuddhistEra;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.time.MockYear;
import org.junit.runner.RunWith;
import org.threeten.extra.chrono.CopticDate;
import org.threeten.extra.chrono.EthiopicDate;
import org.threeten.extra.chrono.JulianDate;
import org.threeten.extra.chrono.JulianEra;
import org.threeten.extra.chrono.PaxDate;
import org.threeten.extra.chrono.Symmetry010Chronology;
import org.threeten.extra.chrono.Symmetry010Date;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Symmetry010Chronology_ESTest extends Symmetry010Chronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      Symmetry010Date symmetry010Date0 = Symmetry010Date.ofYearDay(30, 14);
      IsoEra isoEra0 = symmetry010Date0.getEra();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date((Era) isoEra0, 364, (-2552), 1769);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -2552
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      JulianDate julianDate0 = JulianDate.ofEpochDay((-604L));
      JulianEra julianEra0 = julianDate0.getEra();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date((Era) julianEra0, (-793), 1231, (-3218));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: AD
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      int int0 = symmetry010Chronology0.INSTANCE.prolepticYear(isoEra0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.dateNow(clock0);
      IsoEra isoEra0 = symmetry010Date0.getEra();
      int int0 = symmetry010Chronology0.prolepticYear(isoEra0, 3994);
      assertEquals(3994, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      int int0 = symmetry010Chronology0.prolepticYear(isoEra0, (-537));
      assertEquals((-537), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ChronoLocalDateTime<Symmetry010Date> chronoLocalDateTime0 = symmetry010Chronology0.localDateTime(offsetDateTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      boolean boolean0 = symmetry010Chronology0.isLeapYear((-1547L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = Symmetry010Chronology.getLeapYearsBefore(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = Symmetry010Chronology.getLeapYearsBefore(560L);
      assertEquals(99L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = Symmetry010Chronology.getLeapYearsBefore((-2552));
      assertEquals((-453L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      String string0 = symmetry010Chronology0.getId();
      assertEquals("Sym010", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      IsoEra isoEra0 = symmetry010Chronology0.eraOf(0);
      assertEquals(IsoEra.BCE, isoEra0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      Symmetry010Date symmetry010Date0 = Symmetry010Date.ofYearDay(30, 14);
      IsoEra isoEra0 = symmetry010Date0.getEra();
      Symmetry010Date symmetry010Date1 = symmetry010Chronology0.dateYearDay((Era) isoEra0, 14, 30);
      assertEquals(IsoEra.CE, symmetry010Date1.getEra());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      CopticDate copticDate0 = CopticDate.ofEpochDay((-4481L));
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.INSTANCE.date((TemporalAccessor) copticDate0);
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.date(12, 12, 12);
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      EthiopicDate ethiopicDate0 = EthiopicDate.now();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.zonedDateTime((TemporalAccessor) ethiopicDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoZonedDateTime from TemporalAccessor: class org.threeten.extra.chrono.EthiopicDate
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.zonedDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.zonedDateTime((Instant) null, zoneId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoZonedDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.range((ChronoField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.localDateTime(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class java.time.LocalDate
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateYearDay((Era) isoEra0, 1223, 1223);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 364/371): 1223
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BEFORE_BE;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateYearDay((Era) thaiBuddhistEra0, 107016, 107016);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: BEFORE_BE
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateYearDay(999, 999);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 364/371): 999
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateNow((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      Clock clock0 = MockClock.systemUTC();
      Duration duration0 = Duration.ofDays(365250000L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateNow(clock1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -365961480 - 364523156): 365266118
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateNow((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateNow(clock1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateEpochDay(365250000L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -365961480 - 364523156): 365250003
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Year year0 = MockYear.now();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date((TemporalAccessor) year0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("java.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      PaxDate paxDate0 = PaxDate.ofEpochDay(365242134L);
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date((TemporalAccessor) paxDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -365961480 - 364523156): 365242137
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date(13, 13, 13);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 13
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.prolepticYear(isoEra0, (-2136181101));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for YearOfEra (valid values -1000000 - 1000000): -2136181101
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      boolean boolean0 = symmetry010Chronology0.isLeapYear(32L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.localDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Instant instant0 = MockInstant.now();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ChronoZonedDateTime<Symmetry010Date> chronoZonedDateTime0 = symmetry010Chronology0.INSTANCE.zonedDateTime(instant0, (ZoneId) zoneOffset0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      JapaneseEra japaneseEra0 = JapaneseEra.MEIJI;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.prolepticYear(japaneseEra0, (-2097542166));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: Meiji
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Symmetry010Date symmetry010Date0 = Symmetry010Date.ofEpochDay(146L);
      Symmetry010Chronology symmetry010Chronology0 = symmetry010Date0.getChronology();
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.YEAR;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ChronoField chronoField0 = ChronoField.MONTH_OF_YEAR;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Symmetry010Date symmetry010Date0 = Symmetry010Date.ofEpochDay(146L);
      Symmetry010Chronology symmetry010Chronology0 = symmetry010Date0.getChronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Symmetry010Date symmetry010Date0 = Symmetry010Date.ofEpochDay(146L);
      Symmetry010Chronology symmetry010Chronology0 = symmetry010Date0.getChronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ChronoField chronoField0 = ChronoField.ERA;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      ValueRange valueRange0 = symmetry010Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.dateYearDay((-762), 4);
      assertEquals(IsoEra.BCE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.date((Era) isoEra0, 10, 10, 10);
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateYearDay((Era) isoEra0, 369, 369);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 369' as '369' is not a leap year
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.date(5, 5, 35);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date: 5/5/35
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      String string0 = symmetry010Chronology0.getCalendarType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.eraOf((-2135875627));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: -2135875627
         //
         verifyException("java.time.chrono.IsoEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.dateNow((ZoneId) zoneOffset0);
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.dateEpochDay(719162L);
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = Symmetry010Chronology.INSTANCE;
      List<Era> list0 = symmetry010Chronology0.eras();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      Symmetry010Date symmetry010Date0 = symmetry010Chronology0.dateNow();
      assertEquals(IsoEra.CE, symmetry010Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ChronoZonedDateTime<Symmetry010Date> chronoZonedDateTime0 = symmetry010Chronology0.zonedDateTime((TemporalAccessor) offsetDateTime0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Symmetry010Chronology symmetry010Chronology0 = new Symmetry010Chronology();
      // Undeclared exception!
      try { 
        symmetry010Chronology0.dateYearDay(371, 371);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 371' as '371' is not a leap year
         //
         verifyException("org.threeten.extra.chrono.Symmetry010Date", e);
      }
  }
}
