/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:48:28 GMT 2025
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.JavaVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaVersion_ESTest extends JavaVersion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = JavaVersion.parseMajorJavaVersion("0Q?");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.parseMajorJavaVersion((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = JavaVersion.isJava9OrLater();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = JavaVersion.parseMajorJavaVersion("");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = JavaVersion.parseMajorJavaVersion("-8");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = JavaVersion.parseMajorJavaVersion("1.&N<+EILs/Cn\",");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = JavaVersion.parseMajorJavaVersion("1");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = JavaVersion.getMajorJavaVersion();
      assertEquals(8, int0);
  }
}
