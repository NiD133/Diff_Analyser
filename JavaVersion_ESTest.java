/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:48:28 GMT 2025
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.JavaVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaVersion_ESTest extends JavaVersion_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithInvalidVersionString_ReturnsZero() throws Throwable {
        // Given: An invalid version string that starts with '0' followed by non-numeric characters
        String invalidVersionString = "0Q?";
        
        // When: Parsing the major Java version
        int actualVersion = JavaVersion.parseMajorJavaVersion(invalidVersionString);
        
        // Then: Should return 0 (the parsed number before the invalid characters)
        assertEquals(0, actualVersion);
    }

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithNullInput_ThrowsNullPointerException() throws Throwable {
        // Given: A null version string
        String nullVersionString = null;
        
        // When & Then: Should throw NullPointerException
        try { 
            JavaVersion.parseMajorJavaVersion(nullVersionString);
            fail("Expected NullPointerException to be thrown");
        } catch(NullPointerException e) {
            // Verify the exception comes from the expected class
            verifyException("com.google.gson.internal.JavaVersion", e);
        }
    }

    @Test(timeout = 4000)
    public void testIsJava9OrLater_WithCurrentJavaVersion_ReturnsFalse() throws Throwable {
        // When: Checking if current Java version is 9 or later
        boolean isJava9OrLater = JavaVersion.isJava9OrLater();
        
        // Then: Should return false (based on the test environment using Java 8)
        assertFalse(isJava9OrLater);
    }

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithEmptyString_ReturnsDefaultVersion() throws Throwable {
        // Given: An empty version string
        String emptyVersionString = "";
        
        // When: Parsing the major Java version
        int actualVersion = JavaVersion.parseMajorJavaVersion(emptyVersionString);
        
        // Then: Should return default version 6 (fallback for unparseable versions)
        assertEquals(6, actualVersion);
    }

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithNegativeNumber_ReturnsNegativeValue() throws Throwable {
        // Given: A version string with a negative number
        String negativeVersionString = "-8";
        
        // When: Parsing the major Java version
        int actualVersion = JavaVersion.parseMajorJavaVersion(negativeVersionString);
        
        // Then: Should return the negative value as parsed
        assertEquals(-8, actualVersion);
    }

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithLegacyVersionFormat_ExtractsFirstNumber() throws Throwable {
        // Given: A legacy version format starting with "1." followed by invalid characters
        String legacyVersionString = "1.&N<+EILs/Cn\",";
        
        // When: Parsing the major Java version
        int actualVersion = JavaVersion.parseMajorJavaVersion(legacyVersionString);
        
        // Then: Should extract and return the first number (1)
        assertEquals(1, actualVersion);
    }

    @Test(timeout = 4000)
    public void testParseMajorJavaVersion_WithSingleDigit_ReturnsCorrectVersion() throws Throwable {
        // Given: A simple single-digit version string
        String singleDigitVersion = "1";
        
        // When: Parsing the major Java version
        int actualVersion = JavaVersion.parseMajorJavaVersion(singleDigitVersion);
        
        // Then: Should return the parsed digit
        assertEquals(1, actualVersion);
    }

    @Test(timeout = 4000)
    public void testGetMajorJavaVersion_ReturnsCurrentJavaVersion() throws Throwable {
        // When: Getting the current major Java version
        int currentJavaVersion = JavaVersion.getMajorJavaVersion();
        
        // Then: Should return 8 (the Java version in the test environment)
        assertEquals(8, currentJavaVersion);
    }
}