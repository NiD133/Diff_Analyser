package org.apache.commons.codec.binary;

import org.apache.commons.codec.binary.BaseNCodec.Context;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

// Note: The original test class was likely generated by a tool. The class name
// and inheritance from a scaffolding class have been preserved. For a typical,
// human-written test suite, a simpler name like `Base16Test` would be more appropriate.
public class Base16_ESTestTest4 extends Base16_ESTest_scaffolding {

    /**
     * Tests that calling the encode method with a length of zero results in a no-op.
     * It should not process any data, modify the input array, or change the state
     * of the encoding context.
     */
    @Test
    public void encodeWithZeroLengthIsNoOp() {
        // Arrange
        final Base16 codec = new Base16();
        final byte[] inputData = {'a', 'b', 'c'}; // An arbitrary non-empty array
        final byte[] originalData = inputData.clone(); // A copy to verify no modification
        final Context context = new Context();

        // Act: Attempt to encode a zero-length portion of the input array.
        codec.encode(inputData, 0, 0, context);

        // Assert
        // 1. The context's internal state should be unchanged, as no encoding took place.
        assertEquals("Context position should still be 0", 0, context.pos);
        assertNull("Context buffer should not have been initialized", context.buffer);

        // 2. The source data array should not be modified.
        assertArrayEquals("Input data should not be modified", originalData, inputData);
    }
}