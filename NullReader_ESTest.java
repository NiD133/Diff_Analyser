/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:10 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import org.apache.commons.io.input.NullReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullReader_ESTest extends NullReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullReader nullReader0 = NullReader.INSTANCE;
      try { 
        nullReader0.INSTANCE.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No position has been marked
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      char[] charArray0 = new char[4];
      nullReader0.read(charArray0);
      nullReader0.mark(0);
      nullReader0.reset();
      assertEquals(4L, nullReader0.getPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      int int0 = nullReader0.read();
      assertEquals(1L, nullReader0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-995L));
      nullReader0.skip((-5663L));
      int int0 = nullReader0.read((char[]) null, 0, 0);
      assertEquals((-5663L), nullReader0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      char[] charArray0 = new char[4];
      int int0 = nullReader0.read(charArray0, (-2654), 616);
      assertEquals(616L, nullReader0.getPosition());
      assertEquals(616, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullReader nullReader0 = new NullReader(3453L);
      char[] charArray0 = new char[0];
      int int0 = nullReader0.read(charArray0);
      assertTrue(nullReader0.markSupported());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-476L));
      int int0 = nullReader0.processChar();
      assertEquals(0, int0);
      assertEquals((-476L), nullReader0.getSize());
      assertTrue(nullReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1L));
      long long0 = nullReader0.getSize();
      assertTrue(nullReader0.markSupported());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      char[] charArray0 = new char[4];
      nullReader0.read(charArray0, 616, (-1073741823));
      long long0 = nullReader0.getPosition();
      assertEquals((-1073741823L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullReader nullReader0 = new NullReader(0, true, true);
      try { 
        nullReader0.skip(512L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1L, false, true);
      char[] charArray0 = new char[1];
      nullReader0.read(charArray0);
      try { 
        nullReader0.read(charArray0, 2146374983, 3917);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      // Undeclared exception!
      try { 
        nullReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullReader nullReader0 = new NullReader(7L, true, true);
      nullReader0.skip(7L);
      try { 
        nullReader0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1L);
      nullReader0.skip(1695L);
      long long0 = nullReader0.getPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      nullReader0.ready();
      int int0 = 2143;
      nullReader0.mark(2143);
      nullReader0.markSupported();
      nullReader0.getSize();
      nullReader0.getSize();
      nullReader0.read();
      char[] charArray0 = new char[0];
      int int1 = 0;
      int int2 = (-574);
      try { 
        nullReader0.INSTANCE.read(charArray0, 0, 2143);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      long long0 = nullReader0.skip(0L);
      assertTrue(nullReader0.markSupported());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      nullReader0.read();
      try { 
        nullReader0.skip((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Skip after end of file
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1388L), false, false);
      // Undeclared exception!
      try { 
        nullReader0.reset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // mark/reset not supported
         //
         verifyException("org.apache.commons.io.input.UnsupportedOperationExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      try { 
        nullReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No position has been marked
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullReader nullReader0 = NullReader.INSTANCE;
      try { 
        nullReader0.read();
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Read after end of file
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-329L), false, true);
      // Undeclared exception!
      try { 
        nullReader0.mark(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // mark/reset not supported
         //
         verifyException("org.apache.commons.io.input.UnsupportedOperationExceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1935L), true, true);
      char[] charArray0 = new char[0];
      nullReader0.read(charArray0, 1095, 1095);
      try { 
        nullReader0.read(charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-3294L), false, false);
      char[] charArray0 = new char[7];
      nullReader0.read(charArray0, 2144545913, 0);
      long long0 = nullReader0.skip((-2904L));
      assertEquals((-3294L), nullReader0.getPosition());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-995L));
      nullReader0.close();
      assertEquals(0L, nullReader0.getPosition());
      assertTrue(nullReader0.markSupported());
      assertEquals((-995L), nullReader0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1935L), true, true);
      char[] charArray0 = new char[0];
      int int0 = nullReader0.read(charArray0);
      assertEquals((-1935L), nullReader0.getPosition());
      assertEquals((-1935), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-3294L), false, false);
      boolean boolean0 = nullReader0.markSupported();
      assertEquals((-3294L), nullReader0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NullReader nullReader0 = new NullReader(959L, true, true);
      nullReader0.getPosition();
      assertTrue(nullReader0.markSupported());
      assertEquals(959L, nullReader0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-3294L), false, false);
      int int0 = nullReader0.read();
      assertEquals(1L, nullReader0.getPosition());
      assertEquals(0, int0);
  }
}
