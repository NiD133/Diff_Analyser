/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:10 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import org.apache.commons.io.input.NullReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NullReader_ESTest extends NullReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test_resetWithoutMark_ThrowsIOException_singleton() throws Throwable {
        NullReader nullReader = NullReader.INSTANCE;
        try {
            nullReader.reset();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            // Verify reset without mark throws IOException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_markAndReset_AfterRead_Success() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        char[] buffer = new char[4];
        reader.read(buffer); // Read 4 chars
        reader.mark(0);     // Mark position
        reader.reset();     // Reset to mark
        assertEquals(4L, reader.getPosition());
    }

    @Test(timeout = 4000)
    public void test_read_ReturnsZeroAndIncrementsPosition() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        int result = reader.read();
        assertEquals(1L, reader.getPosition());
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void test_skipNegativeAndRead_ZeroLengthArray_NoError() throws Throwable {
        NullReader reader = new NullReader(-995L);
        reader.skip(-5663L);
        int readCount = reader.read((char[]) null, 0, 0);
        assertEquals(-5663L, reader.getPosition());
        assertEquals(0, readCount);
    }

    @Test(timeout = 4000)
    public void test_read_WithNegativeOffset_ReadsFullLength() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        char[] buffer = new char[4];
        int readCount = reader.read(buffer, -2654, 616);
        assertEquals(616L, reader.getPosition());
        assertEquals(616, readCount);
    }

    @Test(timeout = 4000)
    public void test_read_EmptyArray_ReturnsZero() throws Throwable {
        NullReader reader = new NullReader(3453L);
        char[] buffer = new char[0];
        int readCount = reader.read(buffer);
        assertEquals(0, readCount);
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void test_processChar_ReturnsZero() throws Throwable {
        NullReader reader = new NullReader(-476L);
        int result = reader.processChar();
        assertEquals(0, result);
        assertEquals(-476L, reader.getSize());
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void test_getSize_ReturnsNegative() throws Throwable {
        NullReader reader = new NullReader(-1L);
        long size = reader.getSize();
        assertEquals(-1L, size);
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void test_read_WithNegativeLength_AdjustsPosition() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        char[] buffer = new char[4];
        reader.read(buffer, 616, -1073741823);
        assertEquals(-1073741823L, reader.getPosition());
    }

    @Test(timeout = 4000)
    public void test_skip_BeyondEnd_ThrowsEOFException() throws Throwable {
        NullReader reader = new NullReader(0, true, true);
        try {
            reader.skip(512L);
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            // Verify skipping beyond end throws EOFException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_read_BeyondEnd_ThrowsEOFException() throws Throwable {
        NullReader reader = new NullReader(1L, false, true);
        char[] buffer = new char[1];
        reader.read(buffer); // Read the only character
        try {
            reader.read(buffer, 2146374983, 3917);
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            // Verify reading beyond end throws EOFException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_read_NullArray_ThrowsNullPointerException() throws Throwable {
        NullReader reader = new NullReader();
        try {
            reader.read((char[]) null);
            fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // Verify null array throws NullPointerException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_read_AfterSkippingBeyondEnd_ThrowsEOFException() throws Throwable {
        NullReader reader = new NullReader(7L, true, true);
        reader.skip(7L); // Skip all characters
        try {
            reader.read();
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            // Verify read after skipping beyond end throws EOFException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_skip_BeyondEnd_ClampedToSize() throws Throwable {
        NullReader reader = new NullReader(1L);
        reader.skip(1695L); // Attempt to skip beyond end
        assertEquals(1L, reader.getPosition()); // Position clamped to size
    }

    @Test(timeout = 4000)
    public void test_skipZero_ReturnsZero() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        long skipped = reader.skip(0L);
        assertEquals(0L, skipped);
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void test_skipNegative_AfterEnd_ThrowsIOException() throws Throwable {
        NullReader reader = new NullReader();
        reader.read(); // Read the only character (size=0)
        try {
            reader.skip(-1);
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            // Verify negative skip after end throws IOException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_reset_WhenMarkNotSupported_ThrowsUnsupportedOperationException() throws Throwable {
        NullReader reader = new NullReader(-1388L, false, false);
        try {
            reader.reset();
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Verify reset without mark support throws UnsupportedOperationException
            verifyException("org.apache.commons.io.input.UnsupportedOperationExceptions", e);
        }
    }

    @Test(timeout = 4000)
    public void test_resetWithoutMark_ThrowsIOException() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        try {
            reader.reset();
            fail("Expecting exception: IOException");
        } catch (IOException e) {
            // Verify reset without mark throws IOException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_mark_WhenMarkNotSupported_ThrowsUnsupportedOperationException() throws Throwable {
        NullReader reader = new NullReader(-329L, false, true);
        try {
            reader.mark(0);
            fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Verify mark without support throws UnsupportedOperationException
            verifyException("org.apache.commons.io.input.UnsupportedOperationExceptions", e);
        }
    }

    @Test(timeout = 4000)
    public void test_read_AfterInvalidReadOperation_ThrowsEOFException() throws Throwable {
        NullReader reader = new NullReader(-1935L, true, true);
        char[] buffer = new char[0];
        reader.read(buffer, 1095, 1095); // Invalid read (buffer too small)
        try {
            reader.read(buffer);
            fail("Expecting exception: EOFException");
        } catch (EOFException e) {
            // Verify read after invalid operation throws EOFException
            verifyException("org.apache.commons.io.input.NullReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_read_ZeroCharsThenSkipNegative_ReturnsMinusOne() throws Throwable {
        NullReader reader = new NullReader(-3294L, false, false);
        char[] buffer = new char[7];
        reader.read(buffer, 2144545913, 0); // Read zero characters
        long skipped = reader.skip(-2904L);
        assertEquals(-1L, skipped);
        assertEquals(-3294L, reader.getPosition());
    }

    @Test(timeout = 4000)
    public void test_close_ResetsPosition() throws Throwable {
        NullReader reader = new NullReader(-995L);
        reader.close();
        assertEquals(0L, reader.getPosition());
        assertTrue(reader.markSupported());
        assertEquals(-995L, reader.getSize());
    }

    @Test(timeout = 4000)
    public void test_read_EmptyArrayWithNegativeSize_AdjustsPosition() throws Throwable {
        NullReader reader = new NullReader(-1935L, true, true);
        char[] buffer = new char[0];
        int readCount = reader.read(buffer);
        assertEquals(-1935L, reader.getPosition());
        assertEquals(-1935, readCount);
    }

    @Test(timeout = 4000)
    public void test_markSupported_WhenMarkNotSupported_ReturnsFalse() throws Throwable {
        NullReader reader = new NullReader(-3294L, false, false);
        assertFalse(reader.markSupported());
        assertEquals(-3294L, reader.getSize());
    }

    @Test(timeout = 4000)
    public void test_initialPosition_MatchesConstructor() throws Throwable {
        NullReader reader = new NullReader(959L, true, true);
        assertEquals(0L, reader.getPosition());
        assertTrue(reader.markSupported());
        assertEquals(959L, reader.getSize());
    }

    @Test(timeout = 4000)
    public void test_read_WithNegativeSize_ReturnsZeroAndIncrementsPosition() throws Throwable {
        NullReader reader = new NullReader(-3294L, false, false);
        int result = reader.read();
        assertEquals(1L, reader.getPosition());
        assertEquals(0, result);
    }
}