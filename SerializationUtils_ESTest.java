/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:23:41 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Locale;
import org.apache.commons.lang3.SerializationUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class SerializationUtils_ESTest extends SerializationUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void serialize_nullObject_shouldSucceed() throws Throwable {
        // Test serializing null to an OutputStream should not throw
        OutputStream outputStream = new MockPrintStream("objectData");
        SerializationUtils.serialize(null, outputStream);
    }

    @Test(timeout = 4000)
    public void classLoaderAwareInputStream_constructorWithNullInputStream_throwsNullPointerException() throws Throwable {
        ClassLoader classLoader = ClassLoader.getSystemClassLoader();
        try {
            // Attempt to create stream with null input stream
            new SerializationUtils.ClassLoaderAwareObjectInputStream(null, classLoader);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void roundtrip_nullObject_returnsNull() throws Throwable {
        Integer result = SerializationUtils.roundtrip(null);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void serializeAndDeserialize_nullObject_returnsNull() throws Throwable {
        byte[] serialized = SerializationUtils.serialize(null);
        Object deserialized = SerializationUtils.deserialize(serialized);
        assertNull(deserialized);
    }

    @Test(timeout = 4000)
    public void serializeAndDeserialize_LocalePRC_retainsState() throws Throwable {
        Locale original = Locale.PRC;
        byte[] serialized = SerializationUtils.serialize(original);
        Locale deserialized = (Locale) SerializationUtils.deserialize(serialized);
        assertEquals("Variant should be empty", "", deserialized.getVariant());
    }

    @Test(timeout = 4000)
    public void deserialize_sequenceInputStreamOfNull_returnsNull() throws Throwable {
        byte[] serializedNull = SerializationUtils.serialize(null);
        ByteArrayInputStream stream1 = new ByteArrayInputStream(serializedNull);
        ByteArrayInputStream stream2 = new ByteArrayInputStream(serializedNull);
        SequenceInputStream combinedStream = new SequenceInputStream(stream1, stream2);
        
        Object result = SerializationUtils.deserialize(combinedStream);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void deserialize_validLocaleJapaneseStream_returnsEqualObject() throws Throwable {
        Locale original = Locale.JAPANESE;
        byte[] serialized = SerializationUtils.serialize(original);
        ByteArrayInputStream inputStream = new ByteArrayInputStream(serialized);
        
        Object deserialized = SerializationUtils.deserialize(inputStream);
        assertSame(deserialized, original); // Locale uses flyweight pattern
    }

    @Test(timeout = 4000)
    public void serialize_toUnconnectedPipedOutputStream_throwsRuntimeException() throws Throwable {
        PipedOutputStream outputStream = new PipedOutputStream();
        Class<Object> clazz = Object.class;
        try {
            // Attempt serialization to unconnected pipe
            SerializationUtils.serialize(clazz, outputStream);
            fail("Expected RuntimeException due to unconnected pipe");
        } catch (RuntimeException e) {
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void serialize_nonSerializableObjectInMap_throwsRuntimeException() throws Throwable {
        HashMap<MockFileInputStream, Object> map = new HashMap<>();
        File tempFile = MockFile.createTempFile("4*54", "4*54");
        MockFileInputStream fileInputStream = new MockFileInputStream(tempFile);
        map.put(fileInputStream, tempFile);
        
        try {
            // Map contains non-serializable MockFileInputStream
            SerializationUtils.serialize(map);
            fail("Expected RuntimeException (NotSerializableException)");
        } catch (RuntimeException e) {
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void deserialize_invalidByteArray_throwsEOFException() throws Throwable {
        byte[] invalidData = new byte[1]; // Incomplete serialized data
        try {
            SerializationUtils.deserialize(invalidData);
            fail("Expected RuntimeException (EOFException)");
        } catch (RuntimeException e) {
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void deserialize_nullByteArray_throwsNullPointerException() throws Throwable {
        try {
            SerializationUtils.deserialize(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void deserialize_unconnectedPipedInputStream_throwsRuntimeException() throws Throwable {
        PipedInputStream inputStream = new PipedInputStream();
        try {
            // Attempt deserialization from unconnected pipe
            SerializationUtils.deserialize(inputStream);
            fail("Expected RuntimeException due to unconnected pipe");
        } catch (RuntimeException e) {
            verifyException("org.apache.commons.lang3.SerializationUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void deserialize_nullInputStream_throwsNullPointerException() throws Throwable {
        try {
            SerializationUtils.deserialize((InputStream) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void deserialize_byteArrayInputStreamWithInvalidOffset_throwsArrayIndexOutOfBoundsException() throws Throwable {
        byte value = 114;
        byte[] serialized = SerializationUtils.serialize(value);
        try {
            // Create stream with invalid negative offset
            ByteArrayInputStream inputStream = new ByteArrayInputStream(serialized, -1, 163);
            SerializationUtils.deserialize(inputStream);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected during stream creation
        }
    }

    @Test(timeout = 4000)
    public void serialize_nonNullObjectToNullOutputStream_throwsNullPointerException() throws Throwable {
        Integer value = new Integer(-106);
        try {
            SerializationUtils.serialize(value, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void clone_nullObject_returnsNull() throws Throwable {
        Integer result = SerializationUtils.clone(null);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void clone_integer_returnsEqualValue() throws Throwable {
        Integer original = new Integer(114);
        Integer cloned = SerializationUtils.clone(original);
        assertEquals(original, cloned);
    }

    @Test(timeout = 4000)
    public void constructor_instantiation_success() throws Throwable {
        // Verify utility class constructor can be instantiated
        SerializationUtils utils = new SerializationUtils();
        assertNotNull(utils);
    }
}