package com.itextpdf.text.pdf;

import com.itextpdf.text.io.RandomAccessSourceFactory;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

/**
 * Tests the behavior of the file pointer in {@link RandomAccessFileOrArray}.
 */
public class RandomAccessFileOrArrayTest {

    /**
     * Verifies that the file pointer, as returned by {@link RandomAccessFileOrArray#getFilePointer()},
     * is correctly decremented by one after a byte is pushed back into the stream.
     */
    @Test
    public void getFilePointer_afterPushback_shouldReturnDecrementedPosition() throws IOException {
        // Arrange
        byte[] testData = createSequentialByteArray(10000);
        RandomAccessFileOrArray randomAccessFile = new RandomAccessFileOrArray(
                new RandomAccessSourceFactory().createSource(testData));

        final long initialPosition = 72L;
        final byte byteToPushBack = 42;

        randomAccessFile.seek(initialPosition);
        // Pre-condition check to ensure seek worked as expected
        assertEquals("Pre-condition failed: File pointer should be at the initial position after seek.",
                initialPosition, randomAccessFile.getFilePointer());

        // Act
        randomAccessFile.pushBack(byteToPushBack);

        // Assert
        long expectedPosition = initialPosition - 1;
        long actualPosition = randomAccessFile.getFilePointer();
        assertEquals("File pointer should be decremented by 1 after a pushBack operation.",
                expectedPosition, actualPosition);
    }

    /**
     * Creates a byte array of a given size with sequential byte values (0, 1, 2, ..., 255, 0, ...).
     * @param size The desired size of the byte array.
     * @return The generated byte array.
     */
    private byte[] createSequentialByteArray(int size) {
        ByteArrayOutputStream os = new ByteArrayOutputStream(size);
        for (int i = 0; i < size; i++) {
            os.write(i); // The int is automatically truncated to a byte
        }
        return os.toByteArray();
    }
}