/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:41:22 GMT 2025
 */

package org.jfree.chart.renderer.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.DeviationStepRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeviationRenderer_ESTest extends DeviationRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      DeviationRenderer deviationRenderer1 = (DeviationRenderer)deviationRenderer0.clone();
      assertEquals(0.5F, deviationRenderer1.getAlpha(), 0.01F);
      
      deviationRenderer1.alpha = (-212.571F);
      boolean boolean0 = deviationRenderer0.equals(deviationRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      
      deviationRenderer0.setAlpha(1);
      assertEquals(1.0F, deviationRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeviationStepRenderer deviationStepRenderer0 = new DeviationStepRenderer(false, false);
      assertEquals(0.5F, deviationStepRenderer0.getAlpha(), 0.01F);
      
      deviationStepRenderer0.setAlpha(0.0F);
      assertEquals(0.0F, deviationStepRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      
      deviationRenderer0.alpha = 0.0F;
      float float0 = deviationRenderer0.getAlpha();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      deviationRenderer0.alpha = (-189.0F);
      float float0 = deviationRenderer0.getAlpha();
      assertEquals((-189.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      DefaultIntervalXYDataset<DatasetRenderingOrder> defaultIntervalXYDataset0 = new DefaultIntervalXYDataset<DatasetRenderingOrder>();
      deviationRenderer0.findRangeBounds(defaultIntervalXYDataset0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Date[] dateArray0 = new Date[3];
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("", timeZone0, locale0);
      dateArray0[0] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[1] = dateAxis0.DEFAULT_ANCHOR_DATE;
      dateArray0[2] = dateArray0[1];
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1.0);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(deviationRenderer0.ZERO, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      deviationRenderer0.findRangeBounds(defaultHighLowDataset0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      DeviationRenderer deviationRenderer1 = (DeviationRenderer)deviationRenderer0.clone();
      assertEquals(0.5F, deviationRenderer1.getAlpha(), 0.01F);
      
      deviationRenderer1.alpha = 6.0F;
      boolean boolean0 = deviationRenderer0.equals(deviationRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      Object object0 = new Object();
      boolean boolean0 = deviationRenderer0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      boolean boolean0 = deviationRenderer0.equals(deviationRenderer0);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      DeviationRenderer deviationRenderer1 = (DeviationRenderer)deviationRenderer0.clone();
      boolean boolean0 = deviationRenderer0.equals(deviationRenderer1);
      assertEquals(0.5F, deviationRenderer1.getAlpha(), 0.01F);
      assertTrue(boolean0);
      assertTrue(deviationRenderer1.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      boolean boolean0 = deviationRenderer0.isLinePass(1);
      assertTrue(boolean0);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      boolean boolean0 = deviationRenderer0.isLinePass(3);
      assertFalse(boolean0);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeviationStepRenderer deviationStepRenderer0 = new DeviationStepRenderer();
      boolean boolean0 = deviationStepRenderer0.isItemPass(2);
      assertEquals(0.5F, deviationStepRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      boolean boolean0 = deviationRenderer0.isItemPass(3);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertFalse(boolean0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeviationStepRenderer deviationStepRenderer0 = new DeviationStepRenderer(false, true);
      // Undeclared exception!
      try { 
        deviationStepRenderer0.setAlpha(2255.623F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'alpha' in the range 0.0 to 1.0.
         //
         verifyException("org.jfree.chart.renderer.xy.DeviationRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      // Undeclared exception!
      try { 
        deviationRenderer0.setAlpha((-2381));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'alpha' in the range 0.0 to 1.0.
         //
         verifyException("org.jfree.chart.renderer.xy.DeviationRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) deviationRenderer0.ZERO, 90.0, 3048.34637057, 0.0);
      XYPlot<CategoryAnchor> xYPlot0 = new XYPlot<CategoryAnchor>();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "w@^qxE!G 6g");
      TimeSeriesCollection<CategoryAnchor> timeSeriesCollection0 = new TimeSeriesCollection<CategoryAnchor>(simpleTimeZone0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = deviationRenderer0.initialise((Graphics2D) null, rectangle2D_Double0, xYPlot0, timeSeriesCollection0, plotRenderingInfo0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertFalse(xYItemRendererState0.getProcessVisibleItemsOnly());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      Short short0 = new Short((short)2396);
      MatrixSeries<Short> matrixSeries0 = new MatrixSeries<Short>(short0, 17, 28);
      MatrixSeriesCollection<Short> matrixSeriesCollection0 = new MatrixSeriesCollection<Short>(matrixSeries0);
      deviationRenderer0.findRangeBounds(matrixSeriesCollection0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      deviationRenderer0.setDrawSeriesLineAsPath(true);
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      int int0 = deviationRenderer0.getPassCount();
      assertEquals(3, int0);
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      float float0 = deviationRenderer0.getAlpha();
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(0.5F, float0, 0.01F);
  }
}