/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:25:05 GMT 2025
 */

package org.mockito.internal.verification;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.creation.MockSettingsImpl;
import org.mockito.internal.invocation.InvocationMatcher;
import org.mockito.internal.stubbing.InvocationContainerImpl;
import org.mockito.internal.util.Timer;
import org.mockito.internal.verification.AtMost;
import org.mockito.internal.verification.NoMoreInteractions;
import org.mockito.internal.verification.VerificationDataImpl;
import org.mockito.internal.verification.VerificationOverTimeImpl;
import org.mockito.internal.verification.api.VerificationData;
import org.mockito.verification.After;
import org.mockito.verification.Timeout;
import org.mockito.verification.VerificationMode;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class VerificationOverTimeImpl_ESTest extends VerificationOverTimeImpl_ESTest_scaffolding {

    // Tests for getTimer()
    @Test(timeout = 4000)
    public void getTimer_ReturnsNull_WhenInitializedWithNullTimer() throws Throwable {
        After after0 = new After(10L, (VerificationMode) null);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(0L, after0, false, (Timer) null);
        Timer timer0 = verificationOverTimeImpl0.getTimer();
        assertNull(timer0);
    }

    // Tests for isReturnOnSuccess() and getPollingPeriodMillis()
    @Test(timeout = 4000)
    public void isReturnOnSuccess_AndGetPollingPeriod_ReturnCorrectValues() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        After after0 = new After(2416L, noMoreInteractions0);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(5157L, 1L, after0, false);
        Timer timer0 = verificationOverTimeImpl0.getTimer();
        VerificationOverTimeImpl verificationOverTimeImpl1 = 
            new VerificationOverTimeImpl(5157L, noMoreInteractions0, true, timer0);
        
        // Verify returnOnSuccess is true and polling period is 5157L
        assertTrue(verificationOverTimeImpl1.isReturnOnSuccess());
        assertEquals(5157L, verificationOverTimeImpl1.getPollingPeriodMillis());
    }

    // Tests for getPollingPeriodMillis()
    @Test(timeout = 4000)
    public void getPollingPeriodMillis_ReturnsZero_WhenSetToZero() throws Throwable {
        AtMost atMost0 = new AtMost(3199);
        Timeout timeout0 = new Timeout(0L, atMost0);
        Timer timer0 = new Timer(0L);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(0L, timeout0, false, timer0);
        long actualPollingPeriod = verificationOverTimeImpl0.getPollingPeriodMillis();
        assertEquals(0L, actualPollingPeriod);
    }

    @Test(timeout = 4000)
    public void getPollingPeriodMillis_ReturnsValueSetInConstructor() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        After after0 = new After(2416L, noMoreInteractions0);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(5157L, 1L, after0, false);
        long actualPollingPeriod = verificationOverTimeImpl0.getPollingPeriodMillis();
        assertEquals(5157L, actualPollingPeriod);
    }

    @Test(timeout = 4000)
    public void getPollingPeriodMillis_ReturnsNegativeValue_WhenSetInConstructor() throws Throwable {
        After after0 = new After(0L, (VerificationMode) null);
        Timer timer0 = new Timer(488L);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl((-288L), after0, true, timer0);
        long actualPollingPeriod = verificationOverTimeImpl0.getPollingPeriodMillis();
        assertEquals(-288L, actualPollingPeriod);
    }

    // Tests for getDelegate()
    @Test(timeout = 4000)
    public void getDelegate_ReturnsSameInstance_AsProvidedInConstructor() throws Throwable {
        AtMost atMost0 = new AtMost(3199);
        Timeout timeout0 = new Timeout(0L, atMost0);
        Timer timer0 = new Timer(3199);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(0L, timeout0, false, timer0);
        VerificationMode actualDelegate = verificationOverTimeImpl0.getDelegate();
        assertSame(timeout0, actualDelegate);
    }

    @Test(timeout = 4000)
    public void getDelegate_ReturnsDelegate_WhenSetInConstructor() throws Throwable {
        Timer timer0 = new Timer(1418L);
        VerificationOverTimeImpl verificationOverTimeImpl0 = 
            new VerificationOverTimeImpl(1418L, (VerificationMode) null, true, timer0);
        // Should return the delegate set in constructor (null)
        assertNull(verificationOverTimeImpl0.getDelegate());
    }

    // Tests for copyWithVerificationMode()
    @Test(timeout = 4000)
    public void copyWithVerificationMode_ReturnsNewInstance_NotEqualToOriginal() throws Throwable {
        VerificationOverTimeImpl original = 
            new VerificationOverTimeImpl(0L, 0L, (VerificationMode) null, false);
        VerificationOverTimeImpl copy = original.copyWithVerificationMode((VerificationMode) null);
        assertNotSame(original, copy);
    }

    @Test(timeout = 4000)
    public void copyWithVerificationMode_CopiesPollingPeriod_FromOriginal() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        VerificationOverTimeImpl original = 
            new VerificationOverTimeImpl((-102L), 0L, noMoreInteractions0, false);
        VerificationOverTimeImpl copy = original.copyWithVerificationMode(noMoreInteractions0);
        assertEquals(-102L, copy.getPollingPeriodMillis());
    }

    @Test(timeout = 4000)
    public void copyWithVerificationMode_ThrowsException_WhenDelegateIsNull() throws Throwable {
        VerificationOverTimeImpl original = 
            new VerificationOverTimeImpl(3L, 3L, (VerificationMode) null, true);
        VerificationOverTimeImpl copy = original.copyWithVerificationMode((VerificationMode) null);
        try {
            copy.copyWithVerificationMode(original);
            fail("Expected NoSuchElementException");
        } catch (NoSuchElementException e) {
            // Expected from LinkedList
        }
    }

    @Test(timeout = 4000)
    public void copyWithVerificationMode_ThrowsNPE_WhenTimerIsNull() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        VerificationOverTimeImpl original = 
            new VerificationOverTimeImpl(3058L, noMoreInteractions0, true, (Timer) null);
        try {
            original.copyWithVerificationMode(noMoreInteractions0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected due to null timer
        }
    }

    // Tests for constructor exceptions
    @Test(timeout = 4000)
    public void constructor_ThrowsRuntimeException_WhenNegativePollingPeriodUsed() throws Throwable {
        VerificationOverTimeImpl original = 
            new VerificationOverTimeImpl(0L, 0L, (VerificationMode) null, false);
        try {
            new VerificationOverTimeImpl((-720L), (-720L), original, false);
            fail("Expected RuntimeException");
        } catch (RuntimeException e) {
            // Expected
        }
    }

    // Tests for canRecoverFromFailure()
    @Test(timeout = 4000)
    public void canRecoverFromFailure_ReturnsFalse_ForNoMoreInteractions() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        Timeout timeout0 = new Timeout(318L, noMoreInteractions0);
        Timer timer0 = new Timer(5157L);
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(1L, timeout0, true, timer0);
        boolean canRecover = impl.canRecoverFromFailure(noMoreInteractions0);
        assertFalse(canRecover);
    }

    @Test(timeout = 4000)
    public void canRecoverFromFailure_ReturnsTrue_ForAfterMode() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        After after0 = new After(2416L, noMoreInteractions0);
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(5157L, 1L, after0, false);
        boolean canRecover = impl.canRecoverFromFailure(after0);
        assertTrue(canRecover);
    }

    @Test(timeout = 4000)
    public void canRecoverFromFailure_ReturnsFalse_ForAtMostMode() throws Throwable {
        AtMost atMost0 = new AtMost(0);
        Timer timer0 = new Timer(0);
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(1444L, atMost0, true, timer0);
        boolean canRecover = impl.canRecoverFromFailure(atMost0);
        assertFalse(canRecover);
    }

    // Tests for verify()
    @Test(timeout = 4000)
    public void verify_ThrowsNPE_WhenDataIsNull() throws Throwable {
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(0L, 0L, (VerificationMode) null, false);
        try {
            impl.verify((VerificationData) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void verify_DoesNotThrow_WithNoMoreInteractionsAndNullInvocationMatcher() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(0L, 0L, noMoreInteractions0, true);
        MockSettingsImpl<Object> mockSettings = new MockSettingsImpl<>();
        InvocationContainerImpl container = new InvocationContainerImpl(mockSettings);
        VerificationDataImpl data = new VerificationDataImpl(container, (InvocationMatcher) null);
        impl.verify(data); // Should not throw
    }

    @Test(timeout = 4000)
    public void verify_ThrowsException_WithNoMoreInteractionsAndInvalidData() throws Throwable {
        NoMoreInteractions noMoreInteractions0 = new NoMoreInteractions();
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(2161L, 2161L, noMoreInteractions0, false);
        MockSettingsImpl<Object> mockSettings = new MockSettingsImpl<>();
        InvocationContainerImpl container = new InvocationContainerImpl(mockSettings);
        VerificationDataImpl data = new VerificationDataImpl(container, (InvocationMatcher) null);
        try {
            impl.verify(data);
            fail("Expected exception");
        } catch (Throwable e) {
            // Expected from verification logic
        }
    }

    // Tests for isReturnOnSuccess()
    @Test(timeout = 4000)
    public void isReturnOnSuccess_ReturnsFalse_WhenSetInConstructor() throws Throwable {
        VerificationOverTimeImpl impl = 
            new VerificationOverTimeImpl(0L, 0L, (VerificationMode) null, false);
        assertFalse(impl.isReturnOnSuccess());
    }
}