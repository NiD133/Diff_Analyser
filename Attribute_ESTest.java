/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:40:37 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.internal.QuietAppendable;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Range;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("ZVY", document_OutputSettings_Syntax0);
      assertEquals("ZVY", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("AfterFrameset", document_OutputSettings_Syntax0);
      assertEquals("AfterFrameset", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("z>Su ", document_OutputSettings_Syntax0);
      assertEquals("z_Su_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charsetEncoder0);
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(outputStreamWriter0);
      Attribute.htmlNoValidate((String) null, (String) null, quietAppendable0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^N{|l+0Tm", "n-d?");
      StringBuilder stringBuilder0 = new StringBuilder("^N{|l+0Tm");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(stringBuilder0);
      attribute0.html(quietAppendable0, document_OutputSettings0);
      assertEquals("^N{|l+0Tm^N{|l+0Tm=\"n-d?\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder();
      Attribute.html("\"4}zG", "_", (Appendable) stringBuilder0, document_OutputSettings0);
      assertEquals("_4}zG=\"_\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("ismap", "XII YZ}5!");
      assertEquals("XII YZ}5!", attribute0.getValue());
      
      attribute0.setValue("ismap");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("4*it@", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.jsoup.select.Evaluator$IsOnlyOfType", "org.jsoup.select.Evaluator$IsOnlyOfType");
      attribute0.setValue("");
      attribute0.setValue("");
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-data@X-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("bokmyj\"!bh4db:", (String) null, attributes0);
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Attribute.getValidKey("", (Document.OutputSettings.Syntax) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("``qmo2/5=ohpy:6", (String) null);
      Attribute attribute1 = attribute0.clone();
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("`ata-", "`ata-");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute((String) null, (String) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("kgU@cbsv&}$~/K5", "kgU@cbsv&}$~/K5");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.htmlNoValidate("declarx", "75L?/)Wy)4x", (QuietAppendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("v7JC~OF}qK`", "v7JC~OF}qK`");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(charBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html(quietAppendable0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(charBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("checked", "org.jsoup.select.Evaluator$AttributeWithValueStarting", quietAppendable0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("SAJSG]wWsB0C#[5", "9v/CARD0_U64t>:3", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.internal.QuietAppendable$BaseAppendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("zyixbn`lOB*#", "bokmyj\"!bh4db:");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.internal.QuietAppendable$BaseAppendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("`ata-", "`ata-");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("g", "g");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.QuietAppendable$BaseAppendable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      // Undeclared exception!
      try { 
        Attribute.getValidKey((String) null, document_OutputSettings_Syntax0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("1$uMT~<$2", document_OutputSettings_Syntax0);
      assertEquals("1$uMT~<$2", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html(">Qu{B", "org.jsoup.select.Evaluator$ContainsOwnText", (QuietAppendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("AttributeName", "AttributeName", attributes0);
      String string0 = attribute0.namespace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("QSy4iJ5y", "QSy4iJ5y");
      String string0 = attribute0.prefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_5EN!+,Z,`");
      // Undeclared exception!
      try { 
        Attribute.html("'Dnco", "'Dnco", (Appendable) mockPrintWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute(" /@", " /@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((QuietAppendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("open", "w'8l4N");
      Attribute attribute1 = attribute0.clone();
      attribute0.setValue("compact");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("compact", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^B_1", "^B_1");
      Attribute attribute1 = new Attribute("g", "=O:,>Mv%I");
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("=O:,>Mv%I", attribute1.getValue());
      assertFalse(boolean0);
      assertEquals("", attribute1.prefix());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^B_1", "^B_1");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("5|pc", "Bi", attributes0);
      boolean boolean0 = attribute0.equals("5|pc");
      assertEquals("5|pc", attribute0.getKey());
      assertEquals("Bi", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("_Tr_2_", "ope3n");
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("ope3n", attribute0.getValue());
      assertEquals("_Tr_2_", attribute0.localName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("H", "g");
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("g", attribute0.getValue());
      assertEquals("H", attribute0.localName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      Attributes attributes0 = textNode0.attributes();
      Attribute attribute0 = new Attribute("nyc_q_", "", attributes0);
      String string0 = attribute0.toString();
      assertEquals("nyc_q_=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "/icwoq", document_OutputSettings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-data-2h'w0xmo/lju>^m", "actio", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("actio", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("4c]oHqR=I", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("4c]oHqR_I", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("AkY'Y", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("AkY_Y", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("XII YZ}5!", "async");
      String string0 = attribute0.html();
      assertEquals("XII_YZ}5!=\"async\"", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("w'8l4N", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("_w_8l4N", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("\r\n\r\n", document_OutputSettings_Syntax0);
      assertEquals("_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("[^-a-zA-Z0-9_:.]+", document_OutputSettings_Syntax0);
      assertEquals("_-a-zA-Z0-9_:._", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("data-_Tr_2_", document_OutputSettings_Syntax0);
      assertEquals("data-_Tr_2_", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("kQN^LU", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("kQ_N_LU", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey(":has() must have a selector", document_OutputSettings_Syntax0);
      assertEquals(":has_must_have_a_selector", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("w'8l4N", document_OutputSettings_Syntax0);
      assertNotNull(string0);
      assertEquals("_w_8l4N", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("", document_OutputSettings_Syntax0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      String string0 = Attribute.getValidKey("", document_OutputSettings_Syntax0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      String string0 = Attribute.getValidKey("autofocus", document_OutputSettings_Syntax0);
      assertEquals("autofocus", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html("-Gkt9'/sI", "autofocus", (QuietAppendable) null, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attribute attribute0 = new Attribute("X@BGZ^/[A&M>", "_w_8_4p");
      attribute0.sourceRange();
      assertEquals("X@BGZ^/[A&M>", attribute0.getKey());
      assertEquals("_w_8_4p", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("o>IL<g>QPd8PNQ+@5Ns", "RU-^t-03BGs9<q?", attributes0);
      Range.AttributeRange range_AttributeRange0 = attribute0.sourceRange();
      assertNotNull(range_AttributeRange0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("_Tr_2_", "ope3n");
      attribute0.namespace();
      assertEquals("ope3n", attribute0.getValue());
      assertEquals("_Tr_2_", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("XII YZ}5!", "async");
      String string0 = attribute0.localName();
      assertEquals("async", attribute0.getValue());
      assertEquals("XII YZ}5!", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attribute attribute0 = new Attribute("Rr7w\u0000k7A:", " g!K?w");
      String string0 = attribute0.localName();
      assertEquals(" g!K?w", attribute0.getValue());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attribute attribute0 = new Attribute("^-a-A-Z0-z_:.]+", "^-a-A-Z0-z_:.]+");
      String string0 = attribute0.prefix();
      assertEquals("^-a-A-Z0-z_", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("5|pc", "@");
      Attribute attribute0 = new Attribute("5|pc", "Bi", attributes0);
      assertEquals("Bi", attribute0.getValue());
      
      String string0 = attribute0.setValue("@");
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("5|pc", "Bi", attributes0);
      attribute0.setValue("@");
      assertEquals("@", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attribute attribute0 = new Attribute("pge#v\"q826", "pge#v\"q826");
      boolean boolean0 = attribute0.hasDeclaredValue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-(i7=", "dvy}i6(v)yl6hca_8");
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.hasDeclaredValue();
      assertEquals("", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Range.AttributeRange range_AttributeRange0 = Range.AttributeRange.UntrackedAttr;
      Attributes attributes1 = attributes0.sourceRange("5|pc", range_AttributeRange0);
      attributes1.add("5|pc", "@");
      Attribute attribute0 = new Attribute("5|pc", "Bi", attributes0);
      assertEquals("5|pc", attribute0.getKey());
      
      attribute0.setKey("Bi");
      assertEquals("Bi", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("5|pc", "@");
      Attribute attribute0 = new Attribute("5|pc", "Bi", attributes0);
      assertEquals("5|pc", attribute0.getKey());
      
      attribute0.setKey("Bi");
      assertEquals("Bi", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("RU-^t-03BGs9<q?", "RU-^t-03BGs9<q?", attributes0);
      attribute0.setKey("jqU#:WT5 $");
      assertTrue(attribute0.hasDeclaredValue());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("XII YZ}5!", "async");
      assertEquals("XII YZ}5!", attribute0.localName());
      
      attribute0.setKey("async");
      assertEquals("async", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("PTOx<F9r`[M>.0RAj)", "PTOx<F9r`[M>.0RAj)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("bokmyj\"!bh4db:", (String) null, attributes0);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("{Q.MqD", "RU-^t-03BGs9<q?");
      String string0 = attribute0.getValue();
      assertEquals("{Q.MqD", attribute0.localName());
      assertEquals("RU-^t-03BGs9<q?", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("_Tr_2_", "ope3n");
      String string0 = attribute0.getKey();
      assertEquals("ope3n", attribute0.getValue());
      assertEquals("_Tr_2_", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("XII YZ}5!", "async");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("async", attribute0.getValue());
      assertEquals("XII YZ}5!", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attribute attribute0 = new Attribute("!m\"", "!m\"");
      StringWriter stringWriter0 = new StringWriter(3969);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("!m_=\"!m&quot;\"", stringWriter0.toString());
  }
}
