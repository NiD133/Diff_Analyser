/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:35:49 GMT 2025
 */

package com.itextpdf.text.pdf.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.CMapAwareDocumentFont;
import com.itextpdf.text.pdf.DocumentFont;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.parser.GraphicsState;
import com.itextpdf.text.pdf.parser.LineSegment;
import com.itextpdf.text.pdf.parser.MarkedContentInfo;
import com.itextpdf.text.pdf.parser.Matrix;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextRenderInfo_ESTest extends TextRenderInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      graphicsState0.horizontalScaling = 0.0F;
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      List<TextRenderInfo> list0 = textRenderInfo0.getCharacterRenderInfos();
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      graphicsState0.characterSpacing = (float) 7;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      List<TextRenderInfo> list0 = textRenderInfo0.getCharacterRenderInfos();
      assertEquals(9, list0.size());
      assertFalse(list0.contains(textRenderInfo0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      graphicsState0.fontSize = (float) 4;
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      List<TextRenderInfo> list0 = textRenderInfo0.getCharacterRenderInfos();
      assertEquals(9, list0.size());
      assertFalse(list0.contains(textRenderInfo0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      graphicsState0.horizontalScaling = 0.0F;
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getSingleSpaceWidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      graphicsState0.characterSpacing = 1025.7177F;
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix(2766.3F, 1543.6833F);
      TreeSet<MarkedContentInfo> treeSet0 = new TreeSet<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, treeSet0);
      float float0 = textRenderInfo0.getSingleSpaceWidth();
      assertEquals(1025.7175F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      graphicsState0.wordSpacing = 87.0F;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getSingleSpaceWidth();
      assertEquals(87.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      graphicsState0.rise = (-3505.32F);
      Matrix matrix0 = graphicsState0.ctm;
      PdfString pdfString0 = new PdfString();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      float float0 = textRenderInfo0.getRise();
      assertEquals(3505.32F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      graphicsState0.horizontalScaling = 0.0F;
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getAscentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.wordSpacing = (float) 1;
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString(" ", "Cp1252");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getAscentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      graphicsState0.rise = (float) 1;
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix(6, (-1301.7483F));
      HashSet<MarkedContentInfo> hashSet0 = new HashSet<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, hashSet0);
      LineSegment lineSegment0 = textRenderInfo0.getDescentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.rise = 1296.0F;
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getAscentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      graphicsState0.rise = (float) 2;
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getUnscaledBaseline();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      graphicsState0.rise = (float) 2;
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getBaseline();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      MarkedContentInfo markedContentInfo0 = new MarkedContentInfo(pdfGState0.BM_DIFFERENCE, pdfGState0);
      stack0.add(markedContentInfo0);
      stack0.add(markedContentInfo0);
      PdfDate pdfDate0 = new PdfDate();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      boolean boolean0 = textRenderInfo0.hasMcid(1046, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix(2, 4);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getUnscaledWidth();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      graphicsState0.characterSpacing = (float) 7;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getUnscaledWidth();
      assertEquals(63.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      graphicsState0.renderMode = 9;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      int int0 = textRenderInfo0.getTextRenderMode();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      graphicsState0.fontSize = (-744.2958F);
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix(2, 4);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getSingleSpaceWidth();
      assertEquals(744.2958F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, linkedHashSet0);
      PdfString pdfString0 = textRenderInfo0.getPdfString();
      assertNull(pdfString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfDate pdfDate0 = new PdfDate();
      pdfDate0.setHexWriting(true);
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      PdfString pdfString0 = textRenderInfo0.getPdfString();
      assertFalse(pdfString0.isIndirect());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      cMapAwareDocumentFont0.setSubset(false);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      DocumentFont documentFont0 = textRenderInfo0.getFont();
      assertEquals(5, BaseFont.FONT_TYPE_T3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfDate pdfDate0 = new PdfDate();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      cMapAwareDocumentFont0.setDirectTextToByte(true);
      DocumentFont documentFont0 = textRenderInfo0.getFont();
      assertFalse(BaseFont.NOT_CACHED);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString();
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      cMapAwareDocumentFont0.setCompressionLevel(1);
      DocumentFont documentFont0 = textRenderInfo0.getFont();
      assertEquals(1, BaseFont.ASCENT);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      BaseColor baseColor0 = BaseColor.GRAY;
      graphicsState0.fillColor = baseColor0;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      BaseColor baseColor1 = textRenderInfo0.getFillColor();
      assertEquals((-8355712), baseColor1.getRGB());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.ctm;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      List<TextRenderInfo> list0 = textRenderInfo0.getCharacterRenderInfos();
      assertFalse(list0.contains(textRenderInfo0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      PdfDate pdfDate0 = new PdfDate();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      stack0.add((MarkedContentInfo) null);
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.hasMcid(2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString("Times-Italic", "Courier-Bold");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledWidth();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Courier-Bold
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString("Helvetica-BoldOblique", ".notdef");
      TreeSet<MarkedContentInfo> treeSet0 = new TreeSet<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, treeSet0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledWidth();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .notdef
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Courier-BoldOblique", "Cp1250");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledWidth();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Cp1252", "Identity-H");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledBaseline();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Identity-H
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Helvetica-Bold", "i?iZea`|");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledBaseline();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // i?iZea`|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      ArrayList<MarkedContentInfo> arrayList0 = new ArrayList<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, arrayList0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledBaseline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Courier-BoldOblique", "Cp1250");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getUnscaledBaseline();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString("Helvetica-Bold", "Courier-Oblique");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getText();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Courier-Oblique
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString(".notdef", "com/itextpdf/text/pdf/fonts/");
      java.util.Vector<MarkedContentInfo> vector0 = new java.util.Vector<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, vector0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getText();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com/itextpdf/text/pdf/fonts/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.ctm;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("UnicodeBig", "Cp1250");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getText();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Courier-BoldOblique", "Times-Italic");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getDescentLine();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Times-Italic
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.ctm;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Helvetica", ".notdef");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getDescentLine();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .notdef
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getDescentLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("MacRoman", "Cp1250");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getDescentLine();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString(".notdef", "Identity-H");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getCharacterRenderInfos();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Identity-H
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString(".notdef", "com/itextpdf/text/pdf/fonts/");
      java.util.Vector<MarkedContentInfo> vector0 = new java.util.Vector<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, vector0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getCharacterRenderInfos();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com/itextpdf/text/pdf/fonts/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getCharacterRenderInfos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Symbol", "MacRoman");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getCharacterRenderInfos();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Times-BoldItalic", "Times-Italic");
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getBaseline();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Times-Italic
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      PdfString pdfString0 = new PdfString("Courier", ".notdef");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getBaseline();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .notdef
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getBaseline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Helvetica", "MacRoman");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getBaseline();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Helvetica", "Times-BoldItalic");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getAscentLine();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Times-BoldItalic
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Courier-Oblique", ".notdef");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getAscentLine();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .notdef
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getAscentLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString("Helvetica-BoldOblique", "Cp1257");
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.getAscentLine();
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = new Matrix(6, 10);
      TextRenderInfo textRenderInfo0 = null;
      try {
        textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, (Collection<MarkedContentInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getUnscaledBaseline();
      LineSegment lineSegment1 = textRenderInfo0.getAscentLine();
      assertFalse(lineSegment1.equals((Object)lineSegment0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix(2, 4);
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      MarkedContentInfo markedContentInfo0 = new MarkedContentInfo(pdfGState0.BM_SCREEN, pdfGState0);
      linkedHashSet0.add(markedContentInfo0);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      Integer integer0 = textRenderInfo0.getMcid();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix(2, 4);
      HashSet<MarkedContentInfo> hashSet0 = new HashSet<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, hashSet0);
      Integer integer0 = textRenderInfo0.getMcid();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      byte[] byteArray0 = new byte[2];
      PdfString pdfString0 = new PdfString(byteArray0);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      float float0 = textRenderInfo0.getRise();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfString pdfString0 = new PdfString();
      Matrix matrix0 = graphicsState0.ctm;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getAscentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      MarkedContentInfo markedContentInfo0 = new MarkedContentInfo(pdfGState0.BM_COLORDODGE, pdfGState0);
      linkedHashSet0.add(markedContentInfo0);
      Matrix matrix0 = new Matrix(9, 15);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      boolean boolean0 = textRenderInfo0.hasMcid(0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.getCtm();
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      stack0.add((MarkedContentInfo) null);
      PdfDate pdfDate0 = new PdfDate();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      // Undeclared exception!
      try { 
        textRenderInfo0.hasMcid(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.TextRenderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = graphicsState0.ctm;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      textRenderInfo0.getText();
      String string0 = textRenderInfo0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Matrix matrix0 = new Matrix();
      ArrayList<MarkedContentInfo> arrayList0 = new ArrayList<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo((PdfString) null, graphicsState0, matrix0, arrayList0);
      BaseColor baseColor0 = textRenderInfo0.getFillColor();
      assertNull(baseColor0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix(2, 4);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      int int0 = textRenderInfo0.getTextRenderMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.rise = (float) 12;
      graphicsState0.font = cMapAwareDocumentFont0;
      PdfString pdfString0 = new PdfString();
      Matrix matrix0 = graphicsState0.getCtm();
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      float float0 = textRenderInfo0.getRise();
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      byte[] byteArray0 = new byte[2];
      PdfString pdfString0 = new PdfString(byteArray0);
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, stack0);
      LineSegment lineSegment0 = textRenderInfo0.getDescentLine();
      assertNotNull(lineSegment0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      BaseColor baseColor0 = textRenderInfo0.getStrokeColor();
      assertNull(baseColor0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      Matrix matrix0 = new Matrix();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      boolean boolean0 = textRenderInfo0.hasMcid((int) (byte)32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      PdfGState pdfGState0 = new PdfGState();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfGState0);
      graphicsState0.font = cMapAwareDocumentFont0;
      Stack<MarkedContentInfo> stack0 = new Stack<MarkedContentInfo>();
      PdfDate pdfDate0 = new PdfDate();
      Matrix matrix0 = graphicsState0.getCtm();
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, stack0);
      PdfString pdfString0 = textRenderInfo0.getPdfString();
      assertFalse(pdfString0.isHexWriting());
  }
}
