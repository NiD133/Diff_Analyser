/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:00:04 GMT 2025
 */

package com.google.common.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.CaseFormat;
import com.google.common.base.Converter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CaseFormat_ESTest extends CaseFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat1.to(caseFormat0, "Y3:E]9bSR@H%B/_?");
      assertEquals("y3:e]9bsr@h%b/?", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat1, "0P|{HG$S{ax$v|r_ ");
      assertEquals("0_p|{_h_g$_s{ax$v|r_ ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat0, " ALUEZ");
      assertEquals(" ALUEZ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat1.to(caseFormat0, "bDU\"5");
      assertEquals("Bdu\"5", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CaseFormat[] caseFormatArray0 = CaseFormat.values();
      assertEquals(5, caseFormatArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CaseFormat.valueOf("LOWER_CAMEL");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.normalizeFirstWord("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.convert(caseFormat0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      // Undeclared exception!
      try { 
        caseFormat0.to(caseFormat0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      // Undeclared exception!
      try { 
        caseFormat0.normalizeFirstWord((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      // Undeclared exception!
      try { 
        caseFormat0.converterTo((CaseFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      CaseFormat caseFormat1 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.to(caseFormat1, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      String string0 = caseFormat0.convert(caseFormat0, "UPPER_UNDERSCORE");
      assertEquals("uPPER_UNDERSCORE", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      String string0 = caseFormat0.to(caseFormat0, "0P|{HG$S{ax$v|r_ ");
      assertEquals("0P|{HG$S{ax$v|r_ ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat1.convert(caseFormat0, "2$ddmbvc\" rj0j %>[");
      assertEquals("2$ddmbvc\" rj0j %>[", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat1, "-");
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      // Undeclared exception!
      try { 
        caseFormat1.convert(caseFormat0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CharMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat1, "Q#&'.zTN&p_");
      assertEquals("Q#&'.ZTN&P_", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      CaseFormat caseFormat1 = CaseFormat.LOWER_HYPHEN;
      // Undeclared exception!
      try { 
        caseFormat0.convert(caseFormat1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CaseFormat$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.convert(caseFormat0, "83pvzR?h!");
      assertEquals("83pvzr?h!", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      CaseFormat caseFormat1 = CaseFormat.UPPER_UNDERSCORE;
      // Undeclared exception!
      try { 
        caseFormat0.convert(caseFormat1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.CaseFormat$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      CaseFormat caseFormat1 = CaseFormat.LOWER_UNDERSCORE;
      String string0 = caseFormat0.to(caseFormat1, "S:^5jO-|]r");
      assertEquals("S:^5jO_|]r", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_HYPHEN;
      String string0 = caseFormat0.convert(caseFormat0, "83pvzR?h!");
      assertEquals("83pvzr?h!", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.UPPER_CAMEL;
      String string0 = caseFormat0.normalizeFirstWord("&/>Ql\"@^2R");
      assertEquals("&/>ql\"@^2r", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CaseFormat caseFormat0 = CaseFormat.LOWER_CAMEL;
      Converter<String, String> converter0 = caseFormat0.converterTo(caseFormat0);
      assertNotNull(converter0);
  }
}
