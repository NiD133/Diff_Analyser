/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:50:07 GMT 2025
 */

package org.threeten.extra.scale;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;
import org.threeten.extra.scale.TaiInstant;
import org.threeten.extra.scale.UtcInstant;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaiInstant_ESTest extends TaiInstant_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      UtcInstant utcInstant0 = UtcInstant.of(taiInstant0);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay(0L);
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant1);
      taiInstant1.hashCode();
      assertEquals(73281320000000L, utcInstant1.getNanoOfDay());
      assertEquals(1771100516L, taiInstant0.getTaiSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(37L, 37L);
      TaiInstant taiInstant1 = TaiInstant.ofTaiSeconds(37L, 3503L);
      boolean boolean0 = taiInstant0.equals(taiInstant1);
      assertFalse(taiInstant1.equals((Object)taiInstant0));
      assertEquals(37L, taiInstant1.getTaiSeconds());
      assertEquals(3503, taiInstant1.getNano());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      UtcInstant utcInstant0 = UtcInstant.of(taiInstant0);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay(0L);
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant1);
      boolean boolean0 = taiInstant1.equals(taiInstant0);
      assertFalse(taiInstant0.equals((Object)taiInstant1));
      assertFalse(boolean0);
      assertEquals(73281320000000L, utcInstant1.getNanoOfDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      Duration duration0 = Duration.ofHours((-3507L));
      TaiInstant taiInstant1 = taiInstant0.minus(duration0);
      boolean boolean0 = taiInstant1.isBefore(taiInstant0);
      assertEquals(320000000, taiInstant1.getNano());
      assertEquals(1783725716L, taiInstant1.getTaiSeconds());
      assertFalse(boolean0);
      assertEquals(320000000, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds(1000000000L);
      taiInstant1.durationUntil(taiInstant0);
      assertEquals(320000000, taiInstant0.getNano());
      assertEquals(320000000, taiInstant1.getNano());
      assertEquals(1000000000L, taiInstant1.getTaiSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      taiInstant0.durationUntil(taiInstant0);
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(36204L, (-1L));
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      Duration duration0 = Duration.ofMillis((-1L));
      TaiInstant taiInstant1 = taiInstant0.minus(duration0);
      assertEquals(378727414L, taiInstant1.getTaiSeconds());
      assertEquals(999999, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1000L, 1000L);
      Duration duration0 = Duration.ofSeconds(1000L, 1000L);
      TaiInstant taiInstant1 = taiInstant0.plus(duration0);
      assertEquals(2000L, taiInstant1.getTaiSeconds());
      assertEquals(2000, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(50L, 50L);
      // Undeclared exception!
      try { 
        taiInstant0.withNano(1000000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NanoOfSecond must be from 0 to 999,999,999
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      TaiInstant taiInstant1 = taiInstant0.withNano(91);
      assertEquals(0L, taiInstant1.getTaiSeconds());
      assertEquals(91, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(124934400L, (-1909L));
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds((-1909L));
      TaiInstant taiInstant2 = taiInstant1.withNano(331);
      assertEquals((-1909L), taiInstant2.getTaiSeconds());
      assertEquals((-1909L), taiInstant1.getTaiSeconds());
      assertEquals(124934399L, taiInstant0.getTaiSeconds());
      assertEquals(331, taiInstant2.getNano());
      assertEquals(999998091, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(36204L, (-1L));
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      TaiInstant taiInstant1 = taiInstant0.withNano(0);
      assertEquals(0, taiInstant1.getNano());
      assertEquals(378727413L, taiInstant1.getTaiSeconds());
      assertEquals(378727413L, taiInstant0.getTaiSeconds());
      assertEquals(999999999, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UtcInstant utcInstant0 = UtcInstant.ofModifiedJulianDay(0L, 0L);
      TaiInstant taiInstant0 = TaiInstant.of(utcInstant0);
      UtcInstant utcInstant1 = taiInstant0.toUtcInstant();
      assertEquals(0L, utcInstant1.getNanoOfDay());
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      UtcInstant utcInstant0 = UtcInstant.of(taiInstant0);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay(0L);
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant1);
      UtcInstant utcInstant2 = taiInstant1.toUtcInstant();
      assertEquals(73281320000000L, utcInstant1.getNanoOfDay());
      assertTrue(utcInstant2.equals((Object)utcInstant1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UtcInstant utcInstant0 = UtcInstant.ofModifiedJulianDay(774L, 1L);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay((-2L));
      TaiInstant taiInstant0 = TaiInstant.of(utcInstant1);
      UtcInstant utcInstant2 = taiInstant0.toUtcInstant();
      assertEquals(1L, utcInstant2.getNanoOfDay());
      assertEquals(1, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      Duration duration0 = Duration.ZERO;
      TaiInstant taiInstant1 = taiInstant0.plus(duration0);
      assertEquals(0, taiInstant1.getNano());
      assertSame(taiInstant1, taiInstant0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(41316L, (-1L));
      Duration duration0 = Duration.ofDays(41317L);
      Duration duration1 = duration0.multipliedBy((-187L));
      TaiInstant taiInstant1 = taiInstant0.plus(duration1);
      assertEquals((-667550464285L), taiInstant1.getTaiSeconds());
      assertEquals(999999999, taiInstant0.getNano());
      assertEquals(41315L, taiInstant0.getTaiSeconds());
      assertEquals(999999999, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      UtcInstant utcInstant0 = taiInstant0.toUtcInstant();
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant0);
      assertEquals(0, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.ofDays(41317L);
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) duration0);
      TaiInstant taiInstant0 = TaiInstant.of(instant1);
      assertEquals((-1798688309L), taiInstant0.getTaiSeconds());
      assertEquals(320000000, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UtcInstant utcInstant0 = UtcInstant.ofModifiedJulianDay(1000000000L, 1000000000L);
      Instant instant0 = utcInstant0.toInstant();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      assertEquals(86396871974438L, taiInstant0.getTaiSeconds());
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      Duration duration0 = Duration.ofSeconds(0L);
      TaiInstant taiInstant1 = taiInstant0.minus(duration0);
      assertSame(taiInstant1, taiInstant0);
      assertEquals(0, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      Duration duration0 = Duration.ZERO;
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds((-2L));
      TaiInstant taiInstant2 = taiInstant1.minus(duration0);
      assertEquals((-2L), taiInstant2.getTaiSeconds());
      assertSame(taiInstant2, taiInstant1);
      assertEquals(320000000, taiInstant0.getNano());
      assertEquals(320000000, taiInstant2.getNano());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      taiInstant0.getTaiSeconds();
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      long long0 = taiInstant0.getTaiSeconds();
      assertEquals(1771100516L, long0);
      assertEquals(320000000, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      UtcInstant utcInstant0 = UtcInstant.of(taiInstant0);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay(0L);
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant1);
      long long0 = taiInstant1.getTaiSeconds();
      assertEquals(73281320000000L, utcInstant1.getNanoOfDay());
      assertEquals((-3127952309L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1L, 0L);
      int int0 = taiInstant0.getNano();
      assertEquals(1L, taiInstant0.getTaiSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      int int0 = taiInstant0.getNano();
      assertEquals(1771100516L, taiInstant0.getTaiSeconds());
      assertEquals(320000000, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds((-2L));
      int int0 = taiInstant1.compareTo(taiInstant0);
      assertEquals(320000000, taiInstant1.getNano());
      assertEquals((-1), int0);
      assertEquals(320000000, taiInstant0.getNano());
      assertEquals((-2L), taiInstant1.getTaiSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      // Undeclared exception!
      try { 
        taiInstant0.plus((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.ofTaiSeconds(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.of((UtcInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.UtcRules", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UtcInstant utcInstant0 = UtcInstant.ofModifiedJulianDay(9223372036854775807L, 287L);
      // Undeclared exception!
      try { 
        TaiInstant.of(utcInstant0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.of((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1L, 1L);
      // Undeclared exception!
      try { 
        taiInstant0.minus((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UtcInstant utcInstant0 = UtcInstant.ofModifiedJulianDay(14L, 14L);
      TaiInstant taiInstant0 = TaiInstant.of(utcInstant0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        taiInstant0.minus(duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      // Undeclared exception!
      try { 
        taiInstant0.isBefore((TaiInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(2781L, 2781L);
      // Undeclared exception!
      try { 
        taiInstant0.isAfter((TaiInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(2784L, 2784L);
      // Undeclared exception!
      try { 
        taiInstant0.durationUntil((TaiInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds((-1399L), (-1399L));
      // Undeclared exception!
      try { 
        taiInstant0.compareTo((TaiInstant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      int int0 = taiInstant0.compareTo(taiInstant0);
      assertEquals(0, int0);
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      TaiInstant taiInstant0 = TaiInstant.of(instant0);
      UtcInstant utcInstant0 = UtcInstant.of(taiInstant0);
      UtcInstant utcInstant1 = utcInstant0.withModifiedJulianDay(0L);
      TaiInstant taiInstant1 = TaiInstant.of(utcInstant1);
      int int0 = taiInstant0.compareTo(taiInstant1);
      assertEquals(73281320000000L, utcInstant1.getNanoOfDay());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds(5495L);
      boolean boolean0 = taiInstant1.equals(taiInstant0);
      assertEquals(5495L, taiInstant1.getTaiSeconds());
      assertFalse(taiInstant0.equals((Object)taiInstant1));
      assertEquals(0, taiInstant1.getNano());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(19L, 19L);
      Object object0 = new Object();
      boolean boolean0 = taiInstant0.equals(object0);
      assertEquals(19L, taiInstant0.getTaiSeconds());
      assertFalse(boolean0);
      assertEquals(19, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      boolean boolean0 = taiInstant0.equals(taiInstant0);
      assertEquals(0, taiInstant0.getNano());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(37L, 37L);
      TaiInstant taiInstant1 = TaiInstant.ofTaiSeconds(37L, 3503L);
      boolean boolean0 = taiInstant0.isBefore(taiInstant1);
      assertTrue(boolean0);
      assertEquals(37L, taiInstant1.getTaiSeconds());
      assertEquals(3503, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      boolean boolean0 = taiInstant0.isBefore(taiInstant0);
      assertFalse(boolean0);
      assertEquals(0, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(37L, 37L);
      TaiInstant taiInstant1 = TaiInstant.ofTaiSeconds(37L, 3503L);
      boolean boolean0 = taiInstant1.isAfter(taiInstant0);
      assertTrue(boolean0);
      assertEquals(3503, taiInstant1.getNano());
      assertEquals(37L, taiInstant1.getTaiSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(50L, 50L);
      TaiInstant taiInstant1 = TaiInstant.ofTaiSeconds((-1L), 1000000000L);
      boolean boolean0 = taiInstant1.isAfter(taiInstant0);
      assertEquals(50, taiInstant0.getNano());
      assertEquals(0L, taiInstant1.getTaiSeconds());
      assertFalse(boolean0);
      assertEquals(0, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(37L, 37L);
      boolean boolean0 = taiInstant0.isAfter(taiInstant0);
      assertFalse(boolean0);
      assertEquals(37L, taiInstant0.getTaiSeconds());
      assertEquals(37, taiInstant0.getNano());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1000000000L, 1000000000L);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      // Undeclared exception!
      try { 
        taiInstant0.plus(duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(124934400L, (-1909L));
      TaiInstant taiInstant1 = taiInstant0.withNano(331);
      boolean boolean0 = taiInstant0.equals(taiInstant1);
      assertFalse(taiInstant1.equals((Object)taiInstant0));
      assertFalse(boolean0);
      assertEquals(124934399L, taiInstant0.getTaiSeconds());
      assertEquals(331, taiInstant1.getNano());
      assertEquals(999998091, taiInstant0.getNano());
      assertEquals(124934399L, taiInstant1.getTaiSeconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds((-604800L), (-604800L));
      // Undeclared exception!
      try { 
        taiInstant0.withNano(2147424333);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NanoOfSecond must be from 0 to 999,999,999
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      // Undeclared exception!
      try { 
        taiInstant0.withNano((-4339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NanoOfSecond must be from 0 to 999,999,999
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.parse("0.000000000s(TAI)");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaiInstant.parse("0.00000000s(TAI)");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // The text could not be parsed
         //
         verifyException("org.threeten.extra.scale.TaiInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      TaiInstant taiInstant1 = taiInstant0.withTaiSeconds(0L);
      boolean boolean0 = taiInstant1.equals(taiInstant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(0L, 0L);
      Instant instant0 = taiInstant0.toInstant();
      TaiInstant taiInstant1 = TaiInstant.of(instant0);
      assertEquals(0, taiInstant1.getNano());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1L, 0L);
      String string0 = taiInstant0.toString();
      assertEquals("1.000000000s(TAI)", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TaiInstant taiInstant0 = TaiInstant.ofTaiSeconds(1L, 0L);
      UtcInstant utcInstant0 = taiInstant0.toUtcInstant();
      TaiInstant.of(utcInstant0);
      assertEquals(86391000000000L, utcInstant0.getNanoOfDay());
      assertEquals(1L, taiInstant0.getTaiSeconds());
  }
}
