/*
 * Test suite for LogFactory class - tests logger creation and configuration methods
 * This file was automatically generated by EvoSuite and then manually improved for readability
 * Wed Jul 23 14:03:04 GMT 2025
 */

package org.apache.ibatis.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ibatis.logging.Log;
import org.apache.ibatis.logging.LogFactory;
import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogFactory_ESTest extends LogFactory_ESTest_scaffolding {

    private static final int TEST_TIMEOUT_MS = 4000;

    // Tests for getLog() methods
    
    @Test(timeout = TEST_TIMEOUT_MS)
    public void testGetLogWithValidStringName_ShouldReturnLogInstance() throws Throwable {
        // Given: A valid logger name
        String loggerName = "org.apache.ibatis.logging.LogFactory";
        
        // When: Getting a log instance by string name
        Log actualLog = LogFactory.getLog(loggerName);
        
        // Then: A log instance should be returned
        assertNotNull("Log instance should not be null for valid logger name", actualLog);
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testGetLogWithValidClass_ShouldReturnLogInstance() throws Throwable {
        // Given: A valid class
        Class<Object> loggerClass = Object.class;
        
        // When: Getting a log instance by class
        Log actualLog = LogFactory.getLog(loggerClass);
        
        // Then: A log instance should be returned
        assertNotNull("Log instance should not be null for valid class", actualLog);
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testGetLogWithNullClass_ShouldThrowNullPointerException() throws Throwable {
        // Given: A null class parameter
        Class<?> nullClass = null;
        
        // When & Then: Getting a log with null class should throw NullPointerException
        try {
            LogFactory.getLog(nullClass);
            fail("Expected NullPointerException when passing null class");
        } catch (NullPointerException e) {
            // Expected behavior - verify the exception comes from LogFactory
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testGetLogWithNullString_ShouldThrowRuntimeException() throws Throwable {
        // Given: A null string parameter
        String nullLoggerName = null;
        
        // When & Then: Getting a log with null string should throw RuntimeException
        try {
            LogFactory.getLog(nullLoggerName);
            fail("Expected RuntimeException when passing null logger name");
        } catch (RuntimeException e) {
            // Expected behavior - verify error message mentions null logger
            assertTrue("Error message should mention null logger", 
                      e.getMessage().contains("Error creating logger for logger null"));
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }

    // Tests for logging implementation configuration methods

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseSlf4jLogging_ShouldConfigureSuccessfully() throws Throwable {
        // When: Configuring SLF4J logging
        LogFactory.useSlf4jLogging();
        
        // Then: No exception should be thrown (SLF4J is available in test environment)
        // This test passes if no exception is thrown
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseJdkLogging_ShouldConfigureSuccessfully() throws Throwable {
        // When: Configuring JDK logging
        LogFactory.useJdkLogging();
        
        // Then: No exception should be thrown (JDK logging is always available)
        // This test passes if no exception is thrown
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseStdOutLogging_ShouldConfigureSuccessfully() throws Throwable {
        // When: Configuring stdout logging
        LogFactory.useStdOutLogging();
        
        // Then: No exception should be thrown (stdout logging is always available)
        // This test passes if no exception is thrown
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseNoLogging_ShouldConfigureSuccessfully() throws Throwable {
        // When: Configuring no logging
        LogFactory.useNoLogging();
        
        // Then: No exception should be thrown (no-op logging is always available)
        // This test passes if no exception is thrown
    }

    // Tests for logging implementations that are not available in test environment

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseCustomLogging_WithUnavailableImplementation_ShouldThrowRuntimeException() throws Throwable {
        // Given: A logging implementation that's not available in test environment
        Class<JakartaCommonsLoggingImpl> unavailableLogImpl = JakartaCommonsLoggingImpl.class;
        
        // When & Then: Using unavailable custom logging should throw RuntimeException
        try {
            LogFactory.useCustomLogging(unavailableLogImpl);
            fail("Expected RuntimeException when using unavailable logging implementation");
        } catch (RuntimeException e) {
            // Expected behavior - verify error message mentions implementation setting error
            assertTrue("Error message should mention Log implementation error", 
                      e.getMessage().contains("Error setting Log implementation"));
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseLog4J2Logging_WithUnavailableLibrary_ShouldThrowRuntimeException() throws Throwable {
        // When & Then: Using Log4J2 when library is not available should throw RuntimeException
        try {
            LogFactory.useLog4J2Logging();
            fail("Expected RuntimeException when Log4J2 library is not available");
        } catch (RuntimeException e) {
            // Expected behavior - Log4J2 classes are not on classpath
            assertTrue("Error message should mention Log implementation error", 
                      e.getMessage().contains("Error setting Log implementation"));
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseCommonsLogging_WithUnavailableLibrary_ShouldThrowRuntimeException() throws Throwable {
        // When & Then: Using Commons Logging when library is not available should throw RuntimeException
        try {
            LogFactory.useCommonsLogging();
            fail("Expected RuntimeException when Commons Logging library is not available");
        } catch (RuntimeException e) {
            // Expected behavior - Commons Logging classes are not on classpath
            assertTrue("Error message should mention Log implementation error", 
                      e.getMessage().contains("Error setting Log implementation"));
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }

    @Test(timeout = TEST_TIMEOUT_MS)
    public void testUseLog4JLogging_WithUnavailableLibrary_ShouldThrowRuntimeException() throws Throwable {
        // When & Then: Using Log4J when library is not available should throw RuntimeException
        try {
            LogFactory.useLog4JLogging();
            fail("Expected RuntimeException when Log4J library is not available");
        } catch (RuntimeException e) {
            // Expected behavior - Log4J classes are not on classpath
            assertTrue("Error message should mention missing Log4J classes", 
                      e.getMessage().contains("org/apache/log4j/Priority"));
            verifyException("org.apache.ibatis.logging.LogFactory", e);
        }
    }
}