/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 14:03:04 GMT 2025
 */

package org.apache.ibatis.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.ibatis.logging.Log;
import org.apache.ibatis.logging.LogFactory;
import org.apache.ibatis.logging.commons.JakartaCommonsLoggingImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LogFactory_ESTest extends LogFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Log log0 = LogFactory.getLog("org.apache.ibatis.logging.LogFactory");
      assertNotNull(log0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LogFactory.getLog((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Log log0 = LogFactory.getLog(class0);
      assertNotNull(log0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<JakartaCommonsLoggingImpl> class0 = JakartaCommonsLoggingImpl.class;
      // Undeclared exception!
      try { 
        LogFactory.useCustomLogging(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LogFactory.useLog4J2Logging();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogFactory.useSlf4jLogging();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        LogFactory.getLog((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error creating logger for logger null.  Cause: java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        LogFactory.useCommonsLogging();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting Log implementation.  Cause: java.lang.reflect.InvocationTargetException
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogFactory.useJdkLogging();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        LogFactory.useLog4JLogging();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error setting Log implementation.  Cause: java.lang.NoClassDefFoundError: org/apache/log4j/Priority
         //
         verifyException("org.apache.ibatis.logging.LogFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogFactory.useStdOutLogging();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LogFactory.useNoLogging();
  }
}
