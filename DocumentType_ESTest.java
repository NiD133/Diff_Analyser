/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:46:42 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.internal.QuietAppendable;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Printer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("]1!E6Z>?G", "]1!E6Z>?G", "jcEA3& P6-6$CAL");
      StringWriter stringWriter0 = new StringWriter();
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(stringWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(quietAppendable0, document_OutputSettings0);
      assertEquals("<!DOCTYPE ]1!E6Z>?G PUBLIC \"]1!E6Z>?G\" \"jcEA3& P6-6$CAL\">", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.systemId();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("SYSTEM", "SYSTEM", "f}#ng}$s-@#ua");
      String string0 = documentType0.publicId();
      assertEquals("SYSTEM", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("C0pe>FSNio5LQF[+", "C0pe>FSNio5LQF[+", "org.jsoup.helper.Validate");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.name();
      assertEquals("", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.setParentNode(documentType0);
      // Undeclared exception!
      documentType0.setPubSysKey("optgroup");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("'#t4Ua4}*>Y;7kA+DJ", "'#t4Ua4}*>Y;7kA+DJ", "'#t4Ua4}*>Y;7kA+DJ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead((QuietAppendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.DocumentType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = null;
      try {
        documentType0 = new DocumentType("", "", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "Sh:<%");
      String string0 = documentType0.outerHtml();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("<!DOCTYPE SYSTEM \"Sh:<%\">", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "<!doctype", "jcEA3& P6-6$CAL");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(charBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(quietAppendable0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("C0pe>FSNio5LQF[+", "C0pe>FSNio5LQF[+", "org.jsoup.helper.Validate");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "C0pe>FSNio5LQF[+");
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(stringBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Printer.Pretty printer_Pretty0 = new Printer.Pretty(documentType0, quietAppendable0, document_OutputSettings1);
      documentType0.traverse(printer_Pretty0);
      assertEquals("C0pe>FSNio5LQF[+<!DOCTYPE C0pe>FSNio5LQF[+ PUBLIC \"C0pe>FSNio5LQF[+\" \"org.jsoup.helper.Validate\">", stringBuffer0.toString());
      assertEquals(97, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "<!doctype");
      documentType0.setPubSysKey("org.jsoup.nodes.DocumentType");
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "<!doctype");
      documentType0.setPubSysKey((String) null);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("lwsGpi*`3ZN", "lwsGpi*`3ZN", "lwsGpi*`3ZN");
      String string0 = documentType0.systemId();
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals("lwsGpi*`3ZN", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "<!doctype");
      String string0 = documentType0.publicId();
      assertEquals("", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("QGRn=|xO8k", "QGRn=|xO8k", "QGRn=|xO8k");
      String string0 = documentType0.name();
      assertEquals("QGRn=|xO8k", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      String string0 = documentType0.outerHtml();
      assertEquals("<!doctype>", string0);
      assertEquals("#doctype", documentType0.nodeName());
  }
}
