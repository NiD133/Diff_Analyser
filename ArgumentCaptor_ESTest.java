/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 17 11:21:41 GMT 2025
 */

package org.mockito;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentCaptor_ESTest extends ArgumentCaptor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ArgumentCaptor<Object> argumentCaptor0 = ArgumentCaptor.forClass(class0);
      Object object0 = argumentCaptor0.capture();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentCaptor.forClass((Class<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ArgumentCaptor.captor(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not provide any arguments to the 'captor' call
         //
         verifyException("org.mockito.ArgumentCaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArgumentCaptor.captor((Integer[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not provide any arguments to the 'captor' call
         //
         verifyException("org.mockito.ArgumentCaptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ArgumentCaptor<Object> argumentCaptor0 = ArgumentCaptor.forClass(class0);
      List<Object> list0 = argumentCaptor0.getAllValues();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArgumentCaptor<Integer> argumentCaptor0 = ArgumentCaptor.forClass(class0);
      Class<? extends Integer> class1 = argumentCaptor0.getCaptorType();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArgumentCaptor<Integer> argumentCaptor0 = ArgumentCaptor.captor(integerArray0);
      Integer integer0 = argumentCaptor0.capture();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArgumentCaptor<Integer> argumentCaptor0 = ArgumentCaptor.captor(integerArray0);
      // Undeclared exception!
      try { 
        argumentCaptor0.getValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }
}
