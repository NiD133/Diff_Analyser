/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:18:34 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeComparator;
import org.joda.time.DateTimeFieldType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateTimeComparator_ESTest extends DateTimeComparator_ESTest_scaffolding {

    // Tests for comparator instance creation
    @Test(timeout = 4000)
    public void test_createComparatorWithLowerAndUpperLimit() {
        DateTimeFieldType fieldType = DateTimeFieldType.dayOfYear();
        DateTimeComparator comparator = DateTimeComparator.getInstance(fieldType, fieldType);
        assertNotNull(comparator);
    }

    @Test(timeout = 4000)
    public void test_createComparatorWithNullLimits() {
        DateTimeComparator comparator = DateTimeComparator.getInstance(null, null);
        assertNotNull(comparator);
    }

    @Test(timeout = 4000)
    public void test_createComparatorWithLowerLimitOnly() {
        DateTimeFieldType fieldType = DateTimeFieldType.dayOfYear();
        DateTimeComparator comparator = DateTimeComparator.getInstance(fieldType, null);
        assertNotNull(comparator);
    }

    @Test(timeout = 4000)
    public void test_createComparatorWithUpperLimitOnly() {
        DateTimeFieldType fieldType = DateTimeFieldType.monthOfYear();
        DateTimeComparator comparator = DateTimeComparator.getInstance(null, fieldType);
        assertNotNull(comparator);
    }

    // Tests for getLimit methods
    @Test(timeout = 4000)
    public void test_getLowerLimitReturnsExpectedField() {
        DateTimeFieldType fieldType = DateTimeFieldType.yearOfEra();
        DateTimeComparator comparator = DateTimeComparator.getInstance(fieldType);
        assertEquals(fieldType, comparator.getLowerLimit());
    }

    @Test(timeout = 4000)
    public void test_getUpperLimitReturnsNullForSingleFieldComparator() {
        DateTimeFieldType fieldType = DateTimeFieldType.dayOfYear();
        DateTimeComparator comparator = DateTimeComparator.getInstance(fieldType);
        assertNull(comparator.getUpperLimit());
    }

    @Test(timeout = 4000)
    public void test_timeOnlyComparatorUpperLimitIsDayOfYear() {
        DateTimeComparator comparator = DateTimeComparator.getTimeOnlyInstance();
        assertEquals("dayOfYear", comparator.getUpperLimit().toString());
    }

    @Test(timeout = 4000)
    public void test_timeOnlyComparatorLowerLimitIsNull() {
        DateTimeComparator comparator = DateTimeComparator.getTimeOnlyInstance();
        assertNull(comparator.getLowerLimit());
    }

    // Tests for toString()
    @Test(timeout = 4000)
    public void test_toStringTimeOnlyInstance() {
        assertEquals("DateTimeComparator[-dayOfYear]", 
            DateTimeComparator.getTimeOnlyInstance().toString());
    }

    @Test(timeout = 4000)
    public void test_toStringDateOnlyInstance() {
        assertEquals("DateTimeComparator[dayOfYear-]", 
            DateTimeComparator.getDateOnlyInstance().toString());
    }

    @Test(timeout = 4000)
    public void test_toStringAllFieldsComparator() {
        assertEquals("DateTimeComparator[]", 
            DateTimeComparator.getInstance().toString());
    }

    @Test(timeout = 4000)
    public void test_toStringCustomComparator() {
        DateTimeFieldType fieldType = DateTimeFieldType.weekyearOfCentury();
        DateTimeComparator comparator = DateTimeComparator.getInstance(fieldType, fieldType);
        assertEquals("DateTimeComparator[weekyearOfCentury]", comparator.toString());
    }

    // Tests for equals() and hashCode()
    @Test(timeout = 4000)
    public void test_equalsSameInstanceReturnsTrue() {
        DateTimeComparator comparator = DateTimeComparator.getTimeOnlyInstance();
        assertTrue(comparator.equals(comparator));
    }

    @Test(timeout = 4000)
    public void test_equalsDifferentTypeReturnsFalse() {
        DateTimeComparator comparator = DateTimeComparator.getTimeOnlyInstance();
        assertFalse(comparator.equals(new Object()));
    }

    @Test(timeout = 4000)
    public void test_equalsDifferentComparatorsReturnFalse() {
        DateTimeComparator timeComparator = DateTimeComparator.getTimeOnlyInstance();
        DateTimeComparator dateComparator = DateTimeComparator.getDateOnlyInstance();
        DateTimeComparator allFieldsComparator = DateTimeComparator.getInstance();
        
        assertFalse(timeComparator.equals(dateComparator));
        assertFalse(timeComparator.equals(allFieldsComparator));
        assertFalse(dateComparator.equals(allFieldsComparator));
    }

    @Test(timeout = 4000)
    public void test_hashCodeDoesNotThrowException() {
        DateTimeComparator.getInstance().hashCode();
        DateTimeComparator.getDateOnlyInstance().hashCode();
        
        DateTimeFieldType fieldType = DateTimeFieldType.dayOfMonth();
        new DateTimeComparator(fieldType, fieldType).hashCode();
    }

    // Tests for compare() method
    @Test(timeout = 4000)
    public void test_compareTwoNullsReturnsZero() {
        assertEquals(0, DateTimeComparator.getTimeOnlyInstance().compare(null, null));
    }

    @Test(timeout = 4000)
    public void test_compareInvalidStringThrowsException() {
        DateTimeComparator comparator = DateTimeComparator.getDateOnlyInstance();
        try {
            comparator.compare(null, "DateTimeComparator[dayOfYear-]");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            verifyException("org.joda.time.format.DateTimeParserBucket", e);
        }
    }
}