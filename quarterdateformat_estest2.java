package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import java.text.FieldPosition;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

// The original test class name suggests it was generated by a tool (EvoSuite).
// A more conventional name would be QuarterDateFormatTest.
public class QuarterDateFormat_ESTestTest2 {

    /**
     * Tests that the format method correctly appends the year and the
     * corresponding Roman numeral for the quarter to an existing StringBuffer.
     */
    @Test
    public void format_appendsYearAndRomanQuarterToExistingBuffer() {
        // Arrange
        // Use a standard, stable timezone like UTC to avoid test flakiness.
        TimeZone utc = TimeZone.getTimeZone("UTC");

        // Use the standard Roman numeral symbols for quarters for clarity.
        String[] quarterSymbols = QuarterDateFormat.ROMAN_QUARTERS; // e.g., "I", "II", "III", "IV"

        // The formatter is configured to show the year first by default.
        QuarterDateFormat formatter = new QuarterDateFormat(utc, quarterSymbols);

        // Create a specific, easily understandable date within the second quarter (April).
        // Using Calendar is more explicit and readable than the deprecated Date constructor.
        Calendar calendar = new GregorianCalendar(utc);
        calendar.set(1999, Calendar.APRIL, 10); // A date in Q2 1999
        Date dateInSecondQuarter = calendar.getTime();

        // Start with a non-empty buffer to verify the append behavior.
        StringBuffer buffer = new StringBuffer("Data: ");
        
        // Define the expected output string. The format is "YYYY Q", where Q is the
        // Roman numeral for the quarter. For April (Q2), this is "II".
        String expectedFormattedString = "Data: 1999 II";

        // Act
        // The FieldPosition is required by the method signature but not used in this assertion.
        formatter.format(dateInSecondQuarter, buffer, new FieldPosition(0));

        // Assert
        // Verify the complete content of the buffer, which is a much stronger
        // and more meaningful check than just verifying its length.
        assertEquals(expectedFormattedString, buffer.toString());
    }
}