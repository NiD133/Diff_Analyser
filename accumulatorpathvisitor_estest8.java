package org.apache.commons.io.file;

import org.junit.Test;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import org.evosuite.runtime.mock.java.io.MockFile;

/**
 * Tests for {@link AccumulatorPathVisitor}.
 * This class contains a test case generated by EvoSuite, which has been refactored for clarity.
 */
public class AccumulatorPathVisitor_ESTestTest8 extends AccumulatorPathVisitor_ESTest_scaffolding {

    /**
     * Tests that {@link AccumulatorPathVisitor#relativizeFiles(Path, boolean, java.util.Comparator)}
     * throws an IllegalArgumentException when attempting to relativize a visited file path
     * against an unrelated parent path.
     */
    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void relativizeFilesThrowsExceptionForUnrelatedPaths() {
        // Arrange
        // 1. Create a visitor and simulate visiting a file to populate its internal list.
        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withBigIntegerCounters();
        final Path visitedFilePath = new MockFile("parent/child.txt").toPath();
        final BasicFileAttributes mockAttributes = mock(BasicFileAttributes.class);
        doReturn(100L).when(mockAttributes).size();
        visitor.updateFileCounters(visitedFilePath, mockAttributes);

        // 2. Define a parent path that is not an ancestor of the visited file.
        // The underlying Path.relativize() call will fail for such paths.
        final Path unrelatedParentPath = new MockFile("other/directory").toPath();

        // Act
        // Attempt to relativize the files in the list against the unrelated parent path.
        // This is expected to throw an IllegalArgumentException because 'parent/child.txt'
        // cannot be relativized against 'other/directory'.
        visitor.relativizeFiles(unrelatedParentPath, true, null);

        // Assert: The test passes if the expected IllegalArgumentException is thrown.
    }
}