package org.apache.commons.collections4.bloomfilter;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 * Contains tests for the {@link SparseBloomFilter} class.
 */
public class SparseBloomFilterTest {

    /**
     * Tests that merging a Hasher into an empty filter correctly updates the filter's cardinality.
     * Cardinality is the count of unique indices (bits) that are enabled in the filter.
     */
    @Test
    public void mergeWithHasherShouldUpdateCardinality() {
        // Arrange: Create an empty SparseBloomFilter and a Hasher to merge.
        Shape shape = Shape.fromNM(64, 64);
        SparseBloomFilter bloomFilter = new SparseBloomFilter(shape);

        // The hasher is created from a simple byte array. The content of the array
        // determines the indices that the hasher will generate.
        byte[] dataToHash = new byte[6];
        Hasher hasher = new EnhancedDoubleHasher(dataToHash);

        // Act: Merge the hasher into the Bloom filter. This process adds the indices
        // generated by the hasher to the filter's internal set.
        bloomFilter.merge(hasher);

        // Assert: Verify that the cardinality of the filter is updated as expected.
        // For this specific hasher and input data, it deterministically generates
        // indices that result in a final cardinality of 1.
        int finalCardinality = bloomFilter.cardinality();
        assertEquals("The cardinality should reflect the number of unique indices added.", 1, finalCardinality);
    }
}