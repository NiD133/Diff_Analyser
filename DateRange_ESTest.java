/*
 * This file was automatically generated by EvoSuite
 * Sat May 17 22:49:56 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.example.DateRange;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateRange_ESTest extends DateRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateRange dateRange0 = new DateRange(0.0, 0.0);
      long long0 = dateRange0.getUpperMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateRange dateRange0 = new DateRange((-145.3), (-145.3));
      long long0 = dateRange0.getUpperMillis();
      assertEquals((-145L), long0);
      assertEquals((-145L), dateRange0.getLowerMillis());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1801.7621);
      DateRange dateRange0 = new DateRange(range0);
      long long0 = dateRange0.getLowerMillis();
      assertEquals(1801L, dateRange0.getUpperMillis());
      assertEquals(1801L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateRange dateRange0 = new DateRange((-1157.7534), (-1157.7534));
      long long0 = dateRange0.getLowerMillis();
      assertEquals((-1157L), long0);
      assertEquals((-1157L), dateRange0.getUpperMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      Range range0 = Range.expandToInclude(dateRange0, 1.2030679447063568);
      // Undeclared exception!
      try { 
        range0.toString();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 785, (-574), (-1), 32, (-1));
      MockDate mockDate1 = new MockDate(0, 0, 1);
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(mockDate0, mockDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.62865681E11) <= upper (-2.2089888E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(0.0, (-5043.58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-5043.58).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(774, 774, 32);
      DateRange dateRange0 = new DateRange(mockDate0, mockDate0);
      assertFalse(dateRange0.isNaNRange());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateRange dateRange0 = new DateRange(0.0, 0.0);
      Date date0 = dateRange0.getUpperDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateRange dateRange0 = new DateRange(0.0, 0.0);
      Date date0 = dateRange0.getLowerDate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getLowerMillis();
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      String string0 = dateRange0.toString();
      assertEquals(1L, dateRange0.getUpperMillis());
      assertEquals(0L, dateRange0.getLowerMillis());
      assertEquals("[Jan 1, 1970 12:00:00 AM --> Jan 1, 1970 12:00:00 AM]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateRange dateRange0 = new DateRange();
      long long0 = dateRange0.getUpperMillis();
      assertEquals(1L, long0);
      assertEquals(0L, dateRange0.getLowerMillis());
  }
}
