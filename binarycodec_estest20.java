package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

// The original test was generated by EvoSuite. 
// The EvoSuite runner and scaffolding are removed for a standard, human-readable JUnit test.

public class BinaryCodecTest { // Renamed class for clarity and standard convention.

    /**
     * Tests that decoding a string with insufficient binary characters ('0' or '1')
     * results in an empty byte array, which subsequently encodes to an empty string.
     */
    @Test
    public void toByteArrayShouldReturnEmptyForInputWithIncompleteBinaryData() {
        // Arrange
        BinaryCodec binaryCodec = new BinaryCodec();

        // This input string contains non-binary characters and only a single binary character ('1').
        // The toByteArray (decode) method is expected to ignore non-binary characters.
        // Since it finds fewer than the 8 binary characters required to form a byte,
        // the decoding should result in an empty array.
        String inputWithInsufficientBinaryChars = "lb{1yPz";

        // Act
        // 1. Decode the string into a byte array.
        byte[] decodedBytes = binaryCodec.toByteArray(inputWithInsufficientBinaryChars);

        // 2. Encode the resulting byte array back into an ASCII string of '0's and '1's.
        String resultString = BinaryCodec.toAsciiString(decodedBytes);

        // Assert
        assertNotNull("The decoded byte array should not be null", decodedBytes);
        assertEquals("Decoding should produce an empty byte array for incomplete data", 0, decodedBytes.length);
        assertEquals("Encoding an empty byte array should produce an empty string", "", resultString);
    }
}