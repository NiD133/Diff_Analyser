/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:24:14 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringConverter_ESTest extends StringConverter_ESTest_scaffolding {

    private final StringConverter converter = StringConverter.INSTANCE;

    //---------------------------------------------------------------------
    // Tests for getDurationMillis
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testGetDurationMillis_ValidPeriodString_ReturnsCorrectMillis() throws Throwable {
        long duration = converter.getDurationMillis("Pt2s");
        assertEquals(2000L, duration);
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_ValidPeriodWithDecimal_ReturnsCorrectMillis() throws Throwable {
        long duration = converter.getDurationMillis("Pt2.s");
        assertEquals(2000L, duration);
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_MissingTimeDesignator_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("Pvb");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"Pvb\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_NonNumericValue_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("Pt,v.y");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"Pt,v.y\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_UnsupportedUnit_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("PT2f");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"PT2f\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_MalformedPeriod_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("p3@QA9'OLT&K_7a]X<");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"p3@QA9'OLT&K_7a]X<\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_EmptyString_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetDurationMillis_InvalidFormat_IntervalString_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getDurationMillis("6/P7m");
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"6/P7m\"", e.getMessage());
        }
    }

    //---------------------------------------------------------------------
    // Tests for setInto (ReadWritablePeriod)
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testSetIntoPeriod_NullPeriod_ThrowsNullPointerException() throws Throwable {
        try {
            converter.setInto((ReadWritablePeriod) null, (Object) null, (Chronology) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected - details not specified
        }
    }

    @Test(timeout = 4000)
    public void testSetIntoPeriod_InvalidObjectType_ThrowsClassCastException() throws Throwable {
        MutablePeriod period = new MutablePeriod();
        try {
            converter.setInto(period, period, IslamicChronology.getInstanceUTC());
            fail("Expecting exception: ClassCastException");
        } catch(ClassCastException e) {
            // Expected - object not a String
        }
    }

    @Test(timeout = 4000)
    public void testSetIntoPeriod_ValidPeriodString_SetsCorrectly() throws Throwable {
        MutablePeriod period = new MutablePeriod();
        DateTimeZone zone = DateTimeZone.UTC;
        GJChronology chrono = GJChronology.getInstance(zone, new MutableDateTime(0L));
        converter.setInto(period, "Pt2s", ZonedChronology.getInstance(chrono, zone));
        // Verify by checking no exception thrown
    }

    @Test(timeout = 4000)
    public void testSetIntoPeriod_EmptyString_ThrowsIllegalArgumentException() throws Throwable {
        MutablePeriod period = new MutablePeriod();
        try {
            converter.setInto(period, "", GregorianChronology.getInstanceUTC());
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testSetIntoPeriod_InvalidFormat_ThrowsIllegalArgumentException() throws Throwable {
        MutablePeriod period = new MutablePeriod();
        try {
            converter.setInto(period, "p3@QA9'OLT&K_7a]X<", IslamicChronology.getInstanceUTC());
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \"p3@QA9'OLT&K_7a]X<\"", e.getMessage());
        }
    }

    //---------------------------------------------------------------------
    // Tests for setInto (ReadWritableInterval)
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testSetIntoInterval_NullInterval_ThrowsNullPointerException() throws Throwable {
        try {
            converter.setInto((ReadWritableInterval) null, (Object) null, JulianChronology.getInstanceUTC());
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected - details not specified
        }
    }

    @Test(timeout = 4000)
    public void testSetIntoInterval_InvalidObjectType_ThrowsClassCastException() throws Throwable {
        MutableInterval interval = new MutableInterval();
        try {
            converter.setInto(interval, interval, (Chronology) null);
            fail("Expecting exception: ClassCastException");
        } catch(ClassCastException e) {
            // Expected - object not a String
        }
    }

    @Test(timeout = 4000)
    public void testSetIntoInterval_ValidIntervalString_SetsCorrectly() throws Throwable {
        MutableInterval interval = new MutableInterval();
        converter.setInto(interval, "6/8", IslamicChronology.getInstanceUTC());
        assertEquals(-42368486400000L, interval.getStartMillis());
    }

    @Test(timeout = 4000)
    public void testSetIntoInterval_ValidPeriodInIntervalString_SetsCorrectly() throws Throwable {
        MutableInterval interval = new MutableInterval(31556952000L, 31556952000L, ISOChronology.getInstance());
        converter.setInto(interval, "6/P7m", ISOChronology.getInstance());
        assertEquals(-61959513600000L, interval.getEndMillis());
    }

    @Test(timeout = 4000)
    public void testSetIntoInterval_MissingSeparator_ThrowsIllegalArgumentException() throws Throwable {
        MutableInterval interval = new MutableInterval();
        try {
            converter.setInto(interval, "The chronology of ehe time does not match", IslamicChronology.getInstanceUTC());
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Format requires a '/' separator: The chronology of ehe time does not match", e.getMessage());
        }
    }

    //---------------------------------------------------------------------
    // Tests for getPartialValues
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testGetPartialValues_NullFormatter_ThrowsNullPointerException() throws Throwable {
        LocalDate date = new LocalDate(GregorianChronology.getInstance(DateTimeZone.UTC));
        try {
            converter.getPartialValues(date, "org/joda/time/tz/data", GregorianChronology.getInstance(DateTimeZone.UTC), null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected - details not specified
        }
    }

    @Test(timeout = 4000)
    public void testGetPartialValues_UnsupportedFormatter_ThrowsUnsupportedOperationException() throws Throwable {
        DateTimePrinter printer = mock(DateTimePrinter.class);
        DateTimeFormatter formatter = new DateTimeFormatter(printer, null);
        try {
            converter.getPartialValues(null, "Pt2s", null, formatter);
            fail("Expecting exception: UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            assertEquals("Parsing not supported", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetPartialValues_InvalidFormat_ThrowsIllegalArgumentException() throws Throwable {
        Partial partial = new Partial(DateTimeFieldType.year(), -2212);
        DateTimeFormatter formatter = partial.getFormatter();
        try {
            converter.getPartialValues(partial, ";Xb=I|6d!0*'jzM0/", null, formatter);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \";Xb=I|6d!0*'jzM0/\"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetPartialValues_ValidString_ReturnsCorrectValues() throws Throwable {
        MonthDay monthDay = new MonthDay(2454L, EthiopicChronology.getInstanceUTC());
        DateTimePrinter printer = mock(DateTimePrinter.class);
        DateTimeParser parser = mock(DateTimeParser.class);
        when(parser.parseInto(any(), anyString(), anyInt())).thenReturn(1);
        DateTimeFormatter formatter = new DateTimeFormatter(printer, parser).withZoneUTC();
        int[] values = converter.getPartialValues(monthDay, "0", EthiopicChronology.getInstanceUTC(), formatter);
        assertArrayEquals(new int[]{4, 23}, values);
    }

    @Test(timeout = 4000)
    public void testGetPartialValues_InvalidObjectType_ThrowsClassCastException() throws Throwable {
        MonthDay monthDay = MonthDay.now(ISOChronology.getInstance());
        Partial partial = new Partial(DateTimeFieldType.year(), -2212);
        DateTimeFormatter formatter = partial.getFormatter();
        try {
            converter.getPartialValues(monthDay, monthDay, ISOChronology.getInstance(), formatter);
            fail("Expecting exception: ClassCastException");
        } catch(ClassCastException e) {
            // Expected - object not a String
        }
    }

    //---------------------------------------------------------------------
    // Tests for getInstantMillis
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testGetInstantMillis_ValidString_ReturnsCorrectMillis() throws Throwable {
        long instant = converter.getInstantMillis("000", ISOChronology.getInstance());
        assertEquals(-62167219200000L, instant);
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_NullInput_ThrowsNullPointerException() throws Throwable {
        try {
            converter.getInstantMillis(null, null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected - details not specified
        }
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_InvalidObjectType_ThrowsClassCastException() throws Throwable {
        EthiopicChronology chrono = EthiopicChronology.getInstanceUTC();
        try {
            converter.getInstantMillis(chrono, chrono);
            fail("Expecting exception: ClassCastException");
        } catch(ClassCastException e) {
            // Expected - object not a String
        }
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_InvalidFormat_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getInstantMillis(" cannot be compared to ", CopticChronology.getInstanceUTC());
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Invalid format: \" cannot be compared to \"", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_UnsupportedDate_ThrowsIllegalArgumentException() throws Throwable {
        try {
            converter.getInstantMillis("000", CopticChronology.getInstance());
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            assertEquals("Cannot parse \"000\": Value 0 for year is not supported", e.getMessage());
        }
    }

    //---------------------------------------------------------------------
    // Tests for getSupportedType
    //---------------------------------------------------------------------

    @Test(timeout = 4000)
    public void testGetSupportedType_ReturnsStringClass() throws Throwable {
        Class<?> type = converter.getSupportedType();
        assertEquals(String.class, type);
    }
}