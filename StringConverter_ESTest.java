/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:24:14 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringConverter_ESTest extends StringConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pt,v.y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pt,v.y\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pt!8CF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pt!8CF\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pvb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pvb\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("~]TNU:z]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~]TNU:z]\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) null, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) mutablePeriod0, (Chronology) islamicChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MutablePeriod cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) null, (Object) null, (Chronology) julianChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "The chronology of ehe time does not match", (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: The chronology of ehe time does not match
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutableInterval mutableInterval0 = new MutableInterval();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) mutableInterval0, (Chronology) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MutableInterval cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) null, (Object) "Pt2s", (Chronology) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) "org/joda/time/tz/data", (Chronology) gregorianChronology0, (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, (-448));
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) partial0, (Object) ";Xb=I|6d!0*'jzM0/", (Chronology) null, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \";Xb=I|6d!0*'jzM0/\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis("000", copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"000\": Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis((Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(" cannot be compared to ", copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \" cannot be compared to \"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(ethiopicChronology0, ethiopicChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.chrono.EthiopicChronology cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis(stringConverter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.convert.StringConverter cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse("6/8");
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "6/8", (Chronology) islamicChronology0);
      assertEquals((-42368486400000L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse("6/P7m");
      assertEquals((-61959513600000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("p%/=-V$,Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p%\" is malformed at \"%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("Pd5jsFsKo?2`R/V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pd5jsFsKo?2`R\" is malformed at \"d5jsFsKo?2`R\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse(";Xb='|Z!0*'jzM0/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: ;Xb='|Z!0*'jzM0/
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval("/UkrB+[Yx$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format invalid: /UkrB+[Yx$
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(31556952000L, 31556952000L, iSOChronology0);
      stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "6/P7m", (Chronology) iSOChronology0);
      assertEquals((-61959513600000L), mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(48L, 1068L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "p3@QA9'OLT&K_7a]X<", (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p3@QA9'OLT&K_7a]X<\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "", (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, (PeriodType) null);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "Pt2s", (Chronology) zonedChronology0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      long long0 = stringConverter0.getDurationMillis("Pt2s");
      assertEquals(2000L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pt-is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pt-is\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pt-s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("PtZv!s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PtZv!s\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("Pt2.is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pt2.is\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("PT2f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PT2f\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("p3@QA9'OLT&K_7a]X<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p3@QA9'OLT&K_7a]X<\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      long long0 = stringConverter0.getDurationMillis("Pt2.s");
      assertEquals(2000L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(2454L, (Chronology) ethiopicChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      int[] intArray0 = stringConverter0.getPartialValues((ReadablePartial) monthDay0, (Object) "0", (Chronology) ethiopicChronology0, dateTimeFormatter1);
      assertArrayEquals(new int[] {4, 23}, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      StringConverter stringConverter0 = new StringConverter();
      MonthDay monthDay0 = MonthDay.now((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, (-2212));
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) monthDay0, (Object) monthDay0, (Chronology) iSOChronology0, dateTimeFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MonthDay cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("6/P7m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6/P7m\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Class<?> class0 = stringConverter0.getSupportedType();
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      long long0 = stringConverter0.getInstantMillis("000", iSOChronology0);
      assertEquals((-62167219200000L), long0);
  }
}
