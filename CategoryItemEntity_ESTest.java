/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:16:01 GMT 2025
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.time.Clock;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import javax.swing.JLayeredPane;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.jfree.chart.entity.CategoryItemEntity;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CategoryItemEntity_ESTest extends CategoryItemEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "N`", "N`", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      categoryItemEntity0.setRowKey((Integer) null);
      Integer integer0 = categoryItemEntity0.getRowKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      LocalDate localDate0 = MockLocalDate.now();
      CategoryItemEntity<ChronoLocalDate, Integer> categoryItemEntity0 = new CategoryItemEntity<ChronoLocalDate, Integer>(polygon0, "nO,\"", "N`", defaultMultiValueCategoryDataset0, localDate0, (Integer) polygon0.npoints);
      ChronoLocalDate chronoLocalDate0 = categoryItemEntity0.getRowKey();
      assertSame(localDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "N`", "N`", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      categoryItemEntity0.setColumnKey((Integer) null);
      Integer integer0 = categoryItemEntity0.getColumnKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      Clock clock0 = MockClock.systemUTC();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now(clock0);
      CategoryItemEntity<Integer, ChronoLocalDate> categoryItemEntity0 = new CategoryItemEntity<Integer, ChronoLocalDate>(defaultCaret0, "N`", "", defaultMultiValueCategoryDataset0, (Integer) 0, japaneseDate0);
      ChronoLocalDate chronoLocalDate0 = categoryItemEntity0.getColumnKey();
      assertSame(japaneseDate0, chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(rectangle0, "N`", "N`", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      // Undeclared exception!
      try { 
        categoryItemEntity0.setDataset((CategoryDataset<Integer, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "lK", "lK", defaultMultiValueCategoryDataset0, (Integer) null, (Integer) null);
      Object object0 = categoryItemEntity0.clone();
      // Undeclared exception!
      try { 
        categoryItemEntity0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.entity.CategoryItemEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = null;
      try {
        categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "r\"s!dma&B8-JXkb$0-", "r\"s!dma&B8-JXkb$0-", (CategoryDataset) null, (Integer) 0, (Integer) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultStatisticalCategoryDataset<Integer, Integer> defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(rectangle2D_Double0, "'2zliUz|", "'2zliUz|", defaultStatisticalCategoryDataset0, (Integer) 0, (Integer) 0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      CategoryItemEntity<Integer, Integer> categoryItemEntity1 = new CategoryItemEntity<Integer, Integer>(rectangle2D_Double0, "t.s&<g6o`/(5QNh", "'2zliUz|", defaultStatisticalCategoryDataset0, (Integer) 0, integer0);
      Object object0 = categoryItemEntity0.clone();
      boolean boolean0 = categoryItemEntity1.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "N`", "N`", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      CategoryItemEntity<Integer, Integer> categoryItemEntity1 = new CategoryItemEntity<Integer, Integer>(polygon0, "N`", "", defaultMultiValueCategoryDataset0, integer0, (Integer) 0);
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "", "", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      boolean boolean0 = categoryItemEntity0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "N`", "N`", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, (String) null, (String) null, defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      CategoryItemEntity<Integer, Integer> categoryItemEntity1 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, (String) null, (String) null, defaultMultiValueCategoryDataset0, (Integer) defaultCaret0.height, (Integer) 0);
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, (String) null, (String) null, defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      DefaultBoxAndWhiskerCategoryDataset<Integer, Integer> defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset<Integer, Integer>();
      categoryItemEntity0.setDataset(defaultBoxAndWhiskerCategoryDataset0);
      CategoryItemEntity<Integer, Integer> categoryItemEntity1 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, (String) null, (String) null, defaultMultiValueCategoryDataset0, (Integer) defaultCaret0.y, (Integer) 0);
      boolean boolean0 = categoryItemEntity0.equals(categoryItemEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "A!=WtVt`q", "A!=WtVt`q", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      CategoryDataset<Integer, Integer> categoryDataset0 = categoryItemEntity0.getDataset();
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultMultiValueCategoryDataset<Integer, Integer> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<Integer, Integer>();
      CategoryItemEntity<Integer, Integer> categoryItemEntity0 = new CategoryItemEntity<Integer, Integer>(defaultCaret0, "", "", defaultMultiValueCategoryDataset0, (Integer) 0, (Integer) 0);
      String string0 = categoryItemEntity0.toString();
      assertNotNull(string0);
  }
}
