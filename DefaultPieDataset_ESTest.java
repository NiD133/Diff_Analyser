/*
 * ============================================================================
 * JFreeChart : a chart library for the Java(tm) platform
 * ============================================================================
 *
 * (C) Copyright 2000-present, by David Gilbert and Contributors.
 *
 * Project Info:  https://www.jfree.org/jfreechart/index.html
 *
 * A professional, human-readable version of the tests for the
 * DefaultPieDataset class. The original tests were generated by EvoSuite
 * and have been refactored for clarity, maintainability, and to better
 * communicate the intended behavior of the class.
 */
package org.jfree.data.general;

import org.jfree.chart.api.SortOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyedValues;
import org.jfree.data.UnknownKeyException;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

/**
 * A collection of tests for the {@link DefaultPieDataset} class.
 */
public class DefaultPieDatasetTest {

    // -----------------
    // Constructor Tests
    // -----------------

    @Test
    public void constructor_default_createsEmptyDataset() {
        // Arrange & Act
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Assert
        assertEquals(0, dataset.getItemCount());
        assertTrue(dataset.getKeys().isEmpty());
    }

    @Test
    public void constructor_withKeyedValues_copiesAllData() {
        // Arrange
        DefaultKeyedValues<String> sourceData = new DefaultKeyedValues<>();
        sourceData.addValue("Apple", 10);
        sourceData.addValue("Banana", 20);

        // Act
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>(sourceData);

        // Assert
        assertEquals(2, dataset.getItemCount());
        assertEquals("Apple", dataset.getKey(0));
        assertEquals(10, dataset.getValue("Apple"));
        assertEquals("Banana", dataset.getKey(1));
        assertEquals(20, dataset.getValue("Banana"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void constructor_withNullKeyedValues_throwsException() {
        // Arrange, Act & Assert
        new DefaultPieDataset<>((KeyedValues<String>) null);
    }

    // --------------------
    // Data Mutation Tests
    // --------------------

    @Test
    public void setValue_withNewKey_addsItem() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Act
        dataset.setValue("Apple", 10.0);

        // Assert
        assertEquals(1, dataset.getItemCount());
        assertEquals(10.0, dataset.getValue("Apple").doubleValue(), 0.0);
    }

    @Test
    public void setValue_withExistingKey_updatesValue() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10.0);

        // Act
        dataset.setValue("Apple", 15.0);

        // Assert
        assertEquals(1, dataset.getItemCount());
        assertEquals(15.0, dataset.getValue("Apple").doubleValue(), 0.0);
    }

    @Test
    public void setValue_withNullValue_isAllowed() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Act
        dataset.setValue("Apple", null);

        // Assert
        assertEquals(1, dataset.getItemCount());
        assertNull(dataset.getValue("Apple"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void setValue_withNullKey_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Act & Assert
        dataset.setValue(null, 10.0);
    }

    @Test
    public void insertValue_atStart_addsItemAtCorrectPosition() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);

        // Act
        dataset.insertValue(0, "Banana", 20);

        // Assert
        assertEquals(2, dataset.getItemCount());
        assertEquals("Banana", dataset.getKey(0));
        assertEquals(20, dataset.getValue(0));
        assertEquals("Apple", dataset.getKey(1));
        assertEquals(10, dataset.getValue(1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void insertValue_withPositionTooLarge_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);

        // Act & Assert
        dataset.insertValue(2, "Banana", 20);
    }

    @Test
    public void remove_withExistingKey_removesItem() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);
        dataset.setValue("Banana", 20);

        // Act
        dataset.remove("Apple");

        // Assert
        assertEquals(1, dataset.getItemCount());
        assertEquals(-1, dataset.getIndex("Apple"));
        assertEquals("Banana", dataset.getKey(0));
    }

    @Test(expected = UnknownKeyException.class)
    public void remove_withNonExistentKey_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Act & Assert
        dataset.remove("Non-existent Key");
    }

    @Test
    public void clear_removesAllItems() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);
        dataset.setValue("Banana", 20);

        // Act
        dataset.clear();

        // Assert
        assertEquals(0, dataset.getItemCount());
    }

    // --------------------
    // Data Accessor Tests
    // --------------------

    @Test
    public void getValue_byKey_returnsCorrectValue() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10.5);

        // Act
        Number value = dataset.getValue("Apple");

        // Assert
        assertEquals(10.5, value.doubleValue(), 0.0);
    }

    @Test(expected = UnknownKeyException.class)
    public void getValue_byNonExistentKey_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();

        // Act & Assert
        dataset.getValue("Non-existent Key");
    }

    @Test
    public void getIndex_withExistingKey_returnsCorrectIndex() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);
        dataset.setValue("Banana", 20);

        // Act & Assert
        assertEquals(0, dataset.getIndex("Apple"));
        assertEquals(1, dataset.getIndex("Banana"));
    }

    @Test
    public void getIndex_withNonExistentKey_returnsNegativeOne() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);

        // Act
        int index = dataset.getIndex("Non-existent Key");

        // Assert
        assertEquals(-1, index);
    }

    @Test
    public void getKeys_returnsAllKeysInInsertionOrder() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);
        dataset.setValue("Cherry", 30);
        dataset.setValue("Banana", 20);

        // Act
        List<String> keys = dataset.getKeys();

        // Assert
        assertEquals(Arrays.asList("Apple", "Cherry", "Banana"), keys);
    }

    // -------------
    // Sorting Tests
    // -------------

    @Test
    public void sortByKeys_ascending_sortsItemsCorrectly() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Cherry", 30);
        dataset.setValue("Apple", 10);
        dataset.setValue("Banana", 20);

        // Act
        dataset.sortByKeys(SortOrder.ASCENDING);

        // Assert
        assertEquals(Arrays.asList("Apple", "Banana", "Cherry"), dataset.getKeys());
    }

    @Test
    public void sortByValues_descending_sortsItemsCorrectly() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);
        dataset.setValue("Cherry", 30);
        dataset.setValue("Banana", 20);

        // Act
        dataset.sortByValues(SortOrder.DESCENDING);

        // Assert
        assertEquals(Arrays.asList("Cherry", "Banana", "Apple"), dataset.getKeys());
        assertEquals(30, dataset.getValue(0));
        assertEquals(20, dataset.getValue(1));
        assertEquals(10, dataset.getValue(2));
    }

    @Test(expected = IllegalArgumentException.class)
    public void sortByKeys_withNullOrder_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        // Act & Assert
        dataset.sortByKeys(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void sortByValues_withNullOrder_throwsException() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        // Act & Assert
        dataset.sortByValues(null);
    }

    // ----------------------------
    // equals(), hashCode(), clone()
    // ----------------------------

    @Test
    public void equals_withSelf_returnsTrue() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);

        // Act & Assert
        assertTrue(dataset.equals(dataset));
    }

    @Test
    public void equals_withIdenticalDataset_returnsTrue() {
        // Arrange
        DefaultPieDataset<String> dataset1 = new DefaultPieDataset<>();
        dataset1.setValue("Apple", 10);
        dataset1.setValue("Banana", null);

        DefaultPieDataset<String> dataset2 = new DefaultPieDataset<>();
        dataset2.setValue("Apple", 10);
        dataset2.setValue("Banana", null);

        // Act & Assert
        assertTrue(dataset1.equals(dataset2));
    }

    @Test
    public void equals_withDifferentKey_returnsFalse() {
        // Arrange
        DefaultPieDataset<String> dataset1 = new DefaultPieDataset<>();
        dataset1.setValue("Apple", 10);

        DefaultPieDataset<String> dataset2 = new DefaultPieDataset<>();
        dataset2.setValue("Orange", 10);

        // Act & Assert
        assertFalse(dataset1.equals(dataset2));
    }

    @Test
    public void equals_withDifferentValue_returnsFalse() {
        // Arrange
        DefaultPieDataset<String> dataset1 = new DefaultPieDataset<>();
        dataset1.setValue("Apple", 10);

        DefaultPieDataset<String> dataset2 = new DefaultPieDataset<>();
        dataset2.setValue("Apple", 20);

        // Act & Assert
        assertFalse(dataset1.equals(dataset2));
    }

    @Test
    public void equals_withDifferentOrder_returnsFalse() {
        // Arrange
        DefaultPieDataset<String> dataset1 = new DefaultPieDataset<>();
        dataset1.setValue("Apple", 10);
        dataset1.setValue("Banana", 20);

        DefaultPieDataset<String> dataset2 = new DefaultPieDataset<>();
        dataset2.setValue("Banana", 20);
        dataset2.setValue("Apple", 10);

        // Act & Assert
        assertFalse(dataset1.equals(dataset2));
    }

    @Test
    public void equals_withDifferentObjectType_returnsFalse() {
        // Arrange
        DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
        dataset.setValue("Apple", 10);

        // Act & Assert
        assertFalse(dataset.equals("A String object"));
    }

    @Test
    public void hashCode_isConsistentForEqualObjects() {
        // Arrange
        DefaultPieDataset<String> dataset1 = new DefaultPieDataset<>();
        dataset1.setValue("Apple", 10);

        DefaultPieDataset<String> dataset2 = new DefaultPieDataset<>();
        dataset2.setValue("Apple", 10);

        // Act & Assert
        assertEquals(dataset1.hashCode(), dataset2.hashCode());
    }

    @Test
    public void clone_createsIndependentCopy() throws CloneNotSupportedException {
        // Arrange
        DefaultPieDataset<String> original = new DefaultPieDataset<>();
        original.setValue("Apple", 10);

        // Act
        DefaultPieDataset<String> clone = (DefaultPieDataset<String>) original.clone();

        // Assert
        assertNotSame(original, clone);
        assertTrue(original.equals(clone));

        // Verify independence by modifying the clone
        clone.setValue("Apple", 20);
        assertFalse(original.equals(clone));
    }
}