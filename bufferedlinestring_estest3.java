package org.locationtech.spatial4j.shape.impl;

import org.junit.Test;
import org.locationtech.spatial4j.context.SpatialContext;
import org.locationtech.spatial4j.shape.Point;

import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

/**
 * An improved and human-readable test suite for the {@link BufferedLineString} class.
 *
 * The original test was auto-generated by EvoSuite, resulting in unclear names,
 * complex setup, and a lack of clear intent. This version has been refactored for
 * maximum understandability and maintainability.
 */
public class BufferedLineStringTest {

    private final SpatialContext spatialContext = SpatialContext.GEO;

    /**
     * Tests that two BufferedLineString objects with identical points but different
     * buffer sizes are not considered equal. This verifies that the buffer size
     * is a critical component of the object's equality contract.
     */
    @Test
    public void equals_shouldReturnFalse_whenBufferSizesDiffer() {
        // Arrange
        final List<Point> points = Collections.emptyList();
        final double ZERO_BUFFER = 0.0;
        final double NON_ZERO_BUFFER = 10.0;

        // Create two line strings with the same points but different buffer values.
        BufferedLineString lineWithZeroBuffer = new BufferedLineString(points, ZERO_BUFFER, spatialContext);
        BufferedLineString lineWithNonZeroBuffer = new BufferedLineString(points, NON_ZERO_BUFFER, spatialContext);

        // Assert
        // Sanity check that the buffer values were set correctly.
        assertEquals(ZERO_BUFFER, lineWithZeroBuffer.getBuf(), 0.0);
        assertEquals(NON_ZERO_BUFFER, lineWithNonZeroBuffer.getBuf(), 0.0);

        // The main assertion: The two objects must not be equal because their buffers differ.
        // This also implicitly tests the symmetry of the equals method.
        assertNotEquals("Line strings with different buffers should not be equal.", lineWithZeroBuffer, lineWithNonZeroBuffer);
        assertNotEquals("Symmetry check: equals should return false regardless of order.", lineWithNonZeroBuffer, lineWithZeroBuffer);
    }
}