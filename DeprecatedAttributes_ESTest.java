/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:35:06 GMT 2025
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.cli.DeprecatedAttributes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeprecatedAttributes_ESTest extends DeprecatedAttributes_ESTest_scaffolding {
    private static final String TEST_SINCE_VERSION = "testVersion";
    private static final String TEST_DESCRIPTION = "testDescription";
    private static final String CUSTOM_SINCE_VERSION = "x-qz[]";
    private static final String CUSTOM_DESCRIPTION = "RSb&;Wj}.&C.b S?5";
    private static final String COMMA_DESCRIPTION = ",";
    private static final String SPECIAL_CHAR_SINCE = "+,ygu";
    private static final String EMPTY_STRING = "";

    @Test(timeout = 4000)
    public void testSetAndGetForRemoval() throws Throwable {
        // Verify setting and retrieving 'forRemoval' flag
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setForRemoval(true);
        DeprecatedAttributes attributes = builder.get();

        assertTrue("Attribute should be marked for removal", attributes.isForRemoval());
    }

    @Test(timeout = 4000)
    public void testSetAndGetSinceWithSpecialChars() throws Throwable {
        // Verify setting and retrieving 'since' version with special characters
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setSince(SPECIAL_CHAR_SINCE);
        DeprecatedAttributes attributes = builder.get();

        assertEquals("Since version should match with special characters", 
                     SPECIAL_CHAR_SINCE, attributes.getSince());
        assertEquals("Description should be empty when not set", 
                     EMPTY_STRING, attributes.getDescription());
        assertFalse("forRemoval should be false by default", attributes.isForRemoval());
    }

    @Test(timeout = 4000)
    public void testSetAndGetDescription() throws Throwable {
        // Verify setting and retrieving custom description
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setDescription(CUSTOM_DESCRIPTION);
        DeprecatedAttributes attributes = builder.get();

        assertEquals("Description should match set value", 
                     CUSTOM_DESCRIPTION, attributes.getDescription());
        assertEquals("Since version should be empty when not set", 
                     EMPTY_STRING, attributes.getSince());
        assertFalse("forRemoval should be false by default", attributes.isForRemoval());
    }

    @Test(timeout = 4000)
    public void testToStringWithSinceVersion() throws Throwable {
        // Verify toString format when 'since' version is set
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setSince(CUSTOM_SINCE_VERSION);
        DeprecatedAttributes attributes = builder.get();

        assertEquals("toString should indicate deprecated since version",
                     "Deprecated since " + CUSTOM_SINCE_VERSION, attributes.toString());
    }

    @Test(timeout = 4000)
    public void testToStringWithForRemoval() throws Throwable {
        // Verify toString format when 'forRemoval' is true
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setForRemoval(true);
        DeprecatedAttributes attributes = builder.get();

        assertEquals("toString should indicate deprecated for removal",
                     "Deprecated for removal", attributes.toString());
    }

    @Test(timeout = 4000)
    public void testDefaultDescription() throws Throwable {
        // Verify default description is empty
        assertEquals("Default description should be empty",
                     EMPTY_STRING, DeprecatedAttributes.DEFAULT.getDescription());
    }

    @Test(timeout = 4000)
    public void testDefaultForRemoval() throws Throwable {
        // Verify default forRemoval is false
        assertFalse("Default forRemoval should be false",
                    DeprecatedAttributes.DEFAULT.isForRemoval());
    }

    @Test(timeout = 4000)
    public void testDefaultSince() throws Throwable {
        // Verify default since version is empty
        assertEquals("Default since version should be empty",
                     EMPTY_STRING, DeprecatedAttributes.DEFAULT.getSince());
    }

    @Test(timeout = 4000)
    public void testToStringWithDescription() throws Throwable {
        // Verify toString format when description is set
        DeprecatedAttributes.Builder builder = DeprecatedAttributes.builder();
        builder.setDescription(COMMA_DESCRIPTION);
        DeprecatedAttributes attributes = builder.get();

        assertEquals("toString should contain custom description",
                     "Deprecated: " + COMMA_DESCRIPTION, attributes.toString());
        assertEquals("Description should match set value",
                     COMMA_DESCRIPTION, attributes.getDescription());
    }
}