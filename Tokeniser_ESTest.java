/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:40:42 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.Parser;
import org.jsoup.parser.StreamParser;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("", "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_singleQuoted;
      tokeniser0.transition(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{O_&7vi9I", "{O_&7vi9I");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedLessthanSign;
      tokeniser0.eofError(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("?_+gYddM=:Bw~{Pk");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(".A!r,Rq!l<z-vT9k", ".A!r,Rq!l<z-vT9k");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("*S(.f;(4%%-%Rr", (Element) document0, "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      String string0 = tokeniser0.unescapeEntities(true);
      assertEquals("*S(.f;(4%%-%Rr", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{_&vi9I", "{_&vi9I");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      assertNotNull(token_Tag0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("~q|K}QnrD6s{{tpV-~", "~q|K}QnrD6s{{tpV-~");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.unescapeEntities(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("missing semicolon on [&#%s]", "missing semicolon on [&#%s]");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      TokeniserState tokeniserState0 = TokeniserState.TagOpen;
      // Undeclared exception!
      try { 
        tokeniser0.transition(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("< ", "< ");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("</", "</");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emitTagPending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("", "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emit((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{O_&7vinI", "{O_&7vinI");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-386);
      // Undeclared exception!
      try { 
        tokeniser0.emit(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse(".A!r,Rq!l<z-vT9k", ".A!r,Rq!l<z-vT9k");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      StreamParser streamParser0 = new StreamParser(parser0);
      streamParser0.parseFragment("*S(.f;(4%%-%Rr", (Element) document0, "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.emitDoctypePending();
      Token.Doctype token_Doctype0 = new Token.Doctype();
      // Undeclared exception!
      try { 
        tokeniser0.emit(token_Doctype0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("</", "</");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emit((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("< ", "< ");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emit("< ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("missing semicolon on [&#%s]", "missing semicolon on [&#%s]");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emit('C');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("< ", "< ");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.consumeCharacterReference((Character) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("missing semicolon on [&#%s]", "missing semicolon on [&#%s]");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      TokeniserState tokeniserState0 = TokeniserState.RawtextEndTagName;
      // Undeclared exception!
      try { 
        tokeniser0.advanceTransition(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tokeniser tokeniser0 = null;
      try {
        tokeniser0 = new Tokeniser(htmlTreeBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("~q|K}QnrD6s{{tpV-~", "~q|K}QnrD6s{{tpV-~");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.error("~q|K}QnrD6s{{tpV-~", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = Parser.unescapeEntities("&#x27;", false);
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{O_&7vinI", "{O_&7vinI");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.error("{O_&7vinI");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Parser parser0 = new Parser(xmlTreeBuilder0);
      parser0.setTrackErrors(39);
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "userAgent", parser0);
      assertEquals("userAgent", document0.location());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{_&vi9I", "{_&vi9I");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeSystemIdentifier;
      tokeniser0.error(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse(":matchesWholeOwnText(%s)", ":matchesWholeOwnText(%s)");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.appropriateEndTagSeq();
      String string0 = tokeniser0.appropriateEndTagSeq();
      assertEquals("</null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{_&vi9I", "{_&vi9I");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = Parser.unescapeEntities("c|jj9.a5&pr)$", true);
      assertEquals("c|jj9.a5&pr)$", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("mcP)?FW_&5;~\"", "mcP)?FW_&5;~\"");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("{O_&<vinI", "{O_&<vinI");
      assertEquals("#root", document0.normalName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("/Q");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("", "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.createDoctypePending();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("http://www.w3.org/1999/xhtml", "http://www.w3.org/1999/xhtml");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      Token.XmlDecl token_XmlDecl0 = tokeniser0.createXmlDeclPending(false);
      assertNotNull(token_XmlDecl0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("&#x27;", "&#x27;");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C(p;<i>L_mFu^", "C(p;<i>L_mFu^");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("missing semicolon on [&#%s]", "missing semicolon on [&#%s]");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.createBogusCommentPending();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{_&vi9I", "{_&vi9I");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.createCommentPending();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("{O_&7vi9I", "v62F");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("", "");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      String string0 = tokeniser0.appropriateEndTagName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("~q|K}QnrD6s{{tpV-~", "~q|K}QnrD6s{{tpV-~");
      Tokeniser tokeniser0 = new Tokeniser(xmlTreeBuilder0);
      tokeniser0.createTempBuffer();
  }
}
