/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:15:23 GMT 2025
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Function;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain0);
      comparatorChain0.addComparator(comparator0, true);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      comparatorChain0.addComparator((Comparator<Integer>) comparatorChain0, true);
      comparatorChain0.addComparator((Comparator<Integer>) comparatorChain0, true);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComparatorChain<ComparatorChain<Integer>> comparatorChain0 = new ComparatorChain<ComparatorChain<Integer>>();
      comparatorChain0.setReverseSort(1306);
      assertEquals(0, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(513L, (-971L)).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      LinkedList<Comparator<ComparatorChain<LongBuffer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<LongBuffer>>>();
      ComparatorChain<ComparatorChain<LongBuffer>> comparatorChain1 = new ComparatorChain<ComparatorChain<LongBuffer>>(linkedList0);
      Object object0 = new Object();
      comparatorChain0.compare(comparatorChain1, object0);
      boolean boolean0 = comparatorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Comparator<ComparatorPredicate.Criterion>> linkedList0 = new LinkedList<Comparator<ComparatorPredicate.Criterion>>();
      ComparatorChain<ComparatorPredicate.Criterion> comparatorChain0 = new ComparatorChain<ComparatorPredicate.Criterion>(linkedList0);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-2145));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2145
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>((List<Comparator<ComparatorChain<Object>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(2147483645, (Comparator<ComparatorChain<Object>>) comparatorChain0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(0, (Comparator<Object>) comparatorChain0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-2), (Comparator<Object>) comparatorChain0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.nullsLast((Comparator<? super ComparatorChain<Object>>) null);
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(comparator0);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0, (BitSet) null);
      comparatorChain0.compare(comparatorChain1, comparatorChain1);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-67), comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BitSet bitSet0 = new BitSet(2075);
      ComparatorChain<ComparatorChain<ByteBuffer>> comparatorChain0 = new ComparatorChain<ComparatorChain<ByteBuffer>>((List<Comparator<ComparatorChain<ByteBuffer>>>) null, bitSet0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1270, (Comparator<ComparatorChain<ByteBuffer>>) comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      try { 
        comparatorChain0.setComparator(2, (Comparator<ComparatorChain<Object>>) comparatorChain0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(closure0);
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.comparing((Function<? super ComparatorChain<Object>, ?>) closureTransformer0, (Comparator<? super Object>) comparatorChain0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>(comparator0);
      // Undeclared exception!
      try { 
        comparatorChain1.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      Object object0 = new Object();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>();
      // Undeclared exception!
      try { 
        comparatorChain0.compare(object0, comparatorChain1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator((Comparator<Object>) comparatorChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComparatorChain<ByteBuffer> comparatorChain0 = null;
      try {
        comparatorChain0 = new ComparatorChain<ByteBuffer>((List<Comparator<ByteBuffer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.setComparator(0, (Comparator<Object>) null, false);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-1576), (-1576), (-206)).when(toIntFunction0).applyAsInt(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      Integer integer0 = new Integer((-318));
      comparatorChain0.compare(integer0, integer0);
      int int0 = comparatorChain0.compare(integer0, integer0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      comparatorChain0.addComparator((Comparator<Integer>) comparatorChain0, false);
      comparatorChain0.size();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      comparatorChain0.setComparator(0, (Comparator<Object>) null, true);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.nullsFirst((Comparator<? super ComparatorChain<Object>>) comparatorChain0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>(comparator0);
      comparatorChain1.setComparator(0, comparator0);
      assertEquals(1, comparatorChain1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, true);
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      boolean boolean0 = comparatorChain0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      boolean boolean0 = comparatorChain0.equals("ComparatorChains must contain at least one Comparator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(780, (-1576)).when(toIntFunction0).applyAsInt(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      Integer integer0 = new Integer(780);
      comparatorChain0.compare(integer0, integer0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(780, comparator0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      try { 
        comparatorChain0.compare(comparatorChain0, comparatorChain0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<ComparatorChain<Object>> comparator0 = Comparator.nullsLast((Comparator<? super ComparatorChain<Object>>) null);
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(comparator0);
      try { 
        comparatorChain0.setComparator((-67), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      boolean boolean0 = comparatorChain0.equals(comparatorChain0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      comparatorChain0.setForwardSort(0);
      assertEquals(0, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ToIntFunction<Integer> toIntFunction0 = (ToIntFunction<Integer>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain0.addComparator(comparator0);
      assertEquals(2, comparatorChain0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComparatorChain<ComparatorPredicate.Criterion> comparatorChain0 = new ComparatorChain<ComparatorPredicate.Criterion>();
      int int0 = comparatorChain0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain0.setReverseSort((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      boolean boolean0 = comparatorChain0.isLocked();
      assertFalse(boolean0);
  }
}
