/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:17:53 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapExtractor;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CellExtractor;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexExtractor;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SparseBloomFilter_ESTest extends SparseBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2268, 64);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      IndexFilter.BitMapTracker indexFilter_BitMapTracker0 = new IndexFilter.BitMapTracker(shape0);
      boolean boolean0 = sparseBloomFilter0.processIndices(indexFilter_BitMapTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromNM(22, 22);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-1158L), (-613L));
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean1 = sparseBloomFilter0.processIndices(intPredicate0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[6];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      boolean boolean1 = sparseBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(22, 22, 22);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      Shape shape1 = sparseBloomFilter0.getShape();
      assertEquals(0.6931471805599453, shape1.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int[] intArray0 = new int[4];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      boolean boolean0 = sparseBloomFilter0.contains(indexExtractor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromKM(22, 22);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-394L), (-735L));
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape0);
      boolean boolean1 = sparseBloomFilter1.contains((BitMapExtractor) sparseBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(22, 22, 22);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.characteristics();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3281, 3281);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[6];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = sparseBloomFilter0.cardinality();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(989, 989);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(989, 989);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      sparseBloomFilter0.processIndices(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1004, 1004);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.processIndices((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromKM(64, 1);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape1);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.processIndices(indexFilter_ArrayTracker0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1014, 1014);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.processBitMaps((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((IndexExtractor) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1014, 1014);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((IndexExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3, Integer.MAX_VALUE);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(3, 3);
      // Undeclared exception!
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(10, 10);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3130, 1);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(3130, 3130);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 2146453540 is greater than maximum value (0)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromKM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BloomFilter<?>) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromKM(18, 18);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BloomFilter<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483639, 2147483639);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      sparseBloomFilter0.merge((BitMapExtractor) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(989, 989);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((BitMapExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(3, 3);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 3;
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromBitMapArray(longArray0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge(bitMapExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 129 is greater than maximum value (2)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483639, 2147483639);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      IndexExtractor indexExtractor0 = IndexExtractor.fromBitMapExtractor(sparseBloomFilter0);
      // Undeclared exception!
      sparseBloomFilter0.contains(indexExtractor0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1014, 1014);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((IndexExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(3, 3);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromIndexExtractor(sparseBloomFilter0, Integer.MAX_VALUE);
      // Undeclared exception!
      sparseBloomFilter0.contains(bitMapExtractor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromKM(989, 989);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.contains((BitMapExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseBloomFilter sparseBloomFilter0 = null;
      try {
        sparseBloomFilter0 = new SparseBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483639, 2147483639);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[2];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      // Undeclared exception!
      sparseBloomFilter0.processBitMaps(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = new long[4];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean1 = sparseBloomFilter0.processBitMaps(longPredicate0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      Shape shape0 = Shape.fromNM(989, 2268);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge(indexExtractor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(12, 12, 12);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge(indexExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 12 is greater than maximum value (11)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((IndexExtractor) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483639, 2147483639);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      long[] longArray0 = new long[2];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      countingLongPredicate0.test(2147483639L);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean0 = sparseBloomFilter0.processBitMaps(longPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(9, 9);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(0L, 9);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      int int0 = arrayCountingBloomFilter0.getMaxInsert((BitMapExtractor) sparseBloomFilter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1045, 1045);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(997L, (-1591L));
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean1 = simpleBloomFilter0.contains((BitMapExtractor) sparseBloomFilter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      boolean boolean0 = sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = sparseBloomFilter0.merge((BitMapExtractor) sparseBloomFilter0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      int[] intArray0 = new int[4];
      intArray0[3] = (-1);
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      CellExtractor cellExtractor0 = CellExtractor.from(indexExtractor0);
      // Undeclared exception!
      try { 
        sparseBloomFilter0.merge((IndexExtractor) cellExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list -1 is less than 0
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.merge((BloomFilter<?>) sparseBloomFilter0);
      assertTrue(boolean0);
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromNM(1618, 1618);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1618, 1618);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      long[] longArray0 = sparseBloomFilter0.asBitMapArray();
      assertEquals(26, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromKM(989, 989);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((BitMapExtractor) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1045, 1045);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      sparseBloomFilter0.clear();
      assertEquals(1, sparseBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter1 = sparseBloomFilter0.copy();
      assertEquals(1, sparseBloomFilter1.characteristics());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains((IndexExtractor) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromKM(994, 994);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      byte[] byteArray0 = new byte[4];
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(byteArray0);
      sparseBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      Shape shape1 = Shape.fromNM(1, 408);
      SparseBloomFilter sparseBloomFilter1 = new SparseBloomFilter(shape1);
      // Undeclared exception!
      try { 
        sparseBloomFilter1.merge((BloomFilter<?>) sparseBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value in list 990 is greater than maximum value (407)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SparseBloomFilter", e);
      }
  }
}
