/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:11:18 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.map.TransformedSortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransformedSortedMap_ESTest extends TransformedSortedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Integer, ? extends Integer>>) linkedList0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(treeMap0, (Transformer<? super Integer, ? extends Integer>) null, transformer0);
      Integer integer0 = new Integer((-3410));
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.subMap(integer0, integer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(3005);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("\"3Kz{N`TV^sYZ s\"p5Q", classArray0, classArray0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Integer>) treeMap0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0, (Transformer<? super Integer, ? extends Integer>) factoryTransformer0);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.headMap(integer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      Integer integer0 = new Integer((-2921));
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>((String) null, classArray0, (Object[]) null);
      TransformedSortedMap<Integer, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Object>) treeMap0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0, (Transformer<? super Object, ?>) invokerTransformer0);
      SortedMap<Integer, Object> sortedMap0 = transformedSortedMap0.tailMap(integer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer(850);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Integer, Integer>) treeMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
      treeMap0.put(integer0, integer0);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.tailMap(integer0);
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(3152);
      treeMap0.put(integer0, integer1);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(treeMap0, constantTransformer0, constantTransformer0);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.subMap(integer0, integer1);
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer(61);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      treeMap1.put(integer0, integer0);
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Integer>) treeMap1, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      Object object0 = transformedSortedMap0.lastKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>(comparator0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(5);
      treeMap0.put(class0, integer0);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("Lu", classArray0, classArray0);
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Integer>) treeMap0, (Transformer<? super Object, ?>) invokerTransformer0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      Object object0 = transformedSortedMap0.lastKey();
      assertEquals("class java.lang.Object", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = ChainedTransformer.chainedTransformer((Collection<? extends Transformer<? super Integer, ? extends Integer>>) linkedList0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(treeMap0, transformer0, transformer0);
      Integer integer0 = new Integer((-17));
      treeMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.headMap(integer1);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeMap<Closure<Object>, Object> treeMap0 = new TreeMap<Closure<Object>, Object>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, Closure<Object>> invokerTransformer0 = new InvokerTransformer<Object, Closure<Object>>("org.apache.commons.collections4.functors.ComparatorPredicate", classArray0, classArray0);
      TransformedSortedMap<Closure<Object>, Object> transformedSortedMap0 = new TransformedSortedMap<Closure<Object>, Object>(treeMap0, invokerTransformer0, invokerTransformer0);
      TransformedSortedMap<Closure<Object>, Object> transformedSortedMap1 = TransformedSortedMap.transformingSortedMap((SortedMap<Closure<Object>, Object>) transformedSortedMap0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) invokerTransformer0, (Transformer<? super Object, ?>) invokerTransformer0);
      SortedMap<Closure<Object>, Object> sortedMap0 = transformedSortedMap1.getSortedMap();
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer(784);
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(treeMap0, transformer0, transformer0);
      transformedSortedMap0.put(integer0, integer0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap1 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Integer>) transformedSortedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap1.getSortedMap();
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      Comparator<? super Object> comparator0 = transformedSortedMap0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformingSortedMap((SortedMap<Integer, Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TreeMap<Object, Integer> treeMap0 = new TreeMap<Object, Integer>();
      Integer integer0 = new Integer((-1));
      treeMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<Object, Integer>) treeMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeMap<Object, Predicate<Integer>> treeMap0 = new TreeMap<Object, Predicate<Integer>>();
      TransformedSortedMap<Object, Predicate<Integer>> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Predicate<Integer>>) treeMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Predicate<Integer>, ? extends Predicate<Integer>>) null);
      transformedSortedMap0.map = (Map<Object, Predicate<Integer>>) transformedSortedMap0;
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<Object, Predicate<Integer>>) transformedSortedMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Predicate<Integer>, ? extends Predicate<Integer>>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Integer integer0 = new Integer(1);
      treeMap0.put(integer0, integer0);
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(treeMap0);
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) constantTransformer0, (Transformer<? super Object, ?>) constantTransformer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer(512);
      SortedMap<Integer, Integer> sortedMap0 = treeMap0.subMap(integer0, integer0);
      Transformer<Integer, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Integer>) sortedMap0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap(sortedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.tailMap(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.tailMap(treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer(835);
      SortedMap<Integer, Integer> sortedMap0 = treeMap0.subMap(integer0, integer0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(sortedMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      String string0 = "i]oNU\\u7I%x";
      Transformer<Object, Integer> transformer1 = InvokerTransformer.invokerTransformer(string0);
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>();
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Integer>) treeMap1, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap(integer0, string0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        transformedSortedMap0.headMap((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer((-1116));
      NavigableMap<Integer, Integer> navigableMap0 = treeMap0.headMap(integer0, true);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(navigableMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.headMap(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // toKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.headMap(treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = null;
      try {
        transformedSortedMap0 = new TransformedSortedMap<Object, Integer>((SortedMap<Object, Integer>) null, (Transformer<? super Object, ?>) null, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(comparator0).compare(any() , any());
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer(61);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      treeMap1.put(integer0, integer0);
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Integer>) treeMap1, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      Object object0 = transformedSortedMap0.firstKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer(61);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Integer>) treeMap1, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap((Object) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      Transformer<Object, Object> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ?>) treeMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeMap<Object, Integer> treeMap1 = new TreeMap<Object, Integer>(comparator0);
      Integer integer0 = new Integer(61);
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      TransformedSortedMap<Object, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Integer>) treeMap1, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      TransformedSortedMap<Object, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Object, Object>) treeMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        transformedSortedMap0.tailMap((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "i]oNU\\u7I%x";
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer(string0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>(comparator0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Integer>) treeMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Comparator<? super Integer> comparator1 = transformedSortedMap0.comparator();
      assertNotNull(comparator1);
  }
}
