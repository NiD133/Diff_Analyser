/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:18:25 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Seconds_ESTest extends Seconds_ESTest_scaffolding {

    // Constants for frequently used values
    private static final int MAX_INT = Integer.MAX_VALUE;
    private static final int MIN_INT = Integer.MIN_VALUE;
    private static final int TEST_VALUE_352831696 = 352831696;
    private static final int TEST_VALUE_2147138048 = 2147138048;

    // Comparison Tests ------------------------------------------------------
    @Test(timeout = 4000)
    public void testIsLessThanWhenOtherIsNullReturnsFalse() throws Throwable {
        Seconds seconds = Seconds.ZERO;
        assertFalse(seconds.isLessThan(null));
    }

    @Test(timeout = 4000)
    public void testIsLessThanWithNegativeValueAndNullReturnsTrue() throws Throwable {
        Seconds seconds = Seconds.seconds(-1300);
        assertTrue(seconds.isLessThan(null));
    }

    @Test(timeout = 4000)
    public void testIsLessThanWithSameInstanceReturnsFalse() throws Throwable {
        Seconds seconds = Seconds.ZERO;
        assertFalse(seconds.isLessThan(seconds));
    }

    @Test(timeout = 4000)
    public void testIsLessThanWithSmallerValueReturnsTrue() throws Throwable {
        Seconds three = Seconds.THREE;
        Seconds zero = Seconds.ZERO;
        assertTrue(zero.isLessThan(three));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWithSmallerValueReturnsTrue() throws Throwable {
        Seconds two = Seconds.TWO;
        Seconds min = Seconds.MIN_VALUE;
        assertTrue(two.isGreaterThan(min));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWithSameInstanceReturnsFalse() throws Throwable {
        Seconds one = Seconds.ONE;
        assertFalse(one.isGreaterThan(one));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWithNullReturnsTrue() throws Throwable {
        Seconds one = Seconds.ONE;
        assertTrue(one.isGreaterThan(null));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWithLargerValueReturnsFalse() throws Throwable {
        Seconds largeNegative = Seconds.seconds(MIN_INT + 2);
        assertFalse(largeNegative.isGreaterThan(null));
    }

    // Conversion Tests ------------------------------------------------------
    @Test(timeout = 4000)
    public void testToStandardWeeks() throws Throwable {
        Seconds seconds = Seconds.seconds(TEST_VALUE_352831696);
        Weeks weeks = seconds.toStandardWeeks();
        assertEquals(583, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMinValueToStandardWeeks() throws Throwable {
        Seconds seconds = Seconds.MIN_VALUE;
        Weeks weeks = seconds.toStandardWeeks();
        Seconds convertedBack = weeks.toStandardSeconds();
        assertEquals(-3550, weeks.getWeeks());
        assertEquals(-2147040000, convertedBack.getSeconds());
    }

    @Test(timeout = 4000)
    public void testToStandardMinutes() throws Throwable {
        Seconds seconds = Seconds.seconds(1575);
        Minutes minutes = seconds.toStandardMinutes();
        assertEquals(26, minutes.getMinutes());
    }

    @Test(timeout = 4000)
    public void testMinValueToStandardMinutes() throws Throwable {
        Seconds seconds = Seconds.MIN_VALUE;
        Minutes minutes = seconds.toStandardMinutes();
        assertEquals(-35791394, minutes.getMinutes());
    }

    @Test(timeout = 4000)
    public void testToStandardHours() throws Throwable {
        Seconds seconds = Seconds.seconds(690562340);
        Hours hours = seconds.toStandardHours();
        assertEquals(191822, hours.getHours());
    }

    @Test(timeout = 4000)
    public void testToStandardHoursWithZero() throws Throwable {
        Seconds seconds = Seconds.ZERO;
        Hours hours = seconds.toStandardHours();
        assertEquals(0, hours.getHours());
    }

    @Test(timeout = 4000)
    public void testToStandardDuration() throws Throwable {
        Seconds seconds = Seconds.ZERO;
        Duration duration = seconds.toStandardDuration();
        assertEquals(0L, duration.getStandardSeconds());
    }

    @Test(timeout = 4000)
    public void testMinValueToStandardDuration() throws Throwable {
        Seconds seconds = Seconds.MIN_VALUE;
        Duration duration = seconds.toStandardDuration();
        assertEquals(-2147483648000L, duration.getMillis());
    }

    @Test(timeout = 4000)
    public void testToStandardDays() throws Throwable {
        Days days = Days.FIVE;
        Seconds seconds = days.toStandardSeconds();
        Days convertedBack = seconds.toStandardDays();
        assertEquals(432000, seconds.getSeconds());
        assertEquals(5, convertedBack.getDays());
    }

    // Arithmetic Operation Tests --------------------------------------------
    @Test(timeout = 4000)
    public void testPlusWithNull() throws Throwable {
        Seconds seconds = Seconds.ONE;
        Seconds result = seconds.plus((Seconds) null);
        assertEquals(1, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testPlusZero() throws Throwable {
        Seconds seconds = Seconds.ZERO;
        Seconds result = seconds.plus(0);
        assertEquals(0, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testPlusNegativeValue() throws Throwable {
        Seconds seconds = Seconds.seconds(-2530);
        Seconds result = seconds.plus(seconds);
        assertEquals(-5060, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMinusWithNull() throws Throwable {
        Seconds seconds = Seconds.TWO;
        Seconds result = seconds.minus((Seconds) null);
        assertEquals(2, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMinusZero() throws Throwable {
        Seconds seconds = Seconds.seconds(0);
        Seconds result = seconds.minus(0);
        assertEquals(0, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMinusSameValue() throws Throwable {
        Seconds seconds = Seconds.TWO;
        Seconds result = seconds.minus(seconds);
        assertEquals(0, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMinusWithLargeValue() throws Throwable {
        Seconds seconds = Seconds.seconds(TEST_VALUE_352831696);
        Seconds minuend = seconds.MAX_VALUE;
        Seconds result = minuend.minus(seconds);
        assertEquals(MAX_INT - TEST_VALUE_352831696, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testNegated() throws Throwable {
        Seconds seconds = Seconds.THREE;
        Seconds result = seconds.negated();
        assertEquals(-3, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMultipliedByZero() throws Throwable {
        Seconds seconds = Seconds.seconds(1810);
        Seconds result = seconds.multipliedBy(0);
        assertEquals(0, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMultipliedByPositive() throws Throwable {
        Seconds seconds = Seconds.seconds(1566);
        Seconds result = seconds.multipliedBy(518);
        assertEquals(811188, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMultipliedByNegative() throws Throwable {
        Seconds seconds = Seconds.ONE;
        Seconds result = seconds.multipliedBy(-701);
        assertEquals(-701, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testDividedBy() throws Throwable {
        Seconds seconds = Seconds.seconds(1804);
        Seconds result = seconds.dividedBy(1804);
        assertEquals(1, result.getSeconds());
    }

    @Test(timeout = 4000)
    public void testMinValueDividedBy() throws Throwable {
        Seconds seconds = Seconds.MIN_VALUE;
        Seconds result = seconds.dividedBy(3600);
        assertEquals(-596523, result.getSeconds());
    }

    // Edge Case Tests ------------------------------------------------------
    @Test(timeout = 4000)
    public void testMaxValuePlusOverflowThrowsException() {
        Seconds seconds = Seconds.MAX_VALUE;
        try {
            seconds.plus(seconds);
            fail("Expected ArithmeticException for overflow");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testMinValuePlusOverflowThrowsException() {
        Seconds seconds = Seconds.MIN_VALUE;
        try {
            seconds.plus(-674);
            fail("Expected ArithmeticException for overflow");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testMaxValueMinusMinValueThrowsException() {
        Seconds max = Seconds.MAX_VALUE;
        Seconds min = Seconds.MIN_VALUE;
        try {
            max.minus(min);
            fail("Expected ArithmeticException for overflow");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testMinValueNegatedThrowsException() {
        Seconds seconds = Seconds.MIN_VALUE;
        try {
            seconds.negated();
            fail("Expected ArithmeticException for overflow");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testMinValueMultipliedByThrowsException() {
        Seconds seconds = Seconds.MIN_VALUE;
        try {
            seconds.multipliedBy(-674);
            fail("Expected ArithmeticException for overflow");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testDivideByZeroThrowsException() {
        Seconds seconds = Seconds.MAX_VALUE;
        try {
            seconds.dividedBy(0);
            fail("Expected ArithmeticException for division by zero");
        } catch (ArithmeticException e) {
            // Expected
        }
    }

    // Parsing and Between Tests ---------------------------------------------
    @Test(timeout = 4000)
    public void testParseNullReturnsZero() {
        Seconds seconds = Seconds.parseSeconds(null);
        assertEquals(0, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testParseEmptyStringThrowsException() {
        try {
            Seconds.parseSeconds("");
            fail("Expected IllegalArgumentException for empty string");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testSecondsBetweenWithNullPartialThrowsException() {
        try {
            Seconds.secondsBetween((ReadablePartial) null, (ReadablePartial) null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void testSecondsBetweenWithNullInstantThrowsException() {
        try {
            Seconds.secondsBetween((ReadableInstant) null, (ReadableInstant) null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    // Factory Method Tests -------------------------------------------------
    @Test(timeout = 4000)
    public void testSecondsFactoryMethod() {
        Seconds seconds = Seconds.seconds(1);
        assertEquals(1, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testSecondsInWithNullReturnsZero() {
        Seconds seconds = Seconds.secondsIn((ReadableInterval) null);
        assertEquals(0, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testStandardSecondsInWithZero() {
        Seconds seconds = Seconds.ZERO;
        Seconds result = Seconds.standardSecondsIn(seconds);
        assertEquals(0, result.getSeconds());
    }

    // Additional Tests ------------------------------------------------------
    @Test(timeout = 4000)
    public void testGetSeconds() {
        Seconds seconds = Seconds.TWO;
        assertEquals(2, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testToStandardDaysWithLargeValue() throws Throwable {
        Weeks weeks = Weeks.TWO;
        Days days = weeks.toStandardDays();
        Seconds seconds = days.toStandardSeconds();
        Seconds adjusted = seconds.plus(-TEST_VALUE_2147138048);
        Days result = adjusted.toStandardDays();
        assertEquals(1209600, seconds.getSeconds());
        assertEquals(-2145928448, adjusted.getSeconds());
        assertEquals(-24837, result.getDays());
    }

    @Test(timeout = 4000)
    public void testToString() {
        Seconds seconds = Seconds.MIN_VALUE;
        assertEquals("PT-2147483648S", seconds.toString());
    }

    @Test(timeout = 4000)
    public void testGetPeriodType() {
        Seconds seconds = Seconds.ONE;
        assertEquals(1, seconds.getPeriodType().size());
    }
}