/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:33 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonSetter_ESTest extends JsonSetter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge((JsonSetter.Value) null, jsonSetter_Value0);
      assertNotNull(jsonSetter_Value1);
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value1.getContentNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value1.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls1);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      boolean boolean0 = jsonSetter_Value1.equals(jsonSetter_Value0);
      assertEquals(Nulls.FAIL, jsonSetter_Value1.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.forValueNulls(nulls1);
      boolean boolean0 = jsonSetter_Value0.equals(jsonSetter_Value1);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getContentNulls());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      Object object0 = new Object();
      boolean boolean0 = jsonSetter_Value0.equals(object0);
      assertFalse(boolean0);
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getValueNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      boolean boolean0 = jsonSetter_Value0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      boolean boolean0 = jsonSetter_Value0.equals(jsonSetter_Value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.forContentNulls(nulls0);
      boolean boolean0 = jsonSetter_Value0.equals(jsonSetter_Value1);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
      assertFalse(boolean0);
      assertEquals(Nulls.SKIP, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      jsonSetter_Value0.nonDefaultValueNulls();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      jsonSetter_Value0.nonDefaultValueNulls();
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getContentNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value0.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withContentNulls(nulls0);
      assertNotSame(jsonSetter_Value1, jsonSetter_Value0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.EMPTY;
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withContentNulls((Nulls) null);
      assertSame(jsonSetter_Value0, jsonSetter_Value1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withContentNulls(nulls0);
      assertSame(jsonSetter_Value1, jsonSetter_Value0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls(nulls0, nulls1);
      jsonSetter_Value1.nonDefaultContentNulls();
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
      assertEquals(Nulls.SKIP, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      Nulls nulls0 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls(nulls0, nulls0);
      assertEquals(Nulls.SKIP, jsonSetter_Value1.getValueNulls());
      assertEquals(Nulls.SKIP, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls(nulls0, (Nulls) null);
      assertSame(jsonSetter_Value1, jsonSetter_Value0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls((Nulls) null, nulls0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls((Nulls) null);
      assertSame(jsonSetter_Value0, jsonSetter_Value1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.construct(nulls0, nulls1);
      JsonSetter.Value jsonSetter_Value2 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value1);
      assertNotSame(jsonSetter_Value2, jsonSetter_Value1);
      assertEquals(Nulls.SKIP, jsonSetter_Value2.getContentNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value2.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.from(jsonSetter0);
      JsonSetter.Value jsonSetter_Value2 = JsonSetter.Value.merge(jsonSetter_Value1, jsonSetter_Value0);
      assertNotSame(jsonSetter_Value2, jsonSetter_Value0);
      assertTrue(jsonSetter_Value2.equals((Object)jsonSetter_Value0));
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value2.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = new JsonSetter.Value(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.forValueNulls(nulls0);
      JsonSetter.Value jsonSetter_Value2 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value1);
      assertEquals(Nulls.FAIL, jsonSetter_Value1.getValueNulls());
      assertSame(jsonSetter_Value2, jsonSetter_Value0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      Nulls nulls1 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withValueNulls(nulls1);
      JsonSetter.Value jsonSetter_Value2 = jsonSetter_Value0.withOverrides(jsonSetter_Value1);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value1.getContentNulls());
      assertSame(jsonSetter_Value2, jsonSetter_Value0);
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value2.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      JsonSetter.Value jsonSetter_Value1 = jsonSetter_Value0.withOverrides((JsonSetter.Value) null);
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value1.getValueNulls());
      assertEquals(Nulls.AS_EMPTY, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from((JsonSetter) null);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value0.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonSetter jsonSetter0 = mock(JsonSetter.class, CALLS_REAL_METHODS);
      doReturn((Nulls) null).when(jsonSetter0).contentNulls();
      doReturn((Nulls) null).when(jsonSetter0).nulls();
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.from(jsonSetter0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getContentNulls());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.EMPTY;
      JsonSetter.Value jsonSetter_Value1 = (JsonSetter.Value)jsonSetter_Value0.readResolve();
      assertNull(jsonSetter_Value1.nonDefaultContentNulls());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      JsonSetter.Value jsonSetter_Value1 = (JsonSetter.Value)jsonSetter_Value0.readResolve();
      assertEquals(Nulls.SKIP, jsonSetter_Value1.getContentNulls());
      assertEquals(Nulls.DEFAULT, jsonSetter_Value1.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      String string0 = jsonSetter_Value0.toString();
      assertEquals("JsonSetter.Value(valueNulls=DEFAULT,contentNulls=DEFAULT)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.empty();
      jsonSetter_Value0.nonDefaultContentNulls();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Nulls nulls0 = Nulls.SET;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      Nulls nulls1 = jsonSetter_Value0.getContentNulls();
      assertEquals(Nulls.SET, nulls1);
      assertEquals(Nulls.SET, jsonSetter_Value0.getValueNulls());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Nulls nulls0 = Nulls.DEFAULT;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls0);
      Class<JsonSetter> class0 = jsonSetter_Value0.valueFor();
      assertEquals(9729, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = new JsonSetter.Value(nulls0, nulls0);
      Nulls nulls1 = jsonSetter_Value0.getValueNulls();
      assertEquals(Nulls.FAIL, nulls1);
  }
}
