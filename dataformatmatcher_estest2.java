package com.fasterxml.jackson.core.format;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.MatchStrength;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * This test class has been refactored for improved understandability.
 * The original test was likely generated by a tool like EvoSuite, which resulted in
 * generic names and a less readable exception-testing pattern.
 */
// The test class extends a scaffolding class, which is preserved from the original.
public class DataFormatMatcher_ESTestTest2 extends DataFormatMatcher_ESTest_scaffolding {

    /**
     * Verifies that createParserWithMatch() throws an exception when the DataFormatMatcher
     * is constructed with a buffer segment that is too small for the underlying parser
     * to be initialized.
     *
     * <p><b>Scenario:</b> A DataFormatMatcher is created with a buffer representing a small,
     * offset slice of the original input (e.g., 1 byte at offset 2). This simulates a
     * situation where a format detector has read some bytes and passed a small remaining
     * buffer to the matcher.
     *
     * <p><b>Expected Behavior:</b> The call to {@link DataFormatMatcher#createParserWithMatch()}
     * should fail with an {@link ArrayIndexOutOfBoundsException}. This is because the
     * underlying {@link JsonFactory} attempts to create a parser and likely tries to read
     * more bytes for initial processing (like encoding detection) than are available in the
     * specified buffer slice, leading to an out-of-bounds access.
     */
    @Test(timeout = 4000, expected = ArrayIndexOutOfBoundsException.class)
    public void createParserWithMatch_withSmallOffsetBuffer_throwsArrayIndexOutOfBounds() throws IOException {
        // Arrange: Set up a DataFormatMatcher with a small, offset buffer segment.
        final byte[] inputData = new byte[6];
        final InputStream inputStream = new ByteArrayInputStream(inputData);
        final JsonFactory jsonFactory = new JsonFactory();
        final MatchStrength matchStrength = MatchStrength.SOLID_MATCH;

        // Define a buffer segment starting at index 2 with a length of only 1 byte.
        final int bufferStart = 2;
        final int bufferLength = 1;

        final DataFormatMatcher matcher = new DataFormatMatcher(
                inputStream, inputData, bufferStart, bufferLength, jsonFactory, matchStrength);

        // Act: Attempt to create a parser using the configured matcher.
        // This is expected to throw an ArrayIndexOutOfBoundsException.
        matcher.createParserWithMatch();

        // Assert: The @Test(expected=...) annotation handles the assertion.
        // If the expected exception is not thrown, the test will fail automatically.
    }
}