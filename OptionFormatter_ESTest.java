/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:34:48 GMT 2025
 */

package org.apache.commons.cli.help;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiFunction;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.help.OptionFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, 
useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionFormatter_ESTest extends OptionFormatter_ESTest_scaffolding {

    private static final String TEST_VALUE = "testValue";
    private static final String DEPRECATED_TEXT = "[Deprecated";
    private static final String EMPTY_STRING = "";
    private static final String OPTION_WITH_ARG = "optionWithArg";
    private static final String LONG_OPT_PREFIX = "--";
    private static final String OPT_PREFIX = "-";

    @Test(timeout = 4000)
    public void testBuilderSetLongOptPrefix() throws Throwable {
        // Arrange
        Option option = new Option("?Wf", "?Wf", true, "?Wf");
        OptionFormatter.Builder builder = OptionFormatter.builder();
        
        // Act
        builder.setLongOptPrefix("?Wf");
        OptionFormatter formatter = builder.build(option);
        String result = formatter.getLongOpt();
        
        // Assert
        assertEquals("?Wf?Wf", result);
    }

    @Test(timeout = 4000)
    public void testBuilderSetDefaultArgName() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, null);
        OptionFormatter initialFormatter = OptionFormatter.from(option);
        OptionFormatter.Builder builder = new OptionFormatter.Builder(initialFormatter);
        
        // Act
        builder.setDefaultArgName("[Deprecated");
        OptionFormatter formatter = builder.build(option);
        String syntax = formatter.toSyntaxOption();
        
        // Assert
        assertEquals("[ <[Deprecated>]", syntax);
    }

    @Test(timeout = 4000)
    public void testBuilderSetOptArgSeparator() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, null);
        OptionFormatter.Builder builder = OptionFormatter.builder();
        
        // Act
        builder.setOptArgSeparator("Deprecated");
        OptionFormatter formatter = builder.build(option);
        String syntax = formatter.toSyntaxOption();
        
        // Assert
        assertEquals("[Deprecated<arg>]", syntax);
    }

    @Test(timeout = 4000)
    public void testCustomSyntaxFormatFunctionReturnsNull() throws Throwable {
        // Arrange
        Option option = new Option("NO_ARGS_ALLOWED", "iRi[{-|Um");
        OptionFormatter initialFormatter = OptionFormatter.from(option);
        OptionFormatter.Builder builder = new OptionFormatter.Builder(initialFormatter);
        BiFunction<OptionFormatter, Boolean, String> mockFunction = 
            mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockFunction).apply(any(), anyBoolean());
        
        // Act
        builder.setSyntaxFormatFunction(mockFunction);
        OptionFormatter formatter = builder.build(option);
        String syntax = formatter.toSyntaxOption(false);
        
        // Assert
        assertNull(syntax);
    }

    @Test(timeout = 4000)
    public void testToSyntaxOptionForOptionWithNoValues() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String syntax = formatter.toSyntaxOption(false);
        
        // Assert
        assertEquals(EMPTY_STRING, syntax);
    }

    @Test(timeout = 4000)
    public void testCustomSyntaxFormatFunctionReturnsNullForDefaultSyntax() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, null);
        OptionFormatter initialFormatter = OptionFormatter.from(option);
        OptionFormatter.Builder builder = new OptionFormatter.Builder(initialFormatter);
        BiFunction<OptionFormatter, Boolean, String> mockFunction = 
            mock(BiFunction.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockFunction).apply(any(), anyBoolean());
        
        // Act
        builder.setSyntaxFormatFunction(mockFunction);
        OptionFormatter formatter = builder.build(option);
        String syntax = formatter.toSyntaxOption();
        
        // Assert
        assertNull(syntax);
    }

    @Test(timeout = 4000)
    public void testIsRequiredForRequiredOption() throws Throwable {
        // Arrange
        Option option = new Option("?Wf", "?Wf", true, "?Wf");
        option.setRequired(true);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act & Assert
        assertTrue(formatter.isRequired());
    }

    @Test(timeout = 4000)
    public void testGetSinceForOptionWithoutSince() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String since = formatter.getSince();
        
        // Assert
        assertEquals("--", since);
    }

    @Test(timeout = 4000)
    public void testGetDescriptionForOptionWithoutDescription() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String description = formatter.getDescription();
        
        // Assert
        assertEquals(EMPTY_STRING, description);
    }

    @Test(timeout = 4000)
    public void testToSyntaxOptionWithNullOptionThrowsException() throws Throwable {
        // Arrange
        OptionFormatter formatter = OptionFormatter.from(null);
        
        // Act & Assert
        assertThrows(NullPointerException.class, () -> formatter.toSyntaxOption(true));
    }

    // Additional null-handling tests follow the same pattern...

    @Test(timeout = 4000)
    public void testToOptionalWithEmptyString() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String result = formatter.toOptional(EMPTY_STRING);
        
        // Assert
        assertEquals(EMPTY_STRING, result);
    }

    @Test(timeout = 4000)
    public void testToOptionalWithNonEmptyString() throws Throwable {
        // Arrange
        OptionFormatter formatter = OptionFormatter.from(null);
        
        // Act
        String result = formatter.toOptional(", ");
        
        // Assert
        assertEquals("[, ]", result);
    }

    @Test(timeout = 4000)
    public void testGetOptForOptionWithShortOpt() throws Throwable {
        // Arrange
        Option option = new Option("7", "TjJ+)m", false, "");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String opt = formatter.getOpt();
        
        // Assert
        assertEquals("-7", opt);
    }

    @Test(timeout = 4000)
    public void testGetLongOptForOptionWithoutLongOpt() throws Throwable {
        // Arrange
        Option option = new Option("o", "o");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String longOpt = formatter.getLongOpt();
        
        // Assert
        assertEquals(EMPTY_STRING, longOpt);
    }

    @Test(timeout = 4000)
    public void testGetArgNameForOptionWithArguments() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, "");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String argName = formatter.getArgName();
        
        // Assert
        assertEquals("<arg>", argName);
    }

    @Test(timeout = 4000)
    public void testGetArgNameForOptionWithoutArguments() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String argName = formatter.getArgName();
        
        // Assert
        assertEquals(EMPTY_STRING, argName);
    }

    @Test(timeout = 4000)
    public void testIsRequiredForNonRequiredOption() throws Throwable {
        // Arrange
        Option option = new Option(null, null, true, "");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act & Assert
        assertFalse(formatter.isRequired());
    }

    @Test(timeout = 4000)
    public void testToSyntaxOptionForOptionWithShortOptAndArgument() throws Throwable {
        // Arrange
        Option option = new Option("?Wf", "?Wf", true, "");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String syntax = formatter.toSyntaxOption(true);
        
        // Assert
        assertEquals("-?Wf <arg>", syntax);
    }

    @Test(timeout = 4000)
    public void testGetDescriptionForOptionWithDescription() throws Throwable {
        // Arrange
        Option option = new Option("NO_ARGS_ALLOWED", "iRi[{-|Um");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String description = formatter.getDescription();
        
        // Assert
        assertEquals("iRi[{-|Um", description);
    }

    @Test(timeout = 4000)
    public void testGetBothOptForOptionWithShortOptOnly() throws Throwable {
        // Arrange
        Option option = new Option("?Wf", "?Wf");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String bothOpt = formatter.getBothOpt();
        
        // Assert
        assertEquals("-?Wf", bothOpt);
    }

    @Test(timeout = 4000)
    public void testGetBothOptForOptionWithBothOpts() throws Throwable {
        // Arrange
        Option option = new Option("?Wf", "?Wf", true, "");
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String bothOpt = formatter.getBothOpt();
        
        // Assert
        assertEquals("-?Wf, --?Wf", bothOpt);
    }

    @Test(timeout = 4000)
    public void testGetBothOptForOptionWithoutOpts() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String bothOpt = formatter.getBothOpt();
        
        // Assert
        assertEquals(EMPTY_STRING, bothOpt);
    }

    @Test(timeout = 4000)
    public void testToSyntaxOptionForOptionWithoutValues() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter formatter = OptionFormatter.from(option);
        
        // Act
        String syntax = formatter.toSyntaxOption();
        
        // Assert
        assertEquals(EMPTY_STRING, syntax);
    }

    @Test(timeout = 4000)
    public void testBuilderSetOptionalDelimiters() throws Throwable {
        // Arrange
        Option option = new Option(null, null);
        OptionFormatter initialFormatter = OptionFormatter.from(option);
        OptionFormatter.Builder builder = new OptionFormatter.Builder(initialFormatter);
        
        // Act
        OptionFormatter.Builder returnedBuilder = 
            builder.setOptionalDelimiters("U\"7]OxTl:%M:~HkH", " ]");
        
        // Assert
        assertSame(builder, returnedBuilder);
    }

    // Additional builder configuration tests follow...

    @Test(timeout = 4000)
    public void testGetSinceWithNullOptionThrowsException() throws Throwable {
        // Arrange
        OptionFormatter formatter = OptionFormatter.from(null);
        
        // Act & Assert
        assertThrows(NullPointerException.class, () -> formatter.getSince());
    }
}