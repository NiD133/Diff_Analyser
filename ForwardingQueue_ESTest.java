/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 18:50:23 GMT 2025
 */

package com.google.common.collect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.EvictingQueue;
import com.google.common.collect.LinkedListMultimap;
import java.nio.CharBuffer;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ForwardingQueue_ESTest extends ForwardingQueue_ESTest_scaffolding {

    // Tests for standard methods with non-empty queue behavior
    @Test(timeout = 4000)
    public void testStandardOfferAndPoll_RetainsObjectReference() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(98);
        Object testElement = new Object();
        queue.standardOffer(testElement);
        Object polledElement = queue.standardPoll();
        assertSame("Polled element should be the same as offered element", polledElement, testElement);
    }

    @Test(timeout = 4000)
    public void testStandardPeek_AfterAdd_ReturnsSameElement() throws Throwable {
        EvictingQueue<Locale.FilteringMode> queue = EvictingQueue.create(1);
        Locale.FilteringMode testElement = Locale.FilteringMode.EXTENDED_FILTERING;
        queue.add(testElement);
        Locale.FilteringMode peekedElement = queue.standardPeek();
        assertSame("Peeked element should be the same as added element", peekedElement, testElement);
    }

    @Test(timeout = 4000)
    public void testRemove_AfterOffer_RemovesElement() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(98);
        Object testElement = new Object();
        queue.standardOffer(testElement);
        Object removedElement = queue.remove();
        assertFalse("Queue should not contain removed element", queue.contains(removedElement));
    }

    @Test(timeout = 4000)
    public void testPoll_AfterAdd_RemovesElement() throws Throwable {
        EvictingQueue<Locale.FilteringMode> queue = EvictingQueue.create(126);
        Locale.FilteringMode testElement = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        queue.add(testElement);
        Locale.FilteringMode polledElement = queue.poll();
        assertFalse("Queue should not contain polled element", queue.contains(polledElement));
    }

    @Test(timeout = 4000)
    public void testPeek_AfterAdd_ReturnsElementWithoutRemoving() throws Throwable {
        EvictingQueue<Locale.Category> queue = EvictingQueue.create(5760);
        Locale.Category testElement = Locale.Category.DISPLAY;
        queue.add(testElement);
        Locale.Category peekedElement = queue.peek();
        assertTrue("Queue should still contain peeked element", queue.contains(peekedElement));
    }

    @Test(timeout = 4000)
    public void testOffer_WithNonNullElement_ReturnsTrue() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(613);
        LinkedListMultimap<Object, Object> testElement = LinkedListMultimap.create();
        boolean result = queue.offer(testElement);
        assertTrue("Offer should return true when adding element", result);
    }

    @Test(timeout = 4000)
    public void testElement_AfterOffer_ReturnsHeadElement() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(1937);
        Object testElement = new Object();
        queue.standardOffer(testElement);
        Object headElement = queue.element();
        assertTrue("Element should return the head of the queue", queue.contains(headElement));
    }

    // Tests for null element handling
    @Test(timeout = 4000)
    public void testStandardOffer_NullElement_ThrowsNullPointerException() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(2014);
        try {
            queue.standardOffer(null);
            fail("Expected NullPointerException for null element");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testOffer_NullElement_ThrowsNullPointerException() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(2);
        try {
            queue.offer(null);
            fail("Expected NullPointerException for null element");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    // Tests for empty queue behavior
    @Test(timeout = 4000)
    public void testStandardPoll_OnEmptyQueue_ReturnsNull() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(98);
        Object result = queue.standardPoll();
        assertNull("Poll on empty queue should return null", result);
    }

    @Test(timeout = 4000)
    public void testStandardPeek_OnEmptyQueue_ReturnsNull() throws Throwable {
        EvictingQueue<Comparable<CharBuffer>> queue = EvictingQueue.create(0);
        Comparable<CharBuffer> result = queue.standardPeek();
        assertNull("Peek on empty queue should return null", result);
    }

    @Test(timeout = 4000)
    public void testRemove_OnEmptyQueue_ThrowsNoSuchElementException() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(98);
        try {
            queue.remove();
            fail("Expected NoSuchElementException when removing from empty queue");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testPeek_OnEmptyQueue_ReturnsNull() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(0);
        Object result = queue.peek();
        assertNull("Peek on empty queue should return null", result);
    }

    @Test(timeout = 4000)
    public void testElement_OnEmptyQueue_ThrowsNoSuchElementException() throws Throwable {
        EvictingQueue<Object> queue = EvictingQueue.create(1937);
        try {
            queue.element();
            fail("Expected NoSuchElementException for element() on empty queue");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testPoll_OnEmptyQueue_ReturnsNull() throws Throwable {
        EvictingQueue<Locale.FilteringMode> queue = EvictingQueue.create(126);
        Locale.FilteringMode result = queue.poll();
        assertNull("Poll on empty queue should return null", result);
    }
}