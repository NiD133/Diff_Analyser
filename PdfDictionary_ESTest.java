/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:27:10 GMT 2025
 */

package com.itextpdf.text.pdf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.FdfWriter;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfAnnotation;
import com.itextpdf.text.pdf.PdfArray;
import com.itextpdf.text.pdf.PdfBoolean;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfFileSpecification;
import com.itextpdf.text.pdf.PdfFormField;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfRectangle;
import com.itextpdf.text.pdf.PdfResources;
import com.itextpdf.text.pdf.PdfShading;
import com.itextpdf.text.pdf.PdfSigLockDictionary;
import com.itextpdf.text.pdf.PdfStream;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.PdfTransparencyGroup;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.collection.PdfCollectionField;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.LinkedHashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PdfDictionary_ESTest extends PdfDictionary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      pdfDictionary0.remove((PdfName) null);
      assertFalse(pdfDictionary0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PdfName pdfName0 = PdfName.SECT;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      pdfName0.type = 8;
      ByteBuffer byteBuffer0 = new ByteBuffer(8);
      pdfResources0.toPdf((PdfWriter) null, byteBuffer0);
      assertEquals(15, byteBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PdfName pdfName0 = PdfName.LINEHEIGHT;
      PdfDictionary pdfDictionary0 = new PdfDictionary(pdfName0);
      PdfWriter pdfWriter0 = new PdfWriter();
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 642.05963F, 8388608, (-424.6F));
      Rectangle rectangle0 = PdfReader.getNormalizedRectangle(pdfRectangle0);
      PdfAnnotation pdfAnnotation0 = PdfAnnotation.createLink(pdfWriter0, rectangle0, pdfDictionary0.CATALOG);
      pdfAnnotation0.putAll(pdfDictionary0);
      assertEquals(3, PdfAnnotation.MARKUP_SQUIGGLY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      Object[] objectArray0 = new Object[0];
      PdfAction pdfAction0 = PdfAction.createHide(objectArray0, true);
      pdfDictionary0.merge(pdfAction0);
      assertEquals(1, PdfObject.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PdfAction pdfAction0 = PdfAction.gotoLocalPage("</rdf:Description></rdf:RDF>\n", true);
      int int0 = pdfAction0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      boolean boolean0 = pdfDictionary0.isPage();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.toString();
      pdfResources0.putEx(pdfName0, pdfName0);
      pdfResources0.getAsString(pdfName0);
      PdfObject pdfObject0 = pdfResources0.getDirectObject(pdfName0);
      assertEquals(4, PdfObject.NAME);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PdfName pdfName0 = PdfName.UF;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfObject pdfObject0 = pdfResources0.getDirectObject(pdfName0);
      assertTrue(pdfObject0.canBeInObjStm());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PdfName pdfName0 = PdfName.TYPE3;
      PdfResources pdfResources0 = new PdfResources();
      PdfCollectionField pdfCollectionField0 = new PdfCollectionField("UnicodeBig", 8);
      pdfResources0.add(pdfName0, pdfCollectionField0);
      PdfCollectionField pdfCollectionField1 = (PdfCollectionField)pdfResources0.get(pdfName0);
      assertEquals(6, PdfCollectionField.CREATIONDATE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfObject pdfObject0 = pdfResources0.get(pdfName0);
      assertTrue(pdfObject0.canBeInObjStm());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PdfName pdfName0 = PdfName.MAC_ROMAN_ENCODING;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfObject pdfObject0 = pdfResources0.get(pdfName0);
      assertFalse(pdfObject0.isNull());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PdfName pdfName0 = PdfName.TYPE3;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      boolean boolean0 = pdfResources0.contains(pdfName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PdfName pdfName0 = PdfName.CFM;
      PdfDictionary pdfDictionary0 = new PdfDictionary(pdfName0);
      boolean boolean0 = pdfDictionary0.checkType(pdfName0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      PdfWriter pdfWriter0 = new PdfWriter();
      // Undeclared exception!
      try { 
        pdfResources0.toPdf(pdfWriter0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PdfDocument.PdfInfo pdfDocument_PdfInfo0 = new PdfDocument.PdfInfo();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FdfWriter fdfWriter0 = new FdfWriter(pipedOutputStream0);
      FdfWriter.Wrt fdfWriter_Wrt0 = fdfWriter0.wrt;
      try { 
        pdfDocument_PdfInfo0.toPdf(fdfWriter_Wrt0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PdfName pdfName0 = PdfName.BLINDS;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.hashMap = null;
      // Undeclared exception!
      try { 
        pdfResources0.putEx(pdfName0, pdfName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      // Undeclared exception!
      try { 
        pdfDictionary0.mergeDifferent((PdfDictionary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      pdfDictionary0.hashMap = null;
      // Undeclared exception!
      try { 
        pdfDictionary0.getKeys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.hashMap = null;
      // Undeclared exception!
      try { 
        pdfResources0.getAsNumber(pdfResources0.FONT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.hashMap = null;
      // Undeclared exception!
      try { 
        pdfResources0.getAsName((PdfName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PdfDictionary pdfDictionary0 = null;
      try {
        pdfDictionary0 = new PdfDictionary((-2457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2457
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      PdfName pdfName0 = pdfResources0.getAsName(pdfResources0.CATALOG);
      assertNull(pdfName0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PdfName pdfName0 = PdfName.TYPE3;
      PdfResources pdfResources0 = new PdfResources();
      PdfCollectionField pdfCollectionField0 = new PdfCollectionField("UnicodeBig", 8);
      pdfResources0.add(pdfName0, pdfCollectionField0);
      PdfName pdfName1 = pdfResources0.getAsName(pdfName0);
      assertNull(pdfName1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      PdfCollectionField pdfCollectionField0 = new PdfCollectionField("UnicodeBig", 8);
      boolean boolean0 = pdfCollectionField0.checkType(pdfResources0.CATALOG);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      boolean boolean0 = pdfDictionary0.checkType(pdfDictionary0.FONT);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PdfName pdfName0 = PdfName.LINEHEIGHT;
      PdfDictionary pdfDictionary0 = new PdfDictionary(pdfName0);
      PdfWriter pdfWriter0 = new PdfWriter();
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 642.05963F, 8388608, (-424.6F));
      Rectangle rectangle0 = PdfReader.getNormalizedRectangle(pdfRectangle0);
      PdfAnnotation pdfAnnotation0 = PdfAnnotation.createLink(pdfWriter0, rectangle0, pdfDictionary0.CATALOG);
      PdfObject pdfObject0 = pdfAnnotation0.getDirectObject(pdfWriter0.PDF_VERSION_1_4);
      assertNull(pdfObject0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      PdfObject pdfObject0 = pdfResources0.get(pdfName0);
      assertNull(pdfObject0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfIndirectReference pdfIndirectReference0 = pdfResources0.getAsIndirectObject(pdfName0);
      assertNull(pdfIndirectReference0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      PdfIndirectReference pdfIndirectReference0 = pdfPage0.getAsIndirectObject(pdfPage0.PAGE);
      assertNull(pdfIndirectReference0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PdfName pdfName0 = PdfName.URL;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfBoolean pdfBoolean0 = pdfResources0.getAsBoolean(pdfName0);
      assertNull(pdfBoolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      PdfBoolean pdfBoolean0 = pdfPage0.getAsBoolean(pdfPage0.PAGES);
      assertNull(pdfBoolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfName pdfName1 = pdfResources0.getAsName(pdfName0);
      assertSame(pdfName1, pdfName0);
      assertNotNull(pdfName1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PdfName pdfName0 = PdfName.FRM;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfNumber pdfNumber0 = pdfResources0.getAsNumber(pdfName0);
      assertNull(pdfNumber0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PdfDocument.PdfInfo pdfDocument_PdfInfo0 = new PdfDocument.PdfInfo();
      PdfNumber pdfNumber0 = pdfDocument_PdfInfo0.getAsNumber(pdfDocument_PdfInfo0.PAGE);
      assertNull(pdfNumber0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      PdfString pdfString0 = pdfPage0.getAsString(pdfPage0.CATALOG);
      assertNull(pdfString0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PdfName pdfName0 = PdfName.DR;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfStream pdfStream0 = pdfResources0.getAsStream(pdfName0);
      assertNull(pdfStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PdfGState pdfGState0 = new PdfGState();
      PdfStream pdfStream0 = pdfGState0.getAsStream(pdfGState0.PAGES);
      assertNull(pdfStream0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PdfName pdfName0 = PdfWriter.PDF_VERSION_1_6;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      pdfResources0.getAsArray(pdfName0);
      pdfResources0.get(pdfName0);
      PdfIndirectReference pdfIndirectReference0 = pdfResources0.getAsIndirectObject(pdfName0);
      assertNull(pdfIndirectReference0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      PdfArray pdfArray0 = pdfPage0.getAsArray(pdfPage0.PAGE);
      assertNull(pdfArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PdfName pdfName0 = PdfName.DR;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, pdfName0);
      PdfDictionary pdfDictionary0 = pdfResources0.getAsDict(pdfName0);
      assertNull(pdfDictionary0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      PdfCollectionField pdfCollectionField0 = new PdfCollectionField("", (-2425));
      // Undeclared exception!
      try { 
        pdfResources0.add((PdfName) null, pdfCollectionField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key is null.
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      PdfFormField pdfFormField0 = PdfFormField.createChoice((PdfWriter) null, 6, (PdfArray) null, 8);
      pdfResources0.mergeDifferent(pdfFormField0);
      assertEquals(5, PdfFormField.MK_CAPTION_LEFT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PdfAction pdfAction0 = new PdfAction("PDF", false);
      pdfAction0.mergeDifferent(pdfAction0);
      assertEquals(3, PdfObject.STRING);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      boolean boolean0 = pdfResources0.checkType((PdfName) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PdfName pdfName0 = PdfName.TYPE3;
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.putEx(pdfName0, (PdfObject) null);
      assertEquals(4, PdfObject.NAME);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      // Undeclared exception!
      try { 
        pdfDictionary0.putEx((PdfName) null, (PdfObject) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key is null.
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PdfTransparencyGroup pdfTransparencyGroup0 = new PdfTransparencyGroup();
      PdfName pdfName0 = PdfName.FUNCTIONTYPE;
      pdfTransparencyGroup0.put(pdfName0, pdfName0);
      assertEquals(10, PdfObject.INDIRECT);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PdfFileSpecification pdfFileSpecification0 = new PdfFileSpecification();
      // Undeclared exception!
      try { 
        pdfFileSpecification0.put((PdfName) null, (PdfObject) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // key is null.
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PdfSigLockDictionary pdfSigLockDictionary0 = new PdfSigLockDictionary();
      String string0 = pdfSigLockDictionary0.toString();
      assertEquals("Dictionary of type: /SigFieldLock", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfAction pdfAction0 = new PdfAction("UnicodeBig", "TABLE", "PDF", "TABLE");
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      pdfAction0.toPdf((PdfWriter) null, mockPrintStream0);
      assertEquals(5, PdfAction.PRINTDIALOG);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FdfWriter.Wrt fdfWriter_Wrt0 = new FdfWriter.Wrt((OutputStream) null, (FdfWriter) null);
      BaseColor baseColor0 = BaseColor.MAGENTA;
      PdfShading pdfShading0 = PdfShading.simpleRadial((PdfWriter) fdfWriter_Wrt0, (float) 512, (float) 1, (float) 32, (float) 8, (float) 8192, 663.0F, baseColor0, baseColor0);
      assertFalse(pdfShading0.isAntiAlias());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PdfDocument.PdfInfo pdfDocument_PdfInfo0 = new PdfDocument.PdfInfo();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.itextpdf.text.pdf.PdfDictionary");
      FdfWriter fdfWriter0 = new FdfWriter();
      FdfWriter.Wrt fdfWriter_Wrt0 = new FdfWriter.Wrt(mockPrintStream0, fdfWriter0);
      pdfDocument_PdfInfo0.toPdf(fdfWriter_Wrt0, mockPrintStream0);
      assertEquals(1, fdfWriter_Wrt0.getCurrentPageNumber());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      pdfResources0.clear();
      assertFalse(pdfResources0.isName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      boolean boolean0 = pdfDictionary0.isPages();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      int int0 = pdfResources0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary(3);
      assertEquals(6, pdfDictionary0.type());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      boolean boolean0 = pdfPage0.isPage();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PdfTransparencyGroup pdfTransparencyGroup0 = new PdfTransparencyGroup();
      boolean boolean0 = pdfTransparencyGroup0.contains((PdfName) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      // Undeclared exception!
      try { 
        pdfResources0.merge((PdfDictionary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      Set<PdfName> set0 = pdfDictionary0.getKeys();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      // Undeclared exception!
      try { 
        pdfResources0.putAll((PdfDictionary) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfDictionary", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PdfResources pdfResources0 = new PdfResources();
      boolean boolean0 = pdfResources0.isCatalog();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PdfDictionary pdfDictionary0 = new PdfDictionary();
      boolean boolean0 = pdfDictionary0.isFont();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PdfRectangle pdfRectangle0 = new PdfRectangle(0.0F, 0.0F, 2884.4F, 2884.4F);
      LinkedHashMap<String, PdfRectangle> linkedHashMap0 = new LinkedHashMap<String, PdfRectangle>(4, 5);
      PdfPage pdfPage0 = new PdfPage(pdfRectangle0, linkedHashMap0, (PdfDictionary) null, 1836);
      boolean boolean0 = pdfPage0.isOutlineTree();
      assertFalse(boolean0);
  }
}
