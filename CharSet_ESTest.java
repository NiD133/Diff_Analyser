/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.CharRange;
import org.apache.commons.lang3.CharSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
) 
public class CharSet_ESTest extends CharSet_ESTest_scaffolding {

    // Test hashCode() with complex pattern
    @Test(timeout = 4000)
    public void hashCodeCalculationWithComplexPattern() {
        CharSet charSet = CharSet.getInstance("pDqg&f|G+l]-#pX9-?k");
        charSet.hashCode(); // Simply verify no exception occurs
    }

    // Test instance creation with negated pattern
    @Test(timeout = 4000)
    public void createInstanceWithNegatedPattern() {
        CharSet charSet = CharSet.getInstance("^n%R");
        assertNotNull("CharSet instance should be created", charSet);
    }

    // Test instance creation with alphabetic range
    @Test(timeout = 4000)
    public void createInstanceWithAlphaRange() {
        CharSet charSet = CharSet.getInstance("a-z");
        assertNotNull("CharSet instance should be created", charSet);
    }

    // Test empty CharRange array for empty CharSet
    @Test(timeout = 4000)
    public void getEmptyCharRangesFromEmptyCharSet() {
        CharSet charSet = new CharSet(new String[3]);
        CharRange[] ranges = charSet.getCharRanges();
        assertEquals("Empty CharSet should have no ranges", 0, ranges.length);
    }

    // Test constructor exception with null input
    @Test(timeout = 4000)
    public void constructorThrowsNPEWithNullInput() {
        try {
            new CharSet((String[]) null);
            fail("Expected NullPointerException for null input");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // Test equality of identical empty instances
    @Test(timeout = 4000)
    public void identicalEmptyInstancesAreEqual() {
        String[] emptyPatterns = new String[9];
        CharSet set1 = CharSet.getInstance(emptyPatterns);
        CharSet set2 = CharSet.getInstance(emptyPatterns);
        assertEquals("Identical empty instances should be equal", set1, set2);
        assertNotSame("Instances should be different objects", set1, set2);
    }

    // Test reflexive equality
    @Test(timeout = 4000)
    public void instanceEqualsItself() {
        CharSet charSet = CharSet.ASCII_ALPHA_UPPER;
        assertTrue("Instance should equal itself", charSet.equals(charSet));
    }

    // Test inequality with different object type
    @Test(timeout = 4000)
    public void instanceNotEqualToDifferentType() {
        CharSet charSet = CharSet.getInstance(new String[9]);
        assertFalse("CharSet should not equal different object type", 
                   charSet.equals(new Object()));
    }

    // Test character containment in complex pattern
    @Test(timeout = 4000)
    public void containsCharacterInComplexPattern() {
        CharSet charSet = CharSet.getInstance("pDqg&f|G+l]-#pX9-?k");
        assertTrue("Should contain 'T'", charSet.contains('T'));
    }

    // Test instance creation with pipe character
    @Test(timeout = 4000)
    public void createInstanceWithPipeCharacter() {
        CharSet charSet = CharSet.getInstance("o|pC ~`^YDc:");
        assertNotNull("CharSet instance should be created", charSet);
    }

    // Test instance creation with closing bracket
    @Test(timeout = 4000)
    public void createInstanceStartingWithClosingBracket() {
        CharSet charSet = CharSet.getInstance("]ZOr9");
        assertNotNull("CharSet instance should be created", charSet);
    }

    // Test adding to empty set
    @Test(timeout = 4000)
    public void addToEmptySet() {
        CharSet charSet = CharSet.getInstance(new String[1]);
        charSet.add("S4^V-hS3C g&F;t%"); // Verify no exception
    }

    // Test null input handling
    @Test(timeout = 4000)
    public void getInstanceWithNullInputReturnsNull() {
        CharSet charSet = CharSet.getInstance((String[]) null);
        assertNull("Null input should return null", charSet);
    }

    // Test EMPTY constant's char ranges
    @Test(timeout = 4000)
    public void emptyConstantHasNoCharRanges() {
        CharRange[] ranges = CharSet.EMPTY.getCharRanges();
        assertEquals("EMPTY constant should have no ranges", 0, ranges.length);
    }

    // Test character absence in empty set
    @Test(timeout = 4000)
    public void emptySetDoesNotContainCharacter() {
        CharSet charSet = CharSet.getInstance(new String[9]);
        assertFalse("Empty set should not contain 'T'", charSet.contains('T'));
    }

    // Test string representation of empty set
    @Test(timeout = 4000)
    public void emptySetStringRepresentation() {
        CharSet charSet = CharSet.getInstance(new String[9]);
        assertEquals("Empty set should have correct string representation", 
                     "[]", charSet.toString());
    }
}