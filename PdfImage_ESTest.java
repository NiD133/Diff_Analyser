/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:28:47 GMT 2025
 */

package com.itextpdf.text.pdf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.Image;
import com.itextpdf.text.ImgJBIG2;
import com.itextpdf.text.ImgTemplate;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ByteBuffer;
import com.itextpdf.text.pdf.FdfWriter;
import com.itextpdf.text.pdf.PdfImage;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfObject;
import com.itextpdf.text.pdf.PdfPSXObject;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PdfImage_ESTest extends PdfImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(257, (byte)97, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference((-1), 1700, 0);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "", pdfIndirectReference0);
      pdfImage0.flateCompress();
      pdfImage0.importAll(pdfImage0);
      assertFalse(pdfImage0.isString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(484, 484, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(4, 0, 6);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "UnicodeBig", pdfIndirectReference0);
      PdfImage pdfImage1 = new PdfImage(imgJBIG2_0, "", pdfIndirectReference0);
      pdfImage0.importAll(pdfImage1);
      assertFalse(pdfImage0.isArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = new ByteBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PdfImage.transferBytes(byteArrayInputStream0, byteBuffer0, (byte)48);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, byteBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PdfImage.transferBytes(byteArrayInputStream0, byteBuffer0, (byte)0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, byteBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(484, 484, byteArray0, byteArray0);
      imgJBIG2_0.makeMask();
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(9496, 29, 5);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertEquals(484.0F, image0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(257, (byte)97, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(0, 2147418112, 1);
      ImgJBIG2 imgJBIG2_1 = new ImgJBIG2(2535, 0, byteArray0, byteArray0);
      imgJBIG2_0.scaleToFit((Rectangle) imgJBIG2_1);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "com.itextpdf.text.pdf.PdfImage", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertFalse(image0.isDeflated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(1106, 1106, byteArray0, byteArray0);
      imgJBIG2_0.setPaddingTop(1106);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(0, 1, (-208));
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "yw$,.", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertEquals(0.0F, image0.getLeft(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(25, 25, byteArray0, byteArray0);
      imgJBIG2_0.setIndentationRight((-1.0F));
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(25, 6);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "UnicodeBig", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertEquals(Float.NaN, image0.getAbsoluteY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(27, 27, byteArray0, byteArray0);
      imgJBIG2_0.setIndentationLeft(27);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference();
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "UnicodeBig", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertEquals(0, Image.ORIGINAL_NONE);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Image image0 = Image.getInstance(4145, (-84), byteArray0, byteArray0);
      PdfImage pdfImage0 = new PdfImage(image0, "", (PdfIndirectReference) null);
      Image image1 = pdfImage0.getImage();
      assertFalse(image1.isScaleToFitLineWhenOverflow());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      // Undeclared exception!
      try { 
        PdfImage.transferBytes((InputStream) null, byteBuffer0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      byteBuffer0.count = 4092;
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        PdfImage.transferBytes(byteArrayInputStream0, byteBuffer0, (byte)48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        PdfImage.transferBytes(pipedInputStream0, byteBuffer0, 2594);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(257, (byte)97, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(0, 2147418112, 1);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "com.itextpdf.text.pdf.PdfImage", pdfIndirectReference0);
      // Undeclared exception!
      try { 
        pdfImage0.importAll((PdfImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(508, 508);
      PdfImage pdfImage0 = null;
      try {
        pdfImage0 = new PdfImage((Image) null, "", pdfIndirectReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.PdfImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1291);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[3];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, ">E&1|", objectArray0);
      PdfImage.transferBytes(bufferedInputStream0, printStream0, 4);
      assertEquals(4, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = new ByteBuffer();
      FdfWriter fdfWriter0 = new FdfWriter();
      FdfWriter.Wrt fdfWriter_Wrt0 = new FdfWriter.Wrt(byteBuffer0, fdfWriter0);
      PdfTemplate pdfTemplate0 = PdfTemplate.createTemplate((PdfWriter) fdfWriter_Wrt0, (float) 1, 2330.0F, fdfWriter_Wrt0.PDF_VERSION_1_4);
      ImgTemplate imgTemplate0 = new ImgTemplate(pdfTemplate0);
      int[] intArray0 = new int[1];
      imgTemplate0.setTransparency(intArray0);
      PdfImage pdfImage0 = null;
      try {
        pdfImage0 = new PdfImage(imgTemplate0, (String) null, (PdfIndirectReference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(484, 484, byteArray0, byteArray0);
      imgJBIG2_0.makeMask();
      int[] intArray0 = new int[0];
      imgJBIG2_0.setTransparency(intArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(4096, 4096, (-1013));
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, (String) null, pdfIndirectReference0);
      assertEquals(7, pdfImage0.type());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(484, 484, byteArray0, byteArray0);
      int[] intArray0 = new int[0];
      imgJBIG2_0.setTransparency(intArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(4096, 4096, (-1013));
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, (String) null, pdfIndirectReference0);
      assertFalse(pdfImage0.isNull());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PdfPSXObject pdfPSXObject0 = new PdfPSXObject();
      Image image0 = Image.getInstance((PdfTemplate) pdfPSXObject0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(2, 3);
      image0.setInterpolation(true);
      PdfImage pdfImage0 = null;
      try {
        pdfImage0 = new PdfImage(image0, (String) null, pdfIndirectReference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2((-3134), 484, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(1014, 1, 4);
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, "", pdfIndirectReference0);
      Image image0 = pdfImage0.getImage();
      assertEquals(2, Image.BX);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImgJBIG2 imgJBIG2_0 = new ImgJBIG2(484, 484, byteArray0, byteArray0);
      PdfIndirectReference pdfIndirectReference0 = new PdfIndirectReference(4096, 4096, (-1013));
      PdfImage pdfImage0 = new PdfImage(imgJBIG2_0, (String) null, pdfIndirectReference0);
      PdfName pdfName0 = pdfImage0.name();
      assertEquals(8, PdfObject.NULL);
  }
}
