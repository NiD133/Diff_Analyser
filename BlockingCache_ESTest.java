/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability
 */
package org.apache.ibatis.cache.decorators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.junit.Assert.assertThrows;
import java.util.concurrent.CountDownLatch;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.cache.decorators.BlockingCache;
import org.apache.ibatis.cache.decorators.SoftCache;
import org.apache.ibatis.cache.impl.PerpetualCache;

public class BlockingCache_ESTest {

    @Test
    public void getObject_returnsValueAfterPut() throws Exception {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.putObject("key", "value");
        Object result = blockingCache.getObject("key");
        
        assertEquals("value", result);
    }

    @Test
    public void putObject_throwsExceptionWhenReleasingUnacquiredLock() {
        BlockingCache blockingCache = new BlockingCache(null);
        CountDownLatch key = new CountDownLatch(1);
        
        IllegalStateException exception = assertThrows(IllegalStateException.class, 
            () -> blockingCache.putObject(key, null));
        
        assertTrue(exception.getMessage().contains("releasing unacquired lock"));
    }

    @Test
    public void removeObject_afterGetObject_returnsNull() throws Exception {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.getObject("key");
        Object result = blockingCache.removeObject("key");
        
        assertNull(result);
    }

    @Test
    public void getTimeout_returnsSetValue() {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.setTimeout(1000L);
        long timeout = blockingCache.getTimeout();
        
        assertEquals(1000L, timeout);
    }

    @Test
    public void getSize_returnsCorrectValueAfterPut() throws Exception {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.putObject("key", "value");
        int size = blockingCache.getSize();
        
        assertEquals(1, size);
    }

    @Test
    public void getId_returnsDelegateId() {
        PerpetualCache perpetualCache = new PerpetualCache("testId");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        String id = blockingCache.getId();
        
        assertEquals("testId", id);
    }

    @Test
    public void removeObject_throwsExceptionWhenCacheHasNullId() {
        PerpetualCache perpetualCache = new PerpetualCache(null);
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        assertThrows(RuntimeException.class, 
            () -> blockingCache.removeObject(new Object()));
    }

    @Test
    public void putObject_throwsNPEWithNullCache() {
        BlockingCache blockingCache = new BlockingCache(null);
        
        assertThrows(NullPointerException.class, 
            () -> blockingCache.putObject(new Object(), new Object()));
    }

    @Test
    public void getSize_throwsNPEWithNullCache() {
        BlockingCache blockingCache = new BlockingCache(null);
        
        assertThrows(NullPointerException.class, 
            () -> blockingCache.getSize());
    }

    @Test
    public void getObject_throwsExceptionWhenCacheHasNullId() {
        PerpetualCache perpetualCache = new PerpetualCache(null);
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        assertThrows(RuntimeException.class, 
            () -> blockingCache.getObject(new Object()));
    }

    @Test
    public void getObject_throwsNPEWithNullCache() {
        BlockingCache blockingCache = new BlockingCache(null);
        
        assertThrows(NullPointerException.class, 
            () -> blockingCache.getObject(new Object()));
    }

    @Test
    public void getId_throwsNPEWithNullCache() {
        BlockingCache blockingCache = new BlockingCache(null);
        
        assertThrows(NullPointerException.class, 
            () -> blockingCache.getId());
    }

    @Test
    public void clear_throwsNPEWithNullCache() {
        BlockingCache blockingCache = new BlockingCache(null);
        
        assertThrows(NullPointerException.class, 
            () -> blockingCache.clear());
    }

    @Test
    public void getTimeout_returnsDefaultValue() {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        long timeout = blockingCache.getTimeout();
        
        assertEquals(0L, timeout);
    }

    @Test
    public void removeObject_throwsExceptionWhenReleasingUnacquiredLock() {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        IllegalStateException exception = assertThrows(IllegalStateException.class, 
            () -> blockingCache.removeObject("key"));
        
        assertTrue(exception.getMessage().contains("releasing unacquired lock"));
    }

    @Test
    public void clear_removesAllItems() throws Exception {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.putObject("key1", "value1");
        blockingCache.putObject("key2", "value2");
        blockingCache.clear();
        
        assertEquals(0, blockingCache.getSize());
    }

    @Test
    public void getSize_returnsZeroForEmptyCache() {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        assertEquals(0, blockingCache.getSize());
    }

    @Test
    public void setTimeout_handlesNegativeValues() {
        PerpetualCache perpetualCache = new PerpetualCache("test");
        BlockingCache blockingCache = new BlockingCache(perpetualCache);
        
        blockingCache.setTimeout(-500L);
        long timeout = blockingCache.getTimeout();
        
        assertEquals(-500L, timeout);
    }
}