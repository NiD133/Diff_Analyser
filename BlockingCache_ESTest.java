/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 14:39:02 GMT 2025
 */

package org.apache.ibatis.cache.decorators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.CountDownLatch;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.cache.decorators.BlockingCache;
import org.apache.ibatis.cache.decorators.FifoCache;
import org.apache.ibatis.cache.decorators.LoggingCache;
import org.apache.ibatis.cache.decorators.LruCache;
import org.apache.ibatis.cache.decorators.ScheduledCache;
import org.apache.ibatis.cache.decorators.SerializedCache;
import org.apache.ibatis.cache.decorators.SoftCache;
import org.apache.ibatis.cache.decorators.SynchronizedCache;
import org.apache.ibatis.cache.decorators.TransactionalCache;
import org.apache.ibatis.cache.impl.PerpetualCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockingCache_ESTest extends BlockingCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("Cn");
      perpetualCache0.putObject("Cn", "Cn");
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      Object object0 = blockingCache0.getObject("Cn");
      assertEquals("Cn", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      CountDownLatch countDownLatch0 = new CountDownLatch(6);
      // Undeclared exception!
      try { 
        blockingCache0.putObject(countDownLatch0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Detected an attempt at releasing unacquired lock. This should never happen.
         //
         verifyException("org.apache.ibatis.cache.decorators.BlockingCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      blockingCache0.getObject(softCache0);
      blockingCache0.putObject(softCache0, (Object) null);
      assertEquals("", blockingCache0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("Cn");
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      blockingCache0.getObject("Cn");
      Object object0 = blockingCache0.removeObject("Cn");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("cy0]f56gGY%Vb");
      ScheduledCache scheduledCache0 = new ScheduledCache(perpetualCache0);
      LruCache lruCache0 = new LruCache(scheduledCache0);
      LoggingCache loggingCache0 = new LoggingCache(lruCache0);
      BlockingCache blockingCache0 = new BlockingCache(loggingCache0);
      blockingCache0.setTimeout((-2805L));
      long long0 = blockingCache0.getTimeout();
      assertEquals((-2805L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("");
      perpetualCache0.putObject("", "");
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      int int0 = blockingCache0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      String string0 = blockingCache0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("");
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      String string0 = blockingCache0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      SerializedCache serializedCache0 = new SerializedCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(serializedCache0);
      // Undeclared exception!
      try { 
        blockingCache0.removeObject(perpetualCache0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.apache.ibatis.cache.impl.PerpetualCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.removeObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      // Undeclared exception!
      try { 
        blockingCache0.putObject(perpetualCache0, perpetualCache0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.apache.ibatis.cache.impl.PerpetualCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.putObject((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.cache.decorators.BlockingCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FifoCache fifoCache0 = new FifoCache((Cache) null);
      SerializedCache serializedCache0 = new SerializedCache(fifoCache0);
      LruCache lruCache0 = new LruCache(serializedCache0);
      SynchronizedCache synchronizedCache0 = new SynchronizedCache(lruCache0);
      BlockingCache blockingCache0 = new BlockingCache(synchronizedCache0);
      // Undeclared exception!
      try { 
        blockingCache0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.cache.decorators.FifoCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      // Undeclared exception!
      try { 
        blockingCache0.getObject(perpetualCache0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.apache.ibatis.cache.impl.PerpetualCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.getObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SynchronizedCache synchronizedCache0 = new SynchronizedCache((Cache) null);
      FifoCache fifoCache0 = new FifoCache(synchronizedCache0);
      TransactionalCache transactionalCache0 = new TransactionalCache(fifoCache0);
      BlockingCache blockingCache0 = new BlockingCache(transactionalCache0);
      CountDownLatch countDownLatch0 = new CountDownLatch(600);
      // Undeclared exception!
      try { 
        blockingCache0.getObject(countDownLatch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.cache.decorators.SynchronizedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("Detected an attempt at releasing unacquired lock. This should never happen.");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      perpetualCache0.putObject("Detected an attempt at releasing unacquired lock. This should never happen.", "Detected an attempt at releasing unacquired lock. This should never happen.");
      // Undeclared exception!
      try { 
        blockingCache0.getObject("Detected an attempt at releasing unacquired lock. This should never happen.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class java.lang.ref.SoftReference (java.lang.String and java.lang.ref.SoftReference are in module java.base of loader 'bootstrap')
         //
         verifyException("org.apache.ibatis.cache.decorators.SoftCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.cache.decorators.BlockingCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockingCache blockingCache0 = new BlockingCache((Cache) null);
      // Undeclared exception!
      try { 
        blockingCache0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.ibatis.cache.decorators.BlockingCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("x");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      long long0 = blockingCache0.getTimeout();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("1Y !<7S");
      BlockingCache blockingCache0 = new BlockingCache(perpetualCache0);
      // Undeclared exception!
      try { 
        blockingCache0.removeObject("1Y !<7S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Detected an attempt at releasing unacquired lock. This should never happen.
         //
         verifyException("org.apache.ibatis.cache.decorators.BlockingCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache((String) null);
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      blockingCache0.clear();
      assertEquals(0L, blockingCache0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("Detected an attempt at releasing unacquired lock. This should never happen.");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      int int0 = blockingCache0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("Detected an attempt at releasing unacquired lock. This should never happen.");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      String string0 = blockingCache0.getId();
      assertEquals("Detected an attempt at releasing unacquired lock. This should never happen.", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PerpetualCache perpetualCache0 = new PerpetualCache("x");
      SoftCache softCache0 = new SoftCache(perpetualCache0);
      BlockingCache blockingCache0 = new BlockingCache(softCache0);
      blockingCache0.setTimeout(1L);
      long long0 = blockingCache0.getTimeout();
      assertEquals(1L, long0);
  }
}
