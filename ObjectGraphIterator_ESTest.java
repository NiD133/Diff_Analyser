/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:17:14 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Function;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.iterators.ObjectGraphIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectGraphIterator_ESTest extends ObjectGraphIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-2817));
      linkedList0.add(integer1);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      objectGraphIterator0.findNextByIterator(iterator0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1);
      objectGraphIterator2.next();
      objectGraphIterator1.remove();
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-200));
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Transformer<Object, Integer> transformer0 = null;
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate0, (Transformer<? super Object, ? extends Integer>) null, (Transformer<? super Object, ? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, ifTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Class<Boolean> class0 = Boolean.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate0, (Transformer<? super Object, ? extends Integer>) null, (Transformer<? super Object, ? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, ifTransformer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator1.updateCurrentIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.add((Integer) null);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(iterator0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      objectGraphIterator1.findNextByIterator(listIterator0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1329);
      linkedList0.push(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Integer integer1 = new Integer((-1797));
      linkedList0.add(integer1);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(4);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>((String) null, (Class<?>[]) null, (Object[]) null);
      ObjectGraphIterator<Integer> objectGraphIterator3 = new ObjectGraphIterator<Integer>(integer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator3.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("'#+Y@U&ZFCL9E$FCS");
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator2 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator1.findNextByIterator(objectGraphIterator2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ''#+Y@U&ZFCL9E$FCS' on 'class org.apache.commons.collections4.functors.InstanceofPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>((Iterator<? extends Predicate<Object>>) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(iterator0);
      objectGraphIterator1.findNextByIterator(iterator0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1, (Transformer<? super Object, ?>) null);
      ObjectGraphIterator<Object> objectGraphIterator3 = new ObjectGraphIterator<Object>(objectGraphIterator2);
      objectGraphIterator3.hasNext();
      PredicateTransformer<Transformer<Object, Integer>> predicateTransformer0 = new PredicateTransformer<Transformer<Object, Integer>>((Predicate<? super Transformer<Object, Integer>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap1);
      // Undeclared exception!
      try { 
        predicateTransformer0.transform(transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-12));
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0, (Transformer<? super Object, ?>) null);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1);
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator((Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      objectGraphIterator0.findNext(integer0);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1);
      objectGraphIterator2.next();
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<InstanceofPredicate, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<InstanceofPredicate, InstanceofPredicate>(instanceofPredicate0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator0 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, constantTransformer0);
      ObjectGraphIterator<InstanceofPredicate> objectGraphIterator1 = new ObjectGraphIterator<InstanceofPredicate>(instanceofPredicate0, constantTransformer0);
      objectGraphIterator0.findNextByIterator(objectGraphIterator1);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(iterator0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      objectGraphIterator0.findNextByIterator(listIterator0);
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Iterator<Integer> iterator1 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator1);
      objectGraphIterator0.findNext(iterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(listIterator0);
      objectGraphIterator0.hasNext();
      objectGraphIterator0.findNextByIterator(listIterator0);
      objectGraphIterator0.hasNext();
      objectGraphIterator0.findNextByIterator(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>(predicate0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>((Iterator<? extends Predicate<Object>>) null);
      objectGraphIterator0.updateCurrentIterator();
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator1 = new ObjectGraphIterator<Predicate<Object>>(objectGraphIterator0);
      objectGraphIterator0.hasNext();
      int int0 = 5;
      Integer integer0 = new Integer(5);
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) null);
      Transformer<Integer, Integer> transformer1 = ConstantTransformer.nullTransformer();
      transformer0.andThen((Function<? super Integer, ?>) transformer1);
      ObjectGraphIterator<Integer> objectGraphIterator2 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      objectGraphIterator2.next();
      // Undeclared exception!
      try { 
        objectGraphIterator2.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-1265));
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      Integer integer1 = objectGraphIterator0.next();
      assertEquals((-1265), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(2);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator1);
      objectGraphIterator2.next();
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(566);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      Object object0 = objectGraphIterator1.next();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) object0, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      OrPredicate.orPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      String string0 = "comparator";
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-350));
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Object> factoryTransformer0 = new FactoryTransformer<Object, Object>(factory0);
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, factoryTransformer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      Predicate<Object> predicate0 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) identityPredicate0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = FalsePredicate.falsePredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      predicate2.test(predicate0);
      Predicate<Object> predicate3 = AndPredicate.andPredicate((Predicate<? super Object>) identityPredicate0, (Predicate<? super Object>) predicate0);
      predicateArray0[3] = predicate3;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(factory0);
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      Predicate<Object> predicate4 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateTransformer<Transformer<Object, Integer>> predicateTransformer0 = new PredicateTransformer<Transformer<Object, Integer>>(predicate4);
      predicate4.test(predicate0);
      FactoryTransformer<Object, Integer> factoryTransformer1 = new FactoryTransformer<Object, Integer>(factory0);
      Boolean boolean0 = predicateTransformer0.transform(factoryTransformer1);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) predicate0);
      ObjectGraphIterator<Boolean> objectGraphIterator1 = new ObjectGraphIterator<Boolean>(boolean0, transformer0);
      predicate4.negate();
      ObjectGraphIterator<Boolean> objectGraphIterator2 = new ObjectGraphIterator<Boolean>(boolean0, transformer0);
      objectGraphIterator1.findNextByIterator(objectGraphIterator2);
      Object object1 = new Object();
      objectGraphIterator0.findNext(object1);
      ObjectGraphIterator<Integer> objectGraphIterator3 = new ObjectGraphIterator<Integer>(integer0, factoryTransformer1);
      objectGraphIterator3.hasNext();
      objectGraphIterator0.findNextByIterator(objectGraphIterator3);
      objectGraphIterator0.next();
      // Undeclared exception!
      try { 
        objectGraphIterator3.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      Integer integer1 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-3572));
      Integer integer3 = new Integer((-2047));
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("m'GR6`8pM1Io~)aS");
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer("m'GR6`8pM1Io~)aS", (Class<?>[]) classArray0, (Object[]) classArray0);
      transformer0.andThen((Function<? super Integer, ? extends Boolean>) transformer1);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer2, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator(listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      linkedList0.add((Integer) null);
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator(listIterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(4);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      Object object0 = objectGraphIterator1.next();
      assertEquals(4, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      ObjectGraphIterator<Boolean> objectGraphIterator0 = new ObjectGraphIterator<Boolean>((Boolean) null, transformer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, transformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(iterator0);
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-227));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "?}4!038|{z#HLh9";
      InvokerTransformer<Integer, Integer> invokerTransformer0 = new InvokerTransformer<Integer, Integer>("?}4!038|{z#HLh9", (Class<?>[]) null, objectArray0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, invokerTransformer0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '?}4!038|{z#HLh9' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(listIterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Iterator<? extends Integer>) null);
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      Integer integer0 = new Integer(3471);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      objectGraphIterator0.updateCurrentIterator();
      objectGraphIterator0.findNextByIterator(iterator0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer1 = new Integer(1945);
      objectGraphIterator0.findNext(integer1);
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(iterator0);
      objectGraphIterator1.findNext(hashMap0);
      Integer integer2 = new Integer(1945);
      ObjectGraphIterator<Integer> objectGraphIterator2 = new ObjectGraphIterator<Integer>(integer2, transformer0);
      objectGraphIterator0.findNextByIterator(objectGraphIterator2);
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      linkedList0.parallelStream();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }
}
