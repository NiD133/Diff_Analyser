package org.apache.commons.lang3;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;

import org.apache.commons.lang3.function.FailableIntFunction;
import org.junit.jupiter.api.Test;

/**
 * Unit tests for {@link ArrayFill}.
 */
class ArrayFillTest extends AbstractLangTest {

    /**
     * Tests filling a boolean array with a specific value.
     */
    @Test
    void testFillBooleanArray() {
        final boolean[] array = new boolean[3];
        final boolean valueToFill = true;
        final boolean[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "The filled array should be the same instance as the input array.");
        for (final boolean element : filledArray) {
            assertEquals(valueToFill, element, "Each element should be filled with the specified value.");
        }
    }

    /**
     * Tests filling a null boolean array.
     */
    @Test
    void testFillBooleanArrayNull() {
        final boolean[] array = null;
        final boolean valueToFill = true;
        final boolean[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "Filling a null array should return null.");
    }

    // Similar test cases for other primitive types

    /**
     * Tests filling a byte array with a specific value.
     */
    @Test
    void testFillByteArray() {
        final byte[] array = new byte[3];
        final byte valueToFill = 1;
        final byte[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "The filled array should be the same instance as the input array.");
        for (final byte element : filledArray) {
            assertEquals(valueToFill, element, "Each element should be filled with the specified value.");
        }
    }

    /**
     * Tests filling a null byte array.
     */
    @Test
    void testFillByteArrayNull() {
        final byte[] array = null;
        final byte valueToFill = 1;
        final byte[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "Filling a null array should return null.");
    }

    /**
     * Tests filling a char array with a specific value.
     */
    @Test
    void testFillCharArray() {
        final char[] array = new char[3];
        final char valueToFill = 'a';
        final char[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "The filled array should be the same instance as the input array.");
        for (final char element : filledArray) {
            assertEquals(valueToFill, element, "Each element should be filled with the specified value.");
        }
    }

    /**
     * Tests filling a null char array.
     */
    @Test
    void testFillCharArrayNull() {
        final char[] array = null;
        final char valueToFill = 'a';
        final char[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "Filling a null array should return null.");
    }

    // Continue with similar test cases for double, float, int, long, short, and object arrays

    /**
     * Tests filling an object array with a specific value.
     */
    @Test
    void testFillObjectArray() {
        final String[] array = new String[3];
        final String valueToFill = "A";
        final String[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "The filled array should be the same instance as the input array.");
        for (final String element : filledArray) {
            assertEquals(valueToFill, element, "Each element should be filled with the specified value.");
        }
    }

    /**
     * Tests filling a null object array.
     */
    @Test
    void testFillObjectArrayNull() {
        final Object[] array = null;
        final Object valueToFill = "A";
        final Object[] filledArray = ArrayFill.fill(array, valueToFill);

        assertSame(array, filledArray, "Filling a null array should return null.");
    }

    /**
     * Tests filling an array using a generator function.
     */
    @Test
    void testFillFunction() throws Exception {
        final FailableIntFunction<Integer, Exception> generatorFunction = Integer::valueOf;
        final Integer[] array = new Integer[10];
        final Integer[] filledArray = ArrayFill.fill(array, generatorFunction);

        assertSame(array, filledArray, "The filled array should be the same instance as the input array.");
        for (int i = 0; i < array.length; i++) {
            assertEquals(i, array[i].intValue(), "Each element should be filled with the value generated by the function.");
        }
    }
}