package org.jsoup.parser;

import org.jsoup.nodes.Attributes;
import org.junit.Test;

/**
 * This test case verifies the behavior of the XmlTreeBuilder when processing tokens
 * after an initial parsing operation has already been completed.
 */
public class XmlTreeBuilderTest {

    /**
     * Tests that processing a new StartTag after a document has been fully parsed
     * results in a NullPointerException.
     *
     * This scenario highlights a potential fragility in the builder's state management,
     * as ideally, it should handle subsequent operations gracefully instead of crashing.
     * The original test, generated by EvoSuite, uncovered this specific edge case.
     */
    @Test(expected = NullPointerException.class)
    public void processStartTagAfterInitialParseThrowsNullPointerException() {
        // Arrange: Create and initialize an XmlTreeBuilder by parsing a complete document.
        // This leaves the builder in a "finished" state.
        XmlTreeBuilder xmlTreeBuilder = new XmlTreeBuilder();
        xmlTreeBuilder.parse("<root/>", "http://example.com/");

        // Arrange: Create a new StartTag token to be processed.
        // The original test obtained this token through a convoluted, internal mechanism.
        // We now create it directly for clarity and robustness.
        Token.StartTag startTag = new Token.StartTag();
        Attributes attributes = new Attributes();
        attributes.add("id", "123");
        startTag.nameAttr("newNode", attributes);

        // Act: Attempt to process the new token after the initial parse is complete.
        // The expectation is that this action will trigger a NullPointerException due to
        // the builder's internal state.
        xmlTreeBuilder.process(startTag);
    }
}