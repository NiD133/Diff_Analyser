/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:49:23 GMT 2025
 */

package org.threeten.extra.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.Period;
import java.time.Year;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Era;
import java.time.chrono.IsoEra;
import java.time.chrono.JapaneseEra;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAmount;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockYear;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;
import org.threeten.extra.chrono.DiscordianDate;
import org.threeten.extra.chrono.InternationalFixedChronology;
import org.threeten.extra.chrono.InternationalFixedDate;
import org.threeten.extra.chrono.InternationalFixedEra;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InternationalFixedChronology_ESTest extends InternationalFixedChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      boolean boolean0 = internationalFixedChronology0.isLeapYear((-1145400L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      boolean boolean0 = internationalFixedChronology0.isLeapYear((-3708L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.of(1);
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date((Era) internationalFixedEra0, 6, 1, (-347));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 29): -347
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      Instant instant0 = MockInstant.ofEpochSecond((-1512L), 107016L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ChronoZonedDateTime<InternationalFixedDate> chronoZonedDateTime0 = internationalFixedChronology0.zonedDateTime(instant0, (ZoneId) zoneOffset0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.CE;
      int int0 = internationalFixedChronology0.prolepticYear(internationalFixedEra0, 734);
      assertEquals(734, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = InternationalFixedChronology.getLeapYearsBefore(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = InternationalFixedChronology.getLeapYearsBefore(365242134L);
      assertEquals(88571217L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = InternationalFixedChronology.getLeapYearsBefore((-1610L));
      assertEquals((-390L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedEra internationalFixedEra0 = internationalFixedChronology0.eraOf(1);
      assertEquals(InternationalFixedEra.CE, internationalFixedEra0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateYearDay(134, 134);
      assertEquals((-670452L), internationalFixedDate0.toEpochDay());
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.INSTANCE.dateYearDay(4314, 7);
      assertEquals(856134L, internationalFixedDate0.toEpochDay());
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      System.setCurrentTimeMillis(16L);
      ZoneId zoneId0 = ZoneId.systemDefault();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow(zoneId0);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      System.setCurrentTimeMillis((-633L));
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow((ZoneId) zoneOffset0);
      assertEquals(29, internationalFixedDate0.lengthOfMonth());
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-2957L));
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      Clock clock0 = MockClock.systemDefaultZone();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.INSTANCE.dateNow(clock0);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
      assertEquals(29, internationalFixedDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      System.setCurrentTimeMillis(100L);
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow();
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow();
      assertEquals(365, internationalFixedDate0.lengthOfYear());
      assertEquals((-1L), internationalFixedDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateEpochDay(0L);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(5130L);
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow(clock0);
      InternationalFixedDate internationalFixedDate1 = internationalFixedChronology0.date((TemporalAccessor) internationalFixedDate0);
      assertEquals(365, internationalFixedDate1.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateEpochDay(146096L);
      InternationalFixedDate internationalFixedDate1 = internationalFixedChronology0.date((TemporalAccessor) internationalFixedDate0);
      assertEquals(365, internationalFixedDate1.lengthOfYear());
      assertEquals(29, internationalFixedDate1.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.INSTANCE.date(2, 2, 13);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
      assertEquals((-718757L), internationalFixedDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.date(3309, 8, 10);
      assertEquals(489265L, internationalFixedDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      JapaneseEra japaneseEra0 = JapaneseEra.HEISEI;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.zonedDateTime((TemporalAccessor) japaneseEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoZonedDateTime from TemporalAccessor: class java.time.chrono.JapaneseEra
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.zonedDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Instant instant0 = MockInstant.now();
      Period period0 = Period.ofDays((-2106965087));
      Instant instant1 = MockInstant.minus(instant0, (TemporalAmount) period0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.zonedDateTime(instant1, (ZoneId) zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class java.time.LocalDateTime
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.range((ChronoField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Year year0 = MockYear.of(37);
      // Undeclared exception!
      try { 
        internationalFixedChronology0.localDateTime(year0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class java.time.Year
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.localDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.CE;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateYearDay((Era) internationalFixedEra0, 2103657451, 2103657451);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for YearOfEra (valid values 1 - 1000000): 2103657451
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      JapaneseEra japaneseEra0 = JapaneseEra.HEISEI;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateYearDay((Era) japaneseEra0, 734, 734);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: Heisei
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateYearDay(366, 366);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 366' as '366' is not a leap year
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateNow((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateNow(clock1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Instant exceeds minimum or maximum instant
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateNow((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      Duration duration0 = chronoUnit0.getDuration();
      Clock clock1 = MockClock.offset(clock0, duration0);
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateNow(clock1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateEpochDay((-1145400L));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -719528 - 364522971): -1145400
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      Month month0 = Month.MAY;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date((TemporalAccessor) month0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("java.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      DiscordianDate discordianDate0 = DiscordianDate.ofYearDay(9, 9);
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date((TemporalAccessor) discordianDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -719528 - 364522971): -1142105
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date((Era) japaneseEra0, (-2073432486), (-2073432486), (-2073432486));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: Taisho
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date(4, 4, 29);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date: 4/4/29
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.CE;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.prolepticYear(internationalFixedEra0, (-2073432486));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for YearOfEra (valid values 1 - 1000000): -2073432486
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      boolean boolean0 = internationalFixedChronology0.isLeapYear(241L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.zonedDateTime((Instant) null, (ZoneId) zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoZonedDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.date(36526, 36526, 36526);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 13): 36526
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      // Undeclared exception!
      try { 
        internationalFixedChronology0.dateYearDay(2191, 2191);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 365/366): 2191
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ChronoLocalDateTime<InternationalFixedDate> chronoLocalDateTime0 = internationalFixedChronology0.localDateTime(localDateTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.prolepticYear(isoEra0, (-985));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: BCE
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.MILLI_OF_SECOND;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.YEAR;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.ERA;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.MONTH_OF_YEAR;
      ValueRange valueRange0 = internationalFixedChronology0.INSTANCE.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      ValueRange valueRange0 = internationalFixedChronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      boolean boolean0 = internationalFixedChronology0.isLeapYear(100L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      boolean boolean0 = internationalFixedChronology0.isLeapYear(365000000L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      boolean boolean0 = internationalFixedChronology0.isLeapYear(4L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      String string0 = internationalFixedChronology0.getId();
      assertEquals("Ifc", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.CE;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateYearDay((Era) internationalFixedEra0, 157, 3);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
      assertEquals((-662182L), internationalFixedDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      // Undeclared exception!
      try { 
        internationalFixedChronology0.eraOf((-2095105997));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: -2095105997
         //
         verifyException("org.threeten.extra.chrono.InternationalFixedEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow();
      InternationalFixedDate internationalFixedDate1 = internationalFixedDate0.plusMonths((-2645L));
      InternationalFixedDate internationalFixedDate2 = internationalFixedChronology0.date((TemporalAccessor) internationalFixedDate1);
      assertEquals((-58199L), internationalFixedDate2.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateEpochDay((-2219L));
      assertEquals(365, internationalFixedDate0.lengthOfYear());
      assertEquals(29, internationalFixedDate0.lengthOfMonth());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      String string0 = internationalFixedChronology0.getCalendarType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      InternationalFixedEra internationalFixedEra0 = InternationalFixedEra.CE;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.INSTANCE.date((Era) internationalFixedEra0, 7, 7, 7);
      assertEquals((-716797L), internationalFixedDate0.toEpochDay());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow((ZoneId) zoneOffset0);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      List<Era> list0 = internationalFixedChronology0.eras();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = InternationalFixedChronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      InternationalFixedDate internationalFixedDate0 = internationalFixedChronology0.dateNow(clock0);
      assertEquals(365, internationalFixedDate0.lengthOfYear());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      InternationalFixedChronology internationalFixedChronology0 = new InternationalFixedChronology();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoZonedDateTime<InternationalFixedDate> chronoZonedDateTime0 = internationalFixedChronology0.zonedDateTime((TemporalAccessor) zonedDateTime0);
      assertNotNull(chronoZonedDateTime0);
  }
}
