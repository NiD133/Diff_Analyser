/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:46:44 GMT 2025
 */

package org.jsoup.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.stream.Collector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.internal.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('F');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('f');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtil.padding(8188, 8188);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(8188, 0.0);
      stringBuilder1.append('\'');
      StringUtil.releaseBuilderVoid(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtil.resolve("org.jsoup.internal.SoftPool", "q/R|zQ`/Gq zKzj");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = StringUtil.isAscii("{3f\"nUAQw7TH,Y-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8222);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(193);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = StringUtil.padding(21, 21);
      assertEquals("                     ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(3);
      stringBuilder0.append((long) 3);
      StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      String string0 = StringUtil.releaseBuilder(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtil.padding(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtil.join(stringArray0, "c^\"k/FFrM6)OCGy9F03");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      String string0 = StringUtil.join((Collection<?>) linkedList0, "String must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        StringUtil.resolve((URL) null, "B1s2U[+");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: B1s2U[+
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilderVoid((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringUtil.padding(8170, 8170);
      // Undeclared exception!
      StringUtil.padding(8170, 8170);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Iterator<StringBuilder> iterator0 = (Iterator<StringBuilder>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(stringBuilder0).when(iterator0).next();
      String string0 = StringUtil.join(iterator0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      Iterator<StringBuilder> iterator0 = (Iterator<StringBuilder>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(stringBuilder0).when(iterator0).next();
      String string0 = "";
      StringUtil.padding(122);
      StringUtil.releaseBuilderVoid(stringBuilder0);
      StringUtil.join(iterator0, "");
      char char0 = '3';
      StringUtil.isDigit(char0);
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder1.append(string0);
      boolean boolean0 = true;
      stringBuilder1.append(boolean0);
      StringBuilder stringBuilder3 = stringBuilder2.append((CharSequence) stringBuilder1);
      int int0 = 2224;
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      char char1 = 'f';
      charArray0[5] = char1;
      charArray0[6] = char0;
      // Undeclared exception!
      try { 
        stringBuilder3.insert(int0, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2224
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList1);
      linkedList1.add((Object) linkedList0);
      linkedList0.addAll((Collection<?>) linkedList1);
      // Undeclared exception!
      try { 
        StringUtil.join((Collection<?>) linkedList0, "?h");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.join((Collection<?>) null, "M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.isAscii((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.inSorted("l~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, "@i:M]zJx[8", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = StringUtil.isDigit('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = StringUtil.isDigit('Y');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("H5OE=&4p F0oe@7Fl1");
      StringBuilder stringBuilder0 = stringUtil_StringJoiner0.sb;
      StringUtil.releaseBuilderVoid(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilderfalse);
      assertEquals(" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace((-5106));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(21);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("H5OE=&4p F0oe@7Fl1");
      StringUtil.StringJoiner stringUtil_StringJoiner1 = stringUtil_StringJoiner0.add("H5OE=&4p F0oe@7Fl1");
      StringUtil.StringJoiner stringUtil_StringJoiner2 = stringUtil_StringJoiner1.add("H5OE=&4p F0oe@7Fl1");
      assertSame(stringUtil_StringJoiner1, stringUtil_StringJoiner2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "");
      linkedList0.offer("");
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      StringUtil.join((Iterator<?>) listIterator0, "");
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      linkedList0.add((Object) listIterator0);
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator<?>) listIterator0, "?4");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.releaseBuilder((StringBuilder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner((String) null);
      String string0 = stringUtil_StringJoiner0.complete();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('\"');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = StringUtil.isHexDigit('\u008F');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = StringUtil.isDigit('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = StringUtil.isAsciiLetter('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringUtil.padding(8194, 8194);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      StringUtil.releaseBuilderVoid(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = StringUtil.resolve("l:h06g#USh|", "l:h06g#USh|");
      assertEquals("l:h06g#USh|", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = StringUtil.resolve(uRL0, "=:,DeW^");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/=:,DeW^", uRL1.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.resolve((URL) null, "?                                                                                                                                                                                                                                                   ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = StringUtil.resolve(uRL0, "-87M[|73=#T1z6.5`");
      assertEquals("T1z6.5`", uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{3f\"nUAQw7TH,Y-";
      boolean boolean0 = StringUtil.inSorted("{3f\"nUAQw7TH,Y-", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "             ";
      boolean boolean0 = StringUtil.inSorted("{3f\"nUAQw7TH,Y-", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      boolean boolean0 = StringUtil.in("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The '%s' parameter must not be empty.";
      boolean boolean0 = StringUtil.in("y+n_uiAy;MuN`+*?Bo", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        StringUtil.in("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "         ", true);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.borrowBuilder();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "width must be >= 0", true);
      assertEquals("width must be >= 0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(173);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("Yn)+vHQao!UlQ0jsv(O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline("^[a-zA-Z][a-zA-Z0-9+-.]*:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = StringUtil.startsWithNewline((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("                    ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("_5s]9,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = StringUtil.padding(0, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding(166, (-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-766), (-766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "6mU )&{");
      String string0 = StringUtil.join((Collection<?>) linkedList0, "6mU )&{");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtil.join((Iterator<?>) listIterator0, ")&*!.GRzo RF[l,9W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StringUtil.StringJoiner stringUtil_StringJoiner0 = new StringUtil.StringJoiner("auzz./f?g8Z@iU:MH");
      StringUtil.StringJoiner stringUtil_StringJoiner1 = stringUtil_StringJoiner0.append("auzz./f?g8Z@iU:MH");
      assertSame(stringUtil_StringJoiner1, stringUtil_StringJoiner0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Collector<CharSequence, ?, String> collector0 = StringUtil.joining(" ");
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = StringUtil.padding(8170, (-1));
      StringUtil.normaliseWhitespace(string0);
      // Undeclared exception!
      StringUtil.normaliseWhitespace(string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string0 = StringUtil.join(stringArray0, "oU%A");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.resolve((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        StringUtil.join(stringArray0, "oU%A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
