package org.apache.commons.io.input;

import org.junit.jupiter.api.Test; // Updated import for JUnit 5
import static org.junit.jupiter.api.Assertions.*; // Updated import for JUnit 5
import java.io.IOException;
import java.io.StringReader;

public class BoundedReaderTest { // Renamed class for clarity

    @Test
    void testReadAfterClose() throws IOException {
        // Arrange: Create a StringReader with a single character and a BoundedReader limiting it to 1 character.
        String testString = "j";
        StringReader stringReader = new StringReader(testString);
        BoundedReader boundedReader = new BoundedReader(stringReader, 1);

        // Act: Close the BoundedReader.
        boundedReader.close();

        // Assert: Attempting to read after closing should throw an IOException.
        char[] buffer = new char[6];
        assertThrows(IOException.class, () -> {
            boundedReader.read(buffer, 0, buffer.length);
        }, "Should throw IOException after closing the reader.");
    }

    @Test
    void testReadAfterCloseWithInvalidArguments() throws IOException {
      // Arrange: Create a StringReader and BoundedReader
      String testString = "test";
      StringReader stringReader = new StringReader(testString);
      BoundedReader boundedReader = new BoundedReader(stringReader, 2);

      // Act: Close the reader
      boundedReader.close();

      // Assert:  Verify that an IOException is thrown if we try to read after closing
      // with invalid arguments.  This specifically tests the exception message that is
      // generated by the StringReader when it's closed.
      char[] buffer = new char[10];
      assertThrows(IOException.class, () -> {
            boundedReader.read(buffer, -2537, 699);
      }, "Should throw IOException when reading after closing with invalid args");

    }
}