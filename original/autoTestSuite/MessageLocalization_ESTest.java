/*
 * This file was automatically generated by EvoSuite
 * Tue May 20 21:33:22 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.MessageLocalization;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageLocalization_ESTest extends MessageLocalization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=JmrhSB~/t[:");
      MessageLocalization.setMessages(stringReader0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageLocalization.setMessages((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D4^H:#)~mLrzX&|");
      stringReader0.close();
      try { 
        MessageLocalization.setMessages(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "No message found for null";
      String string0 = MessageLocalization.getComposedMessage("No message found for null", objectArray0);
      assertEquals("No message found for No message found for null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = MessageLocalization.setLanguage("en", "");
      assertTrue(boolean0);
      
      String string0 = MessageLocalization.getMessage("No message found for ", true);
      assertEquals("No message found for No message found for ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = MessageLocalization.setLanguage("en", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = MessageLocalization.setLanguage("&q", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageLocalization.setLanguage((String) null, "No message found for /");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The language cannot be null.
         //
         verifyException("org.example.MessageLocalization", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = MessageLocalization.setLanguage("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = MessageLocalization.getComposedMessage("", (Object[]) null);
      assertEquals("No message found for ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = MessageLocalization.getMessage("writelength.can.only.be.called.in.a.contructed.pdfstream.inputstream.pdfwriter");
      assertEquals("writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = MessageLocalization.getMessage((String) null, false);
      assertEquals("No message found for null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = MessageLocalization.setLanguage("en", "");
      assertTrue(boolean0);
      
      String string0 = MessageLocalization.getComposedMessage("", (-31));
      assertEquals("No message found for ", string0);
  }
}
