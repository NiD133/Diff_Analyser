/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 11:57:00 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndexedCollection_ESTest extends IndexedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      Integer integer0 = new Integer((-3039));
      linkedList0.add(integer0);
      ConstantTransformer<Integer, Predicate<Integer>> constantTransformer0 = new ConstantTransformer<Integer, Predicate<Integer>>(predicate0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      IndexedCollection<Predicate<Integer>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList1, (Transformer<Integer, Predicate<Integer>>) constantTransformer0);
      linkedList0.add(integer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      Integer integer0 = new Integer(1);
      Transformer<LinkedList<Integer>, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      IndexedCollection<Integer, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, transformer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      indexedCollection0.add(linkedList1);
      Collection<LinkedList<Integer>> collection0 = indexedCollection0.values(integer0);
      assertTrue(collection0.contains(linkedList1));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      linkedList0.add((Integer) null);
      boolean boolean0 = indexedCollection0.remove((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Predicate<Object>> transformer0 = NOPTransformer.nopTransformer();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      linkedList0.add((Predicate<Object>) allPredicate0);
      IndexedCollection<Predicate<Object>, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      Predicate<Object> predicate0 = indexedCollection0.get(allPredicate0);
      assertTrue(linkedList0.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3);
      boolean boolean0 = linkedList0.add(integer0);
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      ConstantTransformer<Integer, Predicate<Integer>> constantTransformer0 = new ConstantTransformer<Integer, Predicate<Integer>>(predicate0);
      IndexedCollection<Predicate<Integer>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Predicate<Integer>>) constantTransformer0);
      boolean boolean1 = indexedCollection0.contains(integer0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add((Object) transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      indexedCollection0.values(linkedList0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.values(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      indexedCollection0.add(linkedList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(closure0);
      // Undeclared exception!
      IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Object>) closureTransformer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      ClosureTransformer<Object> closureTransformer0 = new ClosureTransformer<Object>(closure0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Object>) closureTransformer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) transformer0);
      linkedList0.add((Object) transformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Integer integer0 = new Integer(2314);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.retainAll(indexedCollection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      Transformer<Object, Integer> transformer1 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Object> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer1);
      Transformer<Object, Boolean> transformer2 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer2);
      // Undeclared exception!
      try { 
        indexedCollection1.removeIf(predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        indexedCollection0.removeIf(uniquePredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, LinkedList<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<Object>, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>((Predicate<? super Object>[]) null);
      linkedList0.add((Object) indexedCollection0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeIf(anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add((Object) indexedCollection0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) transformer0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Set<Integer> set0 = hashMap0.keySet();
      Transformer<Integer, Integer> transformer1 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) set0, transformer1);
      // Undeclared exception!
      indexedCollection1.removeAll(linkedList0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add((Object) indexedCollection0);
      linkedList0.offerFirst(transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      Integer integer0 = new Integer((-521));
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(factoryTransformer0, predicate0);
      predicateArray0[1] = (Predicate<Object>) transformedPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[3] = predicate0;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      predicateArray0[4] = (Predicate<Object>) equalPredicate0;
      predicateArray0[5] = (Predicate<Object>) transformedPredicate0;
      Predicate<Object> predicate1 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) factoryTransformer0, (Predicate<? super Object>) uniquePredicate0);
      predicateArray0[6] = predicate1;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 5);
      transformerArray0[2] = (Transformer<Object, Integer>) factoryTransformer0;
      SwitchTransformer<Object, Object> switchTransformer0 = new SwitchTransformer<Object, Object>(predicateArray0, transformerArray0, (Transformer<? super Object, ?>) null);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Object>) switchTransformer0);
      indexedCollection0.add(defaultEquator0.HASHCODE_NULL);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Object> transformer0 = InvokerTransformer.invokerTransformer("/E/U4$mgt;KZkD7^7P");
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Integer integer0 = new Integer(630);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.remove(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '/E/U4$mgt;KZkD7^7P' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      Transformer<Integer, Object> transformer0 = InvokerTransformer.invokerTransformer(".");
      IndexedCollection<Object, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) indexedCollection0, transformer0);
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection1.reindex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '.' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      Integer integer0 = new Integer(4);
      linkedList0.push(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.reindex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) constantTransformer0);
      IndexedCollection<Integer, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Integer>) constantTransformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      Object object0 = new Object();
      linkedList0.push(object0);
      indexedCollection0.add(transformerClosure0);
      // Undeclared exception!
      try { 
        indexedCollection1.reindex();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      Transformer<LinkedList<Object>, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(5980);
      linkedList0.add(integer0);
      Closure<Integer> closure0 = NOPClosure.nopClosure();
      ForClosure<Integer> forClosure0 = new ForClosure<Integer>(5980, closure0);
      ClosureTransformer<Integer> closureTransformer0 = new ClosureTransformer<Integer>(forClosure0);
      closureTransformer0.apply(integer0);
      // Undeclared exception!
      IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) closureTransformer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Transformer<Object, Object> transformer1 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.addLast(object0);
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add((Object) transformer0);
      indexedCollection0.add(linkedList0);
      indexedCollection0.removeAll(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.get(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsFalsePredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      Transformer<Object, Object> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicateArray0[2], (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer1);
      // Undeclared exception!
      indexedCollection0.contains(predicateArray0[3]);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate0;
      Transformer<Integer, Integer>[] transformerArray0 = (Transformer<Integer, Integer>[]) Array.newInstance(Transformer.class, 0);
      ChainedTransformer<Integer> chainedTransformer0 = new ChainedTransformer<Integer>(transformerArray0);
      SwitchTransformer<Integer, Object> switchTransformer0 = new SwitchTransformer<Integer, Object>(predicateArray0, transformerArray0, chainedTransformer0);
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Object>) switchTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      Integer integer0 = new Integer((-574));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Set<Integer> set0 = hashMap0.keySet();
      hashMap0.put((Integer) null, (Integer) null);
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) set0, transformer0);
      ConstantTransformer<Integer, Transformer<Integer, Integer>> constantTransformer0 = new ConstantTransformer<Integer, Transformer<Integer, Integer>>(transformer0);
      IndexedCollection<Transformer<Integer, Integer>, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) set0, (Transformer<Integer, Transformer<Integer, Integer>>) constantTransformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(indexedCollection1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      Transformer<Integer, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection(collection0, transformer0);
      Integer integer0 = new Integer((-2641));
      // Undeclared exception!
      try { 
        indexedCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Object>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      LinkedList<Transformer<Integer, Integer>> linkedList0 = new LinkedList<Transformer<Integer, Integer>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      SwitchTransformer<Transformer<Integer, Integer>, Object> switchTransformer0 = new SwitchTransformer<Transformer<Integer, Integer>, Object>(predicateArray0, transformerArray0, transformer0);
      IndexedCollection<Object, Transformer<Integer, Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Transformer<Integer, Integer>>) linkedList0, (Transformer<Transformer<Integer, Integer>, Object>) switchTransformer0);
      Transformer<Integer, Integer> transformer1 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        indexedCollection0.add(transformer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      Integer integer0 = new Integer(35);
      linkedList0.push(integer0);
      // Undeclared exception!
      try { 
        indexedCollection0.remove(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) constantTransformer0);
      Object object0 = new Object();
      linkedList0.push(object0);
      indexedCollection0.reindex();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Object) transformer0);
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = indexedCollection0.retainAll(linkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList1);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) linkedList0);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeIf((java.util.function.Predicate<? super Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      boolean boolean0 = indexedCollection0.remove(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) linkedList0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      Predicate<Object> predicate0 = indexedCollection0.get(linkedList0);
      assertNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      linkedList0.add((Integer) null);
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.offer(indexedCollection0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(linkedList0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      indexedCollection0.add(transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      ConstantTransformer<Integer, Predicate<Integer>> constantTransformer0 = new ConstantTransformer<Integer, Predicate<Integer>>(predicate0);
      IndexedCollection<Predicate<Integer>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Predicate<Integer>>) constantTransformer0);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      IndexedCollection<Object, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Collection<Object> collection0 = indexedCollection0.values(transformer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      IndexedCollection<Integer, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Integer>) null);
      indexedCollection0.clear();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Object>) null, (Transformer<Object, Predicate<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }
}
