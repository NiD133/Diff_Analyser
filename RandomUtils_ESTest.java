/*
 * This file was automatically generated by EvoSuite
 * Refactored for understandability and maintainability
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.SecureRandom;
import java.util.Random;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

    //------------------ SecureRandom Instance Tests ------------------//
    @Test(timeout = 4000)
    public void testSecureRandomFloat_WithPositiveRange() {
        RandomUtils randomUtils = RandomUtils.secure();
        float result = randomUtils.randomFloat(1.0F, 1797.5656F);
        assertTrue("Result below minimum", result >= 1.0F);
        assertTrue("Result above maximum", result < 1797.5656F);
    }

    @Test(timeout = 4000)
    public void testSecureRandomBytes_ZeroLength() {
        RandomUtils randomUtils = RandomUtils.secure();
        byte[] result = randomUtils.randomBytes(0);
        assertEquals(0, result.length);
    }

    //------------------ InsecureRandom Instance Tests ------------------//
    @Test(timeout = 4000)
    public void testInsecureRandom_NextFloatAndBoolean() {
        RandomUtils randomUtils = RandomUtils.insecure();
        float floatResult = RandomUtils.nextFloat();
        assertTrue("Float out of range", floatResult >= 0.0F && floatResult < Float.MAX_VALUE);
        randomUtils.randomBoolean(); // Just verify no exception
    }

    @Test(timeout = 4000)
    public void testInsecureRandom_GetRandomInstance() {
        RandomUtils randomUtils = RandomUtils.insecure();
        assertNotNull(randomUtils.random());
    }

    @Test(timeout = 4000)
    public void testInsecureRandomLong_ZeroRange() {
        RandomUtils randomUtils = RandomUtils.insecure();
        long result = randomUtils.randomLong(0L, 0L);
        assertEquals(0L, result);
    }

    //------------------ Static Method Tests ------------------//
    @Test(timeout = 4000)
    public void testNextLong_EqualStartEnd() {
        long result = RandomUtils.nextLong(0L, 0L);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void testNextInt_EqualStartEnd() {
        int result = RandomUtils.nextInt(404, 404);
        assertEquals(404, result);
    }

    @Test(timeout = 4000)
    public void testNextFloat_EqualStartEnd() {
        float result = RandomUtils.nextFloat(0.0F, 0.0F);
        assertEquals(0.0F, result, 0.01F);
    }

    @Test(timeout = 4000)
    public void testNextDouble_EqualStartEnd() {
        double result = RandomUtils.nextDouble(0.0, 0.0);
        assertEquals(0.0, result, 0.01);
    }

    @Test(timeout = 4000)
    public void testNextBytes_ZeroLength() {
        byte[] result = RandomUtils.nextBytes(0);
        assertEquals(0, result.length);
    }

    //------------------ SecureStrongRandom Tests ------------------//
    @Test(timeout = 4000)
    public void testSecureStrongRandomLong_WithPositiveRange() {
        RandomUtils randomUtils = RandomUtils.secureStrong();
        long result = randomUtils.randomLong(0L, 452L);
        assertTrue("Result below minimum", result >= 0L);
        assertTrue("Result above maximum", result < 452L);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSecureStrongRandomLong_NegativeRangeThrowsException() {
        RandomUtils randomUtils = RandomUtils.secureStrong();
        randomUtils.randomLong(-9L, -9L);
    }

    @Test(timeout = 4000)
    public void testSecureStrongRandomInt_ZeroRange() {
        RandomUtils randomUtils = RandomUtils.secureStrong();
        int result = randomUtils.randomInt(0, 0);
        assertEquals(0, result);
    }

    //------------------ Exception Handling Tests ------------------//
    @Test(expected = IllegalArgumentException.class)
    public void testRandomLong_StartGreaterThanEndThrowsException() {
        RandomUtils randomUtils = RandomUtils.secure();
        randomUtils.randomLong(1314L, 0L);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomInt_NegativeRangeThrowsException() {
        RandomUtils randomUtils = RandomUtils.secureStrong();
        randomUtils.randomInt(-1830, -1830);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomInt_StartGreaterThanEndThrowsException() {
        RandomUtils randomUtils = RandomUtils.secureStrong();
        randomUtils.randomInt(0, -1163);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomFloat_NegativeRangeThrowsException() {
        new RandomUtils().randomFloat(-3238.355F, -3238.355F);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomFloat_StartGreaterThanEndThrowsException() {
        RandomUtils randomUtils = RandomUtils.insecure();
        randomUtils.randomFloat(3.3724796E38F, 1.0F);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomDouble_NegativeRangeThrowsException() {
        RandomUtils randomUtils = RandomUtils.insecure();
        randomUtils.randomDouble(-5.0, -5.0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomDouble_StartGreaterThanEndThrowsException() {
        RandomUtils randomUtils = RandomUtils.insecure();
        randomUtils.randomDouble(2316.0, 0.0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testRandomBytes_NegativeLengthThrowsException() {
        new RandomUtils().randomBytes(-1);
    }

    //------------------ Additional Coverage Tests ------------------//
    @Test(timeout = 4000)
    public void testInsecureRandomBytes_PositiveLength() {
        RandomUtils randomUtils = RandomUtils.insecure();
        byte[] result = randomUtils.randomBytes(404);
        assertEquals(404, result.length);
    }

    @Test(timeout = 4000)
    public void testInsecureRandomFloat_DefaultRange() {
        RandomUtils randomUtils = RandomUtils.insecure();
        float result = randomUtils.randomFloat();
        assertTrue("Float out of range", result >= 0.0F && result < Float.MAX_VALUE);
    }

    @Test(timeout = 4000)
    public void testNextLong_ValidRange() {
        long result = RandomUtils.nextLong(1L, 6590828120745478464L);
        assertTrue("Long out of range", result >= 1L && result < 6590828120745478464L);
    }

    @Test(timeout = 4000)
    public void testNextBytes_LengthOne() {
        byte[] result = RandomUtils.nextBytes(1);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void testSecureRandom() {
        assertNotNull(RandomUtils.secureRandom());
    }

    @Test(timeout = 4000)
    public void testToString() {
        assertNotNull(RandomUtils.secure().toString());
    }
}