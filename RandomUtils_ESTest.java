/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:16:32 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.SecureRandom;
import java.util.Random;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secure();
      float float0 = randomUtils0.randomFloat(1.0F, 1797.5656F);
      //  // Unstable assertion: assertEquals(102.1026F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secure();
      byte[] byteArray0 = randomUtils0.randomBytes(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      float float0 = RandomUtils.nextFloat();
      //  // Unstable assertion: assertEquals(6.2246244E37F, float0, 0.01F);
      
      RandomUtils.insecure();
      boolean boolean0 = randomUtils0.randomBoolean();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      Random random0 = randomUtils0.random();
      assertNotNull(random0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = RandomUtils.nextLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = RandomUtils.nextInt(404, 404);
      assertEquals(404, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomUtils.secure();
      RandomUtils.nextBoolean();
      int int0 = (-1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      long long0 = randomUtils0.randomLong(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      long long0 = randomUtils0.randomLong(0L, 452L);
      //  // Unstable assertion: assertEquals(428L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      // Undeclared exception!
      try { 
        randomUtils0.randomLong((long) (-9), (long) (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secure();
      // Undeclared exception!
      try { 
        randomUtils0.randomLong((long) 1314, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
      int int0 = randomUtils0.randomInt(228, Integer.MAX_VALUE);
      //  // Unstable assertion: assertEquals(811322057, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      int int0 = randomUtils0.randomInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      // Undeclared exception!
      try { 
        randomUtils0.randomInt((-1830), (-1830));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      // Undeclared exception!
      try { 
        randomUtils0.randomInt(0, (-1163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
      // Undeclared exception!
      try { 
        randomUtils0.randomFloat((-3238.355F), (-3238.355F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      // Undeclared exception!
      try { 
        randomUtils0.randomFloat(3.3724796E38F, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secure();
      double double0 = randomUtils0.randomDouble(117.68, 2958.43561);
      //  // Unstable assertion: assertEquals(1506.2807688613188, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      double double0 = randomUtils0.randomDouble((double) 0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      // Undeclared exception!
      try { 
        randomUtils0.randomDouble((double) (-5), (double) (-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      // Undeclared exception!
      try { 
        randomUtils0.randomDouble(2316.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
      // Undeclared exception!
      try { 
        randomUtils0.randomBytes((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      byte[] byteArray0 = randomUtils0.randomBytes(404);
      assertEquals(404, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      float float0 = randomUtils0.randomFloat();
      //  // Unstable assertion: assertEquals(2.3924485E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      long long0 = randomUtils0.randomLong();
      //  // Unstable assertion: assertEquals(1269890049322263769L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      boolean boolean0 = randomUtils0.randomBoolean();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = RandomUtils.nextLong((long) 2144936217, (long) 2144936217);
      assertEquals(2144936217L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong(920L, (long) 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = RandomUtils.nextLong(1L, 6590828120745478464L);
      //  // Unstable assertion: assertEquals(2584399046869912767L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = RandomUtils.nextInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(0, (-114));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((float) 254551010162654302L, (-145.13795F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = RandomUtils.nextDouble(269.70357193641604, 269.70357193641604);
      assertEquals(269.70357193641604, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble(1.7976931348623157E308, (double) 2616);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)14}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      //  // Unstable assertion: assertEquals(1627130694281105876L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtils.secureRandom();
      assertNotNull(secureRandom0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secureStrong();
      float float0 = randomUtils0.randomFloat(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      //  // Unstable assertion: assertEquals(2.662035911583155E307, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = RandomUtils.nextBoolean();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.secure();
      String string0 = randomUtils0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
      double double0 = randomUtils0.randomDouble();
      //  // Unstable assertion: assertEquals(3.3080842984798963E307, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = RandomUtils.nextInt();
      //  // Unstable assertion: assertEquals(72930858, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomUtils randomUtils0 = RandomUtils.insecure();
      int int0 = randomUtils0.randomInt();
      //  // Unstable assertion: assertEquals(1322705324, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextBytes((-669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
