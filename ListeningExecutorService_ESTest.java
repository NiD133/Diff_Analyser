/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:16:32 GMT 2025
 */

package com.google.common.util.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.util.concurrent.DirectExecutorService;
import java.time.Duration;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, 
useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListeningExecutorService_ESTest extends ListeningExecutorService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void awaitTermination_AfterShutdown_ReturnsTrue() throws Throwable {
      // Setup: Create executor and shut it down
      DirectExecutorService executor = new DirectExecutorService();
      executor.shutdown();
      
      // Execute: Wait for termination with zero duration
      boolean terminated = executor.awaitTermination(Duration.ZERO);
      
      // Verify: Should report termination immediately
      assertTrue(terminated);
  }

  @Test(timeout = 4000)
  public void invokeAny_WithNullTimeout_ThrowsNullPointerException() throws Throwable {
      // Setup: Create executor and task collection
      DirectExecutorService executor = new DirectExecutorService();
      LinkedBlockingQueue<Callable<Object>> tasks = new LinkedBlockingQueue<>();
      
      // Execute & Verify: Null timeout should cause NPE
      try { 
        executor.invokeAny(tasks, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
          // Internal Guava utilities require non-null duration
          verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void invokeAny_WithValidTask_ThrowsNoClassDefErrorDueToMissingDependency() throws Throwable {
      // Setup: Create executor and task with mock dependencies
      DirectExecutorService executor = new DirectExecutorService();
      ArrayList<Callable<Integer>> tasks = new ArrayList<>();
      Callable<Integer> mockTask = mock(Callable.class, new ViolatedAssumptionAnswer());
      tasks.add(mockTask);
      
      // Create a valid duration (5112 seconds)
      TemporalUnit secondsUnit = ChronoField.SECOND_OF_MINUTE.getRangeUnit();
      Duration timeout = Duration.of(5112L, secondsUnit);
      
      // Execute & Verify: Missing TrustedListenableFutureTask class should cause error
      try { 
        executor.invokeAny(tasks, timeout);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
          verifyException("com.google.common.util.concurrent.AbstractListeningExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void invokeAll_WithNullTaskCollection_ThrowsNullPointerException() throws Throwable {
      // Setup: Create executor
      DirectExecutorService executor = new DirectExecutorService();
      Duration timeout = Duration.ofMinutes(-356L); // Negative duration
      
      // Execute & Verify: Null task collection should cause NPE
      try { 
        executor.invokeAll(null, timeout);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
          verifyException("java.util.concurrent.AbstractExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void invokeAll_WithSingleTask_ThrowsNoClassDefErrorDueToMissingDependency() throws Throwable {
      // Setup: Create executor and single mock task
      DirectExecutorService executor = new DirectExecutorService();
      LinkedHashSet<Callable<Object>> tasks = new LinkedHashSet<>();
      Callable<Object> mockTask = mock(Callable.class, new ViolatedAssumptionAnswer());
      tasks.add(mockTask);
      
      // Execute & Verify: Missing TrustedListenableFutureTask class should cause error
      try { 
        executor.invokeAll(tasks, Duration.ZERO);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
          verifyException("com.google.common.util.concurrent.AbstractListeningExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void awaitTermination_WithNullTimeout_ThrowsNullPointerException() throws Throwable {
      // Setup: Create executor
      DirectExecutorService executor = new DirectExecutorService();
      
      // Execute & Verify: Null timeout should cause NPE
      try { 
        executor.awaitTermination((Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
          // Internal Guava utilities require non-null duration
          verifyException("com.google.common.util.concurrent.Internal", e);
      }
  }

  @Test(timeout = 4000)
  public void invokeAny_WithEmptyTaskCollection_ThrowsIllegalArgumentException() throws Throwable {
      // Setup: Create executor with empty task list
      DirectExecutorService executor = new DirectExecutorService();
      ArrayList<Callable<Object>> tasks = new ArrayList<>();
      
      // Execute & Verify: Empty task collection should cause IAE
      try { 
        executor.invokeAny(tasks, Duration.ZERO);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
          verifyException("java.util.concurrent.AbstractExecutorService", e);
      }
  }

  @Test(timeout = 4000)
  public void invokeAll_WithEmptyTaskCollection_ReturnsEmptyFutureList() throws Throwable {
      // Setup: Create executor with empty task collection
      DirectExecutorService executor = new DirectExecutorService();
      LinkedTransferQueue<Callable<Object>> tasks = new LinkedTransferQueue<>();
      
      // Execute: Process empty task list with zero timeout
      List<Future<Object>> results = executor.invokeAll(tasks, Duration.ZERO);
      
      // Verify: Should return empty result list immediately
      assertEquals(0, results.size());
  }

  @Test(timeout = 4000)
  public void awaitTermination_WithoutShutdown_ReturnsFalse() throws Throwable {
      // Setup: Create active executor
      DirectExecutorService executor = new DirectExecutorService();
      
      // Execute: Check termination with zero timeout
      boolean terminated = executor.awaitTermination(Duration.ZERO);
      
      // Verify: Executor still active
      assertFalse(terminated);
  }
}