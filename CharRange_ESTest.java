/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:16:43 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('?', '?');
      CharRange charRange1 = CharRange.isIn('D', '?');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('D', charRange1.getEnd());
      assertFalse(charRange0.equals((Object)charRange1));
      assertEquals('?', charRange1.getStart());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('+', '+');
      CharRange charRange1 = CharRange.isNotIn('7', '7');
      boolean boolean0 = charRange1.equals(charRange0);
      assertFalse(boolean0);
      assertEquals('7', charRange1.getStart());
      assertEquals('+', charRange0.getEnd());
      assertTrue(charRange1.isNegated());
      assertEquals('+', charRange0.getStart());
      assertEquals('7', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharRange charRange0 = CharRange.is('P');
      CharRange charRange1 = CharRange.isIn(';', 'z');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('z', charRange1.getEnd());
      assertEquals('P', charRange0.getEnd());
      assertEquals(';', charRange1.getStart());
      assertEquals('P', charRange0.getStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('*');
      CharRange charRange1 = CharRange.is('*');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('*', charRange1.getEnd());
      assertEquals('*', charRange0.getStart());
      assertEquals('*', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('*', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('+', '8');
      CharRange charRange1 = CharRange.isNotIn('+', 'X');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('+', charRange1.getStart());
      assertTrue(boolean0);
      assertEquals('X', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('j');
      boolean boolean0 = charRange0.contains('j');
      assertFalse(boolean0);
      assertEquals('j', charRange0.getEnd());
      assertEquals('j', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('k');
      boolean boolean0 = charRange0.isNegated();
      assertEquals('k', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('k', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('}');
      char char0 = charRange0.getStart();
      assertTrue(charRange0.isNegated());
      assertEquals('}', char0);
      assertEquals('}', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('<', '6');
      char char0 = charRange0.getStart();
      assertEquals('<', charRange0.getEnd());
      assertEquals('6', char0);
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharRange charRange0 = CharRange.is('/');
      char char0 = charRange0.getEnd();
      assertFalse(charRange0.isNegated());
      assertEquals('/', charRange0.getStart());
      assertEquals('/', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharRange charRange0 = CharRange.is('4');
      char char0 = charRange0.getEnd();
      assertEquals('4', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharRange charRange0 = CharRange.is('5');
      // Undeclared exception!
      try { 
        charRange0.contains((CharRange) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      String string0 = charRange0.toString();
      assertEquals("8-A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('N', 'N');
      charRange0.hashCode();
      assertEquals('N', charRange0.getStart());
      assertEquals('N', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharRange charRange0 = CharRange.is('P');
      charRange0.hashCode();
      assertFalse(charRange0.isNegated());
      assertEquals('P', charRange0.getStart());
      assertEquals('P', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('O');
      CharRange charRange1 = CharRange.isNot('O');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('O', charRange1.getEnd());
      assertEquals('O', charRange1.getStart());
      assertTrue(charRange1.isNegated());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('=');
      CharRange charRange1 = CharRange.is('=');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('=', charRange1.getStart());
      assertEquals('=', charRange0.getEnd());
      assertFalse(boolean0);
      assertEquals('=', charRange0.getStart());
      assertEquals('=', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('w', 'w');
      CharRange charRange1 = CharRange.isNotIn('(', '2');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('w', charRange0.getStart());
      assertFalse(boolean0);
      assertEquals('w', charRange0.getEnd());
      assertTrue(charRange1.isNegated());
      assertEquals('2', charRange1.getEnd());
      assertEquals('(', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('+', '%');
      CharRange charRange1 = CharRange.is('%');
      boolean boolean0 = charRange1.equals(charRange0);
      assertEquals('+', charRange0.getEnd());
      assertEquals('%', charRange0.getStart());
      assertEquals('%', charRange1.getEnd());
      assertFalse(boolean0);
      assertFalse(charRange1.isNegated());
      assertEquals('%', charRange1.getStart());
      assertFalse(charRange0.equals((Object)charRange1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      Object object0 = new Object();
      boolean boolean0 = charRange0.equals(object0);
      assertFalse(boolean0);
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('w', 'w');
      CharRange charRange1 = CharRange.is('~');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('w', charRange0.getEnd());
      assertEquals('~', charRange1.getStart());
      assertFalse(boolean0);
      assertFalse(charRange1.isNegated());
      assertEquals('w', charRange0.getStart());
      assertEquals('~', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('w', 'w');
      CharRange charRange1 = CharRange.is('~');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('~', charRange1.getStart());
      assertEquals('w', charRange0.getStart());
      assertEquals('~', charRange1.getEnd());
      assertEquals('w', charRange0.getEnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      CharRange charRange1 = CharRange.isNotIn('Y', '@');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('Y', charRange1.getEnd());
      assertEquals('@', charRange1.getStart());
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
      assertTrue(charRange1.isNegated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('w', 'w');
      CharRange charRange1 = CharRange.isNotIn('(', '2');
      boolean boolean0 = charRange1.contains(charRange0);
      assertTrue(boolean0);
      assertEquals('w', charRange0.getStart());
      assertEquals('w', charRange0.getEnd());
      assertEquals('2', charRange1.getEnd());
      assertEquals('(', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('p');
      CharRange charRange1 = CharRange.isIn('\"', 'R');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('\"', charRange1.getStart());
      assertEquals('p', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('p', charRange0.getEnd());
      assertEquals('R', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('*');
      CharRange charRange1 = CharRange.isNot('m');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('m', charRange1.getStart());
      assertFalse(boolean0);
      assertTrue(charRange1.isNegated());
      assertEquals('m', charRange1.getEnd());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('%');
      CharRange charRange1 = CharRange.isNotIn('R', '1');
      boolean boolean0 = charRange0.contains(charRange1);
      assertEquals('1', charRange1.getStart());
      assertFalse(boolean0);
      assertEquals('%', charRange0.getStart());
      assertEquals('R', charRange1.getEnd());
      assertEquals('%', charRange0.getEnd());
      assertTrue(charRange0.isNegated());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('*');
      boolean boolean0 = charRange0.contains(charRange0);
      assertTrue(charRange0.isNegated());
      assertEquals('*', charRange0.getStart());
      assertTrue(boolean0);
      assertEquals('*', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      CharRange charRange1 = CharRange.isNotIn('Y', '@');
      boolean boolean0 = charRange1.contains(charRange0);
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
      assertTrue(charRange1.isNegated());
      assertEquals('Y', charRange1.getEnd());
      assertFalse(boolean0);
      assertEquals('@', charRange1.getStart());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      boolean boolean0 = charRange0.contains(charRange0);
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('N', 'N');
      boolean boolean0 = charRange0.contains('|');
      assertEquals('N', charRange0.getEnd());
      assertEquals('N', charRange0.getStart());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('K', '#');
      boolean boolean0 = charRange0.contains('#');
      assertTrue(boolean0);
      assertEquals('K', charRange0.getEnd());
      assertEquals('#', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      boolean boolean0 = charRange0.contains(' ');
      assertFalse(boolean0);
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharRange charRange0 = CharRange.isNot('S');
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      charRange0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      assertFalse(charRange0.isNegated());
      
      Consumer<Character> consumer0 = (Consumer<Character>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      charRange0.forEach(consumer0);
      assertEquals('A', charRange0.getEnd());
      assertEquals('8', charRange0.getStart());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      char char0 = charRange0.getEnd();
      assertEquals('8', charRange0.getStart());
      assertFalse(charRange0.isNegated());
      assertEquals('A', char0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharRange charRange0 = CharRange.isIn('8', 'A');
      boolean boolean0 = charRange0.isNegated();
      assertFalse(boolean0);
      assertEquals('8', charRange0.getStart());
      assertEquals('A', charRange0.getEnd());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('N', 'N');
      char char0 = charRange0.getStart();
      assertTrue(charRange0.isNegated());
      assertEquals('N', charRange0.getEnd());
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharRange charRange0 = CharRange.isNotIn('Y', '@');
      charRange0.iterator();
      assertTrue(charRange0.isNegated());
      assertEquals('Y', charRange0.getEnd());
      assertEquals('@', charRange0.getStart());
  }
}
