/*
 * This file was automatically generated by EvoSuite
 * Refactored for understandability
 */
package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import org.apache.commons.lang3.CharRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class CharRange_ESTest extends CharRange_ESTest_scaffolding {

    //----- Equality Tests -----//
    @Test(timeout = 4000)
    public void equals_WhenRangesDiffer_ReturnsFalse() {
        CharRange range1 = CharRange.isIn('?', '?');
        CharRange range2 = CharRange.isIn('D', '?');
        assertFalse(range2.equals(range1));
        assertEquals('D', range2.getStart());
        assertEquals('?', range2.getEnd());
    }

    @Test(timeout = 4000)
    public void equals_WhenNegationDiffers_ReturnsFalse() {
        CharRange range1 = CharRange.isIn('+', '+');
        CharRange range2 = CharRange.isNotIn('7', '7');
        assertFalse(range2.equals(range1));
        assertTrue(range2.isNegated());
    }

    @Test(timeout = 4000)
    public void equals_WhenRangesSame_ReturnsTrue() {
        CharRange range1 = CharRange.isNot('O');
        CharRange range2 = CharRange.isNot('O');
        assertTrue(range1.equals(range2));
    }

    @Test(timeout = 4000)
    public void equals_WhenComparedToNonCharRange_ReturnsFalse() {
        CharRange range = CharRange.isIn('8', 'A');
        assertFalse(range.equals(new Object()));
    }

    //----- Containment Tests (CharRange) -----//
    @Test(timeout = 4000)
    public void contains_WhenRangeInside_ReturnsTrue() {
        CharRange container = CharRange.isIn(';', 'z');
        CharRange containee = CharRange.is('P');
        assertTrue(container.contains(containee));
    }

    @Test(timeout = 4000)
    public void contains_WhenRangeOutside_ReturnsFalse() {
        CharRange container = CharRange.isIn('w', 'w');
        CharRange containee = CharRange.is('~');
        assertFalse(container.contains(containee));
    }

    @Test(timeout = 4000)
    public void contains_WhenNegatedRangeContains_ReturnsTrue() {
        CharRange container = CharRange.isNotIn('(', '2');
        CharRange containee = CharRange.isIn('w', 'w');
        assertTrue(container.contains(containee));
    }

    @Test(timeout = 4000)
    public void contains_WhenRangesAreSame_ReturnsTrue() {
        CharRange range = CharRange.isIn('8', 'A');
        assertTrue(range.contains(range));
    }

    @Test(timeout = 4000)
    public void contains_WithNullRange_ThrowsException() {
        CharRange range = CharRange.is('5');
        try {
            range.contains((CharRange) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("range", e.getMessage());
        }
    }

    //----- Containment Tests (char) -----//
    @Test(timeout = 4000)
    public void contains_WhenCharInRange_ReturnsTrue() {
        CharRange range = CharRange.isIn('K', '#');
        assertTrue(range.contains('#'));
    }

    @Test(timeout = 4000)
    public void contains_WhenCharNotInRange_ReturnsFalse() {
        CharRange range = CharRange.isIn('8', 'A');
        assertFalse(range.contains(' '));
    }

    @Test(timeout = 4000)
    public void contains_WhenCharExcludedByNegated_ReturnsFalse() {
        CharRange range = CharRange.isNot('j');
        assertFalse(range.contains('j'));
    }

    @Test(timeout = 4000)
    public void contains_WhenCharIncludedByNegated_ReturnsTrue() {
        CharRange range = CharRange.isNotIn('N', 'N');
        assertTrue(range.contains('|'));
    }

    //----- Negation Tests -----//
    @Test(timeout = 4000)
    public void isNegated_WhenNegated_ReturnsTrue() {
        CharRange range = CharRange.isNot('k');
        assertTrue(range.isNegated());
    }

    @Test(timeout = 4000)
    public void isNegated_WhenNotNegated_ReturnsFalse() {
        CharRange range = CharRange.isIn('8', 'A');
        assertFalse(range.isNegated());
    }

    //----- Getter Tests -----//
    @Test(timeout = 4000)
    public void getStart_ForSingleCharRange_ReturnsChar() {
        CharRange range = CharRange.isNot('}');
        assertEquals('}', range.getStart());
    }

    @Test(timeout = 4000)
    public void getStart_AfterNormalization_ReturnsMinChar() {
        CharRange range = CharRange.isNotIn('<', '6');
        assertEquals('6', range.getStart()); // Normalized to min
        assertEquals('<', range.getEnd());   // Normalized to max
    }

    @Test(timeout = 4000)
    public void getEnd_ForSingleCharRange_ReturnsChar() {
        CharRange range = CharRange.is('/');
        assertEquals('/', range.getEnd());
    }

    @Test(timeout = 4000)
    public void getEnd_ForMultiCharRange_ReturnsMaxChar() {
        CharRange range = CharRange.isIn('8', 'A');
        assertEquals('A', range.getEnd());
    }

    //----- Iterator & ForEach Tests -----//
    @Test(timeout = 4000)
    public void forEach_OnInfiniteRange_ThrowsException() {
        CharRange range = CharRange.isNot('S');
        Consumer<Character> consumer = mock(Consumer.class);
        try {
            range.forEach(consumer);
            fail("Expected iteration over infinite range to fail");
        } catch (Exception e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void iterator_OnNegatedRange_CreatesSuccessfully() {
        CharRange range = CharRange.isNotIn('Y', '@');
        assertNotNull(range.iterator());
    }

    //----- Misc Functionality Tests -----//
    @Test(timeout = 4000)
    public void toString_ReturnsExpectedFormat() {
        CharRange range = CharRange.isIn('8', 'A');
        assertEquals("8-A", range.toString());
    }

    @Test(timeout = 4000)
    public void hashCode_ConsistentWithEquals() {
        CharRange range1 = CharRange.isNotIn('N', 'N');
        CharRange range2 = CharRange.isNotIn('N', 'N');
        assertEquals(range1.hashCode(), range2.hashCode());
    }
}