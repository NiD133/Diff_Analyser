/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:44:20 GMT 2025
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.Calendar;
import java.util.TimeZone;
import javax.swing.DropMode;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.api.RectangleEdge;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.legend.PaintScaleLegend;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModuloAxis_ESTest extends ModuloAxis_ESTest_scaffolding {

    // Constants for common values
    private static final double TOLERANCE = 0.01;
    private static final double DISPLAY_START_DEFAULT = 270.0;
    private static final double DISPLAY_END_DEFAULT = 90.0;
    private static final RectangleEdge DEFAULT_EDGE = RectangleEdge.BOTTOM;

    // Tests for display range configuration
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testDefaultDisplayRangeConfiguration() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        assertEquals("Default display start should be 270", 
            DISPLAY_START_DEFAULT, axis.getDisplayStart(), TOLERANCE);
        assertEquals("Default display end should be 90",
            DISPLAY_END_DEFAULT, axis.getDisplayEnd(), TOLERANCE);
    }

    @Test(timeout = 4000)
    public void testSetDisplayRangeUpdatesConfiguration() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        axis.setDisplayRange(500, 2.0);
        assertEquals("Display start should update correctly",
            0.0, axis.getDisplayStart(), TOLERANCE);
        assertEquals("Display end should update correctly",
            0.0, axis.getDisplayEnd(), TOLERANCE);
    }

    @Test(timeout = 4000)
    public void testAutoAdjustRangeConfiguresDefaultDisplayRange() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        axis.autoAdjustRange();
        
        assertTrue("Auto-range should be enabled", axis.isAutoRange());
        assertEquals("Display start should be configured", 
            DISPLAY_START_DEFAULT, axis.getDisplayStart(), TOLERANCE);
        assertEquals("Display end should be configured",
            DISPLAY_END_DEFAULT, axis.getDisplayEnd(), TOLERANCE);
    }

    // Tests for coordinate conversion (valueToJava2D)
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testValueToJava2DHandlesNullArea() {
        DropMode dropMode = DropMode.ON_OR_INSERT;
        TimeSeries<DropMode> timeSeries = new TimeSeries<>(dropMode);
        TimePeriodAnchor anchor = TimePeriodAnchor.MIDDLE;
        TimeZone timeZone = TimeZone.getDefault();
        MockGregorianCalendar calendar = new MockGregorianCalendar(timeZone);
        Range range = timeSeries.findValueRange(null, anchor, calendar);
        ModuloAxis axis = new ModuloAxis("", range);
        
        try {
            axis.valueToJava2D(534.36, null, DEFAULT_EDGE);
            fail("Expected NullPointerException for null area");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testValueToJava2DWithInvertedAxis() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        axis.setInverted(true);
        axis.resizeRange(1.1565);
        
        Rectangle2D area = new Rectangle2D.Double(0.134, 500, 1e-8, 0.134);
        double result = axis.valueToJava2D(0.05, area, RectangleEdge.RIGHT);
        
        assertEquals("Coordinate calculation should handle inverted axis",
            500.128, result, TOLERANCE);
    }

    @Test(timeout = 4000)
    public void testValueToJava2DWithCustomDisplayRange() {
        DefaultValueDataset dataset = new DefaultValueDataset();
        ThermometerPlot plot = new ThermometerPlot(dataset);
        Range range = plot.getDataRange(null);
        ModuloAxis axis = new ModuloAxis("", range);
        axis.setDisplayRange(0.0, 10);
        
        Polygon polygon = new Polygon();
        Rectangle area = polygon.getBounds();
        area.setBounds(2, 97, 10, 2);
        
        double result = axis.valueToJava2D(2239.45, area, DEFAULT_EDGE);
        
        assertEquals("Coordinate should map to display range",
            41.447, result, TOLERANCE);
    }

    // Tests for range resizing
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testResizeRangeUpdatesDisplayConfiguration() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        axis.resizeRange(1005.89);
        axis.resizeRange(0.866, 0.134);
        
        assertFalse("Resizing should disable auto-range", axis.isAutoRange());
        assertEquals("Display start should update after resize",
            0.866, axis.getDisplayStart(), TOLERANCE);
    }

    @Test(timeout = 4000)
    public void testResizeRangeWithAnchorValue() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        axis.resizeRange(1462.1, -2273.98);
        
        assertEquals("Display end should update after anchored resize",
            36.518, axis.getDisplayEnd(), TOLERANCE);
    }

    // Tests for edge cases and exceptions
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testNullRangeThrowsExceptionInConstructor() {
        try {
            new ModuloAxis("", null);
            fail("Expected IllegalArgumentException for null range");
        } catch (IllegalArgumentException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testResizeRangeWithInvalidParametersThrowsException() {
        DefaultMultiValueCategoryDataset<DropMode, DropMode> dataset = 
            new DefaultMultiValueCategoryDataset<>();
        Range range = dataset.getRangeBounds(false);
        ModuloAxis axis = new ModuloAxis(null, range);
        
        try {
            axis.resizeRange(-1471.7);
            fail("Expected IllegalArgumentException for negative range");
        } catch (IllegalArgumentException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testJava2DToValueHandlesNullArea() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis = new ModuloAxis("", dateRange);
        
        try {
            axis.java2DToValue(0.6155, null, DEFAULT_EDGE);
            fail("Expected NullPointerException for null area");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // Tests for equals and clone
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testEqualsWithDifferentDisplayRanges() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis1 = new ModuloAxis("", dateRange);
        ModuloAxis axis2 = new ModuloAxis("", dateRange);
        
        axis2.resizeRange(2.0);
        assertFalse("Axes with different ranges should not be equal", 
            axis1.equals(axis2));
    }

    @Test(timeout = 4000)
    public void testEqualsWithSameConfiguration() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis axis1 = new ModuloAxis("", dateRange);
        ModuloAxis axis2 = new ModuloAxis("", dateRange);
        
        assertTrue("Axes with identical configurations should be equal",
            axis1.equals(axis2));
    }

    @Test(timeout = 4000)
    public void testCloneProducesEqualInstance() {
        DateRange dateRange = DateAxis.DEFAULT_DATE_RANGE;
        ModuloAxis original = new ModuloAxis("", dateRange);
        ModuloAxis clone = (ModuloAxis) original.clone();
        
        assertTrue("Clone should be equal to original", original.equals(clone));
    }

    // Tests for length conversions
    //--------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testLengthToJava2DHandlesNullArea() {
        DropMode dropMode = DropMode.ON_OR_INSERT;
        TimeSeries<DropMode> timeSeries = new TimeSeries<>(dropMode);
        TimePeriodAnchor anchor = TimePeriodAnchor.MIDDLE;
        TimeZone timeZone = TimeZone.getDefault();
        MockGregorianCalendar calendar = new MockGregorianCalendar(timeZone);
        Range range = timeSeries.findValueRange(null, anchor, calendar);
        ModuloAxis axis = new ModuloAxis("", range);
        
        try {
            axis.lengthToJava2D(66.0, null, DEFAULT_EDGE);
            fail("Expected NullPointerException for null area");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testLengthToJava2DWithValidParameters() {
        Range range = ValueAxis.DEFAULT_RANGE;
        ModuloAxis axis = new ModuloAxis("", range);
        JScrollPane scrollPane = new JScrollPane();
        Rectangle area = scrollPane.getViewportBorderBounds();
        
        double result = axis.lengthToJava2D(1e-8, area, RectangleEdge.RIGHT);
        
        assertEquals("Length conversion should be accurate",
            1.675e-10, result, TOLERANCE);
    }
}