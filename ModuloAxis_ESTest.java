/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:44:20 GMT 2025
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.Calendar;
import java.util.TimeZone;
import javax.swing.DropMode;
import javax.swing.JScrollPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.api.RectangleEdge;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.TickType;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.legend.PaintScaleLegend;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ModuloAxis_ESTest extends ModuloAxis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236);
      ModuloAxis moduloAxis1 = new ModuloAxis("", moduloAxis0.DEFAULT_RANGE);
      moduloAxis0.equals(moduloAxis1);
      assertEquals(0.8662200000107987, moduloAxis0.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      TimeSeries<DropMode> timeSeries0 = new TimeSeries<DropMode>(dropMode0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Range range0 = timeSeries0.findValueRange((Range) null, timePeriodAnchor0, (Calendar) mockGregorianCalendar0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(66.0, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      moduloAxis0.resizeRange(2.0, (-5.439710113));
      double double0 = moduloAxis0.lengthToJava2D(0.13377999998920131, rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.resizeRange((double) 270);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, moduloAxis0);
      // Undeclared exception!
      try { 
        moduloAxis0.lengthToJava2D(270.0, (Rectangle2D) null, paintScaleLegend0.DEFAULT_POSITION);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setDisplayRange(0.0, 10);
      moduloAxis0.resizeRange(1462.0995585, (-2273.979600655645));
      assertEquals(36.5181918443559, moduloAxis0.getDisplayEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange((double) 500);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, moduloAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      double double0 = moduloAxis0.java2DToValue(0.5, rectangle2D0, paintScaleLegend0.DEFAULT_POSITION);
      assertEquals(0.5, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      TimeSeries<DropMode> timeSeries0 = new TimeSeries<DropMode>(dropMode0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Range range0 = timeSeries0.findValueRange((Range) null, timePeriodAnchor0, (Calendar) mockGregorianCalendar0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = moduloAxis0.valueToJava2D(19, rectangle2D_Double0, rectangleEdge0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("Plc=vQ!l", dateRange0);
      moduloAxis0.setInverted(true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.13377999998920131, 500, 1.0E-8, 0.13377999998920131);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = moduloAxis0.valueToJava2D(0.05, rectangle2D_Double0, rectangleEdge0);
      assertEquals(499.9999626312849, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.043157868280104594, 946.7277932617);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setInverted(true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = moduloAxis0.valueToJava2D(2.0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.setInverted(true);
      moduloAxis0.resizeRange(499.3112711);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = moduloAxis0.valueToJava2D((-2588.490989243), rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange((double) 2.0F);
      moduloAxis0.setInverted(true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0F, 500, 2.0F, 0.05);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = moduloAxis0.valueToJava2D((-4.0), rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(500.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = moduloAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Double0, true, true);
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      double double0 = moduloAxis0.valueToJava2D(3676.6, rectangle2D0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(5.979967110664955, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(499.3112711);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2588.490989243), (-1638.3), 0.05, 1138.013594771);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = moduloAxis0.valueToJava2D((-2588.490989243), rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals((-2588.552898269559), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.setInverted(true);
      moduloAxis0.resizeRange((double) 2.0F);
      moduloAxis0.resizeRange(2859.56, 2187.2);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(4454.370088683, 4.0, (-3835.51370066), 0.0F);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = moduloAxis0.valueToJava2D(2.0, rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals((-2257.7788874723888), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("Plc=vQ!l", dateRange0);
      moduloAxis0.resizeRange(1.1565116986768456);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.13377999998920131, 500, 1.0E-8, 0.13377999998920131);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = moduloAxis0.valueToJava2D(0.05, rectangle2D_Double0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(500.12804464945566, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      moduloAxis0.setDisplayRange(0.0, 10);
      rectangle0.setBounds(2, 97, 10, 2);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = moduloAxis0.valueToJava2D(2239.4471173664856, rectangle0, rectangleEdge0);
      assertEquals(10.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(41.4471173664856, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, moduloAxis0);
      Rectangle2D rectangle2D0 = paintScaleLegend0.getBounds();
      moduloAxis0.setDisplayRange(500, 2.0F);
      double double0 = moduloAxis0.valueToJava2D(75.0, rectangle2D0, paintScaleLegend0.DEFAULT_POSITION);
      assertEquals(0.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DropMode dropMode0 = DropMode.ON_OR_INSERT;
      TimeSeries<DropMode> timeSeries0 = new TimeSeries<DropMode>(dropMode0);
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.MIDDLE;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      Range range0 = timeSeries0.findValueRange((Range) null, timePeriodAnchor0, (Calendar) mockGregorianCalendar0);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        moduloAxis0.valueToJava2D(534.359951174859, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.autoAdjustRange();
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = moduloAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Double0, true, true);
      moduloAxis0.setDisplayRange((-3112.0), (-2578.194629652568));
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = moduloAxis0.valueToJava2D(0.0, rectangle2D0, rectangleEdge0);
      assertEquals(1.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals((-4.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236);
      Rectangle rectangle0 = new Rectangle(500, 1);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      double double0 = moduloAxis0.lengthToJava2D((-2.147483648E9), rectangle0, rectangleEdge0);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals((-4.013087995539962E12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("Plc=vQ!l", dateRange0);
      moduloAxis0.setInverted(true);
      moduloAxis0.resizeRange(1.1565116986768456);
      Rectangle rectangle0 = new Rectangle(500, 500);
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = moduloAxis0.java2DToValue((-75.7781029047), rectangle0, rectangleEdge0);
      assertEquals(0.0077970315776809684, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals((-0.14139579718674034), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-3022.7454), (-2241.3964950581735));
      ModuloAxis moduloAxis0 = new ModuloAxis("lFFFf+.F<AAFi", range0);
      moduloAxis0.resizeRange(3737.437, 2.0);
      double double0 = moduloAxis0.getDisplayStart();
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals((-2514.145028011561), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.setDisplayRange(533.2898185733466, 500);
      double double0 = moduloAxis0.getDisplayEnd();
      assertEquals(0.28981857334656524, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range((-3022.7454), (-2241.3964950581735));
      ModuloAxis moduloAxis0 = new ModuloAxis("lFFFf+.F<AAFi", range0);
      moduloAxis0.resizeRange(3737.437, 2.0);
      double double0 = moduloAxis0.getDisplayEnd();
      assertEquals((-2169.9484016396004), moduloAxis0.getUpperBound(), 0.01);
      assertEquals((-2951.2973065814267), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.setDisplayRange((-1402.04), (-1402.04));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange(142.0, 142.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("HL/Z&k~q6y%", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange((double) 0.0F, (double) 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("jT(Ea9bn5b*o>jy", (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange(1.0E-8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultMultiValueCategoryDataset<DropMode, DropMode> defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset<DropMode, DropMode>();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, range0);
      // Undeclared exception!
      try { 
        moduloAxis0.resizeRange((-1471.70084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A positive range length is required: Range[0.0,0.0]
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("scXVbH@CIro/NE^!ZZ[", dateRange0);
      moduloAxis0.resizeRange(0.6155460372287962, (double) 32L);
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      // Undeclared exception!
      try { 
        moduloAxis0.java2DToValue(0.6155460372287962, (Rectangle2D) null, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      Object object0 = moduloAxis0.clone();
      // Undeclared exception!
      try { 
        moduloAxis0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ModuloAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      Range range0 = thermometerPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setDisplayRange(0.0, 10);
      double double0 = moduloAxis0.getDisplayStart();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      ModuloAxis moduloAxis1 = new ModuloAxis("", moduloAxis0.DEFAULT_RANGE);
      boolean boolean0 = moduloAxis1.equals(moduloAxis0);
      assertFalse(boolean0);
      assertEquals(90.0, moduloAxis1.getDisplayEnd(), 0.01);
      assertEquals(270.0, moduloAxis1.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("TOKP_OR_LEFT", dateRange0);
      ModuloAxis moduloAxis1 = new ModuloAxis("TOKP_OR_LEFT", moduloAxis0.DEFAULT_RANGE);
      moduloAxis1.resizeRange((double) 2.0F);
      boolean boolean0 = moduloAxis0.equals(moduloAxis1);
      assertFalse(moduloAxis1.isAutoRange());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      TickType tickType0 = TickType.MINOR;
      boolean boolean0 = moduloAxis0.equals(tickType0);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(boolean0);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      boolean boolean0 = moduloAxis0.equals(moduloAxis0);
      assertTrue(boolean0);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      ModuloAxis moduloAxis1 = (ModuloAxis)moduloAxis0.clone();
      boolean boolean0 = moduloAxis0.equals(moduloAxis1);
      assertEquals(90.0, moduloAxis1.getDisplayEnd(), 0.01);
      assertTrue(boolean0);
      assertEquals(270.0, moduloAxis1.getDisplayStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = moduloAxis0.lengthToJava2D(1.0E-8, rectangle0, rectangleEdge0);
      assertEquals(1.675977653631285E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236, 0.13377999998920131);
      moduloAxis0.resizeRange(0.8662200000107987, 0.13377999998920131);
      assertFalse(moduloAxis0.isAutoRange());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      double double0 = moduloAxis0.java2DToValue(5.0, (Rectangle2D) null, rectangleEdge0);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      double double0 = moduloAxis0.valueToJava2D(53843.88561595805, rectangle2D_Double0, (RectangleEdge) null);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange((double) 2.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      double double0 = moduloAxis0.valueToJava2D(0.7330000000001746, rectangle2D_Double0, (RectangleEdge) null);
      assertFalse(moduloAxis0.isAutoRange());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("horizontalAlignment", range0);
      moduloAxis0.resizeRange(82.21630182402, 0.05);
      double double0 = moduloAxis0.valueToJava2D(90.57956035375857, (Rectangle2D) null, (RectangleEdge) null);
      assertEquals(0.6909867502108682, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      moduloAxis0.resizeRange(1005.89236, 0.13377999998920131);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      double double0 = moduloAxis0.java2DToValue(0.8662200000107987, rectangle2D0, rectangleEdge0);
      assertEquals(0.7675599999784026, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      // Undeclared exception!
      try { 
        moduloAxis0.autoAdjustRange();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      double double0 = moduloAxis0.getDisplayEnd();
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      double double0 = moduloAxis0.getDisplayStart();
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(270.0, double0, 0.01);
  }
}
