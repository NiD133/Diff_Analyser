/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 11:45:13 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class CollectionBag_ESTest extends CollectionBag_ESTest_scaffolding {

    // Constants for commonly used values
    private static final Integer VALUE_389 = 389;
    private static final Integer VALUE_5810 = 5810;
    private static final Integer VALUE_105 = 105;
    private static final Integer VALUE_NEG_300 = -300;
    private static final Integer VALUE_10 = 10;
    private static final Integer VALUE_1 = 1;
    private static final Integer VALUE_273 = 273;
    private static final Integer VALUE_512 = 512;
    private static final Integer VALUE_NEG_926 = -926;
    private static final Integer VALUE_977 = 977;
    private static final Integer VALUE_2616 = 2616;
    private static final Integer VALUE_4 = 4;
    private static final Integer VALUE_0 = 0;
    private static final Integer VALUE_2358 = 2358;
    private static final Integer VALUE_2221 = 2221;

    // Test Cases Grouped by Functionality

    /*------------------------------*
     * Tests for remove() method   *
     *------------------------------*/
    
    @Test(timeout = 4000)
    public void testRemoveElement_ShouldReturnTrue() throws Throwable {
        // Setup
        HashBag<Integer> bag = new HashBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(bag);
        bag.add(VALUE_389);
        
        // Execute
        boolean result = collectionBag.remove((Object) VALUE_389);
        
        // Verify
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testRemoveFromUnmodifiableBag_ShouldThrowException() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_NEG_300);
        SortedBag<Integer> unmodifiableBag = UnmodifiableSortedBag.unmodifiableSortedBag(treeBag);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(unmodifiableBag);
        
        // Execute & Verify
        try {
            collectionBag.remove(new Object());
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRemoveNull_ShouldThrowNullPointer() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute & Verify
        try {
            collectionBag.remove(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRemoveWrongType_ShouldThrowClassCast() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute & Verify
        try {
            collectionBag.remove((Object) treeBag);
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRemoveAbsentElement_ShouldReturnFalse() throws Throwable {
        // Setup
        LinkedList<Integer> list = new LinkedList<>();
        HashBag<Integer> bag = new HashBag<>(list);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(bag);
        SynchronizedBag<Integer> syncBag = new SynchronizedBag<>(bag, list);
        
        // Execute
        boolean result = collectionBag.remove(syncBag);
        
        // Verify
        assertFalse(result);
    }

    /*--------------------------------*
     * Tests for containsAll() method *
     *--------------------------------*/
    
    @Test(timeout = 4000)
    public void testContainsAll_ShouldReturnFalseWhenMissingElements() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        HashBag<Object> hashBag = new HashBag<>(treeBag);
        CollectionBag<Object> collectionBag = new CollectionBag<>(hashBag);
        treeBag.add(VALUE_5810);
        
        // Execute
        boolean result = collectionBag.containsAll(treeBag);
        
        // Verify
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testContainsAll_ShouldReturnTrueWhenAllPresent() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        HashBag<Object> hashBag = new HashBag<>(treeBag);
        CollectionBag<Object> collectionBag = new CollectionBag<>(hashBag);
        
        // Execute
        boolean result = collectionBag.containsAll(treeBag);
        
        // Verify
        assertTrue(result);
    }

    /*-------------------------------*
     * Tests for retainAll() method  *
     *-------------------------------*/
    
    @Test(timeout = 4000)
    public void testRetainAllWithModification_ShouldThrowConcurrentModification() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        collectionBag.add(VALUE_105, VALUE_105);
        
        // Execute & Verify
        try {
            collectionBag.retainAll(treeBag);
            fail("Expected ConcurrentModificationException");
        } catch (ConcurrentModificationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRetainAllOnUnmodifiableBag_ShouldThrowException() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_NEG_300);
        SortedBag<Integer> unmodifiableBag = UnmodifiableSortedBag.unmodifiableSortedBag(treeBag);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(unmodifiableBag);
        TreeSet<Integer> set = new TreeSet<>();
        
        // Execute & Verify
        try {
            collectionBag.retainAll(set);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRetainAllWithNullCollection_ShouldThrowNullPointer() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute & Verify
        try {
            collectionBag.retainAll(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRetainAll_ShouldRemoveNonMatchingElements() throws Throwable {
        // Setup
        LinkedList<Integer> list = new LinkedList<>();
        HashBag<Integer> bag = new HashBag<>(list);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(bag);
        Integer value = VALUE_2221;
        bag.add(value);
        
        // Execute
        boolean result = collectionBag.retainAll(list);
        
        // Verify
        assertTrue(result);
        assertFalse(bag.contains(value));
    }

    @Test(timeout = 4000)
    public void testRetainAll_ShouldReturnFalseWhenNoChanges() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        HashBag<Integer> hashBag = new HashBag<>(treeBag);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(hashBag);
        treeBag.add(VALUE_1);
        collectionBag.addAll(treeBag);
        
        // Execute
        boolean result = collectionBag.retainAll(treeBag);
        
        // Verify
        assertFalse(result);
    }

    /*-------------------------------*
     * Tests for removeAll() method  *
     *-------------------------------*/
    
    @Test(timeout = 4000)
    public void testRemoveAllWithModification_ShouldThrowConcurrentModification() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        collectionBag.add(VALUE_10, VALUE_10);
        
        // Execute & Verify
        try {
            collectionBag.removeAll(treeBag);
            fail("Expected ConcurrentModificationException");
        } catch (ConcurrentModificationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRemoveAllOnUnmodifiableBag_ShouldThrowException() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        treeBag.add(VALUE_1);
        HashBag<ComparatorPredicate.Criterion> emptyBag = new HashBag<>();
        Bag<ComparatorPredicate.Criterion> unmodifiableBag = UnmodifiableBag.unmodifiableBag(emptyBag);
        CollectionBag<ComparatorPredicate.Criterion> targetBag = new CollectionBag<>(unmodifiableBag);
        
        // Execute & Verify
        try {
            targetBag.removeAll(collectionBag);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testRemoveAllNullCollection_ShouldReturnFalse() throws Throwable {
        // Setup
        LinkedList<Integer> list = new LinkedList<>();
        HashBag<Integer> bag = new HashBag<>(list);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(bag);
        
        // Execute
        boolean result = collectionBag.removeAll(null);
        
        // Verify
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testRemoveAll_ShouldRemoveAllMatchingElements() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_2616);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        collectionBag.addAll(treeBag);
        HashBag<Object> targetBag = new HashBag<>(treeBag);
        CollectionBag<Object> targetCollectionBag = new CollectionBag<>(targetBag);
        
        // Execute
        boolean result = targetCollectionBag.removeAll(treeBag);
        
        // Verify
        assertTrue(result);
        assertEquals(2, treeBag.size());
    }

    @Test(timeout = 4000)
    public void testRemoveAll_ShouldReturnFalseWhenNoElementsRemoved() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        HashBag<ComparatorPredicate.Criterion> emptyBag = new HashBag<>();
        CollectionBag<ComparatorPredicate.Criterion> targetBag = new CollectionBag<>(emptyBag);
        
        // Execute
        boolean result = targetBag.removeAll(collectionBag);
        
        // Verify
        assertFalse(result);
    }

    /*----------------------------*
     * Tests for addAll() method  *
     *----------------------------*/
    
    @Test(timeout = 4000)
    public void testAddAllWithTransformer_ShouldThrowRuntimeException() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_NEG_926);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        TreeBag<Object> targetTreeBag = new TreeBag<>(collectionBag);
        HashMap<Object, Object> map = new HashMap<>();
        Transformer<Object, Object> transformer = MapTransformer.mapTransformer(map);
        Bag<Object> transformedBag = TransformedBag.transformingBag(targetTreeBag, transformer);
        SynchronizedBag<Object> syncBag = new SynchronizedBag<>(transformedBag, collectionBag);
        CollectionBag<Object> targetCollectionBag = new CollectionBag<>(syncBag);
        
        // Execute & Verify
        try {
            targetCollectionBag.addAll(targetTreeBag);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddAllWithPredicate_ShouldThrowIllegalArgument() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_977);
        UniquePredicate<Integer> uniquePredicate = new UniquePredicate<>();
        NullIsExceptionPredicate<Integer> predicate = new NullIsExceptionPredicate<>(uniquePredicate);
        PredicatedSortedBag<Integer> predicatedBag = PredicatedSortedBag.predicatedSortedBag(treeBag, predicate);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(predicatedBag);
        
        // Execute & Verify
        try {
            collectionBag.addAll(predicatedBag);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddAllNullCollection_ShouldThrowNullPointer() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute & Verify
        try {
            collectionBag.addAll(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddAll_ShouldReturnTrueWhenElementsAdded() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        treeBag.add(VALUE_2358);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        HashBag<Object> targetBag = new HashBag<>(treeBag);
        CollectionBag<Object> targetCollectionBag = new CollectionBag<>(targetBag);
        
        // Execute
        boolean result = targetCollectionBag.addAll(treeBag);
        
        // Verify
        assertTrue(result);
        assertEquals(4, targetBag.size());
    }

    @Test(timeout = 4000)
    public void testAddAll_ShouldReturnFalseWhenNoElementsAdded() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        HashBag<Integer> emptyBag = new HashBag<>(collectionBag);
        
        // Execute
        boolean result = collectionBag.addAll(emptyBag);
        
        // Verify
        assertFalse(result);
    }

    /*----------------------------*
     * Tests for add() method     *
     *----------------------------*/
    
    @Test(timeout = 4000)
    public void testAddElement_ShouldReturnTrue() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        HashBag<Integer> bag = new HashBag<>(treeBag);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(bag);
        
        // Execute
        boolean result = collectionBag.add(VALUE_0);
        
        // Verify
        assertTrue(result);
        assertTrue(collectionBag.contains(VALUE_0));
    }

    @Test(timeout = 4000)
    public void testAddToUnmodifiableBag_ShouldThrowException() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        SortedBag<Integer> unmodifiableBag = UnmodifiableSortedBag.unmodifiableSortedBag(treeBag);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(unmodifiableBag);
        
        // Execute & Verify
        try {
            collectionBag.add(VALUE_NEG_300);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddNull_ShouldThrowNullPointer() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute & Verify
        try {
            collectionBag.add(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddWithPredicate_ShouldThrowIllegalArgument() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        Integer value = VALUE_4;
        IdentityPredicate<Integer> predicate = new IdentityPredicate<>(value);
        PredicatedSortedBag<Integer> predicatedBag = new PredicatedSortedBag<>(treeBag, predicate);
        CollectionBag<Integer> collectionBag = new CollectionBag<>(predicatedBag);
        
        // Execute & Verify
        try {
            collectionBag.add(value);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testAddMultipleCopies_ShouldSucceed() throws Throwable {
        // Setup
        TreeBag<Integer> treeBag = new TreeBag<>();
        CollectionBag<Integer> collectionBag = new CollectionBag<>(treeBag);
        
        // Execute
        boolean result = collectionBag.add(VALUE_1, 5);
        
        // Verify
        assertTrue(result);
        assertEquals(5, collectionBag.getCount(VALUE_1));
    }

    /*--------------------------------*
     * Tests for factory method       *
     *--------------------------------*/
    
    @Test(timeout = 4000)
    public void testCollectionBagFactory_ShouldCreateEmptyBag() throws Throwable {
        // Setup
        HashBag<ComparatorPredicate.Criterion> bag = new HashBag<>();
        
        // Execute
        Bag<ComparatorPredicate.Criterion> result = CollectionBag.collectionBag(bag);
        
        // Verify
        assertEquals(0, result.size());
    }

    @Test(timeout = 4000)
    public void testCollectionBagFactoryWithNull_ShouldThrowNullPointer() throws Throwable {
        // Execute & Verify
        try {
            CollectionBag.collectionBag(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    /*--------------------------------*
     * Tests for constructor          *
     *--------------------------------*/
    
    @Test(timeout = 4000)
    public void testConstructorWithNull_ShouldThrowNullPointer() throws Throwable {
        // Execute & Verify
        try {
            new CollectionBag<>(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }
}