/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:15:45 GMT 2025
 */

package org.mockito.internal.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;
import org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class HashCodeAndEqualsSafeSet_ESTest extends HashCodeAndEqualsSafeSet_ESTest_scaffolding {

    // Tests for basic set operations
    @Test(timeout = 4000)
    public void setsCreatedFromNullIterableAndEmptyCollectionShouldBeEqual() {
        HashCodeAndEqualsSafeSet setFromNull = HashCodeAndEqualsSafeSet.of((Iterable<Object>) null);
        LinkedHashSet<Object> emptySet = new LinkedHashSet<>();
        HashCodeAndEqualsSafeSet setFromEmpty = HashCodeAndEqualsSafeSet.of((Iterable<Object>) emptySet);
        
        assertTrue(setFromEmpty.equals(setFromNull));
    }

    @Test(timeout = 4000)
    public void toArrayShouldReturnSameEmptyArrayWhenPassedEmptyArray() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Object[] emptyArray = new Object[0];
        
        Object[] result = set.toArray(emptyArray);
        assertSame(emptyArray, result);
    }

    @Test(timeout = 4000)
    public void toArrayShouldReturnArrayOfCorrectSizeAfterAddingElement() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new Object());
        
        Object[] array = set.toArray();
        assertEquals(1, array.length);
    }

    @Test(timeout = 4000)
    public void sizeShouldReflectNumberOfElementsAfterAddition() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new Object());
        
        assertEquals(1, set.size());
    }

    @Test(timeout = 4000)
    public void retainAllShouldRemoveElementsWhenPassedEmptyCollection() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Object element = new Object();
        set.add(element);
        Collection<HashCodeAndEqualsMockWrapper> emptyCollection = new ArrayDeque<>();
        
        assertTrue(set.retainAll(emptyCollection));
        assertTrue(set.isEmpty());
    }

    @Test(timeout = 4000)
    public void removeAllShouldSucceedWhenRemovingExistingElements() {
        Vector<Object> vector = new Vector<>();
        vector.add(null);
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of((Iterable<Object>) vector);
        
        assertTrue(set.removeAll(vector));
        assertTrue(set.isEmpty());
    }

    @Test(timeout = 4000)
    public void removeAllShouldReturnFalseWhenSetIsEmpty() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        assertFalse(set.removeAll(set));
    }

    @Test(timeout = 4000)
    public void removeShouldReturnTrueForExistingElement() {
        Object element = new Object();
        Object[] elements = { element };
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of(elements);
        
        assertTrue(set.remove(element));
        assertFalse(set.contains(element));
    }

    @Test(timeout = 4000)
    public void setCreatedFromEmptyArrayShouldBeEmpty() {
        Object[] emptyArray = new Object[0];
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of(emptyArray);
        
        assertEquals(0, set.size());
    }

    @Test(timeout = 4000)
    public void iteratorShouldBeNonNullForSetCreatedFromNullIterable() {
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of((Iterable<Object>) null);
        assertNotNull(set.iterator());
    }

    @Test(timeout = 4000)
    public void isEmptyShouldReturnFalseAfterAddingElement() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new Object());
        
        assertFalse(set.isEmpty());
    }

    @Test(timeout = 4000)
    public void containsAllShouldReturnTrueForEmptyCollection() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Collection<HashCodeAndEqualsMockWrapper> emptyCollection = new ArrayList<>();
        
        assertTrue(set.containsAll(emptyCollection));
    }

    @Test(timeout = 4000)
    public void containsAllShouldReturnFalseForNonEmptyCollectionWhenSetIsEmpty() {
        HashCodeAndEqualsSafeSet emptySet = HashCodeAndEqualsSafeSet.of((Iterable<Object>) null);
        Object[] nonEmptyArray = new Object[6];
        HashCodeAndEqualsSafeSet nonEmptySet = HashCodeAndEqualsSafeSet.of(nonEmptyArray);
        
        assertFalse(emptySet.containsAll(nonEmptySet));
    }

    @Test(timeout = 4000)
    public void containsShouldReturnTrueForExistingElement() {
        Object element = new Object();
        List<Object> list = List.of(element);
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of((Iterable<Object>) list);
        
        assertTrue(set.contains(element));
    }

    @Test(timeout = 4000)
    public void addAllShouldSucceedWhenAddingNullElement() {
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of((Iterable<Object>) null);
        Vector<Object> vectorWithNull = new Vector<>();
        vectorWithNull.add(null);
        
        assertTrue(set.addAll(vectorWithNull));
        assertTrue(set.contains(null));
    }

    @Test(timeout = 4000)
    public void addAllShouldReturnFalseWhenAddingEmptyCollection() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Collection<HashCodeAndEqualsMockWrapper> emptyCollection = new LinkedList<>();
        
        assertFalse(set.addAll(emptyCollection));
    }

    @Test(timeout = 4000)
    public void addShouldReturnFalseWhenAddingDuplicateElement() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Object element = new Object();
        
        assertTrue(set.add(element));
        assertFalse(set.add(element));
    }

    @Test(timeout = 4000)
    public void sizeOfEmptySetShouldBeZero() {
        assertEquals(0, new HashCodeAndEqualsSafeSet().size());
    }

    @Test(timeout = 4000)
    public void retainAllShouldReturnFalseWhenNoElementsRemoved() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Vector<Object> vectorWithNull = new Vector<>();
        vectorWithNull.add(null);
        
        assertFalse(set.retainAll(vectorWithNull));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseWhenComparedToNull() {
        assertFalse(new HashCodeAndEqualsSafeSet().equals(null));
    }

    @Test(timeout = 4000)
    public void clearShouldRemoveAllElements() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new Object());
        set.clear();
        
        assertEquals(0, set.size());
    }

    @Test(timeout = 4000)
    public void isEmptyShouldReturnTrueForSetCreatedFromNullIterable() {
        assertTrue(HashCodeAndEqualsSafeSet.of((Iterable<Object>) null).isEmpty());
    }

    @Test(timeout = 4000)
    public void toStringOfEmptySetShouldReturnEmptyBrackets() {
        assertEquals("[]", new HashCodeAndEqualsSafeSet().toString());
    }

    // Tests for special case handling
    @Test(timeout = 4000)
    public void removeIfShouldRemoveElementsMatchingPredicate() {
        Object[] elements = new Object[14]; // Contains nulls
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of(elements);
        Predicate<Object> isNullPredicate = Predicate.isEqual(null);
        
        assertTrue(set.removeIf(isNullPredicate));
        assertFalse(set.contains(null));
    }

    @Test(timeout = 4000)
    public void toArrayShouldHandleInsufficientCapacityByCreatingNewArray() {
        HashCodeAndEqualsSafeSet emptySet = new HashCodeAndEqualsSafeSet();
        Object[] smallArray = new Object[0];
        
        Vector<Object> vectorWithNull = new Vector<>();
        vectorWithNull.add(null);
        HashCodeAndEqualsSafeSet setWithNull = HashCodeAndEqualsSafeSet.of((Iterable<Object>) vectorWithNull);
        
        Object[] result = setWithNull.toArray(smallArray);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void removeShouldReturnFalseForNonExistentWrapper() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        Predicate<Object> predicate = Predicate.isEqual(set);
        HashCodeAndEqualsMockWrapper wrapper = HashCodeAndEqualsMockWrapper.of(predicate);
        
        assertFalse(set.remove(wrapper));
    }

    @Test(timeout = 4000)
    public void containsShouldReturnFalseForNonExistentElement() {
        assertFalse(new HashCodeAndEqualsSafeSet().contains("non-existent"));
    }

    @Test(timeout = 4000)
    public void hashCodeShouldNotThrowForSetCreatedFromNullIterable() {
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of((Iterable<Object>) null);
        set.hashCode(); // Should not throw
    }

    // Tests for exception scenarios
    @Test(timeout = 4000)
    public void toStringShouldThrowWhenSetContainsSelfWrapper() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new HashCodeAndEqualsMockWrapper(set));
        
        try {
            set.toString();
            fail("Expected IllegalStateException due to plugin initialization failure");
        } catch (IllegalStateException e) {
            assertTrue(e.getMessage().contains("Could not initialize plugin"));
        }
    }

    @Test(timeout = 4000)
    public void toArrayShouldThrowNPEWhenPassedNullArray() {
        try {
            new HashCodeAndEqualsSafeSet().toArray((HashCodeAndEqualsMockWrapper[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void retainAllShouldThrowIAEWhenPassedNullCollection() {
        try {
            new HashCodeAndEqualsSafeSet().retainAll(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("should not be null"));
        }
    }

    @Test(timeout = 4000)
    public void removeAllShouldThrowIAEWhenPassedNullCollection() {
        try {
            new HashCodeAndEqualsSafeSet().removeAll(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("should not be null"));
        }
    }

    @Test(timeout = 4000)
    public void ofShouldThrowNPEWhenPassedNullArray() {
        try {
            HashCodeAndEqualsSafeSet.of((Object[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void containsAllShouldThrowIAEWhenPassedNullCollection() {
        try {
            new HashCodeAndEqualsSafeSet().containsAll(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("should not be null"));
        }
    }

    @Test(timeout = 4000)
    public void addAllShouldThrowIAEWhenPassedNullCollection() {
        try {
            new HashCodeAndEqualsSafeSet().addAll(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("should not be null"));
        }
    }

    @Test(timeout = 4000)
    public void toArrayShouldThrowArrayStoreWhenPassedIncompatibleType() {
        HashCodeAndEqualsSafeSet set = new HashCodeAndEqualsSafeSet();
        set.add(new Object());
        HashCodeAndEqualsMockWrapper[] wrongTypeArray = new HashCodeAndEqualsMockWrapper[4];
        
        try {
            set.toArray(wrongTypeArray);
            fail("Expected ArrayStoreException");
        } catch (ArrayStoreException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void cloneShouldThrowCloneNotSupportedException() {
        Object[] elements = new Object[1];
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of(elements);
        
        try {
            set.clone();
            fail("Expected CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void toStringShouldThrowNPEWhenContainingUninitializedElement() {
        Object[] elements = new Object[2]; // Contains nulls
        HashCodeAndEqualsSafeSet set = HashCodeAndEqualsSafeSet.of(elements);
        
        try {
            set.toString();
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }
}