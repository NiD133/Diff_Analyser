/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:16:36 GMT 2025
 */

package org.apache.commons.lang3.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.function.Function;
import java.util.stream.Collector;
import org.apache.commons.lang3.stream.LangCollectors;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LangCollectors_ESTest extends LangCollectors_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testJoiningWithNullDelimiterAndPrefixAndCharBufferSuffix() throws Throwable {
        // Arrange: Create a CharBuffer with 5 null characters as suffix
        char[] emptyChars = new char[5];
        CharBuffer suffixBuffer = CharBuffer.wrap(emptyChars);
        
        // Act: Create collector with null delimiter, null prefix, and CharBuffer suffix
        Collector<Object, ?, String> collector = LangCollectors.joining(
            /* delimiter */ null, 
            /* prefix */ null, 
            /* suffix */ suffixBuffer
        );
        
        // Assert: Collector should be created successfully
        assertNotNull("Collector should not be null when created with null delimiter and prefix", collector);
    }

    @Test(timeout = 4000)
    public void testJoiningWithCharBufferParametersAndNullToStringFunction() throws Throwable {
        // Arrange: Create a single-character CharBuffer to use for all parameters
        char[] singleChar = new char[1];
        CharBuffer charBuffer = CharBuffer.wrap(singleChar);
        
        // Act: Create collector with CharBuffer for delimiter, prefix, suffix and null toString function
        Collector<Object, ?, String> collector = LangCollectors.joining(
            /* delimiter */ charBuffer, 
            /* prefix */ charBuffer, 
            /* suffix */ charBuffer, 
            /* toString */ null
        );
        
        // Assert: Collector should be created successfully even with null toString function
        assertNotNull("Collector should not be null when created with CharBuffer parameters and null toString", collector);
    }

    @Test(timeout = 4000)
    public void testJoiningWithNoParameters() throws Throwable {
        // Act: Create collector using the parameterless joining method
        Collector<Object, ?, String> collector = LangCollectors.joining();
        
        // Assert: Collector should be created successfully
        assertNotNull("Collector should not be null when created with no parameters", collector);
    }

    @Test(timeout = 4000)
    public void testCollectWithNullCollectorThrowsNullPointerException() throws Throwable {
        // Act & Assert: Calling collect with null collector should throw NullPointerException
        try { 
            LangCollectors.collect(
                /* collector */ null, 
                /* array */ (CharBuffer[]) null
            );
            fail("Expected NullPointerException when collector is null");
        } catch(NullPointerException e) {
            // Verify the exception comes from Objects utility (likely Objects.requireNonNull)
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void testJoiningWithNullDelimiter() throws Throwable {
        // Act: Create collector with null delimiter
        Collector<Object, ?, String> collector = LangCollectors.joining(/* delimiter */ null);
        
        // Assert: Collector should be created successfully with null delimiter
        assertNotNull("Collector should not be null when created with null delimiter", collector);
    }
}