/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:16:36 GMT 2025
 */

package org.apache.commons.lang3.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.function.Function;
import java.util.stream.Collector;
import org.apache.commons.lang3.stream.LangCollectors;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
) 
public class LangCollectors_ESTest extends LangCollectors_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testJoiningWithNullDelimiterPrefixAndValidSuffix_ReturnsNonNullCollector() {
        // Test joining with null delimiter and prefix, but valid suffix
        CharBuffer suffixBuffer = CharBuffer.wrap(new char[5]);
        Collector<Object, ?, String> collector = LangCollectors.joining(
            null,  // delimiter
            null,  // prefix
            suffixBuffer // suffix
        );
        assertNotNull("Collector should not be null", collector);
    }

    @Test(timeout = 4000)
    public void testJoiningWithNonNullDelimitersAndNullMapper_ReturnsNonNullCollector() {
        // Test joining with valid delimiters but null toString mapper
        CharBuffer delimiterBuffer = CharBuffer.wrap(new char[1]);
        Collector<Object, ?, String> collector = LangCollectors.joining(
            delimiterBuffer, // delimiter
            delimiterBuffer, // prefix
            delimiterBuffer, // suffix
            null // toString mapper
        );
        assertNotNull("Collector should not be null", collector);
    }

    @Test(timeout = 4000)
    public void testJoiningNoArguments_ReturnsNonNullCollector() {
        // Test parameterless joining method
        Collector<Object, ?, String> collector = LangCollectors.joining();
        assertNotNull("Collector should not be null", collector);
    }

    @Test(timeout = 4000)
    public void testCollectWithNullCollectorAndNullArray_ThrowsNullPointerException() {
        // Verify that collect throws NullPointerException when both collector and array are null
        try {
            LangCollectors.collect(null, (CharBuffer[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Verify the exception originates from Objects.requireNonNull
            verifyException("java.util.Objects", e);
        }
    }

    @Test(timeout = 4000)
    public void testJoiningWithNullDelimiter_ReturnsNonNullCollector() {
        // Test joining with only a null delimiter
        Collector<Object, ?, String> collector = LangCollectors.joining((CharSequence) null);
        assertNotNull("Collector should not be null", collector);
    }
}