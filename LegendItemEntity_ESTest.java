/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:14:54 GMT 2025
 */

package org.jfree.chart.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.time.chrono.HijrahEra;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.entity.LegendItemEntity;
import org.jfree.data.general.Dataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class LegendItemEntity_ESTest extends LegendItemEntity_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testConstructorThrowsExceptionForNullShape() {
        try {
            new LegendItemEntity<Integer>((Shape) null);
            fail("Expected IllegalArgumentException: Null 'area' argument");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'area' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testSetAndGetSeriesKey() {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<HijrahEra> entity = new LegendItemEntity<>(area);
        HijrahEra eraKey = HijrahEra.AH;
        
        // Execute
        entity.setSeriesKey(eraKey);
        HijrahEra retrievedKey = entity.getSeriesKey();
        
        // Verify
        assertSame("Series key should match what was set", eraKey, retrievedKey);
    }

    @Test(timeout = 4000)
    public void testSetAndGetDataset() {
        // Setup
        Rectangle area = new Rectangle();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        DefaultTableXYDataset dataset = new DefaultTableXYDataset(false);
        
        // Execute
        entity.setDataset(dataset);
        Dataset retrievedDataset = entity.getDataset();
        
        // Verify
        assertTrue("Dataset should notify changes", ((DefaultTableXYDataset) retrievedDataset).getNotify());
    }

    @Test(timeout = 4000)
    public void testGetSeriesKeyReturnsNullWhenNotSet() {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        
        // Execute
        Comparable<?> seriesKey = entity.getSeriesKey();
        
        // Verify
        assertNull("Series key should be null when not set", seriesKey);
    }

    @Test(timeout = 4000)
    public void testGetDatasetReturnsNullWhenNotSet() {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        
        // Execute
        Dataset dataset = entity.getDataset();
        
        // Verify
        assertNull("Dataset should be null when not set", dataset);
    }

    @Test(timeout = 4000)
    public void testEqualsReturnsTrueForSameInstance() {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        
        // Execute & Verify
        assertTrue("Equals should return true for same instance", entity.equals(entity));
    }

    @Test(timeout = 4000)
    public void testEqualsReturnsTrueForClonedObject() throws Exception {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        
        // Execute
        Object clone = entity.clone();
        
        // Verify
        assertTrue("Cloned object should be equal", entity.equals(clone));
    }

    @Test(timeout = 4000)
    public void testEqualsReturnsFalseForDifferentClass() {
        // Setup
        Line2D.Float line = new Line2D.Float();
        Rectangle2D area = line.getBounds2D();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        Object differentObject = new Object();
        
        // Execute & Verify
        assertFalse("Equals should return false for different class", entity.equals(differentObject));
    }

    @Test(timeout = 4000)
    public void testEqualsReturnsFalseWhenSeriesKeyDiffers() {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity1 = new LegendItemEntity<>(area);
        LegendItemEntity<Integer> entity2 = new LegendItemEntity<>(area);
        entity1.setSeriesKey(JLayeredPane.POPUP_LAYER);
        
        // Execute & Verify
        assertFalse("Entities with different series keys should not be equal", entity1.equals(entity2));
    }

    @Test(timeout = 4000)
    public void testEqualsReturnsFalseWhenDatasetDiffers() throws Exception {
        // Setup
        Rectangle2D.Double area = new Rectangle2D.Double();
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        Object clone = entity.clone();
        entity.setDataset(new XIntervalSeriesCollection<>());
        
        // Execute & Verify
        assertFalse("Entities with different datasets should not be equal", entity.equals(clone));
    }

    @Test(timeout = 4000)
    public void testToString() {
        // Setup
        Rectangle area = new Rectangle(0, 0, 0, 0);
        LegendItemEntity<Integer> entity = new LegendItemEntity<>(area);
        
        // Execute
        String result = entity.toString();
        
        // Verify
        assertEquals("LegendItemEntity: seriesKey=null, dataset=null", result);
    }
}