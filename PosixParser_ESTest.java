/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:28:13 GMT 2025
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      posixParser0.burstToken("", true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.flatten((Options) null, (String[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("j", "j", true, "j");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "-j";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("j", "org.apache.commons.cli.PosixParser", true, "j");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[9];
      stringArray0[2] = "-org.apache.commons.cli.PosixParser";
      posixParser0.flatten(options1, stringArray0, false);
      posixParser0.burstToken(";-", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "-j";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("j", "j", false, "j");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[11];
      stringArray0[5] = "--=<iy";
      String[] stringArray1 = posixParser0.flatten(options1, stringArray0, false);
      String[] stringArray2 = posixParser0.flatten(options1, stringArray1, true);
      assertEquals(3, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("j", "j", false, "j");
      Options options2 = options1.addOption("j", "--WS", false, "--WS");
      String[] stringArray0 = new String[12];
      stringArray0[10] = "--=<ibn";
      PosixParser posixParser0 = new PosixParser();
      try { 
        posixParser0.flatten(options2, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'j', '--WS')
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[37];
      stringArray0[19] = "--K";
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[9];
      stringArray0[5] = "--=<q;n";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = Locale.getISOCountries();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(252, stringArray2.length);
      assertEquals(251, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "-";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("j", "", true, "");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = Locale.getISOCountries();
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("--", true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("q", "", false, "q");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = Locale.getISOCountries();
      posixParser0.flatten(options1, stringArray0, false);
      posixParser0.burstToken("--", false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "-/C";
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, false);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("j", "", true, "j");
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = Locale.getISOCountries();
      posixParser0.flatten(options1, stringArray0, true);
      posixParser0.burstToken("$--", true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      // Undeclared exception!
      try { 
        posixParser0.burstToken(";-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.PosixParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      PosixParser posixParser0 = new PosixParser();
      String[] stringArray0 = new String[9];
      posixParser0.flatten(options0, stringArray0, false);
      posixParser0.burstToken(";-", true);
  }
}
