/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:28:13 GMT 2025
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PosixParser_ESTest extends PosixParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void burstToken_WithEmptyString_ShouldNotThrow() throws Throwable {
        // Test that bursting an empty token doesn't cause exceptions
        PosixParser parser = new PosixParser();
        parser.burstToken("", true);
    }

    @Test(timeout = 4000)
    public void flatten_WithNullArguments_ThrowsNullPointerException() {
        // Test null safety
        PosixParser parser = new PosixParser();
        try {
            parser.flatten(null, null, true);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void flatten_WithRequiredShortOption_ReturnsCorrectTokens() {
        // Test handling of required short option
        Options options = new Options();
        options.addRequiredOption("j", "j", true, "j");
        PosixParser parser = new PosixParser();
        
        String[] input = new String[5];
        input[1] = "-j";  // Valid short option
        
        String[] result = parser.flatten(options, input, true);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithLongOptionStartingWithSingleDash_ProcessesCorrectly() {
        // Test handling of long option formatted with single dash
        Options options = new Options();
        options.addRequiredOption("j", "org.apache.commons.cli.PosixParser", true, "j");
        PosixParser parser = new PosixParser();
        
        String[] input = new String[9];
        input[2] = "-org.apache.commons.cli.PosixParser";  // Invalid long option format
        
        parser.flatten(options, input, false);
        // Additional token burst test
        parser.burstToken(";-", true);
    }

    @Test(timeout = 4000)
    public void flatten_WithShortOption_ReturnsAllTokens() {
        // Test that short option doesn't stop token processing
        Options options = new Options();
        PosixParser parser = new PosixParser();
        
        String[] input = new String[5];
        input[1] = "-j";  // Short option without required config
        
        String[] result = parser.flatten(options, input, true);
        assertEquals(4, result.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithDoubleDashArgument_ProcessesCorrectly() {
        // Test handling of '--=' argument format
        Options options = new Options();
        options.addRequiredOption("j", "j", false, "j");
        PosixParser parser = new PosixParser();
        
        String[] input = new String[11];
        input[5] = "--=<iy";  // Special argument format
        
        String[] result = parser.flatten(options, input, false);
        String[] finalResult = parser.flatten(options, result, true);
        assertEquals(3, finalResult.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithAmbiguousDoubleDashOption_ThrowsException() {
        // Test ambiguous option detection
        Options options = new Options();
        options.addRequiredOption("j", "j", false, "j")
               .addOption("j", "--WS", false, "--WS");
        PosixParser parser = new PosixParser();
        
        String[] input = new String[12];
        input[10] = "--=<ibn";  // Ambiguous option prefix
        
        try {
            parser.flatten(options, input, false);
            fail("Expected Exception for ambiguous option");
        } catch (Exception e) {
            // Verify exception message
            assertTrue(e.getMessage().contains("Ambiguous option: '--'"));
        }
    }

    @Test(timeout = 4000)
    public void flatten_WithLongOption_ProcessesAsSingleToken() {
        // Test long option handling
        Options options = new Options();
        PosixParser parser = new PosixParser();
        
        String[] input = new String[37];
        input[19] = "--K";  // Valid long option
        
        String[] result = parser.flatten(options, input, false);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithInvalidDoubleDashArgument_ProcessesAsSingleToken() {
        // Test invalid double-dash argument
        Options options = new Options();
        PosixParser parser = new PosixParser();
        
        String[] input = new String[9];
        input[5] = "--=<q;n";  // Non-standard argument
        
        String[] result = parser.flatten(options, input, false);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithAllCountryCodes_ProcessesCorrectly() {
        // Test processing large input array
        Options options = new Options();
        PosixParser parser = new PosixParser();
        
        // Using real ISO country codes as input
        String[] countries = Locale.getISOCountries();
        
        String[] firstPass = parser.flatten(options, countries, true);
        String[] secondPass = parser.flatten(options, firstPass, true);
        
        assertEquals(252, secondPass.length);
        assertEquals(251, firstPass.length);
    }

    @Test(timeout = 4000)
    public void flatten_WithSingleDashArgument_ProcessesAsSingleToken() {
        // Test single dash argument
        Options options = new Options();
        PosixParser parser = new PosixParser();
        
        String[] input = new String[5];
        input[4] = "-";  // Single dash token
        
        String[] result = parser.flatten(options, input, true);
        assertEquals(1, result.length);
    }

    @Test(timeout = 4000)
    public void burstToken_WithSpecialPrefix_ThrowsNullPointerException() {
        // Test bursting of malformed token
        PosixParser parser = new PosixParser();
        try {
            parser.burstToken("$--", true);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }
}