/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 20:23:00 GMT 2025
 */

package org.apache.commons.codec.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.net.BCodec;
import org.apache.commons.codec.net.QCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

/**
 * Test suite for RFC1522Codec functionality using BCodec and QCodec implementations.
 * Tests cover encoding/decoding operations, null handling, error conditions, and RFC 1522 compliance.
 */
@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RFC1522Codec_ESTest extends RFC1522Codec_ESTest_scaffolding {

  // ========== NULL INPUT HANDLING TESTS ==========
  
  @Test(timeout = 4000)
  public void testEncodeText_WithNullInput_ReturnsNull() throws Throwable {
      QCodec qCodec = new QCodec();
      Charset defaultCharset = Charset.defaultCharset();
      
      String result = qCodec.encodeText(null, defaultCharset);
      
      assertNull("Encoding null text should return null", result);
  }

  @Test(timeout = 4000)
  public void testEncodeText_WithNullInputAndStringCharset_ReturnsNull() throws Throwable {
      BCodec bCodec = new BCodec();
      
      String result = bCodec.encodeText(null, "RFC 1522 violation: malformed encoded content");
      
      assertNull("Encoding null text should return null", result);
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithNullInput_ReturnsNull() throws Throwable {
      QCodec qCodec = new QCodec();
      
      String result = qCodec.decodeText(null);
      
      assertNull("Decoding null text should return null", result);
  }

  // ========== SUCCESSFUL ENCODING/DECODING TESTS ==========
  
  @Test(timeout = 4000)
  public void testEncodeText_WithValidInput_ReturnsEncodedString() throws Throwable {
      QCodec qCodec = new QCodec();
      Charset charset = qCodec.getCharset();
      CodecPolicy strictPolicy = CodecPolicy.STRICT;
      BCodec bCodec = new BCodec(charset, strictPolicy);
      
      String textToEncode = "=?=?=?UTF-8?Q?Q?=";
      String result = bCodec.encodeText(textToEncode, charset);
      
      assertNotNull("Encoded result should not be null", result);
      assertEquals("Encoded text should match expected RFC 1522 format", 
                   "=?UTF-8?B?PT85Pz0/VVRGLTg/UT9RPz0=?=", result);
  }

  @Test(timeout = 4000)
  public void testEncodeText_WithSimpleString_ReturnsCorrectEncoding() throws Throwable {
      BCodec bCodec = new BCodec();
      String simpleText = "@~_=I";
      
      String result = bCodec.encodeText(simpleText, "UTF-8");
      
      assertNotNull("Encoded result should not be null", result);
      assertEquals("Simple text should be correctly encoded", 
                   "=?UTF-8?B?QH5fPUk=?=", result);
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithValidEncodedString_ReturnsDecodedText() throws Throwable {
      QCodec qCodec = new QCodec();
      Charset charset = qCodec.getCharset();
      CodecPolicy strictPolicy = CodecPolicy.STRICT;
      BCodec bCodec = new BCodec(charset, strictPolicy);
      
      String encodedText = "=?UTF-8?B?PT9eLT89Pz0=?=";
      String result = bCodec.decodeText(encodedText);
      
      assertEquals("Decoded text should match original", "=?^-?=?=", result);
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithEmptyEncodedContent_ReturnsEmptyString() throws Throwable {
      BCodec bCodec = new BCodec();
      String encodedEmptyText = "=?UTF-8?B??=";
      
      String result = bCodec.decodeText(encodedEmptyText);
      
      assertEquals("Empty encoded content should decode to empty string", "", result);
  }

  // ========== CHARSET ERROR HANDLING TESTS ==========
  
  @Test(timeout = 4000)
  public void testEncodeText_WithNullCharset_ThrowsNullPointerException() throws Throwable {
      QCodec qCodec = new QCodec();
      
      try { 
        qCodec.encodeText("{i", (Charset) null);
        fail("Should throw NullPointerException for null charset");
      } catch(NullPointerException e) {
        // Expected exception
      }
  }

  @Test(timeout = 4000)
  public void testEncodeText_WithUnsupportedCharsetName_ThrowsUnsupportedCharsetException() throws Throwable {
      BCodec bCodec = new BCodec();
      String invalidCharsetName = "org.apache.commons.codec.net.RFC1522Codec";
      
      try { 
        bCodec.encodeText("test text", invalidCharsetName);
        fail("Should throw UnsupportedCharsetException for invalid charset name");
      } catch(UnsupportedCharsetException e) {
        verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void testEncodeText_WithIllegalCharsetName_ThrowsIllegalCharsetNameException() throws Throwable {
      BCodec bCodec = new BCodec();
      String illegalCharsetName = "This codec cannot decode ";
      
      try { 
        bCodec.encodeText("test text", illegalCharsetName);
        fail("Should throw IllegalCharsetNameException for illegal charset name");
      } catch(IllegalCharsetNameException e) {
        verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void testEncodeText_WithNullCharsetName_ThrowsIllegalArgumentException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.encodeText("0T5`BTkU*|f-hr", (String) null);
        fail("Should throw IllegalArgumentException for null charset name");
      } catch(IllegalArgumentException e) {
        // Expected exception
      }
  }

  // ========== RFC 1522 VIOLATION TESTS ==========
  
  @Test(timeout = 4000)
  public void testDecodeText_WithMalformedInput_ThrowsStringIndexOutOfBoundsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?=");
        fail("Should throw exception for malformed RFC 1522 input");
      } catch(StringIndexOutOfBoundsException e) {
        // Expected exception for malformed input
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithUnsupportedCharset_ThrowsUnsupportedEncodingException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?TF-?B??=?=");
        fail("Should throw UnsupportedEncodingException for unsupported charset");
      } catch(UnsupportedEncodingException e) {
        // Expected exception
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithWrongEncodingType_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?UTF-8?Q?Q?=?=");
        fail("BCodec should not be able to decode Q-encoded content");
      } catch(Exception e) {
        assertEquals("Should indicate codec mismatch", 
                     "This codec cannot decode Q encoded content", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithMissingEncodingToken_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?=?SRq9'.C?=");
        fail("Should throw exception when encoding token is missing");
      } catch(Exception e) {
        assertEquals("Should indicate missing encoding token", 
                     "RFC 1522 violation: encoding token not found", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithMissingCharset_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=??-?=");
        fail("Should throw exception when charset is not specified");
      } catch(Exception e) {
        assertEquals("Should indicate missing charset", 
                     "RFC 1522 violation: charset not specified", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithMissingCharsetToken_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?^-?=");
        fail("Should throw exception when charset token is not found");
      } catch(Exception e) {
        assertEquals("Should indicate missing charset token", 
                     "RFC 1522 violation: charset token not found", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithMalformedEncodedContent_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("=?=?=?ZCg05nk5fYK>>");
        fail("Should throw exception for malformed encoded content");
      } catch(Exception e) {
        assertEquals("Should indicate malformed content", 
                     "RFC 1522 violation: malformed encoded content", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testDecodeText_WithEmptyString_ThrowsException() throws Throwable {
      BCodec bCodec = new BCodec();
      
      try { 
        bCodec.decodeText("");
        fail("Should throw exception for empty input string");
      } catch(Exception e) {
        assertEquals("Should indicate malformed content for empty string", 
                     "RFC 1522 violation: malformed encoded content", e.getMessage());
      }
  }

  // ========== UTILITY METHOD TESTS ==========
  
  @Test(timeout = 4000)
  public void testGetDefaultCharset_ReturnsUTF8() throws Throwable {
      BCodec bCodec = new BCodec();
      
      String defaultCharset = bCodec.getDefaultCharset();
      
      assertEquals("Default charset should be UTF-8", "UTF-8", defaultCharset);
  }
}