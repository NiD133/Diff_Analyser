/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:50 GMT 2025
 */

package org.apache.commons.io.input.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.input.buffer.CircularByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CircularByteBuffer_ESTest extends CircularByteBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 1, 104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The supplied byte array contains only 4 bytes, but offset, and length would require 104
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (int) (byte)3, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Currently, there are only 0in the buffer, not 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      circularByteBuffer0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)0);
      circularByteBuffer0.add((byte)0);
      byte byte0 = circularByteBuffer0.read();
      assertTrue(circularByteBuffer0.hasBytes());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, (byte)25);
      assertFalse(boolean0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[2];
      circularByteBuffer0.add((byte)0);
      circularByteBuffer0.read();
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, 1);
      assertFalse(circularByteBuffer0.hasBytes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (byte)0, (-3297));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      boolean boolean0 = circularByteBuffer0.hasSpace(1024);
      assertTrue(boolean0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)0);
      int int0 = circularByteBuffer0.getSpace();
      assertEquals(1, circularByteBuffer0.getCurrentNumberOfBytes());
      assertEquals(8191, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 1886, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 1886
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 0
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte) (-31));
      byte byte0 = circularByteBuffer0.read();
      assertEquals(8192, circularByteBuffer0.getSpace());
      assertEquals((byte) (-31), byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      int int0 = circularByteBuffer0.getSpace();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)0);
      int int0 = circularByteBuffer0.getCurrentNumberOfBytes();
      assertEquals(8191, circularByteBuffer0.getSpace());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.read((byte[]) null, 30, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // targetBuffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek((byte[]) null, 1254, 1254);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(978);
      // Undeclared exception!
      try { 
        circularByteBuffer0.add((byte[]) null, 978, 978);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Buffer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, (int) (byte)0, (int) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = null;
      try {
        circularByteBuffer0 = new CircularByteBuffer((-21));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)0);
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 0, 193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal length: 193
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 2, (-65));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal length: -65
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (int) (byte)7, (int) (byte)7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 7
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, 2, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Currently, there are only 0in the buffer, not 2
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        circularByteBuffer0.read(byteArray0, (-3129), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: -3129
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.read();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No bytes available.
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, 2, 2);
      assertEquals(2, circularByteBuffer0.getSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      circularByteBuffer0.add((byte)105);
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, 2, 2);
      assertEquals(1, circularByteBuffer0.getSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)47);
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, (byte)0);
      assertEquals(1, circularByteBuffer0.getCurrentNumberOfBytes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 2, 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal length: 255
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (byte)0, (-2328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal length: -2328
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: 7
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = circularByteBuffer0.peek(byteArray0, (byte)0, (byte)0);
      assertEquals(8192, circularByteBuffer0.getSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.peek(byteArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: -1
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      boolean boolean0 = circularByteBuffer0.hasSpace(0);
      assertTrue(boolean0);
      assertFalse(circularByteBuffer0.hasSpace());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      boolean boolean0 = circularByteBuffer0.hasSpace(Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      boolean boolean0 = circularByteBuffer0.hasSpace();
      assertEquals(8192, circularByteBuffer0.getSpace());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(0);
      boolean boolean0 = circularByteBuffer0.hasSpace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      boolean boolean0 = circularByteBuffer0.hasBytes();
      assertEquals(2, circularByteBuffer0.getSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      circularByteBuffer0.add(byteArray0, 2, 2);
      assertFalse(circularByteBuffer0.hasSpace());
      
      circularByteBuffer0.read(byteArray0, 2, 2);
      assertEquals(0, circularByteBuffer0.getCurrentNumberOfBytes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer(2);
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, 2, 8192);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No space available
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, (int) (byte)0, (-2101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal length: -2101
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      byte[] byteArray0 = new byte[8];
      circularByteBuffer0.add(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(8192, circularByteBuffer0.getSpace());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      // Undeclared exception!
      try { 
        circularByteBuffer0.add(byteArray0, (int) (byte) (-4), (int) (byte) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal offset: -4
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)1);
      circularByteBuffer0.add((byte)1);
      assertEquals(0, circularByteBuffer0.getSpace());
      
      byte byte0 = circularByteBuffer0.read();
      assertEquals(1, circularByteBuffer0.getSpace());
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)0);
      // Undeclared exception!
      try { 
        circularByteBuffer0.add((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No space available
         //
         verifyException("org.apache.commons.io.input.buffer.CircularByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.add((byte)0);
      boolean boolean0 = circularByteBuffer0.hasBytes();
      assertEquals(1, circularByteBuffer0.getCurrentNumberOfBytes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer((byte)0);
      int int0 = circularByteBuffer0.getCurrentNumberOfBytes();
      assertFalse(circularByteBuffer0.hasSpace());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CircularByteBuffer circularByteBuffer0 = new CircularByteBuffer();
      circularByteBuffer0.clear();
      assertEquals(8192, circularByteBuffer0.getSpace());
  }
}
