/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:50 GMT 2025
 */
package org.apache.commons.io.input.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.io.input.buffer.CircularByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
)
public class CircularByteBuffer_ESTest extends CircularByteBuffer_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000, expected = NegativeArraySizeException.class)
    public void constructor_withNegativeSize_throwsException() {
        new CircularByteBuffer(-21);
    }

    @Test(timeout = 4000)
    public void constructor_defaultSize_creates8192Capacity() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void constructor_zeroSize_createsEmptyBuffer() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        assertEquals(0, buffer.getSpace());
    }

    // Add Method Tests
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void add_nullBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(978);
        buffer.add(null, 978, 978);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void add_negativeOffset_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[16];
        buffer.add(data, -4, -4);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void add_offsetBeyondArrayLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        byte[] data = new byte[3];
        buffer.add(data, 1886, 0);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void add_negativeLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[9];
        buffer.add(data, 0, -2101);
    }

    @Test(timeout = 4000, expected = ArrayIndexOutOfBoundsException.class)
    public void add_lengthBeyondArrayLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[7];
        buffer.add(data, 0, 9);
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void add_byteToFullBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        buffer.add((byte) 0);
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void add_dataExceedingSpace_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        byte[] data = new byte[22];
        buffer.add(data, 2, 8192);
    }

    @Test(timeout = 4000)
    public void add_zeroLength_doesNothing() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[8];
        buffer.add(data, 0, 0);
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void addThenRead_byteBufferSize1_worksCorrectly() {
        CircularByteBuffer buffer = new CircularByteBuffer(1);
        buffer.add((byte) 1);
        assertEquals(0, buffer.getSpace());
        byte result = buffer.read();
        assertEquals(1, buffer.getSpace());
        assertEquals((byte) 1, result);
    }

    // Read Method Tests
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void read_nullTarget_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.read(null, 30, 30);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void read_negativeOffset_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] target = new byte[4];
        buffer.read(target, -3129, 1);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void read_offsetBeyondArrayLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] target = new byte[1];
        buffer.read(target, 7, 7);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void read_negativeLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] target = new byte[16];
        buffer.read(target, 2, -65);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void read_lengthBeyondArrayCapacity_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        byte[] target = new byte[2];
        buffer.read(target, 0, 193);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void read_insufficientArrayLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] target = new byte[4];
        buffer.read(target, 1, 104);
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void read_notEnoughBytesInBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        byte[] target = new byte[22];
        buffer.read(target, 2, 2);
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void read_emptyBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.read();
    }

    @Test(timeout = 4000)
    public void read_zeroLength_doesNothing() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] target = new byte[1];
        buffer.read(target, 0, 0);
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void read_afterAddingByte_returnsCorrectValue() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.add((byte) -31);
        byte result = buffer.read();
        assertEquals((byte) -31, result);
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void read_afterAddingTwoBytes_returnsFirstByte() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.add((byte) 0);
        buffer.add((byte) 0);
        byte result = buffer.read();
        assertEquals((byte) 0, result);
        assertTrue(buffer.hasBytes());
    }

    @Test(timeout = 4000)
    public void addThenRead_twoBytes_bufferEmpties() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        byte[] data = new byte[22];
        buffer.add(data, 2, 2);
        assertFalse(buffer.hasSpace());
        buffer.read(data, 2, 2);
        assertEquals(0, buffer.getCurrentNumberOfBytes());
    }

    // Peek Method Tests
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void peek_nullBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.peek(null, 1254, 1254);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void peek_negativeOffset_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[1];
        buffer.peek(data, -1, -1);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void peek_offsetBeyondArrayLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[4];
        buffer.peek(data, 7, 7);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void peek_negativeLength_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[7];
        buffer.peek(data, 0, -2328);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void peek_lengthExceedsBufferCapacity_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        byte[] data = new byte[15];
        buffer.peek(data, 2, 255);
    }

    @Test(timeout = 4000, expected = ArrayIndexOutOfBoundsException.class)
    public void peek_validBufferButOffsetLengthBeyondBuffer_throwsException() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[22];
        buffer.peek(data, 16, 16);
    }

    @Test(timeout = 4000)
    public void peek_lengthBeyondBuffer_returnsFalse() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[7];
        boolean result = buffer.peek(data, 0, 25);
        assertFalse(result);
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void peek_bufferWithOneByte_peekTwoBytes_returnsFalse() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        buffer.add((byte) 105);
        byte[] data = new byte[16];
        boolean result = buffer.peek(data, 2, 2);
        assertFalse(result);
        assertEquals(1, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void peek_emptyBufferWithOffsetTwoLengthTwo_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        byte[] data = new byte[16];
        boolean result = buffer.peek(data, 2, 2);
        assertTrue(result);
        assertEquals(2, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void peek_zeroLengthOnEmptyBuffer_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        byte[] data = new byte[2];
        boolean result = buffer.peek(data, 0, 0);
        assertTrue(result);
        assertEquals(8192, buffer.getSpace());
    }

    // Space and Byte Count Tests
    @Test(timeout = 4000)
    public void getSpace_afterAddingOneByte_returns8191() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.add((byte) 0);
        int space = buffer.getSpace();
        assertEquals(8191, space);
        assertEquals(1, buffer.getCurrentNumberOfBytes());
    }

    @Test(timeout = 4000)
    public void getCurrentNumberOfBytes_newBuffer_returnsZero() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        int count = buffer.getCurrentNumberOfBytes();
        assertEquals(0, count);
        assertFalse(buffer.hasSpace());
    }

    @Test(timeout = 4000)
    public void getCurrentNumberOfBytes_afterAddingOne_returns1() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.add((byte) 0);
        int count = buffer.getCurrentNumberOfBytes();
        assertEquals(1, count);
        assertEquals(8191, buffer.getSpace());
    }

    // hasSpace() Tests
    @Test(timeout = 4000)
    public void hasSpace_defaultBuffer_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        assertTrue(buffer.hasSpace());
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void hasSpace_bufferSize0_returnsFalse() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        assertFalse(buffer.hasSpace());
    }

    @Test(timeout = 4000)
    public void hasSpace_with1024OnNewBuffer_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        assertTrue(buffer.hasSpace(1024));
        assertEquals(8192, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void hasSpace_zeroOnBufferSize0_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer(0);
        assertTrue(buffer.hasSpace(0));
        assertFalse(buffer.hasSpace());
    }

    @Test(timeout = 4000)
    public void hasSpace_maxValueOnDefaultBuffer_returnsFalse() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        assertFalse(buffer.hasSpace(Integer.MAX_VALUE));
        assertEquals(8192, buffer.getSpace());
    }

    // hasBytes() Tests
    @Test(timeout = 4000)
    public void hasBytes_newBuffer_returnsFalse() {
        CircularByteBuffer buffer = new CircularByteBuffer(2);
        assertFalse(buffer.hasBytes());
        assertEquals(2, buffer.getSpace());
    }

    @Test(timeout = 4000)
    public void hasBytes_afterAddingOne_returnsTrue() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.add((byte) 0);
        assertTrue(buffer.hasBytes());
        assertEquals(1, buffer.getCurrentNumberOfBytes());
    }

    // Clear Test
    @Test(timeout = 4000)
    public void clear_resetsBuffer() {
        CircularByteBuffer buffer = new CircularByteBuffer();
        buffer.clear();
        assertEquals(8192, buffer.getSpace());
    }
}