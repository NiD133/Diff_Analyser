/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:18:39 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class Weeks_ESTest extends Weeks_ESTest_scaffolding {

    //-------------------------- Comparison Tests --------------------------
    
    @Test(timeout = 4000)
    public void testIsLessThanWhenTwoIsGreaterThanZeroWeeks() {
        Minutes minutes = Minutes.ZERO;
        Weeks twoWeeks = Weeks.TWO;
        Weeks zeroWeeks = minutes.toStandardWeeks();
        assertFalse(twoWeeks.isLessThan(zeroWeeks));
        assertEquals(0, zeroWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testIsLessThanWhenZeroWeeksComparedToNull() {
        Minutes minutes = Minutes.THREE;
        Seconds seconds = minutes.toStandardSeconds();
        Weeks zeroWeeks = seconds.toStandardWeeks();
        assertFalse(zeroWeeks.isLessThan(null));
        assertEquals(0, zeroWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testIsLessThanWhenMinValueComparedToNull() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        assertTrue(minWeeks.isLessThan(null));
    }

    @Test(timeout = 4000)
    public void testIsLessThanWhenThreeComparedToNull() {
        Weeks threeWeeks = Weeks.THREE;
        assertFalse(threeWeeks.isLessThan(null));
    }

    @Test(timeout = 4000)
    public void testIsLessThanWhenZeroComparedToItself() {
        Weeks zeroWeeks = Weeks.standardWeeksIn((ReadablePeriod) null);
        assertFalse(zeroWeeks.isLessThan(zeroWeeks));
        assertEquals(0, zeroWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWhenZeroComparedToTwo() {
        Weeks zeroWeeks = Weeks.standardWeeksIn((ReadablePeriod) null);
        Weeks twoWeeks = Weeks.TWO;
        assertFalse(zeroWeeks.isGreaterThan(twoWeeks));
        assertEquals(0, zeroWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWhenMinValueComparedToNull() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        assertFalse(minWeeks.isGreaterThan(null));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWhenThreeComparedToNull() {
        Weeks threeWeeks = Weeks.THREE;
        assertTrue(threeWeeks.isGreaterThan(null));
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWhenLargeValueComparedToItself() {
        Weeks largeWeeks = Weeks.weeks(317351877);
        assertFalse(largeWeeks.isGreaterThan(largeWeeks));
        assertEquals(317351877, largeWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testIsGreaterThanWhenLargeValueComparedToMinValue() {
        Weeks largeWeeks = Weeks.weeks(317351877);
        Weeks minWeeks = Weeks.MIN_VALUE;
        assertTrue(largeWeeks.isGreaterThan(minWeeks));
        assertEquals(317351877, largeWeeks.getWeeks());
    }

    //-------------------------- Conversion Tests --------------------------
    
    @Test(timeout = 4000)
    public void testToStandardSecondsWithNegativeWeeks() {
        Weeks weeks = Weeks.weeks(-2820);
        Seconds seconds = weeks.toStandardSeconds();
        assertEquals(-1705536000, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testParseWeeksNullStringToMinutes() {
        Weeks weeks = Weeks.parseWeeks((String) null);
        Minutes minutes = weeks.toStandardMinutes();
        assertEquals(1, minutes.size());
    }

    @Test(timeout = 4000)
    public void testOneWeekToStandardMinutes() {
        Weeks oneWeek = Weeks.ONE;
        Minutes minutes = oneWeek.toStandardMinutes();
        assertEquals(10080, minutes.getMinutes());
    }

    @Test(timeout = 4000)
    public void testWeeksInNullIntervalMinusPositiveToMinutes() {
        Weeks weeks = Weeks.weeksIn((ReadableInterval) null);
        Weeks result = weeks.minus(3765);
        Minutes minutes = result.toStandardMinutes();
        assertEquals(-37951200, minutes.getMinutes());
    }

    @Test(timeout = 4000)
    public void testZeroWeeksToStandardHours() {
        Weeks zeroWeeks = Weeks.ZERO;
        Hours hours = zeroWeeks.toStandardHours();
        assertEquals(0, hours.getHours());
    }

    @Test(timeout = 4000)
    public void testMaxSecondsToStandardWeeksAndHours() {
        Seconds maxSeconds = Seconds.MAX_VALUE;
        Weeks weeks = maxSeconds.toStandardWeeks();
        Hours hours = weeks.toStandardHours();
        assertEquals(596400, hours.getHours());
    }

    @Test(timeout = 4000)
    public void testMinusThreeWeeksFromZeroToStandardHours() {
        Weeks zeroWeeks = Weeks.ZERO;
        Weeks threeWeeks = Weeks.THREE;
        Weeks result = zeroWeeks.minus(threeWeeks);
        Hours hours = result.toStandardHours();
        assertEquals(-504, hours.getHours());
    }

    @Test(timeout = 4000)
    public void testTwoWeeksToStandardDuration() {
        Weeks twoWeeks = Weeks.TWO;
        Duration duration = twoWeeks.toStandardDuration();
        assertEquals(1209600000L, duration.getMillis());
    }

    @Test(timeout = 4000)
    public void testWeeksInNullIntervalToStandardDays() {
        Weeks weeks = Weeks.weeksIn((ReadableInterval) null);
        Days days = weeks.toStandardDays();
        assertEquals(1, days.size());
    }

    @Test(timeout = 4000)
    public void testThreeWeeksToStandardDays() {
        Weeks threeWeeks = Weeks.THREE;
        Days days = threeWeeks.toStandardDays();
        assertEquals(21, days.getDays());
    }

    @Test(timeout = 4000)
    public void testOneWeekToStandardSeconds() {
        Weeks zeroWeeks = Weeks.ZERO;
        Seconds seconds = zeroWeeks.ONE.toStandardSeconds();
        Weeks weeks = seconds.toStandardWeeks();
        assertEquals(1, weeks.getWeeks());
        assertEquals(604800, seconds.getSeconds());
    }

    @Test(timeout = 4000)
    public void testZeroWeeksToStandardSeconds() {
        Weeks zeroWeeks = Weeks.standardWeeksIn((ReadablePeriod) null);
        Seconds seconds = zeroWeeks.toStandardSeconds();
        assertEquals(0, seconds.getSeconds());
    }

    //-------------------------- Arithmetic Operation Tests --------------------------
    
    @Test(timeout = 4000)
    public void testMaxValuePlusMinValue() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        Weeks result = minWeeks.MAX_VALUE.plus(minWeeks);
        assertEquals(-1, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMinValuePlusFour() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        Weeks result = minWeeks.plus(4);
        assertEquals(-2147483644, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testZeroWeeksNegated() {
        Weeks zeroWeeks = Weeks.ZERO;
        Weeks result = zeroWeeks.negated();
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testNegativeWeeksNegated() {
        Weeks weeks = Weeks.weeks(-2490);
        weeks.negated(); // Should not change original
        assertEquals(-2490, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testParseWeeksNullStringMultipliedByNegative() {
        Weeks weeks = Weeks.parseWeeks((String) null);
        Weeks result = weeks.multipliedBy(-1060);
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testOneWeekMultipliedByLargeNumber() {
        Weeks oneWeek = Weeks.ONE;
        Weeks result = oneWeek.multipliedBy(604800);
        assertEquals(604800, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testThreeWeeksMultipliedByNegative() {
        Weeks threeWeeks = Weeks.THREE;
        Weeks result = threeWeeks.multipliedBy(-617);
        assertEquals(-1851, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testZeroMinusZero() {
        Weeks zeroWeeks = Weeks.ZERO;
        Weeks result = zeroWeeks.ZERO.minus(zeroWeeks);
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testLargeWeeksMinus() {
        Weeks weeks = Weeks.weeks(317351877);
        Weeks result = weeks.minus(2285);
        assertEquals(317349592, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testZeroWeeksDividedByOne() {
        Weeks zeroWeeks = Weeks.standardWeeksIn((ReadablePeriod) null);
        Weeks result = zeroWeeks.dividedBy(1);
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMaxValueDividedByNegativeOne() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        Weeks result = maxWeeks.dividedBy(-1);
        assertEquals(-2147483647, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMinValueMinusNull() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        Weeks result = minWeeks.minus((Weeks) null);
        assertSame(minWeeks, result);
    }

    @Test(timeout = 4000)
    public void testMaxValuePlusNull() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        Weeks result = maxWeeks.plus((Weeks) null);
        assertEquals(1, result.size());
    }

    @Test(timeout = 4000)
    public void testZeroPlusZero() {
        Weeks zeroWeeks = Weeks.ZERO;
        Weeks result = zeroWeeks.plus(zeroWeeks);
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testParseWeeksNullStringPlusZero() {
        Weeks weeks = Weeks.parseWeeks((String) null);
        Weeks result = weeks.plus(0);
        assertEquals(0, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testWeeksInNullIntervalMinusNegative() {
        Weeks weeks = Weeks.weeksIn((ReadableInterval) null);
        Weeks result = weeks.minus(-2358);
        Weeks negated = result.negated();
        Days days = negated.toStandardDays();
        assertEquals(2358, result.getWeeks());
        assertEquals(-16506, days.getDays());
    }

    @Test(timeout = 4000)
    public void testTwoWeeksPlusTwo() {
        Weeks twoWeeks = Weeks.weeks(2);
        Weeks result = twoWeeks.plus(2);
        assertEquals(4, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testThreeWeeksMinusTwo() {
        Weeks threeWeeks = Weeks.THREE;
        Weeks twoWeeks = Weeks.TWO;
        Weeks result = threeWeeks.minus(twoWeeks);
        assertEquals(1, result.getWeeks());
    }

    @Test(timeout = 4000)
    public void testWeeksZeroMinusZero() {
        Weeks weeks = Weeks.weeks(0);
        Weeks result = weeks.minus(0);
        assertEquals(0, result.getWeeks());
    }

    //-------------------------- Getter Tests --------------------------
    
    @Test(timeout = 4000)
    public void testZeroWeeksGetWeeks() {
        Minutes minutes = Minutes.ZERO;
        Weeks weeks = minutes.toStandardWeeks();
        assertEquals(0, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMinValueGetWeeks() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        assertEquals(Integer.MIN_VALUE, minWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testThreeWeeksGetWeeks() {
        Weeks threeWeeks = Weeks.THREE;
        assertEquals(3, threeWeeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testTwoWeeksGetPeriodType() {
        Weeks twoWeeks = Weeks.TWO;
        PeriodType periodType = twoWeeks.getPeriodType();
        assertEquals(1, periodType.size());
    }

    @Test(timeout = 4000)
    public void testThreeWeeksGetFieldType() {
        Weeks threeWeeks = Weeks.THREE;
        DurationFieldType fieldType = threeWeeks.getFieldType();
        assertEquals("weeks", fieldType.getName());
    }

    //-------------------------- Factory Method Tests --------------------------
    
    @Test(timeout = 4000)
    public void testWeeksThree() {
        Weeks weeks = Weeks.weeks(3);
        assertEquals(3, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testWeeksMaxValue() {
        Weeks weeks = Weeks.weeks(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testOneWeekToString() {
        Weeks oneWeek = Weeks.ONE;
        assertEquals("P1W", oneWeek.toString());
    }

    @Test(timeout = 4000)
    public void testWeeksBetweenSameInstant() {
        Instant epoch = Instant.EPOCH;
        Weeks weeks = Weeks.weeksBetween(epoch, epoch);
        assertEquals(0, weeks.getWeeks());
    }

    //-------------------------- Exception Tests --------------------------
    
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testWeeksBetweenPartialWithNullChronologyThrows() {
        DateTimeFieldType[] fields = new DateTimeFieldType[9];
        fields[0] = DateTimeFieldType.dayOfMonth();
        int[] values = new int[0];
        Partial partial = new Partial(null, fields, values);
        Weeks.weeksBetween(partial, partial);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testWeeksBetweenNullPartialsThrows() {
        Weeks.weeksBetween((ReadablePartial) null, (ReadablePartial) null);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testWeeksBetweenNullInstantsThrows() {
        Weeks.weeksBetween((ReadableInstant) null, (ReadableInstant) null);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinValueToStandardSecondsThrows() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        minWeeks.toStandardSeconds();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMaxValuePlusMaxValueThrows() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        maxWeeks.plus(maxWeeks);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinValueMinusMinValueThrows() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        minWeeks.minus(minWeeks);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testDividedByZeroThrows() {
        Weeks twoWeeks = Weeks.TWO;
        twoWeeks.dividedBy(0);
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testParseWeeksInvalidStringThrows() {
        Weeks.parseWeeks(")%X[WS");
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinValuePlusMinValueThrows() {
        Weeks weeks = Weeks.weeks(Integer.MIN_VALUE);
        weeks.plus(Integer.MIN_VALUE);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinValueToStandardHoursThrows() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        minWeeks.toStandardHours();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMaxValueToStandardDaysThrows() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        maxWeeks.toStandardDays();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMinValueNegatedThrows() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        minWeeks.negated();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMaxValueMinusNegativeThrows() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        maxWeeks.minus(-876);
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMaxValueToStandardMinutesThrows() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        maxWeeks.toStandardMinutes();
    }

    @Test(timeout = 4000, expected = ArithmeticException.class)
    public void testMaxValueMultipliedBySevenThrows() {
        Weeks maxWeeks = Weeks.MAX_VALUE;
        maxWeeks.multipliedBy(7);
    }

    @Test(timeout = 4000)
    public void testStandardWeeksInMinHours() {
        Hours minHours = Hours.MIN_VALUE;
        Weeks weeks = Weeks.standardWeeksIn(minHours);
        assertEquals(-12782640, weeks.getWeeks());
    }

    @Test(timeout = 4000)
    public void testMinValueToStandardDuration() {
        Weeks minWeeks = Weeks.MIN_VALUE;
        Duration duration = minWeeks.toStandardDuration();
        assertEquals(-15032385536L, duration.getStandardDays());
    }
}