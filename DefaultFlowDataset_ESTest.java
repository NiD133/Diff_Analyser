/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:46:50 GMT 2025
 */

package org.jfree.data.flow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.HijrahEra;
import java.util.List;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.JLayeredPane;
import javax.swing.JRadioButtonMenuItem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.flow.DefaultFlowDataset;
import org.jfree.data.flow.FlowKey;
import org.jfree.data.flow.NodeKey;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultFlowDataset_ESTest extends DefaultFlowDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultFlowDataset0.setFlow(1, integer0, integer0, 0);
      defaultFlowDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer1, 0);
      DefaultFlowDataset defaultFlowDataset1 = (DefaultFlowDataset)defaultFlowDataset0.clone();
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset1);
      assertTrue(boolean0);
      assertEquals(1, defaultFlowDataset1.getStageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultFlowDataset<Integer> defaultFlowDataset1 = new DefaultFlowDataset<Integer>();
      assertTrue(defaultFlowDataset1.equals((Object)defaultFlowDataset0));
      
      defaultFlowDataset1.setFlow(1, integer0, integer0, 1);
      Object object0 = defaultFlowDataset1.clone();
      boolean boolean0 = defaultFlowDataset0.equals(object0);
      assertFalse(defaultFlowDataset1.equals((Object)defaultFlowDataset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>((-352), integer0);
      defaultFlowDataset0.setFlow(1, integer0, integer0, (-478.3883577094));
      List<FlowKey> list0 = (List<FlowKey>)defaultFlowDataset0.getOutFlows(nodeKey0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(213, integer0);
      List<FlowKey<Integer>> list0 = defaultFlowDataset0.getInFlows(nodeKey0);
      assertEquals(0, list0.size());
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>((-352), integer0);
      defaultFlowDataset0.setFlow(1, integer0, integer0, (-478.3883577094));
      List<FlowKey<Integer>> list0 = defaultFlowDataset0.getInFlows(nodeKey0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      defaultFlowDataset0.setFlow(1, integer0, integer0, (-1670.283700956413));
      defaultFlowDataset0.setFlow(0, integer0, integer0, (-2177.79472));
      assertEquals(2, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Number number0 = defaultFlowDataset0.getFlow(87, integer1, integer0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      List<Integer> list0 = defaultFlowDataset0.getSources(1);
      assertTrue(list0.contains(integer0));
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null);
      defaultFlowDataset0.setNodeProperty(nodeKey0, "selected", jRadioButtonMenuItem0);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = (JRadioButtonMenuItem)defaultFlowDataset0.getNodeProperty(nodeKey0, "selected");
      assertFalse(jRadioButtonMenuItem1.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      FlowKey<Integer> flowKey0 = new FlowKey<Integer>(0, integer0, integer0);
      defaultFlowDataset0.setFlowProperty(flowKey0, "selected", flowKey0);
      FlowKey flowKey1 = (FlowKey)defaultFlowDataset0.getFlowProperty(flowKey0, "selected");
      assertEquals(0, flowKey1.getStage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      List<Integer> list0 = defaultFlowDataset0.getDestinations(0);
      assertTrue(list0.contains(integer0));
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      defaultFlowDataset0.getAllFlows();
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        defaultFlowDataset0.setFlow((-882), integer0, integer0, (-882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Require 'stage' (-882) to be in the range 0 to 1
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      // Undeclared exception!
      try { 
        defaultFlowDataset0.getSources(71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      // Undeclared exception!
      try { 
        defaultFlowDataset0.getOutFlows((NodeKey) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'nodeKey' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      // Undeclared exception!
      try { 
        defaultFlowDataset0.getInFlows((NodeKey) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'nodeKey' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      // Undeclared exception!
      try { 
        defaultFlowDataset0.getFlow((-1067), (Integer) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      // Undeclared exception!
      try { 
        defaultFlowDataset0.getDestinations(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      List<Integer> list0 = defaultFlowDataset0.getSources(0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      int int0 = defaultFlowDataset0.getStageCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      List<Integer> list0 = defaultFlowDataset0.getDestinations(0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      DefaultFlowDataset defaultFlowDataset1 = (DefaultFlowDataset)defaultFlowDataset0.clone();
      defaultFlowDataset0.setFlow(0, integer0, integer0, (-3612.716603546956));
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset1);
      assertFalse(boolean0);
      assertEquals(1, defaultFlowDataset1.getStageCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      DefaultFlowDataset defaultFlowDataset1 = (DefaultFlowDataset)defaultFlowDataset0.clone();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer1, (-744.1398505791022));
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset1);
      assertFalse(boolean0);
      assertEquals(1, defaultFlowDataset0.getStageCount());
      assertEquals(1, defaultFlowDataset1.getStageCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      DefaultFlowDataset<Integer> defaultFlowDataset1 = new DefaultFlowDataset<Integer>();
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset1);
      assertFalse(boolean0);
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      defaultFlowDataset0.setFlow(1, integer0, integer0, 4286.22);
      DefaultFlowDataset<Integer> defaultFlowDataset1 = new DefaultFlowDataset<Integer>();
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      boolean boolean0 = defaultFlowDataset0.equals(defaultFlowDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      defaultFlowDataset0.setFlow(0, integer1, integer1, 0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      List<FlowKey> list0 = (List<FlowKey>)defaultFlowDataset0.getOutFlows(nodeKey0);
      assertEquals(1, defaultFlowDataset0.getStageCount());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      List<FlowKey> list0 = (List<FlowKey>)defaultFlowDataset0.getOutFlows(nodeKey0);
      assertEquals(1, defaultFlowDataset0.getStageCount());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(213, integer0);
      List<FlowKey> list0 = (List<FlowKey>)defaultFlowDataset0.getOutFlows(nodeKey0);
      assertTrue(list0.isEmpty());
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(1, integer0);
      List<FlowKey> list0 = (List<FlowKey>)defaultFlowDataset0.getOutFlows(nodeKey0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(1, integer1);
      List<FlowKey<Integer>> list0 = defaultFlowDataset0.getInFlows(nodeKey0);
      assertEquals(1, defaultFlowDataset0.getStageCount());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      defaultFlowDataset0.setFlow(0, integer0, integer0, 0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(1, integer0);
      List<FlowKey<Integer>> list0 = defaultFlowDataset0.getInFlows(nodeKey0);
      assertFalse(list0.isEmpty());
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      List<FlowKey<Integer>> list0 = defaultFlowDataset0.getInFlows(nodeKey0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      FlowKey<Integer> flowKey0 = new FlowKey<Integer>(0, integer0, integer0);
      defaultFlowDataset0.setFlowProperty(flowKey0, "[FlowKey: 0, 0 -> 0]", integer0);
      HijrahEra hijrahEra0 = HijrahEra.AH;
      defaultFlowDataset0.setFlowProperty(flowKey0, "", hijrahEra0);
      assertEquals(0, flowKey0.getStage());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      FlowKey<Integer> flowKey0 = new FlowKey<Integer>(0, integer0, integer0);
      defaultFlowDataset0.setFlowProperty(flowKey0, "[FlowKey: 0, 0 -> 0]", integer0);
      Object object0 = defaultFlowDataset0.getFlowProperty(flowKey0, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      FlowKey<Integer> flowKey0 = new FlowKey<Integer>(0, integer0, integer0);
      Object object0 = defaultFlowDataset0.getFlowProperty(flowKey0, "selected");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>((-1567), integer0);
      defaultFlowDataset0.setNodeProperty(nodeKey0, "", defaultFlowDataset0);
      defaultFlowDataset0.setNodeProperty(nodeKey0, "", nodeKey0);
      assertEquals((-1567), nodeKey0.getStage());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      defaultFlowDataset0.setNodeProperty((NodeKey<Integer>) null, "", (Object) null);
      Object object0 = defaultFlowDataset0.getNodeProperty((NodeKey) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      Object object0 = defaultFlowDataset0.getNodeProperty(nodeKey0, "selected");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      defaultFlowDataset0.setFlow(1, integer0, integer0, 4286.22);
      defaultFlowDataset0.getAllNodes();
      assertEquals(2, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      defaultFlowDataset0.getAllNodes();
      assertEquals(1, defaultFlowDataset0.getStageCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultFlowDataset<Integer> defaultFlowDataset0 = new DefaultFlowDataset<Integer>();
      Set<FlowKey<Integer>> set0 = defaultFlowDataset0.getAllFlows();
      boolean boolean0 = defaultFlowDataset0.equals(set0);
      assertFalse(boolean0);
  }
}
