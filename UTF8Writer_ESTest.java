/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:29:11 GMT 2025
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.UTF8Writer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8Writer_ESTest extends UTF8Writer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = UTF8Writer.illegalSurrogateDesc(56319);
      assertEquals("Unmatched first part of surrogate pair (0xdbff)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        UTF8Writer.illegalSurrogate(1114111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unmatched second part of surrogate pair (0x10ffff)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      int int0 = uTF8Writer0.convertSurrogate(56320);
      assertEquals((-56557568), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0080';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      UTF8Writer uTF8Writer1 = (UTF8Writer)uTF8Writer0.append((CharSequence) charBuffer0);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      UTF8Writer uTF8Writer1 = (UTF8Writer)uTF8Writer0.append((CharSequence) charBuffer0);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(50000);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write(128);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      CharBuffer charBuffer0 = CharBuffer.allocate(7989);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      Writer writer0 = uTF8Writer0.append((CharSequence) charBuffer0);
      Writer writer1 = uTF8Writer0.append('C');
      writer0.write(1000);
      uTF8Writer0.append('\u0000');
      writer1.write(1);
      writer1.write(2937);
      // Undeclared exception!
      try { 
        uTF8Writer0.append('+');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1633);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      try { 
        uTF8Writer0.write(57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unmatched second part of surrogate pair (0xdfff)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0080';
      uTF8Writer0.write(charArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      CharBuffer charBuffer0 = CharBuffer.allocate(7989);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      uTF8Writer0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[9];
      charArray0[4] = '\u00F6';
      charArray0[6] = '\u00F6';
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 1, 2000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_C14\u0007{V6YYhZLLho", false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      char[] charArray0 = new char[26];
      uTF8Writer0.write(charArray0, 1114111, Integer.MAX_VALUE);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = new ContentReference(false, (Object) null, 20000000, 20000000, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&`!00)T9c3y5e:");
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockPrintStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(20000000);
      // Undeclared exception!
      uTF8Writer0.append((CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      CharBuffer charBuffer0 = CharBuffer.allocate(1988);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 7993);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, bufferedOutputStream0);
      uTF8Writer0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        UTF8Writer.illegalSurrogate((-554));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character point (0xfffffdd6) to output
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, dataOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.write(2);
      try { 
        uTF8Writer0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 7993);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, bufferedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UTF8Writer uTF8Writer0 = null;
      try {
        uTF8Writer0 = new UTF8Writer((IOContext) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      UTF8Writer uTF8Writer1 = null;
      try {
        uTF8Writer1 = new UTF8Writer(iOContext0, pipedOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled)", 3, 500);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.write("-eL]y>XH;qj", 2, Integer.MAX_VALUE);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      uTF8Writer0.write("", (int) (byte) (-19), (-1981));
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      // Undeclared exception!
      try { 
        uTF8Writer0.write((String) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      CharBuffer charBuffer0 = CharBuffer.allocate(7989);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      Writer writer0 = uTF8Writer0.append((CharSequence) charBuffer0);
      writer0.append('n');
      Writer writer1 = uTF8Writer0.append('2');
      writer0.write(1000);
      uTF8Writer0.append('\u00F6');
      writer1.write(1);
      // Undeclared exception!
      try { 
        uTF8Writer0.write(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write(55296);
      try { 
        uTF8Writer0.write(55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0xd800, second 0xd800; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      char[] charArray0 = new char[0];
      uTF8Writer0.write(charArray0, 1000, (-230));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = UTF8Writer.illegalSurrogateDesc(55296);
      assertEquals("Unmatched first part of surrogate pair (0xd800)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      try { 
        uTF8Writer0.convertSurrogate(20000000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0x0, second 0x1312d00; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      int int0 = uTF8Writer0.convertSurrogate(57343);
      assertEquals((-56556545), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.UNKNOWN_CONTENT;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      char[] charArray0 = new char[11];
      charArray0[3] = '\u00D4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UTF8Writer uTF8Writer1 = (UTF8Writer)uTF8Writer0.append((CharSequence) charBuffer0);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (StreamWriteConstraints) null, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u00F6';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      UTF8Writer uTF8Writer1 = (UTF8Writer)uTF8Writer0.append((CharSequence) charBuffer0);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      CharBuffer charBuffer0 = CharBuffer.allocate(7989);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      uTF8Writer0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write("Illegal character point (0x", 3, 7978);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) null);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (StreamWriteConstraints) null, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.write(56319);
      try { 
        uTF8Writer0.write("com.fasterxml.jackson.core.io.IOContext");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0xdbff, second 0x63; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(50000);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write("@");
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.UNKNOWN_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      try { 
        uTF8Writer0.write(20000000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character point (0x1312d00) to output; max is 0x10FFFF as per RFC 4627
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(true, object0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write(2048);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) null);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write(1114111);
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) null);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.write(55296);
      try { 
        uTF8Writer0.append('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Broken surrogate pair: first char 0xd800, second 0x4d; illegal combination
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_C14\u0007{V6YYhZLLho", false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, mockFileOutputStream0);
      char[] charArray0 = new char[4];
      charArray0[2] = '\u008F';
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      char[] charArray0 = new char[11];
      charArray0[1] = '\u00D4';
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 1, 50000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      char[] charArray0 = iOContext0.allocNameCopyBuffer(1114111);
      // Undeclared exception!
      try { 
        uTF8Writer0.write(charArray0, 500, 1114111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      // Undeclared exception!
      try { 
        uTF8Writer0.write((char[]) null, (-1), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF8Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      char[] charArray0 = new char[7];
      uTF8Writer0.write(charArray0, 0, 2);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, byteArrayOutputStream0);
      uTF8Writer0.write(2);
      uTF8Writer0.flush();
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0002", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, (OutputStream) null);
      uTF8Writer0.flush();
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.write(2);
      try { 
        uTF8Writer0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8Writer uTF8Writer0 = new UTF8Writer(iOContext0, pipedOutputStream0);
      uTF8Writer0.close();
      uTF8Writer0.close();
      assertEquals((-56613888), UTF8Writer.SURROGATE_BASE);
  }
}
