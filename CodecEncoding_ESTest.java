/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:58:56 GMT 2025
 */

package org.apache.commons.compress.harmony.pack200;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.CodecEncoding;
import org.apache.commons.compress.harmony.pack200.PopulationCodec;
import org.apache.commons.compress.harmony.pack200.RunCodec;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodecEncoding_ESTest extends CodecEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      RunCodec runCodec0 = new RunCodec(256, bHSDCodec0, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, bHSDCodec0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {129, 255, 116, 16, 127}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BHSDCodec bHSDCodec1 = (BHSDCodec)CodecEncoding.getCodec(115, sequenceInputStream0, bHSDCodec0);
      assertTrue(bHSDCodec1.isSigned());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = CodecEncoding.getSpecifierForDefaultCodec((BHSDCodec) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Codec codec0 = CodecEncoding.getCodec(0, pipedInputStream0, (Codec) null);
      assertNull(codec0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BHSDCodec bHSDCodec0 = CodecEncoding.getCanonicalCodec(0);
      assertNull(bHSDCodec0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BHSDCodec bHSDCodec0 = CodecEncoding.getCanonicalCodec((byte)40);
      assertEquals(2, bHSDCodec0.getS());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BHSDCodec bHSDCodec0 = CodecEncoding.getCanonicalCodec(9);
      assertFalse(bHSDCodec0.isSigned());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PopulationCodec populationCodec0 = new PopulationCodec((Codec) null, (Codec) null, (Codec) null);
      // Undeclared exception!
      try { 
        CodecEncoding.getSpecifier(populationCodec0, (Codec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      RunCodec runCodec0 = new RunCodec(4, bHSDCodec0, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, runCodec0.SIGNED5);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {125, 27}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = CodecEncoding.getCanonicalCodec((byte)30);
      bHSDCodec0.decode((InputStream) byteArrayInputStream0);
      RunCodec runCodec0 = new RunCodec(67, bHSDCodec0, bHSDCodec0);
      Codec codec0 = CodecEncoding.getCodec((byte)116, byteArrayInputStream0, runCodec0);
      CodecEncoding.getSpecifier(codec0, (Codec) null);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(1, bHSDCodec0.lastBandLength);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      int[] intArray0 = CodecEncoding.getSpecifier(bHSDCodec0, bHSDCodec0);
      assertArrayEquals(new int[] {116, 16, 127}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      Codec codec0 = CodecEncoding.getCodec(152, pipedInputStream0, bHSDCodec0);
      assertEquals(0, codec0.lastBandLength);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.BYTE1;
      // Undeclared exception!
      try { 
        CodecEncoding.getCodec(128, (InputStream) null, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      // Undeclared exception!
      try { 
        CodecEncoding.getCodec(117, (InputStream) null, bHSDCodec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1024, 3294);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      // Undeclared exception!
      try { 
        CodecEncoding.getCodec((-2300), byteArrayInputStream0, bHSDCodec0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Encoding cannot be less than zero
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      PopulationCodec populationCodec0 = new PopulationCodec(bHSDCodec0, bHSDCodec0, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(populationCodec0, bHSDCodec0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.SIGNED5;
      BHSDCodec bHSDCodec1 = Codec.MDELTA5;
      RunCodec runCodec0 = new RunCodec(44, bHSDCodec1, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, bHSDCodec0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {137, 43, 43}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      RunCodec runCodec0 = new RunCodec(Integer.MAX_VALUE, bHSDCodec0, bHSDCodec0);
      PopulationCodec populationCodec0 = new PopulationCodec(runCodec0, runCodec0, runCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, populationCodec0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {124, 524286, 41, 41}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      RunCodec runCodec0 = new RunCodec(631, bHSDCodec0, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, runCodec0.CHAR3);
      assertArrayEquals(new int[] {122, 38, 26, 26}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BHSDCodec bHSDCodec0 = CodecEncoding.getCanonicalCodec((byte)48);
      RunCodec runCodec0 = new RunCodec(22672, bHSDCodec0, bHSDCodec0);
      int[] intArray0 = CodecEncoding.getSpecifier(runCodec0, runCodec0.CHAR3);
      assertArrayEquals(new int[] {123, 87, 48, 48}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      bHSDCodec0.decode((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 141);
      Codec codec0 = CodecEncoding.getCodec((byte)116, pushbackInputStream0, bHSDCodec0);
      PopulationCodec populationCodec0 = new PopulationCodec(codec0, 64, bHSDCodec0);
      CodecEncoding.getSpecifier(populationCodec0, populationCodec0);
      assertEquals(1, bHSDCodec0.lastBandLength);
      assertNotSame(bHSDCodec0, codec0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      int[] intArray0 = CodecEncoding.getSpecifier(bHSDCodec0, bHSDCodec0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      try { 
        CodecEncoding.getCodec(146, pipedInputStream0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodecEncoding.getCodec(181, (InputStream) null, (Codec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodecEncoding.getCodec(141, byteArrayInputStream0, bHSDCodec0);
      assertEquals(3, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      byte[] byteArray0 = new byte[16];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      CodecEncoding.getCodec(144, byteArrayInputStream0, bHSDCodec0);
      assertEquals(15, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.DELTA5;
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        CodecEncoding.getCodec(257, byteArrayInputStream0, bHSDCodec0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid codec encoding byte (257) found
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UDELTA5;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 224);
      PopulationCodec populationCodec0 = new PopulationCodec(bHSDCodec0, (byte)116, bHSDCodec0);
      RunCodec runCodec0 = (RunCodec)CodecEncoding.getCodec(140, pushbackInputStream0, populationCodec0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(4096, runCodec0.getK());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      BHSDCodec bHSDCodec1 = (BHSDCodec)CodecEncoding.getCodec(1, byteArrayInputStream0, bHSDCodec0);
      assertEquals(0L, bHSDCodec1.smallest());
      assertNotNull(bHSDCodec1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.UNSIGNED5;
      try { 
        CodecEncoding.getCodec((byte)116, byteArrayInputStream0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of buffer read whilst trying to decode codec
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BHSDCodec bHSDCodec0 = Codec.MDELTA5;
      try { 
        CodecEncoding.getCodec((byte)116, byteArrayInputStream0, bHSDCodec0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of buffer read whilst trying to decode codec
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BHSDCodec bHSDCodec0 = Codec.CHAR3;
      int int0 = CodecEncoding.getSpecifierForDefaultCodec(bHSDCodec0);
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CodecEncoding codecEncoding0 = new CodecEncoding();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CodecEncoding.getCanonicalCodec(260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 260
         //
         verifyException("org.apache.commons.compress.harmony.pack200.CodecEncoding", e);
      }
  }
}
