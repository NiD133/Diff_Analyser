/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:41:22 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%>-8wJ/e4'{T9H");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TokenQueue.unescape("H<b:oK|jCxQ\\P4C3U.");
      assertEquals("H<b:oK|jCxQP4C3U.", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("(2IQL&'x,2.f\"fX");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('(', 'u');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '2IQL&'x,2.f\"fX'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("oUY}ddkFQ:tJ.q");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("oUY", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("d:,&:wx");
      String string0 = tokenQueue0.remainder();
      String string1 = tokenQueue0.remainder();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k\"YT-6Ih:G3zAw");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("k", string0);
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.consumeCssIdentifier();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      char[] charArray0 = new char[7];
      charArray0[3] = 'D';
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Jkl):ip4E/0M");
      boolean boolean0 = tokenQueue0.matches("rD@)L`r>t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k\"YT-6Ih:G~3zAw");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("k", string0);
      
      boolean boolean0 = tokenQueue0.matches('\"');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k\"YT-6Ih:G~3zAw");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("k", string0);
      
      boolean boolean0 = tokenQueue0.matchChomp("k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$dXr'&T^\"0qAav");
      char char0 = tokenQueue0.current();
      assertEquals('$', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("8Nw@t]UFUu54QXB.");
      char char0 = tokenQueue0.current();
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      char char0 = tokenQueue0.current();
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("bIV>C5`");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Jkl):ip4E/0M");
      tokenQueue0.consume();
      String string0 = tokenQueue0.consumeTo("Jkl):ip4E/0M");
      assertEquals("kl):ip4E/0M", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("f7(L)+X");
      String string0 = tokenQueue0.chompBalanced('P', 'u');
      assertEquals("f", string0);
      
      char char0 = tokenQueue0.consume();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(">'9sOEbGPT9N3{HK5");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0\u0002?B");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.remainder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q\u0000!>");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.matchesWord();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("fXjR3=h^{j^|Zu");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.matchesWhitespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dMk");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<b:oK|j\"CQ\\PCjGU.");
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("fXjR3=h^{j^|Zu");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.matches('A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("v\u0000{Z^PZ");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp("v\u0000{Z^PZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("fXjR3=h^{j^|Zu");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp('A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.escapeCssIdentifier((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Om`o!");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.current();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("COdx'!Y");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeWhitespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Grh3(>~p#auroy");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("CdIx'!Y");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeElementSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("U=\"sFu*'fW%OlQfLM");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.consumeCssIdentifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("@vPEF9_+&M<,U");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("@vPEF9_+&M<,U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Om`o!");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("U\fXOZ8Ez~:Kb");
      tokenQueue0.close();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('v', 'v');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k\"YT-6Ih:G~3zAw");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("k", string0);
      
      String string1 = tokenQueue0.chompBalanced('!', '!');
      assertEquals("\"", string1);
      
      String string2 = tokenQueue0.consumeCssIdentifier();
      assertEquals("YT", string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%>-8wJ/e4'{T9H");
      boolean boolean0 = tokenQueue0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("WC**~WF-]9Y$]");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("WC**", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("b");
      String string0 = tokenQueue0.consumeElementSelector();
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\u0005");
      String string0 = tokenQueue0.chompBalanced('J', 'x');
      assertEquals("\u0005", string0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("%WApE_");
      assertEquals("\\%WApE_", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("v\uFFFD");
      assertEquals("v\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("v\u0000{Z|NV");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("v\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\u0005");
      tokenQueue0.chompBalanced('J', 'x');
      // Undeclared exception!
      try { 
        tokenQueue0.consumeCssIdentifier();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // CSS identifier expected, but end of input found
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("             ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("k\"YT-6Ih:G~3zAw");
      assertEquals("k\\\"YT\\7f -6Ih\\:G\\~3zAw", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("4O*!*d1^m3R|W");
      assertEquals("\\34 O\\*\\!\\*d1\\^m3R\\|W", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("-6Ih");
      assertEquals("-\\36 Ih", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("-");
      assertEquals("\\-", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("- %");
      assertEquals("-\\ \\%", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = TokenQueue.unescape("b\\");
      assertEquals("b", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("{#7l{C/gwF;D^Xtn&");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('{', ';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '#7l{C/gwF;D^Xtn&'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" 5mL\"2HD\"v");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(' ', ' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '5mL\"2HD\"v'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"@=e|.=e88-P~");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '@=e|.=e88-P~'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("The '%s' parameter must not be empty.");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('T', 'T');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'he '%s' parameter must not be empty.'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("?&KL?gZd\"8't");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('?', '?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '&KL?gZd\"8't'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'O*!.d1^'3oR|&");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'O*!.d1^'3oR|&'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("$dXr'&T^\"0qAav");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('$', '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'dXr'&T^\"0qAav'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Z<}0z:#; O.[w{T3D");
      String string0 = tokenQueue0.chompBalanced('Z', 'T');
      assertEquals("<}0z:#; O.[w{", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Z<}0z:#; O.[w{T3D");
      tokenQueue0.matchChomp("Z<}0z:#; O.[w{T3D");
      String string0 = tokenQueue0.chompBalanced('Z', 'T');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|;tj;PF%cdg`,");
      tokenQueue0.consume();
      tokenQueue0.consume();
      tokenQueue0.advance();
      tokenQueue0.advance();
      tokenQueue0.advance();
      char char0 = tokenQueue0.consume();
      assertEquals('P', char0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%>-8wJ/e4'{T9H");
      String string0 = tokenQueue0.chompBalanced('(', 'W');
      assertEquals("%", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%>-8wJ/e4'{T9H";
      stringArray0[1] = "org.jsoup.helper.ValidationException";
      stringArray0[2] = "%>-8wJ/e4'{T9H";
      String string1 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals(">-8wJ/e4'{T9H", string1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("k\"YT-6Ih:G~3zAw");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("Must Lbe false");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consume("");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.internal.StringUtil");
      boolean boolean0 = tokenQueue0.matchChomp('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("f7(L)+X");
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|;tj;PF%cdg`,");
      boolean boolean0 = tokenQueue0.matches("|;tj;PF%cdg`,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%>-8wJ/e4'{T9H");
      String string0 = tokenQueue0.consumeTo("%>-8wJ/e4'{T9H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Z<}0z:#; O.[w{T3D");
      tokenQueue0.matchChomp("Z<}0z:#; O.[w{T3D");
      boolean boolean0 = tokenQueue0.matchChomp('Z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Z<}0z:#; O.[w{T3D");
      char[] charArray0 = new char[8];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = TokenQueue.escapeCssIdentifier("\u0005");
      assertEquals("\\5 ", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(">'9sOEbGPT9N3{HK5");
      String string0 = tokenQueue0.toString();
      assertEquals(">'9sOEbGPT9N3{HK5", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%>-8wJ/e4'{T9H");
      boolean boolean0 = tokenQueue0.matches('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Z<}0z:#; O.[w{T3D");
      boolean boolean0 = tokenQueue0.matchesWord();
      assertTrue(boolean0);
  }
}
