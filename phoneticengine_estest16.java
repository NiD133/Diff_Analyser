package org.apache.commons.codec.language.bm;

import org.junit.Test;

import java.util.Collections;

import static org.junit.Assert.assertTrue;

/**
 * This test class focuses on the PhoneticEngine.PhonemeBuilder class.
 *
 * Note: The original test was auto-generated by EvoSuite. This version has been
 * refactored for human understandability and corrects a faulty assertion.
 */
public class PhoneticEngine_ESTestTest16 {

    /**
     * Tests that applying a phoneme expression to a PhonemeBuilder with a maxPhonemes
     * limit of 0 results in an empty set of phonemes. This verifies the handling of a
     * boundary condition.
     */
    @Test
    public void applyShouldResultInEmptyPhonemesWhenMaxPhonemesIsZero() {
        // Arrange: Set up the test objects and preconditions.

        // 1. Define a language set.
        final Languages.LanguageSet languageSet = Languages.LanguageSet.from(Collections.singleton("common"));

        // 2. Create a PhonemeBuilder, which starts with one empty phoneme.
        final PhoneticEngine.PhonemeBuilder builder = PhoneticEngine.PhonemeBuilder.empty(languageSet);

        // 3. Create a phoneme expression to apply. For this test, it's a single, empty phoneme.
        final Rule.Phoneme phonemeToApply = new Rule.Phoneme("", languageSet);

        // 4. Define the maximum number of phonemes to be 0.
        final int maxPhonemes = 0;

        // Act: Execute the method under test.
        builder.apply(phonemeToApply, maxPhonemes);

        // Assert: Verify the outcome.
        // The builder's phoneme set should be empty because the maxPhonemes limit was 0.
        // The original test incorrectly asserted on the size of the input phoneme, which was a bug.
        assertTrue("The phoneme set should be empty when maxPhonemes is 0",
                   builder.getPhonemes().isEmpty());
    }
}