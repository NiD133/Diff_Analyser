/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:07:49 GMT 2025
 */

package org.apache.commons.collections4.properties;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.properties.OrderedProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OrderedProperties_ESTest extends OrderedProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer((-1107));
      Integer integer1 = new Integer((-1107));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer1);
      Object object0 = orderedProperties0.computeIfAbsent(integer1, constantTransformer0);
      boolean boolean0 = orderedProperties0.remove((Object) integer0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      orderedProperties0.forEach(biConsumer0);
      assertTrue(orderedProperties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      orderedProperties0.setProperty("aMWow", "aMWow");
      Object object0 = orderedProperties0.putIfAbsent("aMWow", "aMWow");
      assertEquals("aMWow", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = orderedProperties0.merge(orderedProperties0, (Object) null, biFunction0);
      assertNull(object0);
      assertTrue(orderedProperties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer(61);
      orderedProperties0.put(integer0, integer0);
      Set<Object> set0 = orderedProperties0.keySet();
      assertTrue(set0.contains(61));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      StringReader stringReader0 = new StringReader("N\"e,'{*4`uWJGD{G");
      orderedProperties0.load((Reader) stringReader0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)orderedProperties0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      orderedProperties0.putIfAbsent(integer0, hashMap0);
      Object object0 = orderedProperties0.clone();
      orderedProperties0.remove((Object) integer0);
      // Undeclared exception!
      try { 
        object0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      orderedProperties0.putIfAbsent(set0, set0);
      // Undeclared exception!
      try { 
        orderedProperties0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      orderedProperties0.put(orderedProperties0, orderedProperties0);
      orderedProperties0.setProperty("R8_.+(qv;A*", "");
      // Undeclared exception!
      try { 
        orderedProperties0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.remove((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.putIfAbsent((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.putAll((Map<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.properties.OrderedProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      Set<Map.Entry<Object, Object>> set1 = (Set<Map.Entry<Object, Object>>)orderedProperties0.entrySet();
      orderedProperties0.putIfAbsent(set0, set0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(set1, comparator0, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        orderedProperties0.put(set0, comparatorPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) set0, (Equator<Object>) defaultEquator0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        orderedProperties0.merge(set0, predicate0, biFunction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      // Undeclared exception!
      try { 
        orderedProperties0.merge(set0, set0, (BiFunction<? super Object, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      orderedProperties0.putIfAbsent(set0, set0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        orderedProperties0.forEach(biConsumer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        orderedProperties0.computeIfAbsent("{}", transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer(95);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) nonePredicate0;
      predicateArray0[4] = predicateArray0[1];
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicateArray0[4], (Transformer<? super Object, ? extends Integer>) null, (Transformer<? super Object, ? extends Integer>) null);
      // Undeclared exception!
      orderedProperties0.computeIfAbsent(integer0, ifTransformer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.computeIfAbsent((Object) null, (Function<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedHashSet0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray0[0] = (Predicate<Object>) nullIsTruePredicate0;
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      // Undeclared exception!
      try { 
        orderedProperties0.computeIfAbsent(predicate0, switchTransformer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        orderedProperties0.compute(object0, (BiFunction<? super Object, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)orderedProperties0.entrySet();
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      LinkedHashSet linkedHashSet0 = (LinkedHashSet)orderedProperties0.computeIfAbsent(set0, transformer0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      orderedProperties0.putIfAbsent(integer0, hashMap0);
      Object object0 = new Object();
      orderedProperties0.putIfAbsent(object0, object0);
      String string0 = orderedProperties0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      String string0 = orderedProperties0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer(0);
      boolean boolean0 = orderedProperties0.remove((Object) integer0, (Object) orderedProperties0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer((-1));
      Object object0 = orderedProperties0.remove((Object) integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      orderedProperties0.setProperty("^H@/z9H|#X@Pm", "^H@/z9H|#X@Pm");
      Object object0 = orderedProperties0.put("^H@/z9H|#X@Pm", "^H@/z9H|#X@Pm");
      assertEquals("^H@/z9H|#X@Pm", object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Object object0 = orderedProperties0.computeIfAbsent(hashMap0, constantTransformer0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Predicate<Integer> predicate0 = NotNullPredicate.notNullPredicate();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Object object0 = orderedProperties0.computeIfAbsent(predicate0, transformer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Enumeration<?> enumeration0 = orderedProperties0.propertyNames();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(orderedProperties0).when(biFunction0).apply(any() , any());
      OrderedProperties orderedProperties1 = (OrderedProperties)orderedProperties0.compute(enumeration0, biFunction0);
      assertEquals(1, orderedProperties1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Enumeration<?> enumeration0 = orderedProperties0.propertyNames();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object0 = orderedProperties0.compute(enumeration0, biFunction0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      orderedProperties0.putAll(hashMap0);
      assertTrue(orderedProperties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Integer integer0 = new Integer((-1107));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Class<Integer> class0 = Integer.class;
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = orderedProperties0.merge(class0, constantTransformer0, biFunction0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      orderedProperties0.clear();
      assertTrue(orderedProperties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Set<Object> set0 = orderedProperties0.keySet();
      orderedProperties0.put(set0, set0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        orderedProperties0.compute(orderedProperties0, biFunction0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Enumeration<Object> enumeration0 = orderedProperties0.keys();
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      // Undeclared exception!
      try { 
        orderedProperties0.computeIfAbsent(enumeration0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The prototype must be cloneable via a public clone method
         //
         verifyException("org.apache.commons.collections4.functors.PrototypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      // Undeclared exception!
      try { 
        orderedProperties0.forEach((BiConsumer<? super Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OrderedProperties orderedProperties0 = new OrderedProperties();
      Object object0 = orderedProperties0.put(orderedProperties0, orderedProperties0);
      assertNull(object0);
      
      String string0 = orderedProperties0.toString();
      assertEquals("{(this Map)=(this Map)}", string0);
  }
}
