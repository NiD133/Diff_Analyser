/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:40:09 GMT 2025
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.pie.PiePlot;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DialBackground_ESTest extends DialBackground_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1620.962466736), (-824.5089), (-3175.7), (-3175.7));
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", fastScatterPlot0);
      Rectangle rectangle0 = new Rectangle(10, 1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 91, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.5F);
      DialPlot dialPlot0 = new DialPlot(defaultValueDataset0);
      dialBackground0.draw(graphics2D0, dialPlot0, rectangle0, rectangle2D_Double0);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      // Undeclared exception!
      try { 
        dialBackground0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      // Undeclared exception!
      try { 
        dialBackground0.setGradientPaintTransformer((GradientPaintTransformer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DialBackground dialBackground0 = null;
      try {
        dialBackground0 = new DialBackground((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      DialBackground dialBackground1 = new DialBackground();
      assertTrue(dialBackground1.equals((Object)dialBackground0));
      
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_VERTICAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      dialBackground1.setGradientPaintTransformer(standardGradientPaintTransformer0);
      boolean boolean0 = dialBackground0.equals(dialBackground1);
      assertFalse(dialBackground1.equals((Object)dialBackground0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      DialBackground dialBackground1 = new DialBackground(color0);
      boolean boolean0 = dialBackground0.equals(dialBackground1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      GradientPaintTransformType gradientPaintTransformType0 = GradientPaintTransformType.CENTER_HORIZONTAL;
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = new StandardGradientPaintTransformer(gradientPaintTransformType0);
      boolean boolean0 = dialBackground0.equals(standardGradientPaintTransformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.equals(dialBackground0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      DialBackground dialBackground1 = new DialBackground();
      boolean boolean0 = dialBackground0.equals(dialBackground1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      DialPlot dialPlot0 = new DialPlot();
      // Undeclared exception!
      try { 
        dialBackground0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      dialBackground0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Object object0 = dialBackground0.clone();
      assertNotSame(object0, dialBackground0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      StandardGradientPaintTransformer standardGradientPaintTransformer0 = (StandardGradientPaintTransformer)dialBackground0.getGradientPaintTransformer();
      assertEquals(GradientPaintTransformType.VERTICAL, standardGradientPaintTransformer0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Color color0 = Color.blue;
      GradientPaint gradientPaint0 = new GradientPaint((-66.0279F), (-66.0279F), color0, (-66.0279F), (-66.0279F), color0);
      dialBackground0.setPaint(gradientPaint0);
      DialPlot dialPlot0 = new DialPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        dialBackground0.draw((Graphics2D) null, dialPlot0, (Rectangle2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.dial.DialBackground", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      boolean boolean0 = dialBackground0.isClippedToWindow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DialBackground dialBackground0 = new DialBackground();
      Color color0 = (Color)dialBackground0.getPaint();
      assertEquals(255, color0.getBlue());
  }
}
