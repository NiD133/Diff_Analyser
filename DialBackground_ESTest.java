/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:40:09 GMT 2025
 */

package org.jfree.chart.plot.dial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.util.GradientPaintTransformType;
import org.jfree.chart.util.GradientPaintTransformer;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, 
useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DialBackground_ESTest extends DialBackground_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void drawingWithValidParametersShouldNotThrowException() throws Throwable {
        // Setup
        DialBackground background = new DialBackground();
        Rectangle2D.Double frame = new Rectangle2D.Double(-1620.96, -824.51, -3175.7, -3175.7);
        FastScatterPlot plot = new FastScatterPlot();
        JFreeChart chart = new JFreeChart("", plot);
        Rectangle view = new Rectangle(10, 1);
        ChartRenderingInfo info = new ChartRenderingInfo((EntityCollection) null);
        BufferedImage image = chart.createBufferedImage(1, 91, info);
        Graphics2D graphics = image.createGraphics();
        DefaultValueDataset dataset = new DefaultValueDataset(0.5f);
        DialPlot dialPlot = new DialPlot(dataset);

        // Execute & Verify (no exception expected)
        background.draw(graphics, dialPlot, view, frame);
        
        // Cleanup
        graphics.dispose();
    }

    @Test(timeout = 4000)
    public void setPaintWithNullShouldThrowException() {
        DialBackground background = new DialBackground();
        try {
            background.setPaint(null);
            fail("Expected IllegalArgumentException for null paint");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'paint' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void setGradientTransformerWithNullShouldThrowException() {
        DialBackground background = new DialBackground();
        try {
            background.setGradientPaintTransformer(null);
            fail("Expected IllegalArgumentException for null transformer");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 't' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void constructorWithNullPaintShouldThrowException() {
        try {
            new DialBackground(null);
            fail("Expected IllegalArgumentException for null paint in constructor");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'paint' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void equalsWhenGradientTransformerDiffersShouldReturnFalse() {
        // Setup two equal backgrounds
        DialBackground background1 = new DialBackground();
        DialBackground background2 = new DialBackground();
        
        // Modify one background's transformer
        GradientPaintTransformType transformType = GradientPaintTransformType.CENTER_VERTICAL;
        background2.setGradientPaintTransformer(new StandardGradientPaintTransformer(transformType));
        
        // Verify
        assertNotEquals("Backgrounds should differ after transformer change", 
                        background1, background2);
    }

    @Test(timeout = 4000)
    public void equalsWhenPaintDiffersShouldReturnFalse() {
        DialBackground background1 = new DialBackground();
        DialBackground background2 = new DialBackground(Color.GRAY);
        assertNotEquals("Backgrounds with different paints should not be equal", 
                        background1, background2);
    }

    @Test(timeout = 4000)
    public void equalsWithDifferentObjectTypeShouldReturnFalse() {
        DialBackground background = new DialBackground();
        GradientPaintTransformType transformType = GradientPaintTransformType.CENTER_HORIZONTAL;
        Object other = new StandardGradientPaintTransformer(transformType);
        assertNotEquals("DialBackground should not equal different type", 
                        background, other);
    }

    @Test(timeout = 4000)
    public void equalsWithSameObjectShouldReturnTrue() {
        DialBackground background = new DialBackground();
        assertEquals("Same object should be equal", background, background);
    }

    @Test(timeout = 4000)
    public void equalsWithIdenticalBackgroundsShouldReturnTrue() {
        DialBackground background1 = new DialBackground();
        DialBackground background2 = new DialBackground();
        assertEquals("Identical backgrounds should be equal", background1, background2);
    }

    @Test(timeout = 4000)
    public void drawWithNullGraphicsShouldThrowException() {
        DialBackground background = new DialBackground();
        DialPlot plot = new DialPlot();
        try {
            background.draw(null, plot, null, null);
            fail("Expected NullPointerException for null graphics");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void hashCodeShouldBeConsistent() {
        DialBackground background1 = new DialBackground();
        DialBackground background2 = new DialBackground();
        assertEquals("Equal objects should have same hash code", 
                     background1.hashCode(), background2.hashCode());
    }

    @Test(timeout = 4000)
    public void cloneShouldCreateEqualCopy() throws Exception {
        DialBackground background = new DialBackground();
        DialBackground clone = (DialBackground) background.clone();
        
        assertNotSame("Clone should be different object", background, clone);
        assertEquals("Clone should be equal to original", background, clone);
    }

    @Test(timeout = 4000)
    public void getGradientTransformerShouldReturnDefaultTransformer() {
        DialBackground background = new DialBackground();
        GradientPaintTransformer transformer = background.getGradientPaintTransformer();
        assertEquals("Default transformer should be Standard type", 
                     StandardGradientPaintTransformer.class, transformer.getClass());
    }

    @Test(timeout = 4000)
    public void drawWithGradientPaintAndNullGraphicsShouldThrowException() {
        // Setup background with gradient paint
        DialBackground background = new DialBackground();
        GradientPaint gradient = new GradientPaint(10, 10, Color.BLUE, 20, 20, Color.BLUE);
        background.setPaint(gradient);
        
        // Test drawing
        DialPlot plot = new DialPlot();
        Rectangle2D.Float view = new Rectangle2D.Float();
        try {
            background.draw(null, plot, null, view);
            fail("Expected NullPointerException for null graphics");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void isClippedToWindowShouldReturnTrue() {
        DialBackground background = new DialBackground();
        assertTrue("Background should be clipped to window", background.isClippedToWindow());
    }

    @Test(timeout = 4000)
    public void getPaintShouldReturnDefaultColor() {
        DialBackground background = new DialBackground();
        assertEquals("Default paint should be white", Color.WHITE, background.getPaint());
    }
}