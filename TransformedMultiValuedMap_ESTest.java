/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:25:21 GMT 2025
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.collections4.multimap.ArrayListValuedLinkedHashMap;
import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
import org.apache.commons.collections4.multimap.LinkedHashSetValuedLinkedHashMap;
import org.apache.commons.collections4.multimap.TransformedMultiValuedMap;
import org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransformedMultiValuedMap_ESTest extends TransformedMultiValuedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1270);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(2934);
      ArrayListValuedLinkedHashMap<Integer, Object> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Object>(2934, 1270);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(arrayListValuedLinkedHashMap0, constantTransformer0, constantTransformer0);
      arrayDeque0.offerFirst(integer0);
      transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
      transformedMultiValuedMap0.putAll((Integer) null, (Iterable<?>) arrayDeque0);
      TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Object>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0, (Transformer<? super Object, ?>) constantTransformer0);
      assertFalse(arrayListValuedLinkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Object, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, Integer>(2566);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(2566);
      hashMap0.put(linkedHashSetValuedLinkedHashMap0, integer0);
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      hashMap0.put(switchTransformer0, (Integer) null);
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) switchTransformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      boolean boolean0 = transformedMultiValuedMap0.putAll((Map<?, ? extends Integer>) hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      Integer integer0 = new Integer((-3473));
      Transformer<Object, Object> transformer1 = ConstantTransformer.constantTransformer((Object) integer0);
      hashSetValuedHashMap0.put(integer0, integer0);
      ArrayListValuedHashMap<Integer, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Object>(hashSetValuedHashMap0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) arrayListValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Object, ?>) transformer1);
      assertFalse(transformedMultiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      ArrayListValuedHashMap<Integer, Boolean> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Boolean>(hashMap0);
      LinkedHashSetValuedLinkedHashMap<Integer, Boolean> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Boolean>(arrayListValuedHashMap0);
      Transformer<Boolean, Boolean> transformer1 = CloneTransformer.cloneTransformer();
      TransformedMultiValuedMap<Integer, Boolean> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Boolean>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Boolean, ? extends Boolean>) transformer1);
      Boolean boolean0 = transformedMultiValuedMap0.transformValue((Boolean) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Object>(0, 0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) arrayListValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) null);
      Object object0 = new Object();
      Object object1 = transformedMultiValuedMap0.transformValue(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(0);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> invokerTransformer0 = new InvokerTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>("", classArray0, classArray0);
      TransformedMultiValuedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) constantTransformer0, (Transformer<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) invokerTransformer0);
      Object object0 = transformedMultiValuedMap0.transformKey(invokerTransformer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Integer> predicate0 = NullPredicate.nullPredicate();
      Transformer<Object, Predicate<Integer>> transformer0 = ConstantTransformer.constantTransformer(predicate0);
      LinkedHashSetValuedLinkedHashMap<Predicate<Integer>, Object> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Predicate<Integer>, Object>();
      TransformedMultiValuedMap<Predicate<Integer>, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Predicate<Integer>, Object>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Predicate<Integer>, ? extends Predicate<Integer>>) transformer0, (Transformer<? super Object, ?>) transformer0);
      Predicate<Integer> predicate1 = transformedMultiValuedMap0.transformKey(predicate0);
      assertSame(predicate0, predicate1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(1, 1);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) arrayListValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(1);
      transformedMultiValuedMap0.put(integer0, (Integer) null);
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Object>();
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap1 = new TransformedMultiValuedMap<Integer, Object>(hashSetValuedHashMap0, transformer0, transformer0);
      boolean boolean0 = transformedMultiValuedMap1.putAll((MultiValuedMap<? extends Integer, ?>) arrayListValuedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Integer, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Integer>();
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(linkedHashSetValuedLinkedHashMap0);
      HashMap<Predicate<Object>, Transformer<Integer, Integer>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends Integer>>) hashMap0);
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Integer>) hashSetValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer((-1));
      boolean boolean0 = transformedMultiValuedMap0.put(integer0, integer0);
      boolean boolean1 = transformedMultiValuedMap0.put(integer0, integer0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Object, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, Integer>(2566);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(2566);
      hashMap0.put(linkedHashSetValuedLinkedHashMap0, integer0);
      linkedHashSetValuedLinkedHashMap0.putAll((Map<?, ? extends Integer>) hashMap0);
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) switchTransformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>((Integer) null);
      HashMap<Locale.FilteringMode, Locale.FilteringMode> hashMap0 = new HashMap<Locale.FilteringMode, Locale.FilteringMode>();
      Transformer<Locale.FilteringMode, Locale.FilteringMode> transformer0 = MapTransformer.mapTransformer((Map<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) hashMap0);
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Locale.FilteringMode, Integer>) null, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      ArrayListValuedLinkedHashMap<Integer, Object> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Object>(hashMap0);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Object>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.transformValue((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSetValuedHashMap<Object, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, Integer>(0);
      Transformer<Integer, Integer>[] transformerArray0 = (Transformer<Integer, Integer>[]) Array.newInstance(Transformer.class, 1);
      ChainedTransformer<Integer> chainedTransformer0 = new ChainedTransformer<Integer>(transformerArray0);
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) hashSetValuedHashMap0, (Transformer<? super Object, ?>) null, (Transformer<? super Integer, ? extends Integer>) chainedTransformer0);
      Integer integer0 = new Integer(16);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.transformValue(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.ChainedTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      Integer integer0 = new Integer((-3473));
      Transformer<Object, Object> transformer1 = ConstantTransformer.constantTransformer((Object) integer0);
      ArrayListValuedHashMap<Integer, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Object>(hashSetValuedHashMap0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) arrayListValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Object, ?>) transformer1);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.transformKey(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(2566);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      InvokerTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> invokerTransformer0 = new InvokerTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((String) null, classArray0, classArray0);
      TransformedMultiValuedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) invokerTransformer0, (Transformer<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>, ? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) invokerTransformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.transformKey(invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(450, 0);
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Integer>(arrayListValuedHashMap0, factoryTransformer0, factoryTransformer0);
      transformedMultiValuedMap0.put(integer0, (Integer) null);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) transformedMultiValuedMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayListValuedLinkedHashMap<Integer, Integer> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      hashMap0.put(integer0, (Integer) null);
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      HashSetValuedHashMap<Object, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Object, Integer>();
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) hashSetValuedHashMap0, (Transformer<? super Object, ?>) factoryTransformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((Map<?, ? extends Integer>) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Integer, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Integer>(1270);
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Integer>(linkedHashSetValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Integer, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Integer>((-1));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Integer>(linkedHashSetValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Integer, ? extends Integer>) null);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((Map<? extends Integer, ? extends Integer>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(630);
      arrayDeque0.offerFirst(integer0);
      HashSetValuedHashMap<Integer, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) hashSetValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((Integer) null, (Iterable<?>) arrayDeque0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1270);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      LinkedHashSetValuedLinkedHashMap<Integer, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Integer>(hashMap0);
      UnmodifiableMultiValuedMap<Integer, Object> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ?>) linkedHashSetValuedLinkedHashMap0);
      Transformer<Object, Integer> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends Integer>) factory0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      Transformer<Object, Object> transformer1 = ClosureTransformer.closureTransformer((Closure<? super Object>) closure0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(unmodifiableMultiValuedMap0, transformer0, transformer1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.offerFirst(integer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayListValuedLinkedHashMap<Integer, Integer> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll(integer0, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // values
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Integer integer0 = new Integer(1270);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.offerFirst(integer0);
      ArrayListValuedLinkedHashMap<Integer, Object> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Object>((-1330));
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1330
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayListValuedLinkedHashMap<Integer, Integer> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer((-1743));
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.put(integer0, (Integer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayListValuedLinkedHashMap<Integer, Integer> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Integer>();
      UnmodifiableMultiValuedMap<Integer, Object> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ?>) arrayListValuedLinkedHashMap0);
      Integer integer0 = new Integer(0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(unmodifiableMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) null, transformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.put(integer0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>((-173));
      Integer integer0 = new Integer((-173));
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) arrayListValuedHashMap0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.put(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -173
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-606));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      ConstantTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> constantTransformer0 = new ConstantTransformer<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(abstractMap_SimpleImmutableEntry0);
      TransformedMultiValuedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformedMultiValuedMap0 = null;
      try {
        transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((MultiValuedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, (Transformer<? super Integer, ? extends Integer>) null, constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      Integer integer0 = new Integer((-3473));
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Integer>(hashSetValuedHashMap0, transformer0, transformer0);
      hashSetValuedHashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) hashSetValuedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>(0);
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Integer>(hashSetValuedHashMap0, transformer0, transformer0);
      boolean boolean0 = transformedMultiValuedMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) hashSetValuedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Object, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, Integer>(2566);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 1);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformer0);
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) switchTransformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      boolean boolean0 = transformedMultiValuedMap0.putAll((Map<?, ? extends Integer>) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Integer, Object> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Object>(0);
      Integer integer0 = new Integer(0);
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(linkedHashSetValuedLinkedHashMap0, factoryTransformer0, factoryTransformer0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.offerFirst(integer0);
      boolean boolean0 = transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
      assertTrue(boolean0);
      
      boolean boolean1 = transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Predicate<Object>, Transformer<Integer, Integer>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Integer>, ? extends Transformer<? super Integer, ? extends Integer>>) hashMap0);
      LinkedHashSetValuedLinkedHashMap<Object, Integer> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Object, Integer>();
      Transformer<Object, Object> transformer1 = InvokerTransformer.invokerTransformer("82{wMeA6MsD+dn#");
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, Integer>) linkedHashSetValuedLinkedHashMap0, (Transformer<? super Object, ?>) transformer1, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(1, comparator0);
      boolean boolean0 = transformedMultiValuedMap0.putAll(object0, (Iterable<? extends Integer>) priorityQueue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(914);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.offerFirst(integer0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ArrayListValuedLinkedHashMap<Integer, Object> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, Object>(hashMap0);
      Transformer<Object, Object> transformer0 = ConstantTransformer.constantTransformer((Object) hashMap0);
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Object>) arrayListValuedLinkedHashMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) transformer0);
      transformedMultiValuedMap0.putAll(integer0, (Iterable<?>) arrayDeque0);
      Transformer<Object, Integer> transformer1 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Object>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) transformer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSetValuedLinkedHashMap<Integer, Predicate<Object>> linkedHashSetValuedLinkedHashMap0 = new LinkedHashSetValuedLinkedHashMap<Integer, Predicate<Object>>(1843);
      UnmodifiableMultiValuedMap<Integer, Predicate<Object>> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ? extends Predicate<Object>>) linkedHashSetValuedLinkedHashMap0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(allPredicate0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(anyPredicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(allPredicate0);
      IfTransformer<Object, Predicate<Object>> ifTransformer0 = new IfTransformer<Object, Predicate<Object>>(notPredicate0, constantTransformer0, constantTransformer0);
      TransformedMultiValuedMap<Integer, Predicate<Object>> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Predicate<Object>>) unmodifiableMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) ifTransformer0);
      Integer integer0 = new Integer(1843);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.put(integer0, nullIsExceptionPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }
}
