/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:29:02 GMT 2025
 */

package com.fasterxml.jackson.core.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.MergedStream;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MergedStream_ESTest extends MergedStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      byte[] byteArray0 = new byte[2];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 255, 1000);
      MergedStream mergedStream1 = new MergedStream(iOContext0, mergedStream0, (byte[]) null, (-2145635554), (-2755));
      long long0 = mergedStream1.skip((-838L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2914);
      byte[] byteArray0 = new byte[8];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (-1), 50000);
      MergedStream mergedStream1 = new MergedStream((IOContext) null, mergedStream0, byteArray0, 255, 15);
      long long0 = mergedStream1.skip(1261L);
      assertEquals(1261L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2914);
      byte[] byteArray0 = new byte[8];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)0, (byte)0);
      long long0 = mergedStream0.skip((byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2914);
      byte[] byteArray0 = new byte[8];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 2914);
      long long0 = mergedStream0.skip(1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null, errorReportConfiguration0);
      IOContext iOContext0 = new IOContext((StreamReadConstraints) null, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, (byte[]) null, 64, 256);
      int int0 = mergedStream0.read((byte[]) null, 0, 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20000000);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 0, 2);
      int int0 = mergedStream0.read();
      assertEquals(231, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, sequenceInputStream0, byteArray0, 0, (byte)0);
      int int0 = mergedStream0.read();
      assertEquals(0, int0);
      
      int int1 = mergedStream0.read();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2914);
      byte[] byteArray0 = new byte[8];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 2914);
      int int0 = mergedStream0.available();
      assertEquals(2913, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      ContentReference contentReference0 = ContentReference.UNKNOWN_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, (StreamWriteConstraints) null, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 2, (-1357));
      int int0 = mergedStream0.available();
      assertEquals((-1359), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pushbackInputStream0, byteArray0, 1000, 200);
      // Undeclared exception!
      try { 
        mergedStream0.skip((-240L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[12];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      mergedStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0, (-794), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[12];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (-10), (-10));
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0, (-10), (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[9];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      mergedStream0.read(byteArray0, 1, 1);
      try { 
        mergedStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)98, (byte)98);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[12];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      mergedStream0.read(byteArray0);
      try { 
        mergedStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      byte[] byteArray0 = new byte[2];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 1, 2);
      // Undeclared exception!
      try { 
        mergedStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)98, (byte)98);
      // Undeclared exception!
      try { 
        mergedStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.REDACTED_CONTENT;
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      MergedStream mergedStream0 = new MergedStream(iOContext0, (InputStream) null, (byte[]) null, 732, (-2929));
      // Undeclared exception!
      try { 
        mergedStream0.markSupported();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20000000);
      byte[] byteArray0 = new byte[2];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 0, 2);
      int int0 = mergedStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(false, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20000000);
      byte[] byteArray0 = new byte[2];
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, byteArray0, 0, 2);
      // Undeclared exception!
      try { 
        mergedStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, sequenceInputStream0, (byte[]) null, 1, 999);
      mergedStream0.close();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (-629), (-629));
      long long0 = mergedStream0.skip((-629));
      assertEquals((-629L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[20];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)98, (byte)98);
      try { 
        mergedStream0.skip((byte)98);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) streamReadConstraints0);
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 20000000);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2447, 2);
      try { 
        mergedStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[12];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      mergedStream0.reset();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)0, 97);
      int int0 = mergedStream0.read(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, (byte[]) null, (-1), (-1));
      // Undeclared exception!
      try { 
        mergedStream0.read((byte[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[12];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      mergedStream0.read(byteArray0, 1, 1);
      try { 
        mergedStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, bufferedInputStream0, (byte[]) null, 65536, 3);
      boolean boolean0 = mergedStream0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, (byte[]) null, (-1), (-1));
      boolean boolean0 = mergedStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[20];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (byte)98, (byte)98);
      boolean boolean0 = mergedStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.redacted();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 500);
      MergedStream mergedStream0 = new MergedStream(iOContext0, pipedInputStream0, (byte[]) null, 2541, 2);
      mergedStream0.mark(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, (-629), (-629));
      mergedStream0.mark((-629));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, pipedInputStream0, byteArray0, 1, 1);
      int int0 = mergedStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = StreamReadConstraints.defaults();
      StreamWriteConstraints streamWriteConstraints0 = StreamWriteConstraints.defaults();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = ContentReference.unknown();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, false);
      File file0 = MockFile.createTempFile("8`3ZeQ", "8`3ZeQ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      MergedStream mergedStream0 = new MergedStream(iOContext0, mockFileInputStream0, (byte[]) null, 50000, 0);
      int int0 = mergedStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MergedStream mergedStream0 = new MergedStream((IOContext) null, (InputStream) null, byteArray0, 0, (byte)98);
      // Undeclared exception!
      try { 
        mergedStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.MergedStream", e);
      }
  }
}
