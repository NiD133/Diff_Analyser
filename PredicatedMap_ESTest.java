/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 11:56:08 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.PredicatedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PredicatedMap_ESTest extends PredicatedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Integer> hashMap0 = new HashMap<HashMap<Integer, Object>, Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicatedMap<HashMap<Integer, Object>, Integer> predicatedMap0 = PredicatedMap.predicatedMap((Map<HashMap<Integer, Object>, Integer>) hashMap0, (Predicate<? super HashMap<Integer, Object>>) onePredicate0, (Predicate<? super Integer>) onePredicate0);
      PredicatedMap<HashMap<Integer, Object>, Integer> predicatedMap1 = new PredicatedMap<HashMap<Integer, Object>, Integer>(predicatedMap0, anyPredicate0, predicateArray0[0]);
      // Undeclared exception!
      try { 
        predicatedMap1.checkSetValue((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Boolean, Predicate<Integer>> hashMap0 = new HashMap<Boolean, Predicate<Integer>>();
      UniquePredicate<Boolean> uniquePredicate0 = new UniquePredicate<Boolean>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate((Integer) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Predicate<Integer>> predicate1 = IdentityPredicate.identityPredicate(predicate0);
      OrPredicate<Predicate<Integer>> orPredicate0 = new OrPredicate<Predicate<Integer>>(predicate1, predicate1);
      PredicatedMap<Boolean, Predicate<Integer>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Boolean, Predicate<Integer>>) hashMap0, (Predicate<? super Boolean>) uniquePredicate0, (Predicate<? super Predicate<Integer>>) orPredicate0);
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate0);
      Integer integer0 = new Integer((-1));
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      predicatedMap0.validate(boolean0, predicate0);
      assertEquals(0, predicatedMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Predicate<Object>, Predicate<Integer>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Integer>>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Integer> comparatorPredicate0 = new ComparatorPredicate<Integer>(integer0, comparator0, comparatorPredicate_Criterion0);
      hashMap0.put(predicate0, comparatorPredicate0);
      PredicatedMap<Predicate<Object>, Predicate<Integer>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Predicate<Object>, Predicate<Integer>>) hashMap0, (Predicate<? super Predicate<Object>>) predicate0, (Predicate<? super Predicate<Integer>>) predicate0);
      assertFalse(predicatedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<HashMap<Integer, Object>, Transformer<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Object>, Transformer<Integer, Integer>>();
      PredicatedMap<HashMap<Integer, Object>, Transformer<Integer, Integer>> predicatedMap0 = new PredicatedMap<HashMap<Integer, Object>, Transformer<Integer, Integer>>(hashMap0, uniquePredicate0, uniquePredicate0);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, HashMap<Object, Object>> hashMap0 = new HashMap<Object, HashMap<Object, Object>>();
      PredicatedMap<Object, HashMap<Object, Object>> predicatedMap0 = new PredicatedMap<Object, HashMap<Object, Object>>(hashMap0, (Predicate<? super Object>) null, (Predicate<? super HashMap<Object, Object>>) null);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Integer> hashMap0 = new HashMap<HashMap<Object, Object>, Integer>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMap<HashMap<Object, Object>, Integer> predicatedMap0 = new PredicatedMap<HashMap<Object, Object>, Integer>(hashMap0, uniquePredicate0, uniquePredicate0);
      Integer integer0 = predicatedMap0.checkSetValue((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Predicate<Object>> hashMap0 = new HashMap<Integer, Predicate<Object>>();
      Transformer<Integer, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      PredicatedMap<Integer, Predicate<Object>> predicatedMap0 = new PredicatedMap<Integer, Predicate<Object>>(hashMap0, transformerPredicate0, (Predicate<? super Predicate<Object>>) null);
      Integer integer0 = new Integer((-2340));
      // Undeclared exception!
      try { 
        predicatedMap0.validate(integer0, (Predicate<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Predicate<Integer>, HashMap<Object, Integer>> hashMap0 = new HashMap<Predicate<Integer>, HashMap<Object, Integer>>();
      PredicatedMap<Predicate<Integer>, HashMap<Object, Integer>> predicatedMap0 = new PredicatedMap<Predicate<Integer>, HashMap<Object, Integer>>(hashMap0, (Predicate<? super Predicate<Integer>>) null, (Predicate<? super HashMap<Object, Integer>>) null);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>((Predicate<? super Object>) null);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) predicateTransformer0);
      PredicatedMap<Predicate<Integer>, HashMap<Object, Integer>> predicatedMap1 = PredicatedMap.predicatedMap((Map<Predicate<Integer>, HashMap<Object, Integer>>) predicatedMap0, (Predicate<? super Predicate<Integer>>) predicate0, (Predicate<? super HashMap<Object, Integer>>) null);
      Predicate<Integer> predicate1 = TruePredicate.truePredicate();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        predicatedMap1.validate(predicate1, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.PredicateTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      HashMap<HashMap<Integer, Object>, Object> hashMap1 = new HashMap<HashMap<Integer, Object>, Object>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedMap<HashMap<Integer, Object>, Object> predicatedMap0 = new PredicatedMap<HashMap<Integer, Object>, Object>(hashMap1, predicate0, predicate0);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        predicatedMap0.validate(hashMap2, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Object, Transformer<Object, Integer>> hashMap0 = new HashMap<Object, Transformer<Object, Integer>>();
      PredicatedMap<Object, Transformer<Object, Integer>> predicatedMap0 = new PredicatedMap<Object, Transformer<Object, Integer>>(hashMap0, predicate0, predicate0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      Integer integer0 = new Integer(1);
      predicatedMap0.put(integer0, transformer0);
      hashMap0.put(predicatedMap0, transformer0);
      // Undeclared exception!
      try { 
        predicatedMap0.putAll(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      HashMap<Object, Transformer<Object, Integer>> hashMap0 = new HashMap<Object, Transformer<Object, Integer>>();
      PredicatedMap<Object, Transformer<Object, Integer>> predicatedMap0 = new PredicatedMap<Object, Transformer<Object, Integer>>(hashMap0, predicate0, predicate0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      hashMap0.put(predicatedMap0, transformer0);
      // Undeclared exception!
      try { 
        predicatedMap0.putAll(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      PredicatedMap<Object, Integer> predicatedMap0 = PredicatedMap.predicatedMap((Map<Object, Integer>) hashMap0, (Predicate<? super Object>) uniquePredicate0, (Predicate<? super Integer>) nonePredicate0);
      Integer integer0 = new Integer(4336);
      // Undeclared exception!
      predicatedMap0.put(integer0, integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMap<Object, HashMap<Integer, Integer>> predicatedMap0 = new PredicatedMap<Object, HashMap<Integer, Integer>>(hashMap0, uniquePredicate0, uniquePredicate0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      PredicatedMap<Object, Integer> predicatedMap1 = PredicatedMap.predicatedMap((Map<Object, Integer>) hashMap1, (Predicate<? super Object>) uniquePredicate0, (Predicate<? super Integer>) uniquePredicate0);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(predicatedMap0, hashMap2);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        predicatedMap1.put(predicatedMap0, integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      HashMap<Predicate<Object>, Object> hashMap1 = new HashMap<Predicate<Object>, Object>();
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      PredicatedMap<Predicate<Object>, Object> predicatedMap0 = new PredicatedMap<Predicate<Object>, Object>(hashMap1, orPredicate0, orPredicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.put(orPredicate0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      hashMap0.put(predicate0, predicate0);
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<Predicate<Object>, Predicate<Object>>) hashMap0, (Predicate<? super Predicate<Object>>) predicate0, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<Integer, Predicate<Object>>) null, (Predicate<? super Integer>) null, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      PredicatedMap<Predicate<Object>, Predicate<Object>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Predicate<Object>, Predicate<Object>>) hashMap0, (Predicate<? super Predicate<Object>>) predicate0, (Predicate<? super Predicate<Object>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.checkSetValue(predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      hashMap0.put(predicate0, predicate0);
      PredicatedMap<Predicate<Object>, Predicate<Object>> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Predicate<Object>, Predicate<Object>>(hashMap0, predicate0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicatedMap<Object, Transformer<Object, Integer>> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Object, Transformer<Object, Integer>>((Map<Object, Transformer<Object, Integer>>) null, predicate0, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      hashMap0.put(uniquePredicate0, uniquePredicate0);
      PredicatedMap<Predicate<Object>, Predicate<Object>> predicatedMap0 = null;
      try {
        predicatedMap0 = new PredicatedMap<Predicate<Object>, Predicate<Object>>(hashMap0, uniquePredicate0, uniquePredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(uniquePredicate0, uniquePredicate0);
      // Undeclared exception!
      try { 
        PredicatedMap.predicatedMap((Map<Object, Object>) hashMap0, (Predicate<? super Object>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap2 = hashMap0.put((Object) null, hashMap1);
      PredicatedMap<Object, HashMap<Integer, Integer>> predicatedMap0 = new PredicatedMap<Object, HashMap<Integer, Integer>>(hashMap0, (Predicate<? super Object>) null, (Predicate<? super HashMap<Integer, Integer>>) null);
      HashMap<Integer, Integer> hashMap3 = predicatedMap0.put((Object) null, hashMap2);
      assertEquals(0, hashMap3.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Object, HashMap<Integer, Integer>> hashMap0 = new HashMap<Object, HashMap<Integer, Integer>>();
      PredicatedMap<Object, HashMap<Integer, Integer>> predicatedMap0 = new PredicatedMap<Object, HashMap<Integer, Integer>>(hashMap0, (Predicate<? super Object>) null, uniquePredicate0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      predicatedMap0.putIfAbsent(hashMap0, hashMap1);
      PredicatedMap<Object, HashMap<Integer, Integer>> predicatedMap1 = null;
      try {
        predicatedMap1 = new PredicatedMap<Object, HashMap<Integer, Integer>>(predicatedMap0, uniquePredicate0, (Predicate<? super HashMap<Integer, Integer>>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, HashMap<Integer, Integer>> hashMap0 = new HashMap<Integer, HashMap<Integer, Integer>>();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedMap<Integer, HashMap<Integer, Integer>> predicatedMap0 = PredicatedMap.predicatedMap((Map<Integer, HashMap<Integer, Integer>>) hashMap0, (Predicate<? super Integer>) predicate0, (Predicate<? super HashMap<Integer, Integer>>) predicate0);
      Integer integer0 = new Integer(0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      predicatedMap0.put(integer0, hashMap1);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Predicate<Integer> predicate1 = NullPredicate.nullPredicate();
      PredicatedMap<Integer, Object> predicatedMap1 = PredicatedMap.predicatedMap((Map<Integer, Object>) hashMap2, (Predicate<? super Integer>) predicate1, (Predicate<? super Object>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMap1.putAll(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      Predicate<Integer> predicate0 = ComparatorPredicate.comparatorPredicate((Integer) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      Predicate<Predicate<Integer>> predicate1 = IdentityPredicate.identityPredicate(predicate0);
      HashMap<Predicate<Integer>, Integer> hashMap0 = new HashMap<Predicate<Integer>, Integer>();
      PredicatedMap<Predicate<Integer>, Integer> predicatedMap0 = new PredicatedMap<Predicate<Integer>, Integer>(hashMap0, predicate1, predicate0);
      predicatedMap0.putAll(predicatedMap0);
      assertTrue(predicatedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMap0);
      PredicatedMap<Object, Integer> predicatedMap0 = new PredicatedMap<Object, Integer>(hashMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.checkSetValue((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      HashMap<Transformer<Object, Integer>, Object> hashMap0 = new HashMap<Transformer<Object, Integer>, Object>();
      PredicatedMap<Transformer<Object, Integer>, Object> predicatedMap0 = PredicatedMap.predicatedMap((Map<Transformer<Object, Integer>, Object>) hashMap0, (Predicate<? super Transformer<Object, Integer>>) uniquePredicate0, (Predicate<? super Object>) uniquePredicate0);
      HashMap hashMap1 = (HashMap)predicatedMap0.checkSetValue(hashMap0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      PredicatedMap<HashMap<Object, Integer>, Object> predicatedMap0 = PredicatedMap.predicatedMap((Map<HashMap<Object, Integer>, Object>) hashMap0, (Predicate<? super HashMap<Object, Integer>>) predicate0, (Predicate<? super Object>) predicate0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        predicatedMap0.put(hashMap1, hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(hashMap0);
      PredicatedMap<Predicate<Object>, Predicate<Object>> predicatedMap0 = new PredicatedMap<Predicate<Object>, Predicate<Object>>(hashMap0, identityPredicate0, identityPredicate0);
      // Undeclared exception!
      try { 
        predicatedMap0.put(identityPredicate0, identityPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }
}
