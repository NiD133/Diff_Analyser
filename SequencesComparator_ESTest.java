/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:18:40 GMT 2025
 */

package org.apache.commons.collections4.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.sequence.EditScript;
import org.apache.commons.collections4.sequence.SequencesComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequencesComparator_ESTest extends SequencesComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Integer integer0 = new Integer((-74));
      linkedList0.addLast(integer0);
      linkedList0.add((Object) integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      Object object1 = new Object();
      linkedList1.add(object1);
      linkedList1.add(object0);
      linkedList0.add((Object) sequencesComparator0);
      linkedList1.add((Object) integer0);
      SequencesComparator<Object> sequencesComparator1 = new SequencesComparator<Object>(linkedList0, linkedList1);
      EditScript<Object> editScript0 = sequencesComparator1.getScript();
      assertEquals(3, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add(object0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(object0);
      linkedList0.add(object0);
      linkedList1.add((Object) linkedList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList1);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(5, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push((Object) null);
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList0, defaultEquator0);
      Object object0 = new Object();
      linkedList0.add(object0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(0, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add(object0);
      Integer integer0 = new Integer((-74));
      linkedList0.add((Object) integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add(object0);
      linkedList1.add(object0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(1, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.add((Object) linkedList1);
      linkedList1.add((Object) list0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList0, (Equator<? super Object>) null);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList0);
      linkedList0.add((Object) sequencesComparator0);
      // Undeclared exception!
      try { 
        sequencesComparator0.getScript();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>((List<Object>) null, (List<Object>) null, defaultEquator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Integer integer0 = new Integer(0);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      linkedList0.add((Object) boolean0);
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>(linkedList0, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offerFirst(linkedList1);
      Object object0 = new Object();
      linkedList1.add(object0);
      linkedList1.add((Object) linkedList0);
      linkedList1.add(object0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList1);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList1.add((Object) linkedList0);
      linkedList1.add((Object) linkedList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList1);
      linkedList1.add((Object) linkedList0);
      linkedList1.offer(sequencesComparator0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList0.add((Object) linkedList1);
      Object object0 = new Object();
      linkedList0.offerFirst(object0);
      linkedList0.add((Object) linkedList1);
      linkedList0.add((Object) linkedList1);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(4, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      linkedList1.add((Object) linkedList1);
      linkedList1.add((Object) linkedList0);
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList1, linkedList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(2, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SequencesComparator<Object> sequencesComparator0 = new SequencesComparator<Object>(linkedList0, linkedList0);
      EditScript<Object> editScript0 = sequencesComparator0.getScript();
      assertEquals(0, editScript0.getModifications());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SequencesComparator<Object> sequencesComparator0 = null;
      try {
        sequencesComparator0 = new SequencesComparator<Object>((List<Object>) null, (List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.SequencesComparator", e);
      }
  }
}
