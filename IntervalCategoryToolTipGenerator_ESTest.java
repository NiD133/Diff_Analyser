/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:09:25 GMT 2025
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.NumberFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalCategoryToolTipGenerator_ESTest extends IntervalCategoryToolTipGenerator_ESTest_scaffolding {

    // Constructor Validation Tests
    //----------------------------------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void constructorWithNullNumberFormat_shouldThrowIllegalArgumentException() {
        try {
            new IntervalCategoryToolTipGenerator("({0}, {1}) = {2}", (NumberFormat) null);
            fail("Expected IllegalArgumentException due to null NumberFormat");
        } catch (IllegalArgumentException e) {
            verifyException("org.jfree.chart.internal.Args", e);
        }
    }

    @Test(timeout = 4000)
    public void constructorWithNullDateFormat_shouldThrowIllegalArgumentException() {
        try {
            new IntervalCategoryToolTipGenerator("({0}, {1}) = {2}", (DateFormat) null);
            fail("Expected IllegalArgumentException due to null DateFormat");
        } catch (IllegalArgumentException e) {
            verifyException("org.jfree.chart.internal.Args", e);
        }
    }

    // Exception Handling Tests for createItemArray
    //----------------------------------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void createItemArrayWithNullDataset_shouldThrowNullPointerException() {
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        try {
            generator.createItemArray(null, 70, 70);
            fail("Expected NullPointerException for null dataset");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void createItemArrayWithNegativeIndices_shouldThrowIndexOutOfBoundsException() {
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset();
        try {
            generator.createItemArray(dataset, -2580, -2580);
            fail("Expected IndexOutOfBoundsException for negative indices");
        } catch (IndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void createItemArrayWithInvalidRowIndex_shouldThrowIllegalArgumentException() {
        double[][] data = new double[0][1];
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(data, data);
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        try {
            generator.createItemArray(dataset, 1696, 1696);
            fail("Expected IllegalArgumentException for invalid row index");
        } catch (IllegalArgumentException e) {
            verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
        }
    }

    @Test(timeout = 4000)
    public void createItemArrayWithInvalidColumnIndex_shouldThrowArrayIndexOutOfBoundsException() {
        double[][] data = new double[14][4];
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(data, data);
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        try {
            generator.createItemArray(dataset, 13, 13);
            fail("Expected ArrayIndexOutOfBoundsException for invalid column index");
        } catch (ArrayIndexOutOfBoundsException e) {
            verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
        }
    }

    // Functionality Tests for createItemArray
    //----------------------------------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void createItemArrayWithValidInput_shouldReturnCorrectArrayLength() {
        double[][] data = new double[8][4];
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(data, data);
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        Object[] result = generator.createItemArray(dataset, 0, 0);
        assertEquals("Array should contain 5 elements", 5, result.length);
    }

    @Test(timeout = 4000)
    public void createItemArrayWithDateFormat_shouldReturnCorrectArrayLength() {
        MockSimpleDateFormat dateFormat = new MockSimpleDateFormat();
        IntervalCategoryToolTipGenerator generator = 
            new IntervalCategoryToolTipGenerator("org.jfree.chart.labels.IntervalCategoryToolTipGenerator", dateFormat);
        double[][] data = new double[5][4];
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(data, data);
        Object[] result = generator.createItemArray(dataset, 0, 0);
        assertEquals("Array should contain 5 elements", 5, result.length);
    }

    @Test(timeout = 4000)
    public void createItemArrayWithDateTimeFormat_shouldReturnCorrectArrayLength() {
        DateFormat dateFormat = DateFormat.getDateTimeInstance(0, 0);
        IntervalCategoryToolTipGenerator generator = 
            new IntervalCategoryToolTipGenerator("t:RbWj+5v<m\\uAAUW", dateFormat);
        double[][] data = new double[7][4];
        DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(data, data);
        Object[] result = generator.createItemArray(dataset, 0, 3);
        assertEquals("Array should contain 5 elements", 5, result.length);
    }

    // Equals and HashCode Tests
    //----------------------------------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void equalsWithDifferentFormatStrings_shouldReturnFalse() {
        DateFormat dateFormat = MockDateFormat.getTimeInstance();
        IntervalCategoryToolTipGenerator generator1 = new IntervalCategoryToolTipGenerator("", dateFormat);
        IntervalCategoryToolTipGenerator generator2 = 
            new IntervalCategoryToolTipGenerator("({0}, {1}) = {3} - {4}", dateFormat);
        assertFalse("Generators with different formats should not be equal", generator1.equals(generator2));
    }

    @Test(timeout = 4000)
    public void equalsWithSameObject_shouldReturnTrue() {
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        assertTrue("Generator should be equal to itself", generator.equals(generator));
    }

    @Test(timeout = 4000)
    public void equalsWithNonGeneratorObject_shouldReturnFalse() {
        NumberFormat numberFormat = NumberFormat.getPercentInstance();
        IntervalCategoryToolTipGenerator generator = 
            new IntervalCategoryToolTipGenerator("Te{[wtf@3LG|<`-", numberFormat);
        assertFalse("Generator should not equal a String", generator.equals("Te{[wtf@3LG|<`-"));
    }

    @Test(timeout = 4000)
    public void hashCode_shouldComputeWithoutException() {
        IntervalCategoryToolTipGenerator generator = new IntervalCategoryToolTipGenerator();
        generator.hashCode(); // Simply verify no exception
    }
}