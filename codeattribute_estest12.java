package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.unpack200.Segment;
import org.junit.Test;
import java.util.List;

/**
 * This test class contains tests for the {@link CodeAttribute} class.
 * The original test class name was generated by a tool; a more descriptive name would be CodeAttributeTest.
 */
public class CodeAttribute_ESTestTest12 extends CodeAttribute_ESTest_scaffolding {

    /**
     * Tests that the CodeAttribute constructor throws a NullPointerException when
     * constructed with a null Segment. The Segment is a required dependency for
     * processing bytecodes, and passing null represents an invalid state that should
     * lead to a failure.
     */
    @Test(expected = NullPointerException.class)
    public void constructorShouldThrowNPEWhenSegmentIsNull() {
        // Arrange
        final int maxStack = 295;
        final int maxLocals = 295;
        final byte[] bytecodeBytes = new byte[17]; // An arbitrary, non-empty bytecode array
        final Segment nullSegment = null;
        final List<ExceptionTableEntry> nullExceptionTable = null;

        // This OperandManager is initialized with null for all its internal operand arrays.
        // This is part of the state that might contribute to the failure.
        final OperandManager operandManager = new OperandManager(
            null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null);

        // Act: Instantiating CodeAttribute with a null segment is expected to throw.
        new CodeAttribute(maxStack, maxLocals, bytecodeBytes, nullSegment, operandManager, nullExceptionTable);

        // Assert: The @Test(expected) annotation handles the exception verification.
    }
}