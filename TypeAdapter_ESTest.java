/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:32:02 GMT 2025
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeAdapter_ESTest extends TypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringWriter stringWriter0 = new StringWriter();
      typeAdapter0.toJson((Writer) stringWriter0, (Object) null);
      assertEquals("null", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      TypeAdapter<Integer> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      JsonElement jsonElement0 = typeAdapter0.toJsonTree((Integer) null);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      String string0 = typeAdapter0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("null");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Object object0 = typeAdapter0.read(jsonReader0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      Object object0 = typeAdapter0.fromJsonTree(jsonNull0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("null");
      Object object0 = typeAdapter0.fromJson((Reader) stringReader0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.write((JsonWriter) null, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Object>();
      gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      gson_FutureTypeAdapter0.toJsonTree(gson_FutureTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      // Undeclared exception!
      gson_FutureTypeAdapter0.toJson((Object) gson_FutureTypeAdapter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Writer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("MZ8");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        typeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      // Undeclared exception!
      gson_FutureTypeAdapter0.read((JsonReader) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      // Undeclared exception!
      try { 
        typeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.TypeAdapter$NullSafeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      TypeAdapter<Integer> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        typeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        typeAdapter0.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      // Undeclared exception!
      gson_FutureTypeAdapter0.fromJsonTree((JsonElement) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      // Undeclared exception!
      try { 
        typeAdapter0.fromJsonTree((JsonElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.JsonTreeReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      try { 
        typeAdapter0.fromJson("CU^I6g<Up/h/ru@&");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter1 = new Gson.FutureTypeAdapter<Integer>();
      gson_FutureTypeAdapter1.setDelegate(gson_FutureTypeAdapter0);
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter1);
      // Undeclared exception!
      gson_FutureTypeAdapter0.fromJson(")");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      try { 
        typeAdapter0.fromJson("");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("com.google.gson.TypeAdapter$1");
      try { 
        typeAdapter0.fromJson((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      gson_FutureTypeAdapter0.setDelegate(gson_FutureTypeAdapter0);
      StringReader stringReader0 = new StringReader("*fz,5?7>Q");
      // Undeclared exception!
      gson_FutureTypeAdapter0.fromJson((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson((Reader) stringReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      try { 
        typeAdapter0.fromJson((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      StringReader stringReader0 = new StringReader("");
      try { 
        typeAdapter0.fromJson((Reader) stringReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Writer) stringWriter0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      Object object0 = typeAdapter0.fromJson("null");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      Character character0 = new Character('B');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      // Undeclared exception!
      try { 
        typeAdapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      // Undeclared exception!
      try { 
        typeAdapter0.write((JsonWriter) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.TypeAdapter$NullSafeTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      TypeAdapter<Object> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      // Undeclared exception!
      try { 
        typeAdapter0.toJsonTree(gson_FutureTypeAdapter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      TypeAdapter<Integer> typeAdapter0 = gson_FutureTypeAdapter0.nullSafe();
      TypeAdapter<Integer> typeAdapter1 = typeAdapter0.nullSafe();
      assertSame(typeAdapter1, typeAdapter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gson.FutureTypeAdapter<Integer> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Integer>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.fromJson(")");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gson.FutureTypeAdapter<Object> gson_FutureTypeAdapter0 = new Gson.FutureTypeAdapter<Object>();
      // Undeclared exception!
      try { 
        gson_FutureTypeAdapter0.toJson((Object) gson_FutureTypeAdapter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Adapter for type with cyclic dependency has been used before dependency has been resolved
         //
         verifyException("com.google.gson.Gson$FutureTypeAdapter", e);
      }
  }
}
