/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:55:52 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Vector;
import org.apache.commons.io.input.SequenceReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequenceReader_ESTest extends SequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("!DROK>c");
      arrayDeque0.add(stringReader0);
      StringReader stringReader1 = new StringReader("org.apache.commons.io.filefilter.CanExecuteFileFilter");
      arrayDeque0.add(stringReader1);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      long long0 = sequenceReader0.skip(204L);
      assertEquals(60L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      char[] charArray0 = new char[7];
      int int0 = sequenceReader0.read(charArray0, 1, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      // Undeclared exception!
      try { 
        sequenceReader0.read((char[]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cbuf
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      Reader[] readerArray0 = new Reader[2];
      readerArray0[0] = (Reader) stringReader0;
      readerArray0[1] = (Reader) stringReader0;
      SequenceReader sequenceReader0 = new SequenceReader(readerArray0);
      char[] charArray0 = new char[3];
      try { 
        sequenceReader0.read(charArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("");
      arrayDeque0.add(stringReader0);
      arrayDeque0.add(stringReader0);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      arrayDeque0.add(stringReader0);
      // Undeclared exception!
      try { 
        sequenceReader0.read();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Reader[] readerArray0 = new Reader[1];
      PipedReader pipedReader0 = new PipedReader();
      readerArray0[0] = (Reader) pipedReader0;
      SequenceReader sequenceReader0 = new SequenceReader(readerArray0);
      try { 
        sequenceReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<StringReader> vector0 = new Vector<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(vector0);
      StringReader stringReader0 = new StringReader("_cA{/)2>I@4NJ(");
      vector0.add(stringReader0);
      // Undeclared exception!
      try { 
        sequenceReader0.close();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SequenceReader sequenceReader0 = null;
      try {
        sequenceReader0 = new SequenceReader((Reader[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<StringReader> arrayList0 = new ArrayList<StringReader>();
      List<StringReader> list0 = arrayList0.subList(0, 0);
      StringReader stringReader0 = new StringReader("Array Size=");
      arrayList0.add(stringReader0);
      SequenceReader sequenceReader0 = null;
      try {
        sequenceReader0 = new SequenceReader(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SequenceReader sequenceReader0 = null;
      try {
        sequenceReader0 = new SequenceReader((Iterable<? extends Reader>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // readers
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("directoryFilter");
      arrayDeque0.add(stringReader0);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      char[] charArray0 = new char[3];
      int int0 = sequenceReader0.read(charArray0, 1, 1);
      assertArrayEquals(new char[] {'\u0000', 'd', '\u0000'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        sequenceReader0.read(charArray0, 136209934, 136209934);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=136209934, length=136209934
         //
         verifyException("org.apache.commons.io.input.SequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        sequenceReader0.read(charArray0, (-1), 825);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=-1, length=825
         //
         verifyException("org.apache.commons.io.input.SequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        sequenceReader0.read(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=7, offset=-1, length=-1
         //
         verifyException("org.apache.commons.io.input.SequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("");
      arrayDeque0.add(stringReader0);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      int int0 = sequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("directoryFilter");
      arrayDeque0.add(stringReader0);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      int int0 = sequenceReader0.read();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<StringReader> arrayDeque0 = new ArrayDeque<StringReader>();
      StringReader stringReader0 = new StringReader("T37");
      arrayDeque0.add(stringReader0);
      arrayDeque0.add(stringReader0);
      SequenceReader sequenceReader0 = new SequenceReader(arrayDeque0);
      sequenceReader0.close();
  }
}
