package com.google.common.graph;

import static org.junit.Assert.assertFalse;
import org.junit.Test;

/**
 * Tests for {@link EndpointPair}'s equality logic.
 * Note: The original test class name `EndpointPair_ESTestTest19` was generated by a tool.
 * A more conventional name would be `EndpointPairTest`.
 */
public class EndpointPair_ESTestTest19 {

    /**
     * Tests that two ordered EndpointPairs are not equal if they have the same source
     * but different targets.
     */
    @Test
    public void equals_orderedPairsWithSameSourceAndDifferentTargets_returnsFalse() {
        // Arrange
        Integer sourceNode = -1068;
        Integer targetNode = 0;

        // An ordered pair representing a directed edge from sourceNode to targetNode.
        EndpointPair<Integer> pair = EndpointPair.ordered(sourceNode, targetNode);

        // An ordered pair representing a directed self-loop on the sourceNode.
        // The original test created this using EndpointPair.of(directedNetwork, ...),
        // which is equivalent to calling EndpointPair.ordered(...) and is clearer.
        EndpointPair<Integer> selfLoopPair = EndpointPair.ordered(sourceNode, sourceNode);

        // Act
        boolean areEqual = pair.equals(selfLoopPair);

        // Assert
        // According to the equals() contract, two ordered pairs are equal only if their
        // sources and targets are both equal. Here, the targets differ (0 vs. -1068).
        assertFalse(
            "An ordered pair should not be equal to another with a different target.", areEqual);
    }
}