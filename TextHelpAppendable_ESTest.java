/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:35:37 GMT 2025
 */

package org.apache.commons.cli.help;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.cli.help.TableDefinition;
import org.apache.commons.cli.help.TextHelpAppendable;
import org.apache.commons.cli.help.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class TextHelpAppendable_ESTest extends TextHelpAppendable_ESTest_scaffolding {

    // ========================================================================
    // INDEX OF WRAP TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testIndexOfWrap_FindsWrapPositionAtMaxWidth() throws Throwable {
        int actual = TextHelpAppendable.indexOfWrap("Width must be greater than 0", 1, 26);
        assertEquals(26, actual);
    }

    @Test(timeout = 4000)
    public void testIndexOfWrap_FindsWrapPositionAfterStartPos() throws Throwable {
        int actual = TextHelpAppendable.indexOfWrap("Width must be greater than 0", 3, 3);
        assertEquals(5, actual);
    }

    @Test(timeout = 4000)
    public void testIndexOfWrap_HandlesEmptyBuffer() throws Throwable {
        StringWriter writer = new StringWriter();
        StringBuffer buffer = writer.getBuffer();
        int actual = TextHelpAppendable.indexOfWrap(buffer, 74, 1047);
        assertEquals(0, actual);
    }

    @Test(timeout = 4000)
    public void testIndexOfWrap_HandlesBufferWithNewline() throws Throwable {
        byte[] bytes = new byte[3];
        bytes[1] = (byte) 11;  // Represents newline character
        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
        CharBuffer charBuffer = Charset.defaultCharset().decode(byteBuffer);
        int actual = TextHelpAppendable.indexOfWrap(charBuffer, 74, 1);
        assertEquals(1, actual);
    }

    // ========================================================================
    // APPEND LIST TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testAppendList_HandlesDuplicates() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        CharBuffer buffer = CharBuffer.allocate(3);
        ArrayDeque<CharSequence> list = new ArrayDeque<>();
        list.add(buffer);
        list.add(buffer);
        
        appendable.appendList(true, list);
        
        assertEquals(1, appendable.getLeftPad());
        assertEquals(3, appendable.getIndent());
        assertEquals(74, appendable.getMaxWidth());
    }

    @Test(timeout = 4000)
    public void testAppendList_HandlesEmptyList() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        PipedWriter writer = new PipedWriter();
        TextHelpAppendable testAppendable = new TextHelpAppendable(writer);
        LinkedHashSet<CharSequence> list = new LinkedHashSet<>();
        
        testAppendable.appendList(true, list);
        
        assertEquals(3, testAppendable.getIndent());
        assertEquals(74, testAppendable.getMaxWidth());
        assertEquals(1, testAppendable.getLeftPad());
    }

    // ========================================================================
    // APPEND HEADER TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testAppendHeader_HandlesCharBuffer() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        
        appendable.appendHeader(1, buffer);
        
        assertEquals(1, appendable.getLeftPad());
        assertEquals(3, appendable.getIndent());
        assertEquals(74, appendable.getMaxWidth());
    }

    @Test(timeout = 4000)
    public void testAppendHeader_RejectsInvalidLevel() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        CharBuffer buffer = CharBuffer.allocate(74);
        
        try {
            appendable.appendHeader(-1794, buffer);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("level must be at least 1", e.getMessage());
        }
    }

    // ========================================================================
    // APPEND TABLE TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testAppendTable_HandlesValidTable() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        ArrayList<TextStyle> styles = new ArrayList<>();
        styles.add(TextStyle.DEFAULT);
        
        ArrayList<String> headers = new ArrayList<>();
        headers.add("|iq2*P~/");
        
        PriorityQueue<List<String>> rows = new PriorityQueue<>();
        ArrayList<String> row = new ArrayList<>();
        row.add("LG");
        rows.add(row);
        
        LinkedList<String> columns = new LinkedList<>();
        columns.add("");
        
        TableDefinition table = TableDefinition.from("", styles, columns, rows);
        appendable.appendTable(table);
        
        assertEquals(3, appendable.getIndent());
        assertEquals(1, appendable.getLeftPad());
    }

    @Test(timeout = 4000)
    public void testAppendTable_RejectsNullTable() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        
        try {
            appendable.appendTable(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // ========================================================================
    // STYLE BUILDER TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testGetTextStyleBuilder_ReturnsDefaultValues() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        TextStyle.Builder builder = appendable.getTextStyleBuilder();
        
        assertEquals(1, builder.getLeftPad());
        assertEquals(3, builder.getIndent());
        assertEquals(74, builder.getMaxWidth());
    }

    @Test(timeout = 4000)
    public void testResizeStyle_AdjustsValuesCorrectly() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        TextStyle.Builder builder = appendable.getTextStyleBuilder();
        
        builder.setMinWidth(74);
        TextStyle.Builder resized = appendable.resize(builder, 2449.966132214);
        
        assertEquals(1, resized.getLeftPad());
        assertEquals(3, resized.getIndent());
        assertEquals(74, resized.getMaxWidth());
    }

    // ========================================================================
    // PRINT WRAPPED TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testPrintWrapped_HandlesValidText() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        appendable.printWrapped("Width must be greater than 0", TextStyle.DEFAULT);
        
        assertEquals(3, appendable.getIndent());
        assertEquals(74, appendable.getMaxWidth());
    }

    @Test(timeout = 4000)
    public void testPrintWrapped_RejectsNullText() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        
        try {
            appendable.printWrapped(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // ========================================================================
    // EDGE CASE & EXCEPTION TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testAppendParagraph_ThrowsWhenBufferFull() throws Throwable {
        CharBuffer buffer = CharBuffer.allocate(1);
        TextHelpAppendable appendable = new TextHelpAppendable(buffer);
        
        try {
            appendable.appendParagraph(buffer);
            fail("Expected BufferOverflowException");
        } catch (BufferOverflowException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testWriteColumnQueues_ThrowsOnSizeMismatch() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        Vector<Queue<String>> queues = new Vector<>();
        TreeSet<String> set = new TreeSet<>();
        PriorityQueue<String> queue = new PriorityQueue<>(set);
        queues.add(queue);
        
        LinkedList<TextStyle> styles = new LinkedList<>();
        
        try {
            appendable.writeColumnQueues(queues, styles);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    // ========================================================================
    // PROPERTY ACCESSOR TESTS
    // ========================================================================
    
    @Test(timeout = 4000)
    public void testGetMaxWidth_ReturnsDefaultValue() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        assertEquals(74, appendable.getMaxWidth());
    }

    @Test(timeout = 4000)
    public void testSetMaxWidth_UpdatesValue() throws Throwable {
        TextHelpAppendable appendable = TextHelpAppendable.systemOut();
        appendable.setMaxWidth(100);
        assertEquals(100, appendable.getMaxWidth());
    }
}