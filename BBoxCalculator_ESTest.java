/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:36:03 GMT 2025
 */

package org.locationtech.spatial4j.shape.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.spatial4j.context.SpatialContext;
import org.locationtech.spatial4j.context.SpatialContextFactory;
import org.locationtech.spatial4j.distance.GeodesicSphereDistCalc;
import org.locationtech.spatial4j.shape.Point;
import org.locationtech.spatial4j.shape.Rectangle;
import org.locationtech.spatial4j.shape.impl.BBoxCalculator;
import org.locationtech.spatial4j.shape.impl.PointImpl;
import org.locationtech.spatial4j.shape.impl.RectangleImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BBoxCalculator_ESTest extends BBoxCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SpatialContext spatialContext0 = SpatialContextFactory.makeSpatialContext(hashMap0, classLoader0);
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.NEGATIVE_INFINITY, 0.0);
      double double0 = bBoxCalculator0.getMaxX();
      assertEquals(0.0, double0, 0.01);
      
      bBoxCalculator0.expandXRange(Double.NEGATIVE_INFINITY, 4108.846834);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(1107.2515, Double.POSITIVE_INFINITY);
      bBoxCalculator0.expandRange((-59.73795920817872), 6.283185307179586, 1.0, (-180.0));
      double double0 = bBoxCalculator0.getMaxX();
      assertEquals(1.0, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(6.283185307179586, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = spatialContextFactory0.newSpatialContext();
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(2645.56006566, (-1.0), 0.0, (-388.0));
      double double0 = bBoxCalculator0.getMinY();
      assertEquals((-388.0), bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = spatialContextFactory0.newSpatialContext();
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(1.0, 1.0, (-388.0), 0.0);
      double double0 = bBoxCalculator0.getMinY();
      assertEquals((-388.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = spatialContextFactory0.newSpatialContext();
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(0.0, 1.0, 1.0, (-388.0));
      double double0 = bBoxCalculator0.getMinX();
      assertEquals((-388.0), bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = spatialContextFactory0.newSpatialContext();
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange((-388.0), 1.0, (-388.0), (-2148.3));
      double double0 = bBoxCalculator0.getMinX();
      assertEquals((-388.0), bBoxCalculator0.getMinY(), 0.01);
      assertEquals((-388.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = spatialContextFactory0.newSpatialContext();
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(1.0, 1.0, (-388.0), 0.0);
      double double0 = bBoxCalculator0.getMaxY();
      assertEquals((-388.0), bBoxCalculator0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange((-104.6238989593), 2621.8399556940103, 2621.8399556940103, 1.0);
      double double0 = bBoxCalculator0.getMaxY();
      assertEquals(2621.8399556940103, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(1.0, 488.83, (-90.0), (-1.0));
      bBoxCalculator0.expandXRange((-4.508820214381481), (-90.0));
      bBoxCalculator0.getBoundary();
      assertEquals((-90.0), bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(1.0, 488.83, (-90.0), (-1.0));
      bBoxCalculator0.expandXRange(1.0, (-90.0));
      bBoxCalculator0.getBoundary();
      assertEquals((-90.0), bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      
      bBoxCalculator0.expandRange(Double.NaN, 0.0, 0.0, 0.0);
      Rectangle rectangle0 = bBoxCalculator0.getBoundary();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator((SpatialContext) null);
      // Undeclared exception!
      try { 
        bBoxCalculator0.getBoundary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.shape.impl.BBoxCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator((SpatialContext) null);
      // Undeclared exception!
      try { 
        bBoxCalculator0.expandXRange((-751.777671), (-751.777671));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.shape.impl.BBoxCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      // Undeclared exception!
      try { 
        bBoxCalculator0.expandRange((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.shape.impl.BBoxCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator((SpatialContext) null);
      // Undeclared exception!
      try { 
        bBoxCalculator0.expandRange((-610.206), (-610.206), (-610.206), (-610.206));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.shape.impl.BBoxCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator((SpatialContext) null);
      // Undeclared exception!
      try { 
        bBoxCalculator0.doesXWorldWrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.shape.impl.BBoxCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      double double0 = bBoxCalculator0.getMaxX();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      double double0 = bBoxCalculator0.getMinX();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange((-180.0), (-431.7), (-180.0), (-431.7));
      bBoxCalculator0.getMaxX();
      boolean boolean0 = bBoxCalculator0.doesXWorldWrap();
      assertEquals((-180.0), bBoxCalculator0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      Rectangle rectangle0 = spatialContext0.getWorldBounds();
      bBoxCalculator0.expandRange(rectangle0);
      bBoxCalculator0.getMaxX();
      boolean boolean0 = bBoxCalculator0.doesXWorldWrap();
      assertEquals((-90.0), bBoxCalculator0.getMinY(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.doesXWorldWrap();
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange((-10.370441159547157), (-10.370441159547157));
      bBoxCalculator0.expandXRange(685.7212616972, (-10.370441159547157));
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      double double0 = bBoxCalculator0.getMaxY();
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SpatialContext spatialContext0 = SpatialContextFactory.makeSpatialContext(hashMap0, classLoader0);
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      double double0 = bBoxCalculator0.getMinY();
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange((-180.0), 3844.24, 2361.0, 939.22948782);
      bBoxCalculator0.getMaxX();
      bBoxCalculator0.expandXRange(3844.24, Double.POSITIVE_INFINITY);
      assertEquals(939.22948782, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        bBoxCalculator0.getBoundary();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // maxY must be >= minY: Infinity to -Infinity
         //
         verifyException("org.locationtech.spatial4j.shape.impl.ShapeFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      bBoxCalculator0.expandRange((-5743.7453681), (-5743.7453681), Double.NEGATIVE_INFINITY, (-5743.7453681));
      bBoxCalculator0.expandXRange((-5743.7453681), Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      bBoxCalculator0.expandRange((-5743.7453681), (-5743.7453681), Double.POSITIVE_INFINITY, (-5743.7453681));
      bBoxCalculator0.expandXRange((-5743.7453681), Double.POSITIVE_INFINITY);
      assertEquals((-5743.7453681), bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(1198.228879, Double.NaN);
      bBoxCalculator0.expandXRange(1198.228879, Double.NaN);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      GeodesicSphereDistCalc.LawOfCosines geodesicSphereDistCalc_LawOfCosines0 = new GeodesicSphereDistCalc.LawOfCosines();
      PointImpl pointImpl0 = new PointImpl(0.621371192, 0.621371192, spatialContext0);
      Point point0 = geodesicSphereDistCalc_LawOfCosines0.pointOnBearing(pointImpl0, 0.621371192, 0.621371192, spatialContext0, pointImpl0);
      RectangleImpl rectangleImpl0 = new RectangleImpl(point0, point0, spatialContext0);
      bBoxCalculator0.expandRange((Rectangle) rectangleImpl0);
      bBoxCalculator0.expandXRange(0.621371192, 0.621371192);
      bBoxCalculator0.getBoundary();
      assertEquals(1.242705837824413, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(0.0, Double.POSITIVE_INFINITY);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, (-1.1667848932113465));
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandRange(Double.POSITIVE_INFINITY, (-3518.505381128807), 1.0, 2.0);
      bBoxCalculator0.expandXRange(0.0, (-1.0));
      bBoxCalculator0.getBoundary();
      assertEquals(2.0, bBoxCalculator0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BBoxCalculator bBoxCalculator0 = new BBoxCalculator(spatialContext0);
      bBoxCalculator0.expandXRange(1396.8914426933839, (-10.370441159547157));
      bBoxCalculator0.expandXRange((-10.370441159547157), 1396.8914426933839);
      bBoxCalculator0.expandXRange(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, bBoxCalculator0.getMinY(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, bBoxCalculator0.getMaxY(), 0.01);
  }
}
