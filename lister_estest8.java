package org.apache.commons.compress.archivers;

import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * This test suite contains tests for the {@link Lister} class.
 * This specific test was generated by EvoSuite and has been improved for clarity.
 */
public class Lister_ESTestTest8 extends Lister_ESTest_scaffolding {

    /**
     * Tests that Lister#go() throws a NoClassDefFoundError when the "7z" format
     * is specified, but the required SevenZFile class is not on the classpath.
     * This simulates an environment where optional 7z dependencies are missing.
     */
    @Test(timeout = 4000)
    public void goShouldThrowErrorFor7zFormatWhenSevenZDependencyIsMissing() {
        // Arrange: Set up command-line arguments to specify a 7z archive.
        // The file path doesn't need to exist, as the test should fail on class loading
        // before any file access occurs.
        final String dummyArchivePath = "archive.7z";
        final String archiveFormat = "7z";
        final String[] commandLineArgs = {dummyArchivePath, archiveFormat};

        // The 'quiet' flag is set to true to minimize console output during the test.
        final Lister lister = new Lister(true, commandLineArgs);

        // Act & Assert
        try {
            lister.go();
            fail("Expected a NoClassDefFoundError because the SevenZFile class is not available in this test's environment.");
        } catch (final NoClassDefFoundError e) {
            // Assert that the error is specifically about the missing SevenZFile class.
            final String expectedMissingClass = "org/apache/commons/compress/archivers/sevenz/SevenZFile";
            final String errorMessage = e.getMessage();
            
            assertTrue(
                "The error message should contain the name of the missing class: " + expectedMissingClass,
                errorMessage != null && errorMessage.contains(expectedMissingClass)
            );
        } catch (final Throwable t) {
            // Fail the test if an unexpected exception or error is thrown.
            fail("Caught an unexpected Throwable: " + t);
        }
    }
}