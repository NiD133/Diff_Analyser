/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:10:08 GMT 2025
 */

package org.jfree.chart.annotations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.Drawable;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.legend.LegendTitle;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarAxisLocation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.general.DefaultValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYDrawableAnnotation_ESTest extends XYDrawableAnnotation_ESTest_scaffolding {

    // Test cases focus on core functionality: construction, properties, drawing, and equality

    // Tests for getter methods
    @Test(timeout = 4000)
    public void testGettersAfterConstruction() {
        TextTitle textTitle = new TextTitle("(Sq");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-2648.3, -2648.3, -1549.15850542798, 2.0, textTitle);
        
        assertEquals(-2648.3, annotation.getX(), 0.01);
        assertEquals(-2648.3, annotation.getY(), 0.01);
        assertEquals(-1549.15850542798, annotation.getDisplayWidth(), 0.01);
        assertEquals(2.0, annotation.getDisplayHeight(), 0.01);
        assertEquals(1.0, annotation.getDrawScaleFactor(), 0.01);
    }

    @Test(timeout = 4000)
    public void testHashCodeConsistency() {
        TextTitle textTitle = new TextTitle("(Sq");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-2648.3, -2648.3, -1549.15850542798, 2.0, textTitle);
        annotation.hashCode(); // Verify no exception
    }

    // Tests for equality and comparison
    @Test(timeout = 4000)
    public void testEqualityWithDifferentScaleFactor() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(-2674.765041096609, -2674.765041096609, 2.0, -2674.765041096609, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(-2674.765041096609, -2674.765041096609, 2.0, -2674.765041096609, -888.093, drawable);
        
        assertNotEquals(annotation1, annotation2);
        assertEquals(-2674.765041096609, annotation2.getY(), 0.01);
        assertEquals(2.0, annotation2.getDisplayWidth(), 0.01);
        assertEquals(-2674.765041096609, annotation2.getX(), 0.01);
        assertEquals(-888.093, annotation2.getDrawScaleFactor(), 0.01);
        assertEquals(-2674.765041096609, annotation2.getDisplayHeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentHeight() {
        TextTitle textTitle = new TextTitle("");
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(0.0, 0.0, 0.0, -1062.3, textTitle);
        ScatterRenderer renderer = new ScatterRenderer();
        LegendTitle legend = new LegendTitle(renderer);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(0.0, 0.0, 0.0, 26.840400407963966, 26.840400407963966, legend);
        
        assertNotEquals(annotation1, annotation2);
        assertEquals(0.0, annotation2.getX(), 0.01);
        assertEquals(0.0, annotation2.getY(), 0.01);
        assertEquals(0.0, annotation2.getDisplayWidth(), 0.01);
        assertEquals(-1062.3, annotation1.getDisplayHeight(), 0.01);
        assertEquals(1.0, annotation1.getDrawScaleFactor(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentWidth() {
        TextTitle textTitle = new TextTitle("(Sq");
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(-2648.3, -2648.3, -1549.15850542798, 2.0, textTitle);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(-2648.3, -2648.3, -726.455728, 189.629747483, 276.2905402437176, textTitle);
        
        assertNotEquals(annotation1, annotation2);
        assertEquals(-2648.3, annotation2.getX(), 0.01);
        assertEquals(189.629747483, annotation2.getDisplayHeight(), 0.01);
        assertEquals(-2648.3, annotation2.getY(), 0.01);
        assertEquals(-726.455728, annotation2.getDisplayWidth(), 0.01);
        assertEquals(276.2905402437176, annotation2.getDrawScaleFactor(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentCoordinates() {
        DateTitle dateTitle = new DateTitle();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(1.0, -2346.68, 3131.33, 1.0, -2061.18113, dateTitle);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(1.0, -1.0, -2061.18113, -3471.8789344, dateTitle);
        
        assertNotEquals(annotation1, annotation2);
        assertEquals(-2061.18113, annotation1.getDrawScaleFactor(), 0.01);
        assertEquals(1.0, annotation1.getX(), 0.01);
        assertEquals(-3471.8789344, annotation2.getDisplayHeight(), 0.01);
        assertEquals(-1.0, annotation2.getY(), 0.01);
        assertEquals(-2061.18113, annotation2.getDisplayWidth(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentDrawable() {
        BlockContainer drawable1 = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(-2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, drawable1);
        BlockContainer drawable2 = new BlockContainer();
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(0.0, 0.0, 0.0, 0.0, drawable2);
        
        assertNotEquals(annotation1, annotation2);
        assertEquals(1.0, annotation2.getDrawScaleFactor(), 0.01);
        assertEquals(0.0, annotation2.getDisplayHeight(), 0.01);
        assertEquals(0.0, annotation2.getDisplayWidth(), 0.01);
        assertEquals(0.0, annotation2.getY(), 0.01);
        assertEquals(0.0, annotation2.getX(), 0.01);
    }

    // Tests for drawing operations
    @Test(timeout = 4000)
    public void testDrawingOperation() throws Throwable {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, drawable);
        XYPlot<PolarAxisLocation> plot = new XYPlot<>();
        RoundRectangle2D.Float roundRect = new RoundRectangle2D.Float(0.0F, 0.0F, 2561.058F, 0.0F, 1.0F, 0.0F);
        Rectangle2D dataArea = roundRect.getBounds2D();
        NumberAxis domainAxis = new NumberAxis("KpTx6U: [");
        NumberAxis rangeAxis = new NumberAxis("KpTx6U: [");
        ChartRenderingInfo chartInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartInfo.getPlotInfo();
        JFreeChart chart = new JFreeChart(plot);
        BufferedImage image = chart.createBufferedImage(10, 500, -2562.43728, 3.0, chartInfo);
        Graphics2D g2 = image.createGraphics();
        
        annotation.draw(g2, plot, dataArea, domainAxis, rangeAxis, 10, plotInfo);
        
        assertEquals(-2655.096265552367, annotation.getY(), 0.01);
        assertEquals(-2655.096265552367, annotation.getDrawScaleFactor(), 0.01);
        assertEquals(-2655.096265552367, annotation.getDisplayHeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void testDrawingWithNullRangeAxisThrowsException() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-3258.2894942095554, -3258.2894942095554, -3258.2894942095554, -3258.2894942095554, -3258.2894942095554, drawable);
        XYPlot<PolarAxisLocation> plot = new XYPlot<>();
        Rectangle2D.Float dataArea = new Rectangle2D.Float(0.0F, 0.0F, 10, 1.0F);
        CyclicNumberAxis domainAxis = new CyclicNumberAxis(0.0F);
        ChartRenderingInfo chartInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartInfo);
        BufferedImage image = new BufferedImage(10, 10, 10);
        Graphics2D g2 = image.createGraphics();
        
        assertThrows(NullPointerException.class, () -> 
            annotation.draw(g2, plot, dataArea, domainAxis, null, 10, plotInfo)
        );
    }

    // Tests for constructor validation
    @Test(timeout = 4000)
    public void testConstructorRejectsNullDrawable() {
        assertThrows(IllegalArgumentException.class, () -> 
            new XYDrawableAnnotation(738.4170062070756, 0.0F, 0.0F, 489.8514, null)
        );
    }

    @Test(timeout = 4000)
    public void testParameterizedConstructorRejectsNullDrawable() {
        assertThrows(IllegalArgumentException.class, () -> 
            new XYDrawableAnnotation(-98.734775112, -98.734775112, -98.734775112, -98.734775112, -98.734775112, null)
        );
    }

    // Tests for edge cases in equality checks
    @Test(timeout = 4000)
    public void testEqualityWithDifferentDrawableType() {
        BlockContainer blockDrawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(-111.02033357721, -111.02033357721, -111.02033357721, -111.02033357721, -111.02033357721, blockDrawable);
        XYBarRenderer renderer = new XYBarRenderer(-111.02033357721);
        LegendTitle legendDrawable = new LegendTitle(renderer);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(-111.02033357721, -111.02033357721, -111.02033357721, -111.02033357721, -111.02033357721, legendDrawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentScaleFactorInDefaultConstructor() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(-2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(-2655.096265552367, -2655.096265552367, -2655.096265552367, -2655.096265552367, drawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentHeightInDefaultConstructor() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(2927.5241410323115, 2927.5241410323115, 2927.5241410323115, 2927.5241410323115, 2927.5241410323115, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(2927.5241410323115, 2927.5241410323115, 2927.5241410323115, 1530.0121533066, drawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentWidth() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(2929.6115057820657, 2929.6115057820657, 2929.6115057820657, 2929.6115057820657, 2929.6115057820657, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(2929.6115057820657, 2929.6115057820657, -1095.6, 2929.6115057820657, -1095.6, drawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentYCoordinate() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(2934.8649531520473, 2934.8649531520473, 2934.8649531520473, 2934.8649531520473, 2934.8649531520473, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(2934.8649531520473, -1942.5102826, 2934.8649531520473, -1942.5102826, drawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithDifferentXCoordinate() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation1 = new XYDrawableAnnotation(2.0, 1.0, 1.0, 1.0, 1.0, drawable);
        XYDrawableAnnotation annotation2 = new XYDrawableAnnotation(1.0, 2.0, 1.0, 2.0, 2.0, drawable);
        
        assertNotEquals(annotation1, annotation2);
    }

    @Test(timeout = 4000)
    public void testEqualityWithNonAnnotationObject() {
        BlockContainer drawable = new BlockContainer();
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(2926.465410521232, 2926.465410521232, 2926.465410521232, 2926.465410521232, 2926.465410521232, drawable);
        XYBoxAnnotation otherAnnotation = new XYBoxAnnotation(10.0, 30.0, 2926.465410521232, 3.0);
        
        assertNotEquals(annotation, otherAnnotation);
    }

    @Test(timeout = 4000)
    public void testEqualityWithStringObject() {
        TextTitle drawable = new TextTitle("x");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(738.4170062070756, 738.4170062070756, 738.4170062070756, 738.4170062070756, drawable);
        assertFalse(annotation.equals("x"));
    }

    @Test(timeout = 4000)
    public void testReflexiveEquality() {
        TextTitle drawable = new TextTitle("");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(0.0, 0.0, 0.0, 0.0, drawable);
        assertEquals(annotation, annotation);
    }

    @Test(timeout = 4000)
    public void testClonedObjectEquality() throws CloneNotSupportedException {
        TextTitle drawable = new TextTitle("x");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(738.4170062070756, 738.4170062070756, 738.4170062070756, 738.4170062070756, drawable);
        XYDrawableAnnotation clone = (XYDrawableAnnotation) annotation.clone();
        assertEquals(annotation, clone);
    }

    // Tests for edge case property values
    @Test(timeout = 4000)
    public void testZeroScaleFactor() {
        Font font = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
        TextTitle drawable = new TextTitle("", font);
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-317.3886, 3036.177828359721, -317.3886, -1.0, 0.0, drawable);
        assertEquals(0.0, annotation.getDrawScaleFactor(), 0.01);
    }

    @Test(timeout = 4000)
    public void testNegativeScaleFactor() {
        Font font = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
        BigInteger bigInt = BigInteger.TEN;
        DefaultValueDataset dataset = new DefaultValueDataset(bigInt);
        MeterPlot meterPlot = new MeterPlot(dataset);
        JFreeChart drawable = new JFreeChart("Pie_Plot", font, meterPlot, true);
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(-317.3886, -317.3886, -1.0, 0.0, -1.0, drawable);
        assertEquals(-1.0, annotation.getDrawScaleFactor(), 0.01);
    }

    @Test(timeout = 4000)
    public void testLargeDisplayWidth() {
        ShortTextTitle drawable = new ShortTextTitle("");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(0.04, 0.0, 2307.6453724016596, 0.04, 2307.6453724016596, drawable);
        assertEquals(2307.6453724016596, annotation.getDisplayWidth(), 0.01);
    }

    @Test(timeout = 4000)
    public void testNegativeDisplayWidth() {
        DateTitle drawable = new DateTitle(0);
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(0.0, 0.0, -1.0, 0.0, -3958.9, drawable);
        assertEquals(-1.0, annotation.getDisplayWidth(), 0.01);
    }

    @Test(timeout = 4000)
    public void testNegativeDisplayHeight() {
        ShortTextTitle drawable = new ShortTextTitle("");
        XYDrawableAnnotation annotation = new XYDrawableAnnotation(0.0, 0.0, 0.0, -1062.3, drawable);
        assertEquals(-1062.3, annotation.getDisplayHeight(), 0.01);
    }
}