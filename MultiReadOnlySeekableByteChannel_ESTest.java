/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:59:16 GMT 2025
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class MultiReadOnlySeekableByteChannel_ESTest extends MultiReadOnlySeekableByteChannel_ESTest_scaffolding {

    // Constants for reused test values
    private static final long MOCK_FILE_SIZE = 704L;
    private static final long TOTAL_SIZE_TWO_FILES = 2 * MOCK_FILE_SIZE;

    // ========================================================================
    // Tests for Factory Methods
    // ========================================================================

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullListThrowsNPE() {
        new MultiReadOnlySeekableByteChannel((List<SeekableByteChannel>) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testForFilesWithNullArrayThrowsNPE() {
        MultiReadOnlySeekableByteChannel.forFiles((File[]) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testForSeekableByteChannelsWithNullArrayThrowsNPE() {
        MultiReadOnlySeekableByteChannel.forSeekableByteChannels((SeekableByteChannel[]) null);
    }

    @Test(timeout = 4000, expected = NoSuchFileException.class)
    public void testForFilesWithNonExistentFileThrowsException() throws Exception {
        File[] files = { new MockFile("non-existent") };
        MultiReadOnlySeekableByteChannel.forFiles(files);
    }

    @Test(timeout = 4000, expected = NoSuchFileException.class)
    public void testForPathsWithNonExistentFileThrowsException() throws Exception {
        Path[] paths = { new MockFile("non-existent").toPath() };
        MultiReadOnlySeekableByteChannel.forPaths(paths);
    }

    @Test(timeout = 4000)
    public void testForSeekableByteChannelsWithEmptyArrayCreatesChannel() throws Exception {
        SeekableByteChannel[] channels = new SeekableByteChannel[0];
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forSeekableByteChannels(channels);
        assertEquals(0L, channel.position());
    }

    @Test(timeout = 4000)
    public void testForFilesCreatesOpenChannel() throws Exception {
        File[] files = createTwoMockFiles();
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(files);
        assertTrue(channel.isOpen());
    }

    @Test(timeout = 4000)
    public void testForPathsCreatesOpenChannel() throws Exception {
        Path[] paths = { new MockFile("").toPath() };
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forPaths(paths);
        assertTrue(channel.isOpen());
    }

    // ========================================================================
    // Tests for Channel Lifecycle (open/close)
    // ========================================================================

    @Test(timeout = 4000)
    public void testIsOpenAfterClose() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        channel.close();
        assertFalse(channel.isOpen());
    }

    @Test(timeout = 4000)
    public void testIsOpenWithEmptyChannelList() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        assertTrue(channel.isOpen());
    }

    // ========================================================================
    // Tests for Position and Size Operations
    // ========================================================================

    @Test(timeout = 4000)
    public void testSizeWithTwoFiles() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        assertEquals(TOTAL_SIZE_TWO_FILES, channel.size());
    }

    @Test(timeout = 4000)
    public void testInitialPosition() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        assertEquals(0L, channel.position());
    }

    @Test(timeout = 4000)
    public void testSetPositionWithinSize() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        channel.position(MOCK_FILE_SIZE);
        assertEquals(MOCK_FILE_SIZE, channel.position());
    }

    @Test(timeout = 4000)
    public void testSetPositionBeyondSize() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        channel.position(TOTAL_SIZE_TWO_FILES + 100);
        assertEquals(TOTAL_SIZE_TWO_FILES + 100, channel.position());
    }

    @Test(timeout = 4000)
    public void testPositionAfterSettingChannelAndOffset() throws Exception {
        MultiReadOnlySeekableByteChannel channel = 
            (MultiReadOnlySeekableByteChannel) createChannelWithTwoFiles();
        channel.position(1L, 1L);
        assertEquals(MOCK_FILE_SIZE + 1, channel.position());
    }

    // ========================================================================
    // Tests for Read Operations
    // ========================================================================

    @Test(timeout = 4000, expected = ClosedChannelException.class)
    public void testReadAfterCloseThrowsException() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        channel.close();
        channel.read(ByteBuffer.allocate(5));
    }

    @Test(timeout = 4000)
    public void testReadWithEmptyBufferReturnsZero() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        ByteBuffer buffer = ByteBuffer.allocate(0);
        assertEquals(0, channel.read(buffer));
    }

    // ========================================================================
    // Tests for Exception Scenarios
    // ========================================================================

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testSetNegativePositionThrowsException() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        channel.position(-100L);
    }

    @Test(timeout = 4000, expected = ClosedChannelException.class)
    public void testSizeAfterCloseThrowsException() throws Exception {
        SeekableByteChannel channel = createChannelWithTwoFiles();
        channel.close();
        channel.size();
    }

    @Test(timeout = 4000, expected = NonWritableChannelException.class)
    public void testWriteThrowsNonWritableException() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        channel.write(ByteBuffer.allocate(10));
    }

    @Test(timeout = 4000, expected = NonWritableChannelException.class)
    public void testTruncateThrowsNonWritableException() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        channel.truncate(0L);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testReadWithNullBufferThrowsNPE() throws Exception {
        List<SeekableByteChannel> emptyList = new LinkedList<>();
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(emptyList);
        channel.read(null);
    }

    // ========================================================================
    // Helper Methods
    // ========================================================================

    private SeekableByteChannel createChannelWithTwoFiles() throws IOException {
        File[] files = createTwoMockFiles();
        return MultiReadOnlySeekableByteChannel.forFiles(files);
    }

    private File[] createTwoMockFiles() {
        File mockFile = new MockFile("");
        return new File[] { mockFile, mockFile };
    }
}