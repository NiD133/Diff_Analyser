/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:35:44 GMT 2025
 */

package org.locationtech.spatial4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.spatial4j.context.SpatialContext;
import org.locationtech.spatial4j.context.SpatialContextFactory;
import org.locationtech.spatial4j.distance.GeodesicSphereDistCalc;
import org.locationtech.spatial4j.io.WKTWriter;
import org.locationtech.spatial4j.shape.Circle;
import org.locationtech.spatial4j.shape.Point;
import org.locationtech.spatial4j.shape.Rectangle;
import org.locationtech.spatial4j.shape.Shape;
import org.locationtech.spatial4j.shape.ShapeCollection;
import org.locationtech.spatial4j.shape.impl.BufferedLine;
import org.locationtech.spatial4j.shape.impl.BufferedLineString;
import org.locationtech.spatial4j.shape.impl.PointImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WKTWriter_ESTest extends WKTWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      DecimalFormat decimalFormat0 = (DecimalFormat)wKTWriter0.getNumberFormat();
      assertEquals("###0.######", decimalFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      String string0 = wKTWriter0.getFormatName();
      assertEquals("WKT", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "WKT");
      SpatialContextFactory spatialContextFactory0 = new SpatialContextFactory();
      SpatialContext spatialContext0 = new SpatialContext(spatialContextFactory0);
      PointImpl pointImpl0 = new PointImpl(4883.694876, 4.0, spatialContext0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      wKTWriter0.append(stringBuilder0, pointImpl0, numberFormat0);
      assertEquals("WKT488,369% 400%", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      PointImpl pointImpl0 = new PointImpl(0.0, (-1281.1040424765), (SpatialContext) null);
      // Undeclared exception!
      try { 
        wKTWriter0.write((Writer) null, pointImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.io.WKTWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      StringBuilder stringBuilder0 = new StringBuilder();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      // Undeclared exception!
      try { 
        wKTWriter0.append(stringBuilder0, (Point) null, numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.io.WKTWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      StringBuilder stringBuilder0 = new StringBuilder("$+(8+");
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl((-2288.759999701334), (-2288.759999701334), spatialContext0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("$+(8+");
      // Undeclared exception!
      try { 
        wKTWriter0.append(stringBuilder0, pointImpl0, choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      GeodesicSphereDistCalc.LawOfCosines geodesicSphereDistCalc_LawOfCosines0 = new GeodesicSphereDistCalc.LawOfCosines();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl(1887, 3671, spatialContext0);
      linkedList0.add((Point) pointImpl0);
      Point point0 = geodesicSphereDistCalc_LawOfCosines0.pointOnBearing(pointImpl0, 274.25232505, 3671, spatialContext0, pointImpl0);
      linkedList0.add(point0);
      linkedList0.offerLast(pointImpl0);
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 1887, spatialContext0);
      ShapeCollection<BufferedLine> shapeCollection0 = bufferedLineString0.getSegments();
      String string0 = wKTWriter0.toString((Shape) shapeCollection0);
      assertEquals("GEOMETRYCOLLECTION (BufferedLine(Pt(x=1456.3497532141264,y=-2.03979513747829), Pt(x=1456.3497532141264,y=-2.03979513747829) b=1887.0),BufferedLine(Pt(x=1456.3497532141264,y=-2.03979513747829), Pt(x=1456.3497532141264,y=-2.03979513747829) b=1887.0))", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      // Undeclared exception!
      try { 
        wKTWriter0.toString((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.spatial4j.io.LegacyShapeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 3671, true, spatialContext0);
      ShapeCollection<BufferedLine> shapeCollection0 = bufferedLineString0.getSegments();
      String string0 = wKTWriter0.toString((Shape) shapeCollection0);
      assertEquals("GEOMETRYCOLLECTION EMPTY", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      StringWriter stringWriter0 = new StringWriter(1887);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      GeodesicSphereDistCalc.LawOfCosines geodesicSphereDistCalc_LawOfCosines0 = new GeodesicSphereDistCalc.LawOfCosines();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl(1887, 3671, spatialContext0);
      linkedList0.add((Point) pointImpl0);
      Point point0 = geodesicSphereDistCalc_LawOfCosines0.pointOnBearing(pointImpl0, 274.25232505, 3671, spatialContext0, pointImpl0);
      linkedList0.add(point0);
      linkedList0.offerLast(point0);
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 1887, spatialContext0);
      ShapeCollection<BufferedLine> shapeCollection0 = bufferedLineString0.getSegments();
      wKTWriter0.write(stringWriter0, shapeCollection0);
      assertEquals("GEOMETRYCOLLECTION (BufferedLine(Pt(x=1456.3497532141264,y=-2.03979513747829), Pt(x=1456.3497532141264,y=-2.03979513747829) b=1887.0),BufferedLine(Pt(x=1456.3497532141264,y=-2.03979513747829), Pt(x=1456.3497532141264,y=-2.03979513747829) b=1887.0))", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      GeodesicSphereDistCalc.LawOfCosines geodesicSphereDistCalc_LawOfCosines0 = new GeodesicSphereDistCalc.LawOfCosines();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl(1887, 3671, spatialContext0);
      linkedList0.add((Point) pointImpl0);
      Point point0 = geodesicSphereDistCalc_LawOfCosines0.pointOnBearing(pointImpl0, 274.25232505, 3671, spatialContext0, pointImpl0);
      linkedList0.add(point0);
      linkedList0.offerLast(point0);
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 1887, spatialContext0);
      String string0 = wKTWriter0.toString((Shape) bufferedLineString0);
      assertEquals("BUFFER (LINESTRING (1456.349753 -2.039795, 1456.349753 -2.039795, 1456.349753 -2.039795), 1887)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      WKTWriter wKTWriter0 = new WKTWriter();
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, (-145.0981164), spatialContext0);
      String string0 = wKTWriter0.toString((Shape) bufferedLineString0);
      assertEquals("LINESTRING ()", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl(3.141592653589793, 3.141592653589793, spatialContext0);
      Circle circle0 = pointImpl0.getBuffered(3.141592653589793, spatialContext0);
      String string0 = wKTWriter0.toString((Shape) circle0);
      assertEquals("BUFFER (POINT (3.141593 3.141593), 3.141593)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 3671, true, spatialContext0);
      Point point0 = bufferedLineString0.getCenter();
      BufferedLine bufferedLine0 = new BufferedLine(point0, point0, 1887, spatialContext0);
      Rectangle rectangle0 = bufferedLine0.getBoundingBox();
      String string0 = wKTWriter0.toString((Shape) rectangle0);
      assertEquals("ENVELOPE (\uFFFD, \uFFFD, \uFFFD, \uFFFD)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WKTWriter wKTWriter0 = new WKTWriter();
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      SpatialContext spatialContext0 = SpatialContext.GEO;
      BufferedLineString bufferedLineString0 = new BufferedLineString(linkedList0, 360.0, spatialContext0);
      Point point0 = bufferedLineString0.getCenter();
      String string0 = wKTWriter0.toString((Shape) point0);
      assertEquals("POINT EMPTY", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpatialContext spatialContext0 = SpatialContext.GEO;
      PointImpl pointImpl0 = new PointImpl(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, spatialContext0);
      WKTWriter wKTWriter0 = new WKTWriter();
      String string0 = wKTWriter0.toString((Shape) pointImpl0);
      assertEquals("WKT", wKTWriter0.getFormatName());
      assertEquals("POINT (-\u221E -\u221E)", string0);
  }
}
