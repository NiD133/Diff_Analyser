/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:35:44 GMT 2025
 */

package org.locationtech.spatial4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.spatial4j.context.SpatialContext;
import org.locationtech.spatial4j.context.SpatialContextFactory;
import org.locationtech.spatial4j.distance.GeodesicSphereDistCalc;
import org.locationtech.spatial4j.io.WKTWriter;
import org.locationtech.spatial4j.shape.Circle;
import org.locationtech.spatial4j.shape.Point;
import org.locationtech.spatial4j.shape.Rectangle;
import org.locationtech.spatial4j.shape.Shape;
import org.locationtech.spatial4j.shape.ShapeCollection;
import org.locationtech.spatial4j.shape.impl.BufferedLine;
import org.locationtech.spatial4j.shape.impl.BufferedLineString;
import org.locationtech.spatial4j.shape.impl.PointImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WKTWriter_ESTest extends WKTWriter_ESTest_scaffolding {

    // Test constants
    private static final double POINT_X = 4883.694876;
    private static final double POINT_Y = 4.0;
    private static final double BUFFER_DISTANCE = 1887.0;
    private static final double LINE_X = 1456.349753;
    private static final double LINE_Y = -2.039795;
    private static final double CIRCLE_RADIUS = Math.PI;
    private static final double INFINITY = Double.NEGATIVE_INFINITY;

    @Test(timeout = 4000)
    public void testGetNumberFormat_returnsExpectedPattern()  throws Throwable  {
        // Test that number format has correct pattern
        WKTWriter wktWriter = new WKTWriter();
        DecimalFormat decimalFormat = (DecimalFormat) wktWriter.getNumberFormat();
        assertEquals("###0.######", decimalFormat.toLocalizedPattern());
    }

    @Test(timeout = 4000)
    public void testGetFormatName_returnsWKT()  throws Throwable  {
        // Test that format name is correctly identified
        WKTWriter wktWriter = new WKTWriter();
        assertEquals("WKT", wktWriter.getFormatName());
    }

    @Test(timeout = 4000)
    public void testAppend_pointWithPercentFormat_appendsCorrectly()  throws Throwable  {
        // Test appending point with percentage formatting
        WKTWriter wktWriter = new WKTWriter();
        StringBuilder builder = new StringBuilder("WKT");
        
        SpatialContextFactory factory = new SpatialContextFactory();
        SpatialContext context = new SpatialContext(factory);
        Point point = new PointImpl(POINT_X, POINT_Y, context);
        
        NumberFormat percentFormat = NumberFormat.getPercentInstance();
        wktWriter.append(builder, point, percentFormat);
        
        assertEquals("WKT488,369% 400%", builder.toString());
    }

    @Test(timeout = 4000)
    public void testWrite_withNullWriter_throwsNullPointerException()  throws Throwable  {
        // Test null writer handling
        WKTWriter wktWriter = new WKTWriter();
        Point point = new PointImpl(0.0, -1281.1040424765, null);
        
        try { 
            wktWriter.write((Writer) null, point);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testAppend_nullPoint_throwsNullPointerException()  throws Throwable  {
        // Test null point handling
        WKTWriter wktWriter = new WKTWriter();
        StringBuilder builder = new StringBuilder();
        NumberFormat numberFormat = NumberFormat.getInstance();
        
        try { 
            wktWriter.append(builder, (Point) null, numberFormat);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testAppend_pointWithChoiceFormat_throwsArrayIndexException()  throws Throwable  {
        // Test invalid ChoiceFormat handling
        WKTWriter wktWriter = new WKTWriter();
        StringBuilder builder = new StringBuilder("$+(8+");
        SpatialContext context = SpatialContext.GEO;
        Point point = new PointImpl(-2288.759999701334, -2288.759999701334, context);
        ChoiceFormat choiceFormat = new ChoiceFormat("$+(8+");
        
        try { 
            wktWriter.append(builder, point, choiceFormat);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testToString_shapeCollectionOfBufferedLines_returnsExpectedWKT()  throws Throwable  {
        // Test ShapeCollection serialization
        ShapeCollection<BufferedLine> collection = createBufferedLineCollection();
        WKTWriter wktWriter = new WKTWriter();
        
        String result = wktWriter.toString(collection);
        String expected = "GEOMETRYCOLLECTION (BufferedLine(Pt(x=" + LINE_X + ",y=" + LINE_Y + "), " +
                          "Pt(x=" + LINE_X + ",y=" + LINE_Y + ") b=" + BUFFER_DISTANCE + ")," +
                          "BufferedLine(Pt(x=" + LINE_X + ",y=" + LINE_Y + "), " +
                          "Pt(x=" + LINE_X + ",y=" + LINE_Y + ") b=" + BUFFER_DISTANCE + "))";
        assertEquals(expected, result);
    }

    @Test(timeout = 4000)
    public void testToString_nullShape_throwsNullPointerException()  throws Throwable  {
        // Test null shape handling
        WKTWriter wktWriter = new WKTWriter();
        
        try { 
            wktWriter.toString((Shape) null);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testToString_emptyShapeCollection_returnsEmptyGeometryCollection()  throws Throwable  {
        // Test empty ShapeCollection serialization
        WKTWriter wktWriter = new WKTWriter();
        ShapeCollection<BufferedLine> collection = createEmptyShapeCollection();
        
        assertEquals("GEOMETRYCOLLECTION EMPTY", wktWriter.toString(collection));
    }

    @Test(timeout = 4000)
    public void testWrite_shapeCollection_writesExpectedWKT()  throws Throwable  {
        // Test writing ShapeCollection to Writer
        WKTWriter wktWriter = new WKTWriter();
        StringWriter writer = new StringWriter(1887);
        ShapeCollection<BufferedLine> collection = createBufferedLineCollection();
        
        wktWriter.write(writer, collection);
        String expected = "GEOMETRYCOLLECTION (BufferedLine(Pt(x=" + LINE_X + ",y=" + LINE_Y + "), " +
                          "Pt(x=" + LINE_X + ",y=" + LINE_Y + ") b=" + BUFFER_DISTANCE + ")," +
                          "BufferedLine(Pt(x=" + LINE_X + ",y=" + LINE_Y + "), " +
                          "Pt(x=" + LINE_X + ",y=" + LINE_Y + ") b=" + BUFFER_DISTANCE + "))";
        assertEquals(expected, writer.toString());
    }

    @Test(timeout = 4000)
    public void testToString_bufferedLineString_returnsExpectedWKT()  throws Throwable  {
        // Test BufferedLineString serialization
        WKTWriter wktWriter = new WKTWriter();
        BufferedLineString lineString = createBufferedLineString();
        
        String result = wktWriter.toString(lineString);
        assertEquals("BUFFER (LINESTRING (" + LINE_X + " " + LINE_Y + ", " + 
                     LINE_X + " " + LINE_Y + ", " + 
                     LINE_X + " " + LINE_Y + "), " + BUFFER_DISTANCE + ")", 
                     result);
    }

    @Test(timeout = 4000)
    public void testToString_emptyBufferedLineString_returnsEmptyLineString()  throws Throwable  {
        // Test empty BufferedLineString serialization
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        BufferedLineString lineString = new BufferedLineString(points, -145.0981164, context);
        WKTWriter wktWriter = new WKTWriter();
        
        assertEquals("LINESTRING ()", wktWriter.toString(lineString));
    }

    @Test(timeout = 4000)
    public void testToString_circle_returnsBufferWKT()  throws Throwable  {
        // Test Circle serialization
        SpatialContext context = SpatialContext.GEO;
        Point point = new PointImpl(CIRCLE_RADIUS, CIRCLE_RADIUS, context);
        Circle circle = point.getBuffered(CIRCLE_RADIUS, context);
        WKTWriter wktWriter = new WKTWriter();
        
        String result = wktWriter.toString(circle);
        assertEquals("BUFFER (POINT (" + CIRCLE_RADIUS + " " + CIRCLE_RADIUS + "), " + CIRCLE_RADIUS + ")", 
                     result);
    }

    @Test(timeout = 4000)
    public void testToString_rectangleFromBufferedLine_returnsEnvelopeWithReplacementChars()  throws Throwable  {
        // Test Rectangle serialization with invalid coordinates
        WKTWriter wktWriter = new WKTWriter();
        Rectangle rectangle = createInvalidRectangle();
        
        assertEquals("ENVELOPE (\uFFFD, \uFFFD, \uFFFD, \uFFFD)", wktWriter.toString(rectangle));
    }

    @Test(timeout = 4000)
    public void testToString_pointFromEmptyBufferedLineString_returnsPointEmpty()  throws Throwable  {
        // Test empty Point serialization
        WKTWriter wktWriter = new WKTWriter();
        Point point = createEmptyPoint();
        
        assertEquals("POINT EMPTY", wktWriter.toString(point));
    }

    @Test(timeout = 4000)
    public void testToString_pointWithNegativeInfinity_returnsPointWithNegativeInfinity()  throws Throwable  {
        // Test Point with infinity values
        SpatialContext context = SpatialContext.GEO;
        Point point = new PointImpl(INFINITY, INFINITY, context);
        WKTWriter wktWriter = new WKTWriter();
        
        assertEquals("POINT (-\u221E -\u221E)", wktWriter.toString(point));
    }

    // Helper methods to create complex test objects
    private ShapeCollection<BufferedLine> createBufferedLineCollection() {
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        
        PointImpl startPoint = new PointImpl(BUFFER_DISTANCE, 3671, context);
        points.add(startPoint);
        
        GeodesicSphereDistCalc.LawOfCosines calculator = new GeodesicSphereDistCalc.LawOfCosines();
        Point nextPoint = calculator.pointOnBearing(startPoint, 274.25232505, 3671, context, startPoint);
        points.add(nextPoint);
        points.offerLast(nextPoint);
        
        BufferedLineString lineString = new BufferedLineString(points, BUFFER_DISTANCE, context);
        return lineString.getSegments();
    }
    
    private ShapeCollection<BufferedLine> createEmptyShapeCollection() {
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        BufferedLineString lineString = new BufferedLineString(points, 3671, true, context);
        return lineString.getSegments();
    }
    
    private BufferedLineString createBufferedLineString() {
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        
        PointImpl startPoint = new PointImpl(BUFFER_DISTANCE, 3671, context);
        points.add(startPoint);
        
        GeodesicSphereDistCalc.LawOfCosines calculator = new GeodesicSphereDistCalc.LawOfCosines();
        Point nextPoint = calculator.pointOnBearing(startPoint, 274.25232505, 3671, context, startPoint);
        points.add(nextPoint);
        points.offerLast(nextPoint);
        
        return new BufferedLineString(points, BUFFER_DISTANCE, context);
    }
    
    private Rectangle createInvalidRectangle() {
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        BufferedLineString lineString = new BufferedLineString(points, 3671, true, context);
        Point center = lineString.getCenter();
        return new BufferedLine(center, center, BUFFER_DISTANCE, context).getBoundingBox();
    }
    
    private Point createEmptyPoint() {
        SpatialContext context = SpatialContext.GEO;
        LinkedList<Point> points = new LinkedList<>();
        BufferedLineString lineString = new BufferedLineString(points, 360.0, context);
        return lineString.getCenter();
    }
}