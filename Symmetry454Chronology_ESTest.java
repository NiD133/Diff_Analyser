/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:48:55 GMT 2025
 */

package org.threeten.extra.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
import java.time.chrono.Era;
import java.time.chrono.HijrahEra;
import java.time.chrono.IsoEra;
import java.time.chrono.JapaneseEra;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.junit.runner.RunWith;
import org.threeten.extra.chrono.EthiopicDate;
import org.threeten.extra.chrono.PaxDate;
import org.threeten.extra.chrono.Symmetry454Chronology;
import org.threeten.extra.chrono.Symmetry454Date;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Symmetry454Chronology_ESTest extends Symmetry454Chronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date((Era) isoEra0, 3322, (-2136356788), 8);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -2136356788
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Instant instant0 = MockInstant.ofEpochSecond((long) 3, 0L);
      ChronoZonedDateTime<Symmetry454Date> chronoZonedDateTime0 = symmetry454Chronology0.zonedDateTime(instant0, (ZoneId) zoneOffset0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      int int0 = symmetry454Chronology0.prolepticYear(isoEra0, 1996);
      assertEquals(1996, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      int int0 = symmetry454Chronology0.prolepticYear(isoEra0, (-1390));
      assertEquals((-1390), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ChronoLocalDateTime<Symmetry454Date> chronoLocalDateTime0 = symmetry454Chronology0.localDateTime(localDateTime0);
      assertNotNull(chronoLocalDateTime0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      boolean boolean0 = symmetry454Chronology0.isLeapYear(3L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = Symmetry454Chronology.getLeapYearsBefore(719162L);
      assertEquals(127633L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = Symmetry454Chronology.getLeapYearsBefore((-60L));
      assertEquals((-11L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = symmetry454Chronology0.eraOf(0);
      assertEquals(IsoEra.BCE, isoEra0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      Clock clock0 = MockClock.systemDefaultZone();
      Symmetry454Date symmetry454Date0 = Symmetry454Date.now(clock0);
      IsoEra isoEra0 = symmetry454Date0.getEra();
      Symmetry454Date symmetry454Date1 = symmetry454Chronology0.dateYearDay((Era) isoEra0, 29, 11);
      assertEquals(IsoEra.CE, symmetry454Date1.getEra());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.dateYearDay(19, 19);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.dateNow((ZoneId) zoneOffset0);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.dateEpochDay(132L);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ZoneId zoneId0 = ZoneId.systemDefault();
      Symmetry454Date symmetry454Date0 = Symmetry454Date.now(zoneId0);
      Symmetry454Date symmetry454Date1 = symmetry454Chronology0.date((TemporalAccessor) symmetry454Date0);
      assertEquals(IsoEra.CE, symmetry454Date1.getEra());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      IsoEra isoEra0 = IsoEra.CE;
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.date((Era) isoEra0, 4, 4, 4);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.date(3, 2, 3);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.zonedDateTime((TemporalAccessor) japaneseEra0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoZonedDateTime from TemporalAccessor: class java.time.chrono.JapaneseEra
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.zonedDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.ZoneId", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.range((ChronoField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.prolepticYear(isoEra0, (-2133538947));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for YearOfEra (valid values -1000000 - 1000000): -2133538947
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      EthiopicDate ethiopicDate0 = EthiopicDate.ofEpochDay(719162L);
      // Undeclared exception!
      try { 
        symmetry454Chronology0.localDateTime(ethiopicDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain ChronoLocalDateTime from TemporalAccessor: class org.threeten.extra.chrono.EthiopicDate
         //
         verifyException("java.time.chrono.Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.eraOf((-334));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: -334
         //
         verifyException("java.time.chrono.IsoEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateYearDay((Era) isoEra0, (-313), (-313));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 364/371): -313
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      JapaneseEra japaneseEra0 = JapaneseEra.SHOWA;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateYearDay((Era) japaneseEra0, (-2315), (-2315));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: Showa
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateYearDay(371, 371);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 371' as '371' is not a leap year
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateNow((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.CE;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date((TemporalAccessor) isoEra0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported field: EpochDay
         //
         verifyException("java.time.chrono.Era", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      PaxDate paxDate0 = PaxDate.ofEpochDay(719162L);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      PaxDate paxDate1 = paxDate0.minus(719162L, (TemporalUnit) chronoUnit0);
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date((TemporalAccessor) paxDate1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -365961480 - 364523156): -26266133510
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date(1363, 1363, 1363);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 1363
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      JapaneseEra japaneseEra0 = JapaneseEra.SHOWA;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.prolepticYear(japaneseEra0, 29);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: Showa
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      boolean boolean0 = symmetry454Chronology0.isLeapYear(32L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateYearDay((-2501), (-2501));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfYear (valid values 1 - 364/371): -2501
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      Instant instant0 = MockInstant.ofEpochSecond(719162L);
      // Undeclared exception!
      try { 
        symmetry454Chronology0.zonedDateTime(instant0, (ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoZonedDateTimeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = Symmetry454Chronology.getLeapYearsBefore(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.localDateTime((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date((Era) hijrahEra0, (-2164), (-2164), (-2164));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Invalid era: AH
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Chronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.SECOND_OF_MINUTE;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.YEAR;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.YEAR_OF_ERA;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.ERA;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_MONTH;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.MONTH_OF_YEAR;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      ValueRange valueRange0 = symmetry454Chronology0.range(chronoField0);
      assertNotNull(valueRange0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      System.setCurrentTimeMillis((-1343L));
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ChronoZonedDateTime<Symmetry454Date> chronoZonedDateTime0 = symmetry454Chronology0.zonedDateTime((TemporalAccessor) offsetDateTime0);
      assertNotNull(chronoZonedDateTime0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      Era era0 = symmetry454Chronology0.eraOf(0);
      assertEquals(IsoEra.BCE, era0);
      
      int int0 = symmetry454Chronology0.prolepticYear(era0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      String string0 = symmetry454Chronology0.getId();
      assertEquals("Sym454", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = Symmetry454Chronology.INSTANCE;
      Clock clock0 = MockClock.systemDefaultZone();
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.dateNow(clock0);
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      IsoEra isoEra0 = IsoEra.BCE;
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateYearDay((Era) isoEra0, 1145, 371);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date 'DayOfYear 371' as '1145' is not a leap year
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      List<Era> list0 = symmetry454Chronology0.eras();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      Symmetry454Date symmetry454Date0 = symmetry454Chronology0.dateNow();
      assertEquals(IsoEra.CE, symmetry454Date0.getEra());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateEpochDay(365242134L);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for EpochDay (valid values -365961480 - 364523156): 365242137
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      String string0 = symmetry454Chronology0.getCalendarType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.date(1, 1, 35);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid date: 1/1/35
         //
         verifyException("org.threeten.extra.chrono.Symmetry454Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Symmetry454Chronology symmetry454Chronology0 = new Symmetry454Chronology();
      // Undeclared exception!
      try { 
        symmetry454Chronology0.dateNow((ZoneId) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // zone
         //
         verifyException("java.util.Objects", e);
      }
  }
}
