/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 15:34:54 GMT 2025
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionGroup_ESTest extends OptionGroup_ESTest_scaffolding {

    // Tests for initial state after construction
    @Test(timeout = 4000)
    public void initialState_GetOptionsReturnsEmptyCollection()  {
        OptionGroup group = new OptionGroup();
        Collection<Option> options = group.getOptions();
        assertNotNull(options);
        assertTrue(options.isEmpty());
    }

    @Test(timeout = 4000)
    public void initialState_GetNamesReturnsEmptyCollection()  {
        OptionGroup group = new OptionGroup();
        Collection<String> names = group.getNames();
        assertNotNull(names);
        assertTrue(names.isEmpty());
    }

    @Test(timeout = 4000)
    public void initialState_IsSelectedReturnsFalse()  {
        OptionGroup group = new OptionGroup();
        assertFalse(group.isSelected());
    }

    @Test(timeout = 4000)
    public void initialState_GetSelectedReturnsNull()  {
        OptionGroup group = new OptionGroup();
        assertNull(group.getSelected());
    }

    @Test(timeout = 4000)
    public void initialState_IsRequiredReturnsFalse()  {
        OptionGroup group = new OptionGroup();
        assertFalse(group.isRequired());
    }

    // Tests for required status
    @Test(timeout = 4000)
    public void setRequiredTrue_ThenIsRequiredReturnsTrue()  {
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        assertTrue(group.isRequired());
    }

    // Tests for selection behavior
    @Test(timeout = 4000)
    public void setSelectedOptionWithLongOpt_ThenGetSelectedReturnsLongOpt()  {
        OptionGroup group = new OptionGroup();
        Option option = new Option("oQxw", null, true, "[]");
        group.setSelected(option);
        assertEquals("oQxw", group.getSelected());
    }

    @Test(timeout = 4000)
    public void setSelectedOptionWithoutLongOpt_ThenGetSelectedReturnsEmpty()  {
        OptionGroup group = new OptionGroup();
        Option option = new Option(null, "", false, "description");
        group.setSelected(option);
        assertEquals("", group.getSelected());
    }

    @Test(timeout = 4000)
    public void setSelectedOption_ThenIsSelectedReturnsTrue()  {
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", null, true, "description");
        group.setSelected(option);
        assertTrue(group.isSelected());
    }

    @Test(timeout = 4000)
    public void setSelectedToNull_DoesNotSetSelectedOption()  {
        OptionGroup group = new OptionGroup();
        group.setSelected(null);
        assertFalse(group.isSelected());
        assertNull(group.getSelected());
    }

    @Test(timeout = 4000)
    public void setSameOptionTwice_DoesNotThrowException()  {
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", null, true, "description");
        group.setSelected(option);
        group.setSelected(option); // Should not throw
        assertTrue(group.isSelected());
    }

    @Test(timeout = 4000)
    public void setDifferentOptionAfterSelection_ThrowsException()  {
        OptionGroup group = new OptionGroup();
        Option firstOption = new Option("first", null, true, "first option");
        Option secondOption = new Option("second", null, false, "second option");
        
        group.setSelected(firstOption);
        
        try {
            group.setSelected(secondOption);
            fail("Expected exception when selecting different option after initial selection");
        } catch (Exception e) {
            assertTrue(e.getMessage().contains("The option 'second' was specified but an option from this group has already been selected: 'first'"));
        }
    }

    // Tests for addOption behavior
    @Test(timeout = 4000)
    public void addOption_WhenGroupIsRequired_DoesNotAffectRequiredStatus()  {
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option(null, null);
        group.addOption(option);
        assertTrue(group.isRequired());
    }

    @Test(timeout = 4000)
    public void addOption_WhenOptionIsSelected_GroupRemainsSelected()  {
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", null, true, "description");
        group.setSelected(option);
        OptionGroup updatedGroup = group.addOption(option);
        assertTrue(updatedGroup.isSelected());
    }

    @Test(timeout = 4000)
    public void addNullOption_ThrowsNullPointerException()  {
        OptionGroup group = new OptionGroup();
        try {
            group.addOption(null);
            fail("Expected NullPointerException when adding null option");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // Tests for toString behavior
    @Test(timeout = 4000)
    public void toString_WithOptions_ReturnsFormattedString()  {
        OptionGroup group = new OptionGroup();
        Option option1 = new Option(null, null);
        Option option2 = new Option("vN", "", false, "");
        
        group.addOption(option1)
             .addOption(option2);
        
        assertEquals("[--null, -vN ]", group.toString());
    }
}