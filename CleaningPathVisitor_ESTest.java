/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:56:05 GMT 2025
 */

package org.apache.commons.io.file;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.CleaningPathVisitor;
import org.apache.commons.io.file.Counters;
import org.apache.commons.io.file.CountingPathVisitor;
import org.apache.commons.io.file.DeleteOption;
import org.apache.commons.io.file.DeletingPathVisitor;
import org.apache.commons.io.file.StandardDeleteOption;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CleaningPathVisitor_ESTest extends CleaningPathVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("", "egaoxgVGi-xQc=}|");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(basicFileAttributes0).size();
      FileVisitResult fileVisitResult0 = countingPathVisitor0.visitFile(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[1];
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      // Undeclared exception!
      try { 
        cleaningPathVisitor0.preVisitDirectory((Path) null, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      DeleteOption[] deleteOptionArray0 = new DeleteOption[2];
      String[] stringArray0 = new String[3];
      CleaningPathVisitor cleaningPathVisitor0 = null;
      try {
        cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, deleteOptionArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      String[] stringArray0 = new String[10];
      CleaningPathVisitor cleaningPathVisitor0 = null;
      try {
        cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeleteOption[] deleteOptionArray0 = new DeleteOption[1];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[0] = (DeleteOption) standardDeleteOption0;
      String[] stringArray0 = new String[0];
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor((Counters.PathCounters) null, deleteOptionArray0, stringArray0);
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      try { 
        cleaningPathVisitor0.visitFile(path0, basicFileAttributes0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DOS or POSIX file operations not available for '/', linkOptions [NOFOLLOW_LINKS]
         //
         verifyException("org.apache.commons.io.file.PathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      MockFile mockFile0 = new MockFile("bQ3a(", "bQ3a(");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        countingPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CountingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
          CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
          Path path0 = mockFile0.toPath();
          // Undeclared exception!
          try { 
            countingPathVisitor0.visitFile(path0, basicFileAttributes0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"delete\")
             // java.lang.Thread.getStackTrace(Thread.java:1564)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.lang.SecurityManager.checkDelete(SecurityManager.java:1007)
             // sun.nio.fs.UnixPath.checkDelete(UnixPath.java:807)
             // sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:222)
             // sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:108)
             // java.nio.file.Files.deleteIfExists(Files.java:1165)
             // org.apache.commons.io.file.CleaningPathVisitor.visitFile(CleaningPathVisitor.java:132)
             // sun.reflect.GeneratedMethodAccessor119.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:256)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:219)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:750)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.io.filefilter.AgeFileFilter";
      stringArray0[3] = "";
      stringArray0[4] = ">=";
      stringArray0[5] = "org.apache.commons.io.file.Counters$NoopPathCounters";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.io.file.CleaningPathVisitor";
      stringArray0[8] = "egaoxgVGi-xQc=}|";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      MockFile mockFile0 = new MockFile("", "egaoxgVGi-xQc=}|");
      Path path0 = mockFile0.toPath();
      BasicFileAttributes basicFileAttributes0 = mock(BasicFileAttributes.class, new ViolatedAssumptionAnswer());
      FileVisitResult fileVisitResult0 = cleaningPathVisitor0.preVisitDirectory(path0, basicFileAttributes0);
      assertEquals(FileVisitResult.SKIP_SUBTREE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      CleaningPathVisitor cleaningPathVisitor1 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      boolean boolean0 = cleaningPathVisitor0.equals(cleaningPathVisitor1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      DeleteOption[] deleteOptionArray0 = new DeleteOption[4];
      StandardDeleteOption standardDeleteOption0 = StandardDeleteOption.OVERRIDE_READ_ONLY;
      deleteOptionArray0[1] = (DeleteOption) standardDeleteOption0;
      String[] stringArray0 = new String[0];
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, deleteOptionArray0, stringArray0);
      boolean boolean0 = countingPathVisitor0.equals(cleaningPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      DeletingPathVisitor deletingPathVisitor0 = DeletingPathVisitor.withLongCounters();
      boolean boolean0 = countingPathVisitor0.equals(deletingPathVisitor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      boolean boolean0 = countingPathVisitor0.equals(cleaningPathVisitor0);
      assertFalse(cleaningPathVisitor0.equals((Object)countingPathVisitor0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      boolean boolean0 = cleaningPathVisitor0.equals(cleaningPathVisitor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      boolean boolean0 = cleaningPathVisitor0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",(-_DTfh #j%MqF^";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      MockFile mockFile0 = new MockFile(",(-_DTfh #j%MqF^");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        cleaningPathVisitor0.visitFile(path0, (BasicFileAttributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.file.CountingPathVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Counters.PathCounters counters_PathCounters0 = CountingPathVisitor.defaultPathCounters();
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, (String[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withBigIntegerCounters();
      FileVisitResult fileVisitResult0 = countingPathVisitor0.preVisitDirectory((Path) null, (BasicFileAttributes) null);
      assertEquals(FileVisitResult.CONTINUE, fileVisitResult0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CountingPathVisitor countingPathVisitor0 = CleaningPathVisitor.withLongCounters();
      assertNotNull(countingPathVisitor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CountingPathVisitor.Builder countingPathVisitor_Builder0 = new CountingPathVisitor.Builder();
      Counters.PathCounters counters_PathCounters0 = countingPathVisitor_Builder0.getPathCounters();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      CleaningPathVisitor cleaningPathVisitor0 = new CleaningPathVisitor(counters_PathCounters0, stringArray0);
      cleaningPathVisitor0.hashCode();
  }
}
