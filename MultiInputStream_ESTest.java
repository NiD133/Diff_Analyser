/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:16:36 GMT 2025
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.ByteSource;
import com.google.common.io.MultiInputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MultiInputStream_ESTest extends MultiInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      long long0 = multiInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      byte[] byteArray0 = new byte[7];
      int int0 = multiInputStream0.read(byteArray0, (int) (byte)0, 387);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      int int0 = multiInputStream0.read();
      assertEquals(158, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      arrayDeque0.add(byteSource0);
      // Undeclared exception!
      try { 
        multiInputStream0.skip(4134L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      // Undeclared exception!
      try { 
        multiInputStream0.read((byte[]) null, (-332), (-332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      linkedList0.add(byteSource0);
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        multiInputStream0.read(byteArray0, 408, 408);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      ByteSource byteSource0 = ByteSource.empty();
      arrayList0.add(byteSource0);
      ListIterator<ByteSource> listIterator0 = arrayList0.listIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(listIterator0);
      LinkedHashSet<ByteSource> linkedHashSet0 = new LinkedHashSet<ByteSource>();
      linkedHashSet0.add(byteSource0);
      arrayList0.addAll((Collection<? extends ByteSource>) linkedHashSet0);
      // Undeclared exception!
      try { 
        multiInputStream0.read();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      arrayDeque0.add(byteSource0);
      MultiInputStream multiInputStream0 = null;
      try {
        multiInputStream0 = new MultiInputStream(iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      arrayList0.add((ByteSource) null);
      Iterator<ByteSource> iterator0 = arrayList0.iterator();
      MultiInputStream multiInputStream0 = null;
      try {
        multiInputStream0 = new MultiInputStream(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiInputStream multiInputStream0 = null;
      try {
        multiInputStream0 = new MultiInputStream((Iterator<? extends ByteSource>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      byte[] byteArray0 = byteSource1.read();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      int int0 = multiInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      multiInputStream0.close();
      assertFalse(multiInputStream0.markSupported());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      ByteSource[] byteSourceArray0 = new ByteSource[3];
      ByteSource byteSource0 = ByteSource.empty();
      byteSourceArray0[0] = byteSource0;
      byte[] byteArray0 = new byte[6];
      ByteSource byteSource1 = ByteSource.wrap(byteArray0);
      byteSourceArray0[1] = byteSource1;
      byteSourceArray0[2] = byteSource0;
      ByteSource byteSource2 = ByteSource.concat(byteSourceArray0);
      arrayDeque0.add(byteSource2);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      long long0 = multiInputStream0.skip((byte)60);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      byte[] byteArray0 = new byte[8];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      linkedList0.add(byteSource0);
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      long long0 = multiInputStream0.skip((-896L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<ByteSource> arrayList0 = new ArrayList<ByteSource>();
      Iterator<ByteSource> iterator0 = arrayList0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      long long0 = multiInputStream0.skip((-1293L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      byte[] byteArray0 = new byte[3];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      ByteSource byteSource1 = ByteSource.concat(iterator0);
      boolean boolean0 = byteSource1.contentEquals(byteSource1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      ByteSource[] byteSourceArray0 = new ByteSource[3];
      byte[] byteArray0 = new byte[8];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      byteSourceArray0[0] = byteSource0;
      linkedList0.add(byteSourceArray0[0]);
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      int int0 = multiInputStream0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      ByteSource[] byteSourceArray0 = new ByteSource[3];
      byte[] byteArray0 = new byte[8];
      ByteSource byteSource0 = ByteSource.wrap(byteArray0);
      byteSourceArray0[0] = byteSource0;
      linkedList0.add(byteSourceArray0[0]);
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      int int0 = multiInputStream0.available();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteSource byteSource0 = ByteSource.empty();
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      arrayDeque0.add(byteSource0);
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      long long0 = multiInputStream0.skip(2173L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<ByteSource> linkedList0 = new LinkedList<ByteSource>();
      Iterator<ByteSource> iterator0 = linkedList0.descendingIterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      boolean boolean0 = multiInputStream0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayDeque<ByteSource> arrayDeque0 = new ArrayDeque<ByteSource>();
      Iterator<ByteSource> iterator0 = arrayDeque0.iterator();
      MultiInputStream multiInputStream0 = new MultiInputStream(iterator0);
      int int0 = multiInputStream0.available();
      assertEquals(0, int0);
  }
}
