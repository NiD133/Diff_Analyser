package org.apache.commons.lang3;

import static org.apache.commons.lang3.LangAssertions.assertIllegalArgumentException;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.stream.Stream;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * Tests for {@link RandomUtils}.
 * This test suite uses parameterized tests to run all tests against three
 * different RandomUtils instances: secure, secure-strong, and insecure.
 */
public class RandomUtilsTest extends AbstractLangTest {

    /**
     * A small delta for comparing floating-point numbers.
     */
    private static final double DELTA = 1e-5;

    /**
     * Provides the different RandomUtils instances to be tested.
     * @return a stream of RandomUtils instances.
     */
    static Stream<RandomUtils> randomProvider() {
        return Stream.of(RandomUtils.secure(), RandomUtils.secureStrong(), RandomUtils.insecure());
    }

    @Nested
    @DisplayName("randomBoolean()")
    class RandomBooleanTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void shouldNotFail(final RandomUtils randomUtils) {
            // This is a smoke test to ensure the method call does not fail.
            // Testing for true randomness is complex and out of scope for a unit test.
            // The original assertion 'assertTrue(result || !result)' was a tautology.
            randomUtils.randomBoolean();
        }
    }

    @Nested
    @DisplayName("randomBytes(int)")
    class RandomBytesTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void shouldReturnArrayOfCorrectSize(final RandomUtils randomUtils) {
            final byte[] result = randomUtils.randomBytes(20);
            assertEquals(20, result.length, "The generated byte array should have the requested size.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void shouldReturnEmptyArrayForZeroCount(final RandomUtils randomUtils) {
            final byte[] result = randomUtils.randomBytes(0);
            assertArrayEquals(new byte[0], result, "Requesting 0 bytes should result in an empty array.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void shouldThrowExceptionForNegativeCount(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomBytes(-1), "A negative count should raise an exception.");
        }
    }

    @Nested
    @DisplayName("randomDouble(...)")
    class RandomDoubleTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withNoArgs_shouldReturnPositiveValue(final RandomUtils randomUtils) {
            final double result = randomUtils.randomDouble();
            assertTrue(result >= 0d && result < Double.MAX_VALUE, "Result should be in [0, Double.MAX_VALUE)");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnNumberWithinRange(final RandomUtils randomUtils) {
            final double startInclusive = 33d;
            final double endExclusive = 42d;
            final double result = randomUtils.randomDouble(startInclusive, endExclusive);
            assertTrue(result >= startInclusive && result < endExclusive, "Result should be within the specified range.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldHandleMaxDoubleRange(final RandomUtils randomUtils) {
            final double result = randomUtils.randomDouble(0, Double.MAX_VALUE);
            assertTrue(result >= 0 && result < Double.MAX_VALUE, "Result should be within [0, Double.MAX_VALUE).");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnStartWhenRangeIsZero(final RandomUtils randomUtils) {
            final double value = 42.1;
            assertEquals(value, randomUtils.randomDouble(value, value), DELTA, "When start equals end, start should be returned.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionForNegativeStart(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomDouble(-1, 1), "A negative start value should raise an exception.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionWhenStartIsGreaterThanEnd(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomDouble(2, 1), "Start cannot be greater than end.");
        }
    }

    @Nested
    @DisplayName("randomFloat(...)")
    class RandomFloatTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withNoArgs_shouldReturnPositiveValue(final RandomUtils randomUtils) {
            final float result = randomUtils.randomFloat();
            assertTrue(result >= 0f && result < Float.MAX_VALUE, "Result should be in [0, Float.MAX_VALUE)");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnNumberWithinRange(final RandomUtils randomUtils) {
            final float startInclusive = 33f;
            final float endExclusive = 42f;
            final float result = randomUtils.randomFloat(startInclusive, endExclusive);
            assertTrue(result >= startInclusive && result < endExclusive, "Result should be within the specified range.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldHandleMaxFloatRange(final RandomUtils randomUtils) {
            final float result = randomUtils.randomFloat(0, Float.MAX_VALUE);
            assertTrue(result >= 0f && result < Float.MAX_VALUE, "Result should be within [0, Float.MAX_VALUE).");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnStartWhenRangeIsZero(final RandomUtils randomUtils) {
            final float value = 42.1f;
            assertEquals(value, randomUtils.randomFloat(value, value), DELTA, "When start equals end, start should be returned.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionForNegativeStart(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomFloat(-1, 1), "A negative start value should raise an exception.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionWhenStartIsGreaterThanEnd(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomFloat(2, 1), "Start cannot be greater than end.");
        }
    }

    @Nested
    @DisplayName("randomInt(...)")
    class RandomIntTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withNoArgs_shouldReturnPositiveValue(final RandomUtils randomUtils) {
            final int result = randomUtils.randomInt();
            assertTrue(result >= 0 && result < Integer.MAX_VALUE, "Result should be in [0, Integer.MAX_VALUE)");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnNumberWithinRange(final RandomUtils randomUtils) {
            final int startInclusive = 33;
            final int endExclusive = 42;
            final int result = randomUtils.randomInt(startInclusive, endExclusive);
            assertTrue(result >= startInclusive && result < endExclusive, "Result should be within the specified range.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldHandleMaxIntegerRange(final RandomUtils randomUtils) {
            final int result = randomUtils.randomInt(0, Integer.MAX_VALUE);
            assertTrue(result >= 0 && result < Integer.MAX_VALUE, "Result should be within [0, Integer.MAX_VALUE).");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnStartWhenRangeIsZero(final RandomUtils randomUtils) {
            final int value = 42;
            assertEquals(value, randomUtils.randomInt(value, value), "When start equals end, start should be returned.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionForNegativeStart(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomInt(-1, 1), "A negative start value should raise an exception.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionWhenStartIsGreaterThanEnd(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomInt(2, 1), "Start cannot be greater than end.");
        }
    }

    @Nested
    @DisplayName("randomLong(...)")
    class RandomLongTest {
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withNoArgs_shouldReturnPositiveValue(final RandomUtils randomUtils) {
            final long result = randomUtils.randomLong();
            assertTrue(result >= 0L && result < Long.MAX_VALUE, "Result should be in [0, Long.MAX_VALUE)");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnNumberWithinRange(final RandomUtils randomUtils) {
            final long startInclusive = 33L;
            final long endExclusive = 42L;
            final long result = randomUtils.randomLong(startInclusive, endExclusive);
            assertTrue(result >= startInclusive && result < endExclusive, "Result should be within the specified range.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldHandleMaxLongRange(final RandomUtils randomUtils) {
            final long result = randomUtils.randomLong(0, Long.MAX_VALUE);
            assertTrue(result >= 0 && result < Long.MAX_VALUE, "Result should be within [0, Long.MAX_VALUE).");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldReturnStartWhenRangeIsZero(final RandomUtils randomUtils) {
            final long value = 42L;
            assertEquals(value, randomUtils.randomLong(value, value), "When start equals end, start should be returned.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionForNegativeStart(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomLong(-1, 1), "A negative start value should raise an exception.");
        }

        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldThrowExceptionWhenStartIsGreaterThanEnd(final RandomUtils randomUtils) {
            assertIllegalArgumentException(() -> randomUtils.randomLong(2, 1), "Start cannot be greater than end.");
        }

        /**
         * Regression test for LANG-1592, where a previous implementation could
         * incorrectly return the exclusive upper bound.
         */
        @ParameterizedTest
        @MethodSource("org.apache.commons.lang3.RandomUtilsTest#randomProvider")
        void withRange_shouldNotReturnEndExclusiveForLargeValueRange(final RandomUtils randomUtils) {
            final long startInclusive = 12900000000001L;
            final long endExclusive = 12900000000016L;
            // The previous faulty implementation using 'return (long) nextDouble(start, end)'
            // would fail this test frequently. We loop many times to increase the
            // probability of catching such an error.
            final int loopCount = (int) (endExclusive - startInclusive) * 1000;
            for (int i = 0; i < loopCount; i++) {
                assertNotEquals(endExclusive, randomUtils.randomLong(startInclusive, endExclusive));
            }
        }
    }
}