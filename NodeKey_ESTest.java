/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:14:13 GMT 2025
 */

package org.jfree.data.flow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.flow.NodeKey;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeKey_ESTest extends NodeKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>((-1934), integer0);
      NodeKey<Integer> nodeKey1 = new NodeKey<Integer>((-3799), integer0);
      NodeKey nodeKey2 = (NodeKey)nodeKey1.clone();
      boolean boolean0 = nodeKey0.equals(nodeKey2);
      assertFalse(boolean0);
      assertEquals((-3799), nodeKey2.getStage());
      assertFalse(nodeKey1.equals((Object)nodeKey0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(0, integer0);
      int int0 = nodeKey0.getStage();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>((-1934), integer0);
      int int0 = nodeKey0.getStage();
      assertEquals((-1934), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeKey<Integer> nodeKey0 = null;
      try {
        nodeKey0 = new NodeKey<Integer>(617, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'node' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      Integer integer1 = new Integer(2281);
      NodeKey<Integer> nodeKey1 = new NodeKey<Integer>(2281, integer1);
      NodeKey nodeKey2 = (NodeKey)nodeKey1.clone();
      boolean boolean0 = nodeKey0.equals(nodeKey2);
      assertFalse(boolean0);
      assertEquals(2281, nodeKey2.getStage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      Object object0 = new Object();
      boolean boolean0 = nodeKey0.equals(object0);
      assertEquals(2281, nodeKey0.getStage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(504);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(504, integer0);
      boolean boolean0 = nodeKey0.equals((Object) null);
      assertEquals(504, nodeKey0.getStage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(5721);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(5721, integer0);
      boolean boolean0 = nodeKey0.equals(nodeKey0);
      assertEquals(5721, nodeKey0.getStage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      NodeKey<Integer> nodeKey1 = new NodeKey<Integer>(2725, integer0);
      boolean boolean0 = nodeKey0.equals(nodeKey1);
      assertEquals(2725, nodeKey1.getStage());
      assertFalse(nodeKey1.equals((Object)nodeKey0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      String string0 = nodeKey0.toString();
      assertEquals("[NodeKey: 2281, 3]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      NodeKey nodeKey1 = (NodeKey)nodeKey0.clone();
      boolean boolean0 = nodeKey0.equals(nodeKey1);
      assertTrue(boolean0);
      assertEquals(2281, nodeKey1.getStage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(504);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(504, integer0);
      nodeKey0.getNode();
      assertEquals(504, nodeKey0.getStage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(9);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(9, integer0);
      nodeKey0.hashCode();
      assertEquals(9, nodeKey0.getStage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(3);
      NodeKey<Integer> nodeKey0 = new NodeKey<Integer>(2281, integer0);
      int int0 = nodeKey0.getStage();
      assertEquals(2281, int0);
  }
}
