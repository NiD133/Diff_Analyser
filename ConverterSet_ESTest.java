/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 17 11:28:02 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.Converter;
import org.joda.time.convert.ConverterSet;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.LongConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadableIntervalConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConverterSet_ESTest extends ConverterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(0, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(readablePeriodConverter0, lenientChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.convert.ReadablePeriodConverter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(converterSet0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.convert.ConverterSet
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter[] converterArray0 = new Converter[6];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(1, converterArray0);
      assertFalse(converterSet1.equals((Object)converterSet0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(converterArray0[1], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      // Undeclared exception!
      try { 
        converterSet0.remove(readablePeriodConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.remove((-275), (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-1721), (Converter[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-1238), converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1238 out of bounds for length 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.copyInto((Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter[] converterArray1 = new Converter[4];
      // Undeclared exception!
      try { 
        converterSet0.copyInto(converterArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter[] converterArray0 = new Converter[14];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.add(converterArray0[1], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.add(readablePeriodConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter converter0 = converterSet0.select((Class<?>) null);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      Converter[] converterArray1 = new Converter[3];
      ConverterSet converterSet1 = converterSet0.add(readableIntervalConverter0, converterArray1);
      Class<Object> class0 = Object.class;
      Converter converter0 = converterSet1.select(class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(365, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      ConverterSet converterSet1 = converterSet0.remove(calendarConverter0, (Converter[]) null);
      assertSame(converterSet0, converterSet1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(nullConverter0, converterArray0);
      assertSame(converterSet0, converterSet1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      ConverterSet converterSet1 = converterSet0.add(readableIntervalConverter0, (Converter[]) null);
      assertFalse(converterSet1.equals((Object)converterSet0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter[] converterArray0 = new Converter[1];
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[0] = (Converter) longConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      LongConverter longConverter1 = new LongConverter();
      ConverterSet converterSet1 = converterSet0.add(longConverter1, (Converter[]) null);
      assertNotSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[0] = (Converter) readablePartialConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[1] = (Converter) longConverter0;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[2] = (Converter) nullConverter0;
      DateConverter dateConverter0 = new DateConverter();
      DateConverter dateConverter1 = new DateConverter();
      converterArray0[3] = (Converter) dateConverter1;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(dateConverter0, converterArray0);
      assertNotSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Converter[] converterArray0 = new Converter[7];
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[0] = (Converter) longConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(longConverter0, (Converter[]) null);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[0] = (Converter) readablePartialConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[1] = (Converter) longConverter0;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[2] = (Converter) nullConverter0;
      DateConverter dateConverter0 = new DateConverter();
      converterArray0[3] = (Converter) dateConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(dateConverter0, converterArray0);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[1] = (Converter) longConverter0;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[2] = (Converter) nullConverter0;
      DateConverter dateConverter0 = new DateConverter();
      converterArray0[3] = (Converter) dateConverter0;
      converterArray0[4] = (Converter) longConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(nullConverter0, converterArray0);
      assertNotSame(converterSet1, converterSet0);
      
      ConverterSet converterSet2 = converterSet0.add(readablePartialConverter0, converterArray0);
      assertNotSame(converterSet2, converterSet0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      LongConverter longConverter0 = LongConverter.INSTANCE;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[2] = (Converter) nullConverter0;
      DateConverter dateConverter0 = new DateConverter();
      converterArray0[3] = (Converter) dateConverter0;
      converterArray0[4] = (Converter) longConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter converter0 = converterSet0.select((Class<?>) null);
      assertSame(converter0, nullConverter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      PeriodType periodType0 = PeriodType.standard();
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      DateConverter dateConverter0 = new DateConverter();
      Class<ConverterSet.Entry> class0 = ConverterSet.Entry.class;
      ConverterSet.Entry converterSet_Entry0 = new ConverterSet.Entry(class0, readableInstantConverter0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Chronology chronology0 = dateConverter0.getChronology((Object) converterSet_Entry0, dateTimeZone0);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(readablePartialConverter0, periodType0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.joda.time.convert.ReadablePartialConverter
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.select((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      converterSet0.copyInto(converterArray0);
      assertEquals(5, converterArray0.length);
  }
}
