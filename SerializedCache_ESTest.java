/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 14:15:34 GMT 2025
 */

package org.apache.ibatis.cache.decorators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.cache.decorators.BlockingCache;
import org.apache.ibatis.cache.decorators.FifoCache;
import org.apache.ibatis.cache.decorators.LruCache;
import org.apache.ibatis.cache.decorators.ScheduledCache;
import org.apache.ibatis.cache.decorators.SerializedCache;
import org.apache.ibatis.cache.decorators.SoftCache;
import org.apache.ibatis.cache.decorators.SynchronizedCache;
import org.apache.ibatis.cache.decorators.TransactionalCache;
import org.apache.ibatis.cache.decorators.WeakCache;
import org.apache.ibatis.cache.impl.PerpetualCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializedCache_ESTest extends SerializedCache_ESTest_scaffolding {

  // Test exception when serializing non-serializable objects
  @Test(timeout = 4000)
  public void testPutObjectNonSerializableThrowsException() throws Throwable {
    PerpetualCache perpetualCache = new PerpetualCache("org.apache.ibatis.cache.decorators.SerializedCache$CustomObjectInputStream");
    Cache syncCache = new SynchronizedCache(perpetualCache);
    SerializedCache serializedCache = new SerializedCache(syncCache);
    Object nonSerializable = new PerpetualCache("non-serializable");
    
    try {
      serializedCache.putObject("key", nonSerializable);
      fail("Expecting exception: RuntimeException");
    } catch(RuntimeException e) {
      // Verify exception details
      assertEquals("SharedCache failed to make a copy of a non-serializable object: org.apache.ibatis.cache.impl.PerpetualCache@e1348a2c", e.getMessage());
      verifyException("org.apache.ibatis.cache.decorators.SerializedCache", e);
    }
  }

  // Test successful serialization path
  @Test(timeout = 4000)
  public void testPutAndGetSerializableObject() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    Serializable value = "serializable_value";
    
    serializedCache.putObject("key", value);
    Object retrieved = serializedCache.getObject("key");
    
    assertEquals(value, retrieved);
  }

  // Test reading from empty stream
  @Test(timeout = 4000)
  public void testCustomObjectInputStreamEmptyStreamThrowsEOF() throws Throwable {
    Enumeration<MockFileInputStream> emptyEnum = mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(emptyEnum).hasMoreElements();
    SequenceInputStream emptyStream = new SequenceInputStream(emptyEnum);

    try {
      new SerializedCache.CustomObjectInputStream(emptyStream);
      fail("Expecting exception: EOFException");
    } catch(EOFException e) {
      // Expected when reading from empty stream
    }
  }

  // Test cache clearance
  @Test(timeout = 4000)
  public void testClearCache() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    baseCache.putObject("key", "value");
    
    serializedCache.clear();
    int size = serializedCache.getSize();
    
    assertEquals(0, size);
  }

  // Test object removal
  @Test(timeout = 4000)
  public void testRemoveObject() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    baseCache.putObject("key", "value");
    
    Object removed = serializedCache.removeObject("key");
    int size = serializedCache.getSize();
    
    assertEquals("value", removed);
    assertEquals(0, size);
  }

  // Test initial cache size
  @Test(timeout = 4000)
  public void testInitialSizeIsZero() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    assertEquals(0, serializedCache.getSize());
  }

  // Test size after adding an item
  @Test(timeout = 4000)
  public void testSizeAfterPut() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    serializedCache.putObject("key", "value");
    assertEquals(1, serializedCache.getSize());
  }

  // Test ID retrieval (null case)
  @Test(timeout = 4000)
  public void testGetIdNull() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache(null);
    SerializedCache serializedCache = new SerializedCache(baseCache);
    assertNull(serializedCache.getId());
  }

  // Test ID retrieval
  @Test(timeout = 4000)
  public void testGetId() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("test_id");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    assertEquals("test_id", serializedCache.getId());
  }

  // Test cache equality
  @Test(timeout = 4000)
  public void testCacheEquality() throws Throwable {
    Cache cache1 = new SerializedCache(new PerpetualCache("id"));
    Cache cache2 = new SerializedCache(new PerpetualCache("id"));
    assertTrue(cache1.equals(cache2));
  }

  // Test cache inequality
  @Test(timeout = 4000)
  public void testCacheInequality() throws Throwable {
    Cache cache1 = new SerializedCache(new PerpetualCache("id1"));
    Cache cache2 = new PerpetualCache("id2");
    assertFalse(cache1.equals(cache2));
  }

  // Test NPE in removeObject with null delegate
  @Test(timeout = 4000)
  public void testRemoveObjectWithNullDelegateThrowsNPE() throws Throwable {
    SerializedCache serializedCache = new SerializedCache(null);
    try {
      serializedCache.removeObject("key");
      fail("Expecting exception: NullPointerException");
    } catch(NullPointerException e) {
      // Expected due to null delegate
    }
  }

  // Test NPE in putObject with null delegate
  @Test(timeout = 4000)
  public void testPutObjectWithNullDelegateThrowsNPE() throws Throwable {
    SerializedCache serializedCache = new SerializedCache(null);
    try {
      serializedCache.putObject("key", "value");
      fail("Expecting exception: NullPointerException");
    } catch(NullPointerException e) {
      // Expected due to null delegate
    }
  }

  // Test error when cache ID is missing
  @Test(timeout = 4000)
  public void testMissingCacheIdThrowsException() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache(null);
    SerializedCache serializedCache = new SerializedCache(baseCache);
    try {
      serializedCache.hashCode();
      fail("Expecting exception: RuntimeException");
    } catch(RuntimeException e) {
      assertEquals("Cache instances require an ID.", e.getMessage());
    }
  }

  // Test deserialization failure with wrong data type
  @Test(timeout = 4000)
  public void testDeserializeNonByteArrayThrowsClassCast() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    baseCache.putObject("key", "non_byte_array"); // Wrong type stored
    
    try {
      serializedCache.getObject("key");
      fail("Expecting exception: ClassCastException");
    } catch(ClassCastException e) {
      // Expected when deserializing non-byte array
    }
  }

  // Test getObject returns null for missing keys
  @Test(timeout = 4000)
  public void testGetObjectMissingKeyReturnsNull() throws Throwable {
    PerpetualCache baseCache = new PerpetualCache("");
    SerializedCache serializedCache = new SerializedCache(baseCache);
    assertNull(serializedCache.getObject("missing_key"));
  }
}