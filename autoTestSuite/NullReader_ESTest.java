/*
 * This file was automatically generated by EvoSuite
 * Tue May 20 22:27:49 GMT 2025
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.NullReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NullReader_ESTest extends NullReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1L));
      nullReader0.read();
      nullReader0.mark(0);
      nullReader0.reset();
      assertEquals(1L, nullReader0.getPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1L));
      char[] charArray0 = new char[8];
      nullReader0.read(charArray0, (-1), (-3484));
      int int0 = nullReader0.read();
      assertEquals((-3483L), nullReader0.getPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      char[] charArray0 = new char[2];
      nullReader0.processChars(charArray0, 1542, 1542);
      assertTrue(nullReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NullReader nullReader0 = new NullReader(597L);
      long long0 = nullReader0.skip(0);
      assertEquals(0L, long0);
      assertTrue(nullReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1451L, true, true);
      long long0 = nullReader0.skip(1451L);
      assertEquals(1451L, nullReader0.getPosition());
      assertEquals(1451L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1279L);
      char[] charArray0 = new char[4];
      int int0 = nullReader0.read(charArray0, 938, 0);
      assertTrue(nullReader0.markSupported());
      assertEquals(0, int0);
      assertEquals(0L, nullReader0.getPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1592L);
      char[] charArray0 = new char[5];
      int int0 = nullReader0.read(charArray0, 2146694131, 2146694131);
      assertEquals(1592L, nullReader0.getPosition());
      assertEquals(1592, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1254L);
      char[] charArray0 = new char[0];
      int int0 = nullReader0.read(charArray0);
      assertEquals(0, int0);
      assertTrue(nullReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1480L, true, true);
      char[] charArray0 = new char[3];
      int int0 = nullReader0.read(charArray0);
      assertEquals(3L, nullReader0.getPosition());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1401L), true, false);
      int int0 = nullReader0.processChar();
      assertEquals((-1401L), nullReader0.getSize());
      assertTrue(nullReader0.markSupported());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullReader nullReader0 = new NullReader(0L, false, false);
      boolean boolean0 = nullReader0.markSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NullReader nullReader0 = NullReader.INSTANCE;
      long long0 = nullReader0.getSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullReader nullReader0 = new NullReader(1279L);
      long long0 = nullReader0.getSize();
      assertTrue(nullReader0.markSupported());
      assertEquals(1279L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-961L));
      nullReader0.read();
      long long0 = nullReader0.getPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NullReader nullReader0 = new NullReader(0L, true, true);
      char[] charArray0 = new char[7];
      try { 
        nullReader0.read(charArray0, 0, 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-955L));
      // Undeclared exception!
      try { 
        nullReader0.INSTANCE.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NullReader nullReader0 = new NullReader(0L, false, true);
      char[] charArray0 = new char[2];
      try { 
        nullReader0.read(charArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-2271L), false, true);
      nullReader0.skip((-2271L));
      try { 
        nullReader0.read();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      char[] charArray0 = new char[5];
      nullReader0.read(charArray0, 640, 0);
      try { 
        nullReader0.skip(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Skip after end of file
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NullReader nullReader0 = new NullReader();
      nullReader0.mark((-1791));
      try { 
        nullReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Marked position [0] is no longer valid - passed the read limit [-1791]
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NullReader nullReader0 = NullReader.INSTANCE;
      nullReader0.getPosition();
      nullReader0.read();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1324L));
      int int0 = 8;
      long long0 = nullReader0.skip(int0);
      assertEquals((-1324L), nullReader0.getPosition());
      assertEquals((-1324L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NullReader nullReader0 = new NullReader(247L, false, false);
      // Undeclared exception!
      try { 
        nullReader0.reset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // reset() not supported
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NullReader nullReader0 = new NullReader(0L);
      try { 
        nullReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No position has been marked
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-955L));
      nullReader0.INSTANCE.mark(1180);
      nullReader0.getPosition();
      char[] charArray0 = new char[1];
      char char0 = 'U';
      charArray0[0] = 'U';
      nullReader0.read(charArray0, 1180, 1180);
      nullReader0.read();
      char[] charArray1 = new char[9];
      charArray1[0] = 'U';
      nullReader0.getPosition();
      nullReader0.INSTANCE.read(charArray1, (-1056), (-196));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NullReader nullReader0 = new NullReader(10L, false, false);
      // Undeclared exception!
      try { 
        nullReader0.mark(1452);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // mark() not supported
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-348L), true, true);
      nullReader0.skip((-348L));
      try { 
        nullReader0.skip((-348L));
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.example.NullReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NullReader nullReader0 = NullReader.INSTANCE;
      nullReader0.close();
      assertEquals(0L, nullReader0.getPosition());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1324L));
      long long0 = nullReader0.getSize();
      assertTrue(nullReader0.markSupported());
      assertEquals((-1324L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-970L));
      char[] charArray0 = new char[14];
      nullReader0.read(charArray0);
      int int0 = nullReader0.read();
      assertEquals((-970L), nullReader0.getPosition());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NullReader nullReader0 = new NullReader((-1324L));
      boolean boolean0 = nullReader0.markSupported();
      assertEquals((-1324L), nullReader0.getSize());
      assertTrue(boolean0);
  }
}
