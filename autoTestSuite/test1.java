/*
 * This file was automatically generated by EvoSuite
 * Thu May 15 21:03:06 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.apache.commons.io.input.BoundedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BoundedReader_ESTest extends BoundedReader_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        StringReader stringReader0 = new StringReader("TO[Gj");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 0);
        CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "TO[Gj");
        int int0 = boundedReader0.read(charBuffer0);
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        StringReader stringReader0 = new StringReader("QN?");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 2680);
        boundedReader0.read();
        boundedReader0.mark(2680);
        int int0 = boundedReader0.read();
        assertEquals(78, int0);
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        StringReader stringReader0 = new StringReader("");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1148);
        char[] charArray0 = new char[1];
        int int0 = boundedReader0.read(charArray0, 0, 0);
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        StringReader stringReader0 = new StringReader("org.apache.commons.io.input.BoundedReader");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
        char[] charArray0 = new char[6];
        int int0 = boundedReader0.read(charArray0, 1, 1);
        assertEquals(1, int0);
        assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        BoundedReader boundedReader0 = new BoundedReader((Reader) null, 0);
        // Undeclared exception!
        try {
            boundedReader0.reset();
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        StringReader stringReader0 = new StringReader("TO[Gj");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 0);
        boundedReader0.close();
        try {
            boundedReader0.reset();
            fail("Expecting exception: IOException");

        } catch(IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        StringReader stringReader0 = new StringReader("g`8B;^5");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 820);
        // Undeclared exception!
        try {
            boundedReader0.read((char[]) null, 103, 78);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        StringReader stringReader0 = new StringReader("j");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
        boundedReader0.close();
        char[] charArray0 = new char[6];
        try {
            boundedReader0.read(charArray0, (-2537), 699);
            fail("Expecting exception: IOException");

        } catch(IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        BoundedReader boundedReader0 = new BoundedReader((Reader) null, 2482);
        // Undeclared exception!
        try {
            boundedReader0.read();
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        StringReader stringReader0 = new StringReader("");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 2140);
        boundedReader0.close();
        try {
            boundedReader0.read();
            fail("Expecting exception: IOException");

        } catch(IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        BoundedReader boundedReader0 = new BoundedReader((Reader) null, 0);
        // Undeclared exception!
        try {
            boundedReader0.mark(0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        StringReader stringReader0 = new StringReader("SQ\"Rz~>o\"ggtg97eV");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-585));
        // Undeclared exception!
        try {
            boundedReader0.mark((-585));
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // Read-ahead limit < 0
            //
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        BoundedReader boundedReader0 = new BoundedReader((Reader) null, 0);
        // Undeclared exception!
        try {
            boundedReader0.close();
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        StringReader stringReader0 = new StringReader("Mqy[$oy5nF");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1601);
        boundedReader0.mark(1601);
        int int0 = boundedReader0.read();
        assertEquals(77, int0);
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        StringReader stringReader0 = new StringReader("CU6^Ejr;7S;Ndl FK8");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-1821));
        BoundedReader boundedReader1 = new BoundedReader(boundedReader0, 1);
        boundedReader1.mark(0);
        int int0 = boundedReader1.read();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        StringReader stringReader0 = new StringReader("CU6^Ejr;7S;Ndl FK8");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-1821));
        BoundedReader boundedReader1 = new BoundedReader(boundedReader0, 1);
        int int0 = boundedReader1.read();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        StringReader stringReader0 = new StringReader("QN?");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 2680);
        char[] charArray0 = new char[9];
        int int0 = boundedReader0.read(charArray0);
        assertArrayEquals(new char[] {'Q', 'N', '?', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
        assertEquals(3, int0);

        boundedReader0.mark(1);
        int int1 = boundedReader0.read();
        assertEquals((-1), int1);
    }

    @Test(timeout = 4000)
    public void test17()  throws Throwable  {
        StringReader stringReader0 = new StringReader("pI2");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-2049));
        char[] charArray0 = new char[14];
        int int0 = boundedReader0.read(charArray0, (-2049), (-1));
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test18()  throws Throwable  {
        StringReader stringReader0 = new StringReader("j");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
        boundedReader0.mark(699);
        char[] charArray0 = new char[6];
        // Undeclared exception!
        try {
            boundedReader0.read(charArray0, (-2537), 699);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // -2537
            //
            verifyException("org.apache.commons.io.input.BoundedReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test19()  throws Throwable  {
        StringReader stringReader0 = new StringReader("pI2");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, (-2049));
        int int0 = boundedReader0.read();
        assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test20()  throws Throwable  {
        StringReader stringReader0 = new StringReader("");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
        boundedReader0.reset();
    }

    @Test(timeout = 4000)
    public void test21()  throws Throwable  {
        StringReader stringReader0 = new StringReader("");
        BoundedReader boundedReader0 = new BoundedReader(stringReader0, 1);
        boundedReader0.close();
        try {
            boundedReader0.mark(0);
            fail("Expecting exception: IOException");

        } catch(IOException e) {
            //
            // Stream closed
            //
            verifyException("java.io.StringReader", e);
        }
    }
}
