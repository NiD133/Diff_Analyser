/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 14:38:47 GMT 2025
 */

package org.apache.ibatis.datasource.jndi;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.Properties;
import javax.sql.DataSource;
import org.apache.ibatis.datasource.jndi.JndiDataSourceFactory;
import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JndiDataSourceFactory_ESTest extends JndiDataSourceFactory_ESTest_scaffolding {

  @Test(timeout = 4000, expected = NullPointerException.class)
  public void setProperties_WithNullProperties_ThrowsNullPointerException() throws Throwable {
      // Test that setting null properties throws NullPointerException
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      factory.setProperties(null); // Should throw NullPointerException
  }

  @Test(timeout = 4000)
  public void setProperties_WithNonStringKeyInProperties_ThrowsClassCastException() throws Throwable {
      // Test that properties with non-String keys cause ClassCastException
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      Properties invalidProperties = new Properties();
      
      // Create a key that is not a String
      UnpooledDataSource invalidKey = new UnpooledDataSource("initial_context", "data_source", new Properties());
      Object value = new Object();
      
      // Insert non-String key into properties
      invalidProperties.put(invalidKey, value);
      
      try { 
          factory.setProperties(invalidProperties);
          fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
          // Verify the expected exception
          verifyException("org.apache.ibatis.datasource.jndi.JndiDataSourceFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void setProperties_WithEnvProperties_DoesNotThrow() throws Throwable {
      // Test that properties with "env." prefix are handled without errors
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      Properties envProperties = new Properties();
      
      // Load properties with "env." prefix
      envProperties.load(new StringReader("env."));
      envProperties.load(new StringReader("env.env$ource"));
      
      // Should process without exceptions
      factory.setProperties(envProperties);
  }

  @Test(timeout = 4000)
  public void setProperties_WithoutInitialContext_ThrowsRuntimeException() throws Throwable {
      // Test that missing initial context configuration throws RuntimeException
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      Properties properties = new Properties();
      
      // Load a property without initial context
      properties.load(new StringReader("data_source"));
      
      try { 
          factory.setProperties(properties);
          fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
          // Verify expected error message about missing initial context
          verifyException("org.apache.ibatis.datasource.jndi.JndiDataSourceFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void setProperties_WithInitialContextAndDataSource_ThrowsRuntimeExceptionBecauseNoFactory() throws Throwable {
      // Test that valid properties still fail due to missing JNDI factory
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      Properties properties = new Properties();
      
      // Set required properties
      properties.setProperty("initial_context", "initial_context");
      properties.setProperty("data_source", "initial_context");
      
      try { 
          factory.setProperties(properties);
          fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
          // Verify expected error about JNDI configuration
          verifyException("org.apache.ibatis.datasource.jndi.JndiDataSourceFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void setProperties_WithInitialContextPropertyOnly_DoesNotThrow() throws Throwable {
      // Test that setting only initial_context property doesn't throw
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      Properties properties = new Properties();
      
      // Only set initial_context property
      properties.load(new StringReader("initial_context"));
      factory.setProperties(properties); // Should not throw
  }

  @Test(timeout = 4000)
  public void getDataSource_BeforeSetProperties_ReturnsNull() throws Throwable {
      // Verify DataSource is null before configuration
      JndiDataSourceFactory factory = new JndiDataSourceFactory();
      DataSource dataSource = factory.getDataSource();
      assertNull("DataSource should be null before setProperties is called", dataSource);
  }
}