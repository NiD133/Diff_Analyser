package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Contains tests for the {@link IllegalFieldValueException} class.
 */
// The original test was auto-generated by EvoSuite and extended a scaffolding class.
// That extension has been removed for clarity and to make the test more focused.
public class IllegalFieldValueExceptionTest {

    /**
     * Verifies that calling prependMessage() with a null argument does not
     * alter the original exception message.
     */
    @Test
    public void prependMessage_withNullMessage_shouldNotChangeOriginalMessage() {
        // Arrange: Set up an IllegalFieldValueException with specific edge-case values.
        // The original test used an empty string for the field name, which is preserved here.
        String emptyFieldName = "";
        Number value = (byte) 0;
        Number lowerBound = (byte) 0;
        Number upperBound = (byte) 0;

        IllegalFieldValueException exception = new IllegalFieldValueException(
            emptyFieldName,
            value,
            lowerBound,
            upperBound
        );

        // The expected message format is "Value {value} for {fieldName} must be in the range [{lower},{upper}]".
        // With an empty field name, a double space is expected after "for".
        String expectedMessage = "Value 0 for  must be in the range [0,0]";

        // Act: Call the method under test with a null argument.
        exception.prependMessage(null);

        // Assert: The message should remain unchanged.
        assertEquals(
            "Prepending a null message should not alter the exception's message.",
            expectedMessage,
            exception.getMessage()
        );
    }
}