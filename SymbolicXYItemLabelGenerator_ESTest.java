/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:14:07 GMT 2025
 */

package org.jfree.chart.labels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
)
public class SymbolicXYItemLabelGenerator_ESTest extends SymbolicXYItemLabelGenerator_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void generateToolTip_OnDynamicTimeSeriesWithInvalidData_ThrowsNullPointerException() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        DynamicTimeSeriesCollection dataset = new DynamicTimeSeriesCollection(6, 6);
        float[] data = new float[5];
        dataset.appendData(data, 2, 0);
        
        try {
            generator.generateToolTip(dataset, 1, 2);
            fail("Expected NullPointerException due to incomplete dataset initialization");
        } catch (NullPointerException e) {
            // Verify correct exception type is thrown
            verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void generateToolTip_OnValidHighLowDataset_ReturnsCorrectString() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        MockDate date = new MockDate(102L);
        SerialDate serialDate = SerialDate.createInstance((Date) date);
        
        Date[] dates = new Date[3];
        dates[0] = date;
        double[] values = new double[1]; // Defaults to 0.0
        
        DefaultHighLowDataset dataset = new DefaultHighLowDataset(
            serialDate, dates, values, values, values, values, values
        );
        
        String tooltip = generator.generateToolTip(dataset, 0, 0);
        assertEquals("Tooltip should show X value from date and Y as 0.0", 
                     "X: 102.0, Y: 0.0", tooltip);
    }

    @Test(timeout = 4000)
    public void generateToolTip_WithOutOfBoundsIndex_ThrowsIndexOutOfBoundsException() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        DefaultTableXYDataset<ChronoLocalDate> dataset = new DefaultTableXYDataset<>();
        
        try {
            generator.generateToolTip(dataset, 1970, 1970);
            fail("Expected IndexOutOfBoundsException for invalid index");
        } catch (IndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void generateToolTip_WithNullDataset_ThrowsIllegalArgumentException() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        
        try {
            generator.generateToolTip(null, 44, 44);
            fail("Expected IllegalArgumentException for null dataset");
        } catch (IllegalArgumentException e) {
            verifyException("org.jfree.chart.internal.Args", e);
        }
    }

    @Test(timeout = 4000)
    public void generateToolTip_WithInvalidSeriesIndex_ThrowsArrayIndexOutOfBoundsException() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        DynamicTimeSeriesCollection dataset = new DynamicTimeSeriesCollection(1970, 1970);
        
        try {
            generator.generateToolTip(dataset, 1970, 2);
            fail("Expected ArrayIndexOutOfBoundsException for invalid series index");
        } catch (ArrayIndexOutOfBoundsException e) {
            verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void equals_WithDifferentObject_ReturnsFalse() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        Object other = new Object();
        assertFalse("Should not equal arbitrary object", generator.equals(other));
    }

    @Test(timeout = 4000)
    public void equals_WithSameInstance_ReturnsTrue() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        assertTrue("Should equal itself", generator.equals(generator));
    }

    @Test(timeout = 4000)
    public void hashCode_ReturnsConsistentValue() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        generator.hashCode(); // Verify no exception
    }

    @Test(timeout = 4000)
    public void generateLabel_WithInvalidIndices_ReturnsNull() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        TimeSeriesCollection<ChronoLocalDate> dataset = new TimeSeriesCollection<>();
        assertNull("Should return null for invalid indices", 
                   generator.generateLabel(dataset, -1034, -4019));
    }

    @Test(timeout = 4000)
    public void equals_WithClone_ReturnsTrue() throws Throwable {
        SymbolicXYItemLabelGenerator generator = new SymbolicXYItemLabelGenerator();
        Object clone = generator.clone();
        assertTrue("Should equal its clone", generator.equals(clone));
    }
}