package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Tests the string representation generated by {@link CoreOperation#toString()}.
 * This test focuses on how nested operations are formatted, particularly
 * with respect to parenthesization based on operator precedence.
 */
public class CoreOperationToStringTest {

    /**
     * Verifies that the toString() method correctly parenthesizes nested sub-expressions
     * to maintain the correct order of operations. When operations of the same
     * precedence are nested, the inner expressions should be enclosed in parentheses.
     */
    @Test
    public void testToStringWithNestedOperations() {
        // Arrange: Create a complex nested expression like "(1 < 2) >= (3 > 4)".
        // All operators (<, >, >=) have the same comparison precedence, so the inner
        // expressions are expected to be enclosed in parentheses to preserve the
        // evaluation order.

        // Represents the sub-expression "1 < 2"
        Expression leftSubExpression = new CoreOperationLessThan(
                new Constant(1), new Constant(2));

        // Represents the sub-expression "3 > 4"
        Expression rightSubExpression = new CoreOperationGreaterThan(
                new Constant(3), new Constant(4));

        // Represents the full expression "(1 < 2) >= (3 > 4)"
        Expression fullExpression = new CoreOperationGreaterThanOrEqual(
                leftSubExpression, rightSubExpression);

        String expectedString = "(1 < 2) >= (3 > 4)";

        // Act
        String actualString = fullExpression.toString();

        // Assert
        assertEquals("The string representation should correctly parenthesize nested expressions.",
                expectedString, actualString);
    }
}