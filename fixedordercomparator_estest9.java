package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Collections;

/**
 * This test class has been improved for understandability.
 * The original test was generated by EvoSuite.
 */
public class FixedOrderComparator_ESTestTest9 extends FixedOrderComparator_ESTest_scaffolding {

    /**
     * Tests that the comparator becomes "locked" after the first comparison,
     * preventing any subsequent modifications like adding new items.
     */
    @Test(timeout = 4000)
    public void testAddThrowsUnsupportedOperationExceptionAfterFirstCompare() {
        // Arrange: Create a comparator.
        // It's initialized with an empty order list, so any object will be "unknown".
        final FixedOrderComparator<Object> comparator = new FixedOrderComparator<>(Collections.emptyList());
        
        // To perform a comparison on unknown objects without an exception,
        // we must define how to handle them.
        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);
        assertFalse("Comparator should not be locked before the first comparison", comparator.isLocked());

        // Act 1: Perform a comparison. According to the class documentation,
        // this action "locks" the comparator from any future modifications.
        // The specific objects being compared do not matter for this test.
        comparator.compare(new Object(), new Object());
        assertTrue("Comparator should be locked after the first comparison", comparator.isLocked());

        // Act 2 & Assert: Attempt to add a new element to the now-locked comparator.
        // This action is expected to fail with an UnsupportedOperationException.
        try {
            comparator.add(new Object());
            fail("Expected an UnsupportedOperationException to be thrown when modifying a locked comparator.");
        } catch (final UnsupportedOperationException e) {
            // Verify the exception message is correct, confirming the reason for the failure.
            assertEquals("The exception message should explain that the comparator is locked.",
                         "Cannot modify a FixedOrderComparator after a comparison", e.getMessage());
        }
    }
}