/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 19:43:14 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.plot.MeterInterval;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.HistogramType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MeterInterval_ESTest extends MeterInterval_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000)
    public void constructorShouldRejectNullRange() {
        try {
            new MeterInterval("Valid label", null);
            fail("Expected IllegalArgumentException for null range");
        } catch(IllegalArgumentException e) {
            assertEquals("Null 'range' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void constructorShouldRejectNullRangeInFullConstructor() {
        try {
            new MeterInterval("Valid label", null, Color.RED, new BasicStroke(), Color.BLUE);
            fail("Expected IllegalArgumentException for null range");
        } catch(IllegalArgumentException e) {
            assertEquals("Null 'range' argument.", e.getMessage());
        }
    }

    // getRange() Tests
    @Test(timeout = 4000)
    public void getRangeShouldReturnOriginalRange() {
        Range range = new Range(-10.0, 10.0);
        MeterInterval interval = new MeterInterval("Test", range);
        assertSame(range, interval.getRange());
    }

    @Test(timeout = 4000)
    public void getRangeShouldHandleNaNBounds() {
        DefaultBoxAndWhiskerCategoryDataset dataset = new DefaultBoxAndWhiskerCategoryDataset<>();
        Range range = dataset.getRangeBounds(false);
        MeterInterval interval = new MeterInterval("NaN Range", range);
        assertTrue(Double.isNaN(interval.getRange().getUpperBound()));
    }

    @Test(timeout = 4000)
    public void getRangeShouldReturnModifiedRange() {
        Range original = new Range(-100.0, -50.0);
        Range modified = Range.shift(original, 200.0, true);
        MeterInterval interval = new MeterInterval("Shifted", modified);
        assertNotSame(original, interval.getRange());
        assertEquals(100.0, interval.getRange().getLowerBound(), 0.001);
    }

    @Test(timeout = 4000)
    public void getRangeShouldHandleExpandedRange() {
        Range original = new Range(-100.0, -50.0);
        Range expanded = Range.expandToInclude(original, 100.0);
        MeterInterval interval = new MeterInterval("Expanded", expanded);
        assertNotSame(original, interval.getRange());
        assertEquals(100.0, interval.getRange().getUpperBound(), 0.001);
    }

    @Test(timeout = 4000)
    public void getRangeShouldPreserveZeroBounds() {
        Range range = new Range(0.0, 0.0);
        MeterInterval interval = new MeterInterval("Zero", range);
        assertEquals(0.0, interval.getRange().getLowerBound(), 0.001);
    }

    // getLabel() Tests
    @Test(timeout = 4000)
    public void getLabelShouldReturnConstructorValue() {
        MeterInterval interval = new MeterInterval("Test Label", new Range(0, 100));
        assertEquals("Test Label", interval.getLabel());
    }

    @Test(timeout = 4000)
    public void getLabelShouldHandleEmptyString() {
        MeterInterval interval = new MeterInterval("", new Range(0, 100));
        assertEquals("", interval.getLabel());
    }

    // getBackgroundPaint() Tests
    @Test(timeout = 4000)
    public void getBackgroundPaintShouldReturnNullByDefault() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100));
        assertNull(interval.getBackgroundPaint());
    }

    @Test(timeout = 4000)
    public void getBackgroundPaintShouldReturnConstructorValue() {
        Color bgColor = Color.GREEN;
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100), 
                Color.RED, new BasicStroke(), bgColor);
        assertEquals(bgColor, interval.getBackgroundPaint());
    }

    // getOutlinePaint() Tests
    @Test(timeout = 4000)
    public void getOutlinePaintShouldReturnNullWhenNotSet() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100), 
                null, new BasicStroke(), Color.BLUE);
        assertNull(interval.getOutlinePaint());
    }

    @Test(timeout = 4000)
    public void getOutlinePaintShouldReturnConstructorValue() {
        Color outline = Color.BLUE;
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100), 
                outline, new BasicStroke(), Color.GREEN);
        assertEquals(outline, interval.getOutlinePaint());
    }

    // getOutlineStroke() Tests
    @Test(timeout = 4000)
    public void getOutlineStrokeShouldReturnNullWhenNotSet() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100), 
                Color.RED, null, Color.BLUE);
        assertNull(interval.getOutlineStroke());
    }

    @Test(timeout = 4000)
    public void getOutlineStrokeShouldReturnDefaultStroke() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100));
        BasicStroke stroke = (BasicStroke) interval.getOutlineStroke();
        assertEquals(2.0f, stroke.getLineWidth(), 0.001f);
    }

    // equals() Tests
    @Test(timeout = 4000)
    public void equalsShouldReturnTrueForSameInstance() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100));
        assertTrue(interval.equals(interval));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseForDifferentClass() {
        MeterInterval interval = new MeterInterval("Test", new Range(0, 100));
        assertFalse(interval.equals("Not a MeterInterval"));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseForDifferentLabels() {
        Range range = new Range(0, 100);
        MeterInterval i1 = new MeterInterval("Label1", range);
        MeterInterval i2 = new MeterInterval("Label2", range);
        assertFalse(i1.equals(i2));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseForDifferentRanges() {
        MeterInterval i1 = new MeterInterval("Same", new Range(0, 100));
        MeterInterval i2 = new MeterInterval("Same", new Range(0, 200));
        assertFalse(i1.equals(i2));
    }

    @Test(timeout = 4000)
    public void equalsShouldHandleNaNInRanges() {
        // Two NaN ranges aren't equal due to how Range.equals() handles Double.NaN
        Range nanRange = new Range(Double.NaN, Double.NaN);
        MeterInterval i1 = new MeterInterval("Same", nanRange);
        MeterInterval i2 = new MeterInterval("Same", nanRange);
        assertFalse(i1.equals(i2));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseForDifferentOutlinePaints() {
        Range range = new Range(0, 100);
        MeterInterval i1 = new MeterInterval("Same", range, Color.RED, new BasicStroke(), null);
        MeterInterval i2 = new MeterInterval("Same", range, Color.BLUE, new BasicStroke(), null);
        assertFalse(i1.equals(i2));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnFalseForDifferentBackgroundPaints() {
        Range range = new Range(0, 100);
        MeterInterval i1 = new MeterInterval("Same", range, Color.RED, new BasicStroke(), Color.GREEN);
        MeterInterval i2 = new MeterInterval("Same", range, Color.RED, new BasicStroke(), Color.BLUE);
        assertFalse(i1.equals(i2));
    }

    @Test(timeout = 4000)
    public void equalsShouldReturnTrueForSameProperties() {
        Range range = new Range(0, 100);
        MeterInterval i1 = new MeterInterval("Same", range, Color.RED, new BasicStroke(), Color.GREEN);
        MeterInterval i2 = new MeterInterval("Same", range, Color.RED, new BasicStroke(), Color.GREEN);
        assertTrue(i1.equals(i2));
    }
}