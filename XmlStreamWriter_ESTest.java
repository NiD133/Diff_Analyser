/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:55:44 GMT 2025
 */

package org.apache.commons.io.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.nio.CharBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.apache.commons.io.output.XmlStreamWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class XmlStreamWriter_ESTest extends XmlStreamWriter_ESTest_scaffolding {

    // Constructor Validation Tests
    // ============================

    @Test(expected = NullPointerException.class)
    public void constructorWithNullOutputStreamThrowsException() throws Exception {
        new XmlStreamWriter((OutputStream) null);
    }

    @Test(expected = NullPointerException.class)
    public void constructorWithNullFileThrowsException() throws Exception {
        new XmlStreamWriter((File) null);
    }

    @Test(expected = FileNotFoundException.class)
    public void constructorWithNonExistentFileThrowsException() throws Exception {
        new XmlStreamWriter(new MockFile("", ""));
    }

    @Test(expected = UnsupportedCharsetException.class)
    public void constructorWithUnsupportedCharsetThrowsException() throws Exception {
        new XmlStreamWriter((OutputStream) null, "invalid-charset");
    }

    @Test(expected = IllegalCharsetNameException.class)
    public void constructorWithIllegalCharsetNameThrowsException() throws Exception {
        new XmlStreamWriter((OutputStream) null, "<?!illegal");
    }

    // Write Operation Tests
    // =====================

    @Test(expected = NullPointerException.class)
    public void writeNullCharArrayThrowsException() throws Exception {
        PipedOutputStream outputStream = new PipedOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.write(null, 2049, 8192);
    }

    @Test
    public void writeCharArrayWithOffsetSucceeds() throws Exception {
        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream, null);
        char[] data = new char[5];
        writer.write(data, 1, 1);
        assertEquals("UTF-8", writer.getDefaultEncoding());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void writeWithInvalidOffsetThrowsException() throws Exception {
        XmlStreamWriter writer = new XmlStreamWriter((OutputStream) null);
        writer.write(new char[0], 6343, 6343);
    }

    @Test(expected = IOException.class)
    public void writeAfterCloseThrowsException() throws Exception {
        PipedOutputStream outputStream = new PipedOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.write(new char[9]);
        writer.close();
        writer.write(new char[9], 2049, 2049); // Should throw
    }

    // Close/Flush Operation Tests
    // ===========================

    @Test(expected = IOException.class)
    public void flushAfterCloseThrowsException() throws Exception {
        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.close();
        writer.flush(); // Should throw
    }

    @Test(expected = NullPointerException.class)
    public void closeWithNullOutputStreamThrowsException() throws Exception {
        XmlStreamWriter writer = new XmlStreamWriter((OutputStream) null);
        writer.close();
    }

    @Test(expected = IOException.class)
    public void closeWithUnconnectedPipeThrowsException() throws Exception {
        PipedOutputStream outputStream = new PipedOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.write(new char[9]); // Write some data
        writer.close(); // Should throw due to unconnected pipe
    }

    // Encoding Detection Tests
    // ========================

    @Test
    public void getDefaultEncodingReturnsUTF8() throws Exception {
        XmlStreamWriter writer = new XmlStreamWriter(new java.io.ByteArrayOutputStream());
        assertEquals("UTF-8", writer.getDefaultEncoding());
    }

    @Test
    public void afterCloseGetEncodingReturnsUTF8() throws Exception {
        MockFile file = new MockFile("test.xml");
        XmlStreamWriter writer = new XmlStreamWriter(file);
        writer.close();
        assertEquals("UTF-8", writer.getEncoding());
    }

    @Test
    public void writeXmlPrologSetsEncodingToUTF8() throws Exception {
        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.append("<?xml");
        writer.write("?>");
        assertEquals("UTF-8", writer.getEncoding());
    }

    @Test
    public void writeLargeCharBufferSucceeds() throws Exception {
        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.write("<?xml");
        CharBuffer buffer = CharBuffer.allocate(8192);
        writer.append(buffer);
        assertEquals(8192, outputStream.size());
    }

    @Test(expected = NullPointerException.class)
    public void getEncodingBeforeDetectionThrowsException() throws Exception {
        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.getEncoding(); // Should throw
    }

    // Builder Tests
    // =============

    @Test
    public void builderHasDefaultBufferSize() {
        XmlStreamWriter.Builder builder = new XmlStreamWriter.Builder();
        assertEquals(8192, builder.getBufferSizeDefault());
    }

    @Test(expected = IllegalStateException.class)
    public void builderWithoutOriginThrowsException() throws Exception {
        XmlStreamWriter.builder().get(); // Should throw
    }

    // Edge Case Tests
    // ===============

    @Test
    public void constructorWithFileAndNullEncodingUsesDefault() throws Exception {
        XmlStreamWriter writer = new XmlStreamWriter(new MockFile("test"), null);
        assertEquals("UTF-8", writer.getDefaultEncoding());
    }

    @Test
    public void flushAfterWriteSucceeds() throws Exception {
        PipedInputStream inputStream = new PipedInputStream();
        PipedOutputStream outputStream = new PipedOutputStream(inputStream);
        XmlStreamWriter writer = new XmlStreamWriter(outputStream);
        writer.write(new char[9]);
        writer.flush();
        assertEquals(9, inputStream.available());
    }
}