package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import org.evosuite.runtime.mock.java.io.MockFile;

import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
 * This test class contains tests for the {@link ParallelScatterZipCreator}.
 * Note: This test was originally generated by EvoSuite. The class name and
 * scaffolding are retained from the original for context.
 */
public class ParallelScatterZipCreator_ESTestTest10 extends ParallelScatterZipCreator_ESTest_scaffolding {

    /**
     * Verifies that the ParallelScatterZipCreator constructor throws an
     * IllegalArgumentException when provided with a compression level
     * outside the valid range of -1 and 0-9.
     */
    @Test(timeout = 4000)
    public void constructorShouldThrowIllegalArgumentExceptionForInvalidCompressionLevel() {
        // Arrange: Set up the necessary components for the constructor.
        ExecutorService executorService = new ForkJoinPool();

        // The backing store supplier requires a path to a directory for temporary files.
        // The current directory is sufficient for this test's purpose.
        Path tempDirectory = new MockFile("").toPath();
        DefaultBackingStoreSupplier backingStoreSupplier = new DefaultBackingStoreSupplier(tempDirectory);

        // Use a compression level that is clearly outside the valid range.
        final int invalidCompressionLevel = 1394;

        // Act & Assert: Attempt to create an instance and verify the exception.
        try {
            new ParallelScatterZipCreator(executorService, backingStoreSupplier, invalidCompressionLevel);
            fail("Expected an IllegalArgumentException due to an invalid compression level.");
        } catch (final IllegalArgumentException e) {
            // Verify that the exception message clearly states the expected range.
            final String expectedMessage = "Compression level is expected between -1~9";
            assertEquals(expectedMessage, e.getMessage());
        }
    }
}