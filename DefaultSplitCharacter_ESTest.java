/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:35:53 GMT 2025
 */

package com.itextpdf.text.pdf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.GreekList;
import com.itextpdf.text.TabSettings;
import com.itextpdf.text.pdf.DefaultSplitCharacter;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfChunk;
import com.itextpdf.text.pdf.PdfLine;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultSplitCharacter_ESTest extends DefaultSplitCharacter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter();
      char[] charArray0 = new char[2];
      PdfChunk[] pdfChunkArray0 = new PdfChunk[1];
      // Undeclared exception!
      try { 
        defaultSplitCharacter0.getCurrentCharacter(6724, charArray0, pdfChunkArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6724
         //
         verifyException("com.itextpdf.text.pdf.DefaultSplitCharacter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[1];
      DefaultSplitCharacter defaultSplitCharacter0 = (DefaultSplitCharacter)DefaultSplitCharacter.DEFAULT;
      boolean boolean0 = defaultSplitCharacter0.isSplitCharacter(0, 0, 0, charArray0, (PdfChunk[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GreekList greekList0 = new GreekList();
      Chunk chunk0 = greekList0.getSymbol();
      PdfAction pdfAction0 = new PdfAction("[]~N<", true);
      PdfLine pdfLine0 = new PdfLine(2, 981.5F, 4, 1.0E-6F);
      PdfChunk pdfChunk0 = new PdfChunk(chunk0, pdfAction0);
      PdfChunk pdfChunk1 = new PdfChunk("(d{2,4}-d{2}-d{2,4})", pdfChunk0);
      PdfChunk pdfChunk2 = pdfLine0.add(pdfChunk1, (-1366.4F));
      assertNull(pdfChunk2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[1];
      DefaultSplitCharacter defaultSplitCharacter0 = (DefaultSplitCharacter)DefaultSplitCharacter.DEFAULT;
      char char0 = defaultSplitCharacter0.getCurrentCharacter(0, charArray0, (PdfChunk[]) null);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter();
      char[] charArray0 = new char[7];
      charArray0[4] = '1';
      char char0 = defaultSplitCharacter0.getCurrentCharacter(4, charArray0, (PdfChunk[]) null);
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter('w');
      char[] charArray0 = new char[2];
      charArray0[1] = 'w';
      char char0 = defaultSplitCharacter0.getCurrentCharacter(1, charArray0, (PdfChunk[]) null);
      assertEquals('w', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter();
      // Undeclared exception!
      try { 
        defaultSplitCharacter0.isSplitCharacter(505, 505, 505, (char[]) null, (PdfChunk[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.DefaultSplitCharacter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter();
      char[] charArray0 = new char[0];
      PdfChunk[] pdfChunkArray0 = new PdfChunk[0];
      // Undeclared exception!
      try { 
        defaultSplitCharacter0.isSplitCharacter((-1743), (-1743), (-1743), charArray0, pdfChunkArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1743
         //
         verifyException("com.itextpdf.text.pdf.DefaultSplitCharacter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter();
      // Undeclared exception!
      try { 
        defaultSplitCharacter0.getCurrentCharacter(1522, (char[]) null, (PdfChunk[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.DefaultSplitCharacter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter('\u02FA');
      char[] charArray0 = new char[51];
      boolean boolean0 = defaultSplitCharacter0.isSplitCharacter('\u0000', 0, 0, charArray0, (PdfChunk[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GreekList greekList0 = new GreekList();
      Chunk chunk0 = greekList0.getSymbol();
      PdfAction pdfAction0 = new PdfAction();
      PdfLine pdfLine0 = new PdfLine(8, 16, 10, 1);
      PdfChunk pdfChunk0 = new PdfChunk(chunk0, pdfAction0);
      PdfChunk pdfChunk1 = new PdfChunk("\uFFFC", pdfChunk0);
      PdfChunk pdfChunk2 = pdfLine0.add(pdfChunk1, 4);
      assertNull(pdfChunk2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GreekList greekList0 = new GreekList(true, 0);
      Chunk chunk0 = greekList0.getSymbol();
      PdfAction pdfAction0 = new PdfAction();
      TabSettings tabSettings0 = new TabSettings();
      PdfChunk pdfChunk0 = new PdfChunk(chunk0, pdfAction0, tabSettings0);
      ArrayList<PdfChunk> arrayList0 = new ArrayList<PdfChunk>();
      PdfLine pdfLine0 = new PdfLine(0.0F, 2, 3013.6F, 512, false, arrayList0, true);
      PdfChunk pdfChunk1 = pdfLine0.add(pdfChunk0);
      assertNull(pdfChunk1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GreekList greekList0 = new GreekList();
      Chunk chunk0 = greekList0.getSymbol();
      PdfAction pdfAction0 = new PdfAction();
      PdfChunk pdfChunk0 = new PdfChunk(chunk0, pdfAction0);
      char[] charArray0 = new char[9];
      charArray0[2] = '-';
      DefaultSplitCharacter defaultSplitCharacter0 = new DefaultSplitCharacter(charArray0);
      PdfChunk[] pdfChunkArray0 = new PdfChunk[1];
      pdfChunkArray0[0] = pdfChunk0;
      boolean boolean0 = defaultSplitCharacter0.isSplitCharacter(16, 2, 2, charArray0, pdfChunkArray0);
      assertTrue(boolean0);
  }
}
