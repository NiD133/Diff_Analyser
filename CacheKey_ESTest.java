/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability
 */

package org.apache.ibatis.cache;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.verifyException;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class CacheKey_ESTest extends CacheKey_ESTest_scaffolding {

    // =============== Constructor Tests ===============
    @Test(timeout = 4000)
    public void newCacheKey_hasZeroUpdateCount() {
        CacheKey cacheKey = new CacheKey();
        assertEquals(0, cacheKey.getUpdateCount());
    }

    @Test(timeout = 4000)
    public void constructor_withNullArray_throwsNullPointerException() {
        try {
            new CacheKey((Object[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("org.apache.ibatis.cache.CacheKey", e);
        }
    }

    @Test(timeout = 4000)
    public void toString_returnsExpectedFormatForNewInstance() {
        CacheKey cacheKey = new CacheKey();
        assertEquals("17:0", cacheKey.toString());
    }

    // =============== Update Method Tests ===============
    @Test(timeout = 4000)
    public void update_withObject_incrementsUpdateCount() {
        CacheKey cacheKey = new CacheKey();
        cacheKey.update(new Object());
        assertEquals(1, cacheKey.getUpdateCount());
    }

    @Test(timeout = 4000)
    public void update_withNull_incrementsUpdateCount() {
        CacheKey cacheKey = new CacheKey();
        cacheKey.update(null);
        assertEquals(1, cacheKey.getUpdateCount());
    }

    @Test(timeout = 4000)
    public void updateAll_withArray_updatesCountCorrectly() {
        CacheKey cacheKey = new CacheKey();
        cacheKey.updateAll(new Object[7]);
        assertEquals(7, cacheKey.getUpdateCount());
    }

    @Test(timeout = 4000)
    public void updateAll_withNull_throwsNullPointerException() {
        CacheKey cacheKey = new CacheKey();
        try {
            cacheKey.updateAll((Object[]) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            verifyException("org.apache.ibatis.cache.CacheKey", e);
        }
    }

    @Test(timeout = 4000)
    public void update_onNullCacheKey_throwsRuntimeException() {
        try {
            CacheKey.NULL_CACHE_KEY.updateAll(new Object[4]);
            fail("Expected RuntimeException");
        } catch (RuntimeException e) {
            assertEquals(
                "Not allowed to update a null cache key instance.",
                e.getMessage()
            );
        }
    }

    // =============== Equals Method Tests ===============
    @Test(timeout = 4000)
    public void equals_whenBothNewInstances_returnsTrue() {
        CacheKey key1 = new CacheKey();
        CacheKey key2 = new CacheKey();
        assertTrue(key1.equals(key2));
    }

    @Test(timeout = 4000)
    public void equals_withEmptyArrayConstructor_returnsTrue() {
        CacheKey key1 = new CacheKey();
        CacheKey key2 = new CacheKey(new Object[0]);
        assertTrue(key1.equals(key2));
    }

    @Test(timeout = 4000)
    public void equals_afterModification_returnsFalse() {
        CacheKey originalKey = new CacheKey();
        CacheKey modifiedKey = new CacheKey();
        modifiedKey.update(originalKey);
        assertFalse(originalKey.equals(modifiedKey));
    }

    @Test(timeout = 4000)
    public void equals_withDifferentUpdateHistory_returnsFalse() {
        // Create a complex update history scenario
        Object[] objects = new Object[5];
        CacheKey key1 = new CacheKey(objects);
        objects[2] = key1;
        CacheKey key2 = new CacheKey(objects);
        assertFalse(key2.equals(key1));
    }

    @Test(timeout = 4000)
    public void equals_withNull_returnsFalse() {
        CacheKey cacheKey = new CacheKey();
        assertFalse(cacheKey.equals(null));
    }

    @Test(timeout = 4000)
    public void equals_withSelf_returnsTrue() {
        CacheKey cacheKey = new CacheKey();
        assertTrue(cacheKey.equals(cacheKey));
    }

    // =============== Clone Method Tests ===============
    @Test(timeout = 4000)
    public void clone_returnsSeparateInstance() {
        CacheKey original = new CacheKey();
        CacheKey cloned = original.clone();
        assertNotSame(original, cloned);
    }

    @Test(timeout = 4000)
    public void clone_maintainsEqualityAfterUpdates() {
        CacheKey original = new CacheKey();
        original.update(original);
        CacheKey cloned = original.clone();
        assertNotSame(original, cloned);
        assertTrue(original.equals(cloned));
    }

    // =============== HashCode Method Test ===============
    @Test(timeout = 4000)
    public void hashCode_computesSuccessfully() {
        CacheKey cacheKey = new CacheKey();
        cacheKey.hashCode(); // Just ensure no exception
    }
}