/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:16:52 GMT 2025
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionSortedBag_ESTest extends CollectionSortedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = collectionSortedBag0.remove((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashBag<Locale.FilteringMode> hashBag0 = new HashBag<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      SynchronizedSortedBag<Locale.FilteringMode> synchronizedSortedBag0 = new SynchronizedSortedBag<Locale.FilteringMode>(hashBag0, locale_FilteringMode0);
      CollectionSortedBag<Locale.FilteringMode> collectionSortedBag0 = new CollectionSortedBag<Locale.FilteringMode>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag0.remove((Object) synchronizedSortedBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Object object0 = new Object();
      collectionSortedBag0.add(object0, 1021);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Transformer<Integer, Locale.Category>> treeBag1 = new TreeBag<Transformer<Integer, Locale.Category>>(comparator1);
      SynchronizedSortedBag<Transformer<Integer, Locale.Category>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Transformer<Integer, Locale.Category>>) treeBag1);
      CollectionSortedBag<Transformer<Integer, Locale.Category>> collectionSortedBag1 = new CollectionSortedBag<Transformer<Integer, Locale.Category>>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag1.containsAll(treeBag0);
      assertTrue(treeBag0.contains(0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      TreeBag<Locale.Category> treeBag0 = new TreeBag<Locale.Category>((Iterable<? extends Locale.Category>) priorityQueue0);
      CollectionSortedBag<Locale.Category> collectionSortedBag0 = new CollectionSortedBag<Locale.Category>(treeBag0);
      boolean boolean0 = collectionSortedBag0.add(locale_Category0);
      assertTrue(collectionSortedBag0.contains(locale_Category0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeBag<Locale.FilteringMode> treeBag0 = new TreeBag<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      CollectionSortedBag<Locale.FilteringMode> collectionSortedBag0 = new CollectionSortedBag<Locale.FilteringMode>(treeBag0);
      collectionSortedBag0.add(locale_FilteringMode0, 1407);
      // Undeclared exception!
      collectionSortedBag0.retainAll(treeBag0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      collectionSortedBag0.addAll(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(sortedBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      treeBag0.add((Object) null);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue<IfTransformer<Locale.Category, Object>> priorityQueue0 = new PriorityQueue<IfTransformer<Locale.Category, Object>>();
      TreeBag<IfTransformer<Locale.Category, Object>> treeBag0 = new TreeBag<IfTransformer<Locale.Category, Object>>((Collection<? extends IfTransformer<Locale.Category, Object>>) priorityQueue0);
      Class<Locale.Category> class0 = Locale.Category.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, Locale.Category> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Locale.Category, Object> transformer1 = IfTransformer.ifTransformer((Predicate<? super Locale.Category>) instanceofPredicate0, (Transformer<? super Locale.Category, ?>) transformer0, (Transformer<? super Locale.Category, ?>) transformer0);
      IfTransformer<Locale.Category, Object> ifTransformer0 = new IfTransformer<Locale.Category, Object>(instanceofPredicate0, transformer1, transformer0);
      priorityQueue0.add(ifTransformer0);
      CollectionSortedBag<IfTransformer<Locale.Category, Object>> collectionSortedBag0 = new CollectionSortedBag<IfTransformer<Locale.Category, Object>>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(priorityQueue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      TreeBag<Predicate<Object>> treeBag1 = new TreeBag<Predicate<Object>>((Comparator<? super Predicate<Object>>) null);
      SynchronizedSortedBag<Predicate<Object>> synchronizedSortedBag0 = new SynchronizedSortedBag<Predicate<Object>>(treeBag1);
      CollectionSortedBag<Predicate<Object>> collectionSortedBag0 = new CollectionSortedBag<Predicate<Object>>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>((Comparator<? super Integer>) null);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ComparatorPredicate.Criterion> treeBag1 = new TreeBag<ComparatorPredicate.Criterion>(comparator1);
      TreeBag<ComparatorPredicate.Criterion> treeBag2 = new TreeBag<ComparatorPredicate.Criterion>((Collection<? extends ComparatorPredicate.Criterion>) treeBag1);
      CollectionSortedBag<ComparatorPredicate.Criterion> collectionSortedBag0 = new CollectionSortedBag<ComparatorPredicate.Criterion>(treeBag2);
      // Undeclared exception!
      try { 
        collectionSortedBag0.containsAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionSortedBag.collectionSortedBag((SortedBag<ComparatorPredicate.Criterion>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Object> invokerTransformer0 = new InvokerTransformer<Object, Object>("", classArray0, classArray0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) invokerTransformer0);
      treeBag0.add((Object) transformedSortedBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(transformedSortedBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(transformedSortedBag0);
      Set<Object> set0 = collectionBag0.uniqueSet();
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(set0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.bag.TransformedSortedBag' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      Integer integer0 = new Integer((-219));
      hashBag0.add(integer0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(hashBag0, hashBag0);
      hashBag0.add(integer0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(synchronizedSortedBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.CollectionSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, predicate0);
      IfTransformer<Object, Object> ifTransformer0 = new IfTransformer<Object, Object>(transformedPredicate0, (Transformer<? super Object, ?>) null, (Transformer<? super Object, ?>) null);
      treeBag0.add((Object) ifTransformer0);
      Predicate<Object> predicate1 = UniquePredicate.uniquePredicate();
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate1);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(predicatedSortedBag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.IfTransformer@4' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@6' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("' rejected it");
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = new PredicatedSortedBag<Object>(treeBag0, transformerPredicate0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) transformer0, 581);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' rejected it' on 'class org.apache.commons.collections4.functors.InvokerTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeBag<Locale.FilteringMode> treeBag0 = new TreeBag<Locale.FilteringMode>();
      SortedBag<Locale.FilteringMode> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Locale.FilteringMode>) treeBag0);
      CollectionSortedBag<Locale.FilteringMode> collectionSortedBag0 = new CollectionSortedBag<Locale.FilteringMode>(sortedBag0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(locale_FilteringMode0, 4463);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) transformer0, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeBag<IfTransformer<Object, Object>> treeBag0 = new TreeBag<IfTransformer<Object, Object>>();
      SynchronizedSortedBag<IfTransformer<Object, Object>> synchronizedSortedBag0 = new SynchronizedSortedBag<IfTransformer<Object, Object>>(treeBag0);
      Transformer<Object, IfTransformer<Object, Object>> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedBag<IfTransformer<Object, Object>> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<IfTransformer<Object, Object>>) synchronizedSortedBag0, (Transformer<? super IfTransformer<Object, Object>, ? extends IfTransformer<Object, Object>>) transformer0);
      CollectionSortedBag<IfTransformer<Object, Object>> collectionSortedBag0 = new CollectionSortedBag<IfTransformer<Object, Object>>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((IfTransformer<Object, Object>) null, 1020);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedSortedBag<Predicate<Object>> predicatedSortedBag0 = new PredicatedSortedBag<Predicate<Object>>(treeBag0, predicate0);
      SynchronizedSortedBag<Predicate<Object>> synchronizedSortedBag0 = new SynchronizedSortedBag<Predicate<Object>>(predicatedSortedBag0);
      CollectionSortedBag<Predicate<Object>> collectionSortedBag0 = new CollectionSortedBag<Predicate<Object>>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(predicate0, 2070);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.NullPredicate@6' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@6' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeBag<ComparatorPredicate.Criterion> treeBag0 = new TreeBag<ComparatorPredicate.Criterion>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>((Collection<?>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) treeBag0, 1000);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeBag<LinkedList<Object>> treeBag0 = new TreeBag<LinkedList<Object>>();
      SynchronizedSortedBag<LinkedList<Object>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<LinkedList<Object>>) treeBag0);
      CollectionSortedBag<LinkedList<Object>> collectionSortedBag0 = new CollectionSortedBag<LinkedList<Object>>(synchronizedSortedBag0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(linkedList0, 1859);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      Transformer<Object, Object> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(collectionSortedBag0, transformer0);
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag1.add((Object) collectionSortedBag0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeBag<IfClosure<Object>> treeBag0 = new TreeBag<IfClosure<Object>>();
      SortedBag<IfClosure<Object>> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<IfClosure<Object>>) treeBag0);
      CollectionSortedBag<IfClosure<Object>> collectionSortedBag0 = new CollectionSortedBag<IfClosure<Object>>(sortedBag0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(ifClosure0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>((Comparator<? super Object>) null);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(treeBag0);
      PredicatedSortedBag<Predicate<Object>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Predicate<Object>>) treeBag0, (Predicate<? super Predicate<Object>>) identityPredicate0);
      CollectionSortedBag<Predicate<Object>> collectionSortedBag0 = new CollectionSortedBag<Predicate<Object>>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Predicate<Object>) identityPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.IdentityPredicate@2' - Predicate 'org.apache.commons.collections4.functors.IdentityPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CollectionSortedBag<Object> collectionSortedBag0 = null;
      try {
        collectionSortedBag0 = new CollectionSortedBag<Object>((SortedBag<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // collection
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.retainAll(collectionSortedBag0);
      //  // Unstable assertion: assertFalse(treeBag0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959), (-1959), (-1959), 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      treeBag0.add((Object) null);
      HashBag<Object> hashBag0 = new HashBag<Object>((Iterable<?>) collectionSortedBag0);
      boolean boolean0 = collectionSortedBag0.removeAll(hashBag0);
      assertFalse(collectionSortedBag0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1959), (-1959), (-1959)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, (Closure<? super Object>) null);
      treeBag0.add((Object) ifClosure0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.removeAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      TreeBag<Locale.Category> treeBag0 = new TreeBag<Locale.Category>((Iterable<? extends Locale.Category>) priorityQueue0);
      priorityQueue0.add(locale_Category0);
      CollectionSortedBag<Locale.Category> collectionSortedBag0 = new CollectionSortedBag<Locale.Category>(treeBag0);
      priorityQueue0.add(locale_Category0);
      boolean boolean0 = collectionSortedBag0.addAll(priorityQueue0);
      assertTrue(collectionSortedBag0.contains(locale_Category0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.addAll(collectionSortedBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TreeBag<IfClosure<Object>> treeBag0 = new TreeBag<IfClosure<Object>>();
      CollectionSortedBag<IfClosure<Object>> collectionSortedBag0 = new CollectionSortedBag<IfClosure<Object>>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0);
      SortedBag<Object> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Object>) synchronizedSortedBag0);
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<ComparatorPredicate.Criterion> treeBag1 = new TreeBag<ComparatorPredicate.Criterion>(comparator1);
      CollectionSortedBag<ComparatorPredicate.Criterion> collectionSortedBag0 = new CollectionSortedBag<ComparatorPredicate.Criterion>(treeBag1);
      boolean boolean0 = collectionSortedBag0.containsAll(treeBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeBag<IfClosure<Object>> treeBag0 = new TreeBag<IfClosure<Object>>();
      CollectionSortedBag<IfClosure<Object>> collectionSortedBag0 = new CollectionSortedBag<IfClosure<Object>>(treeBag0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Closure<Object> closure0 = NOPClosure.nopClosure();
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicate0, closure0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(ifClosure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
