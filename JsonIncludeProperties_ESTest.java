/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:41 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.annotation.JsonIncludeProperties;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonIncludeProperties_ESTest extends JsonIncludeProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      Set<String> set0 = jsonIncludeProperties_Value0.getIncluded();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn(stringArray0).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      assertNotNull(jsonIncludeProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn((String[]) null).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      boolean boolean0 = jsonIncludeProperties_Value0.equals(jsonIncludeProperties_Value1);
      assertFalse(jsonIncludeProperties_Value1.equals((Object)jsonIncludeProperties_Value0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = new JsonIncludeProperties.Value((Set<String>) null);
      boolean boolean0 = jsonIncludeProperties_Value1.equals(jsonIncludeProperties_Value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.all();
      Object object0 = new Object();
      boolean boolean0 = jsonIncludeProperties_Value0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.all();
      boolean boolean0 = jsonIncludeProperties_Value0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.all();
      boolean boolean0 = jsonIncludeProperties_Value0.equals(jsonIncludeProperties_Value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn((String[]) null).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      JsonIncludeProperties.Value jsonIncludeProperties_Value2 = jsonIncludeProperties_Value1.withOverrides(jsonIncludeProperties_Value0);
      boolean boolean0 = jsonIncludeProperties_Value2.equals(jsonIncludeProperties_Value0);
      assertFalse(boolean0);
      assertSame(jsonIncludeProperties_Value2, jsonIncludeProperties_Value1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = linkedHashSet0.remove(jsonIncludeProperties_Value0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn(stringArray0).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = linkedHashSet0.remove(jsonIncludeProperties_Value0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("LI }f.Ax<09fr");
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = new JsonIncludeProperties.Value(linkedHashSet0);
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = jsonIncludeProperties_Value0.withOverrides(jsonIncludeProperties_Value0);
      assertTrue(jsonIncludeProperties_Value1.equals((Object)jsonIncludeProperties_Value0));
      assertNotSame(jsonIncludeProperties_Value1, jsonIncludeProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn(stringArray0).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("K|D{$!:2zda");
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = new JsonIncludeProperties.Value(linkedHashSet0);
      JsonIncludeProperties.Value jsonIncludeProperties_Value2 = jsonIncludeProperties_Value0.withOverrides(jsonIncludeProperties_Value1);
      assertNotSame(jsonIncludeProperties_Value2, jsonIncludeProperties_Value0);
      assertTrue(jsonIncludeProperties_Value2.equals((Object)jsonIncludeProperties_Value0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      JsonIncludeProperties jsonIncludeProperties0 = mock(JsonIncludeProperties.class, CALLS_REAL_METHODS);
      doReturn((String[]) null).when(jsonIncludeProperties0).value();
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = JsonIncludeProperties.Value.from(jsonIncludeProperties0);
      JsonIncludeProperties.Value jsonIncludeProperties_Value2 = jsonIncludeProperties_Value0.withOverrides(jsonIncludeProperties_Value1);
      assertSame(jsonIncludeProperties_Value2, jsonIncludeProperties_Value1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.from((JsonIncludeProperties) null);
      assertNotNull(jsonIncludeProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      String string0 = jsonIncludeProperties_Value0.toString();
      assertEquals("JsonIncludeProperties.Value(included=null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.all();
      JsonIncludeProperties.Value jsonIncludeProperties_Value1 = jsonIncludeProperties_Value0.withOverrides((JsonIncludeProperties.Value) null);
      assertSame(jsonIncludeProperties_Value1, jsonIncludeProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonIncludeProperties.Value jsonIncludeProperties_Value0 = JsonIncludeProperties.Value.ALL;
      Class<JsonIncludeProperties> class0 = jsonIncludeProperties_Value0.valueFor();
      assertEquals("interface com.fasterxml.jackson.annotation.JsonIncludeProperties", class0.toString());
  }
}
