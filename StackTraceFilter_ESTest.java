/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:19:19 GMT 2025
 */

package org.mockito.internal.exceptions.stacktrace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StackTraceFilter_ESTest extends StackTraceFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = stackTraceFilter0.findSourceFile(stackTraceElementArray0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      StackTraceElement stackTraceElement1 = stackTraceFilter0.filterFirst(mockThrowable0, false);
      assertEquals("", stackTraceElement1.getMethodName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("A", "$cbz1,wrBLR'*'t`%<", "$cbz1,wrBLR'*'t`%<", 6);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElementArray0[0];
      stackTraceElementArray0[2] = stackTraceElementArray0[0];
      stackTraceElementArray0[3] = stackTraceElementArray0[0];
      stackTraceElementArray0[4] = stackTraceElementArray0[3];
      stackTraceElementArray0[5] = stackTraceElementArray0[1];
      stackTraceElementArray0[6] = stackTraceElementArray0[4];
      stackTraceElementArray0[7] = stackTraceElementArray0[4];
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      StackTraceElement stackTraceElement1 = stackTraceFilter0.filterFirst(mockThrowable0, true);
      assertFalse(stackTraceElement1.isNativeMethod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        stackTraceFilter0.filterFirst(mockThrowable0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      // Undeclared exception!
      try { 
        stackTraceFilter0.filter(stackTraceElementArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = stackTraceFilter0.filterFirst(mockThrowable0, false);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = stackTraceFilter0.findSourceFile(stackTraceElementArray0, "org.mockito.internal.configuration.plugins.DefaultMockitoPlugins");
      //  // Unstable assertion: assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement((String) null, (String) null, (String) null, "org.mockito.internal.exceptions.stacktrace.StackTraceFilter", "org.mockito.internal.exceptions.stacktrace.StackTraceFilter", "org.mockito.internal.exceptions.stacktrace.StackTraceFilter", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = stackTraceFilter0.findSourceFile(stackTraceElementArray0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      // Undeclared exception!
      try { 
        stackTraceFilter0.findSourceFile(stackTraceElementArray0, "org.mockito.internal.configuration.plugins.DefaultMockitoPlugins");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      stackTraceFilter0.findSourceFile(stackTraceElementArray1, "S-pOJA?<SA5#B9J&^;");
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotSame(stackTraceElementArray0, stackTraceElementArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("/34KVo", "org.mockito.internal.configuration.plugins.DefaultPluginSwitch", "/34KVo", "org.mockito.internal.configuration.plugins.DefaultPluginSwitch", "/34KVo", "org.mockito.internal.configuration.plugins.DefaultPluginSwitch", 1);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      StackTraceElement stackTraceElement1 = stackTraceFilter0.filterFirst(mockThrowable0, true);
      assertEquals("<evosuite>", stackTraceElement1.getFileName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      StackTraceElement stackTraceElement0 = stackTraceFilter0.filterFirst(mockThrowable0, false);
      assertNull(stackTraceElement0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.mockito.internal.PremainAttach", "org.mockito.internal.PremainAttach", "org.mockito.internal.PremainAttach", (-1512));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      assertEquals(0, stackTraceElementArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackTraceFilter stackTraceFilter0 = new StackTraceFilter();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = stackTraceFilter0.filterFirst(mockThrowable0, false);
      //  // Unstable assertion: assertNotNull(stackTraceElement0);
      //  // Unstable assertion: assertEquals("jdk.internal.reflect.GeneratedConstructorAccessor44", stackTraceElement0.getClassName());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement[] stackTraceElementArray1 = stackTraceFilter0.filter(stackTraceElementArray0, false);
      //  // Unstable assertion: assertEquals(1, stackTraceElementArray1.length);
      //  // Unstable assertion: assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
  }
}
