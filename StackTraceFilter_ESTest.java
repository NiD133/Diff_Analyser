/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:19:19 GMT 2025
 */

package org.mockito.internal.exceptions.stacktrace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class StackTraceFilter_ESTest extends StackTraceFilter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void findSourceFile_EmptyStackTrace_ReturnsDefaultValue() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement[] emptyTrace = new StackTraceElement[0];
        String result = filter.findSourceFile(emptyTrace, "");
        assertEquals("", result);
    }

    @Test(timeout = 4000)
    public void filterFirst_SingleElementStackTrace_ReturnsElement() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement element = new StackTraceElement("", "", "", 0);
        StackTraceElement[] stackTrace = {element};

        MockThrowable throwable = new MockThrowable();
        throwable.setStackTrace(stackTrace);

        StackTraceElement result = filter.filterFirst(throwable, false);
        assertEquals("", result.getMethodName());
    }

    @Test(timeout = 4000)
    public void filterFirst_ComplexStackTrace_ReturnsValidElement() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement element = new StackTraceElement(
            "A", "$cbz1,wrBLR'*'t`%<", "$cbz1,wrBLR'*'t`%<", 6
        );
        StackTraceElement[] stackTrace = new StackTraceElement[8];
        // Fill array with repeated elements
        for (int i = 0; i < stackTrace.length; i++) {
            stackTrace[i] = element;
        }

        MockThrowable throwable = new MockThrowable();
        throwable.setStackTrace(stackTrace);

        StackTraceElement result = filter.filterFirst(throwable, true);
        assertFalse(result.isNativeMethod());
    }

    @Test(timeout = 4000)
    public void filterFirst_NullOrigin_ThrowsNullPointerException() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        MockThrowable throwable = new MockThrowable();
        throwable.setOriginForDelegate((StackTraceElement) null);

        try {
            filter.filterFirst(throwable, true);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void filter_NullElement_ThrowsNullPointerException() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement[] stackTrace = new StackTraceElement[1]; // Contains null

        try {
            filter.filter(stackTrace, false);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void findSourceFile_ElementWithoutSource_ReturnsNull() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        MockThrowable throwable = new MockThrowable();
        StackTraceElement element = filter.filterFirst(throwable, false);
        
        StackTraceElement[] stackTrace = {element};
        String result = filter.findSourceFile(
            stackTrace, 
            "org.mockito.internal.configuration.plugins.DefaultMockitoPlugins"
        );
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void findSourceFile_NullFileName_ReturnsNull() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement element = new StackTraceElement(
            null, null, null,
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilter",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilter",
            "org.mockito.internal.exceptions.stacktrace.StackTraceFilter",
            2
        );
        StackTraceElement[] stackTrace = {element};
        
        String result = filter.findSourceFile(stackTrace, null);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void findSourceFile_NullStackTraceElement_ThrowsException() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement[] stackTrace = new StackTraceElement[1]; // Contains null

        try {
            filter.findSourceFile(
                stackTrace,
                "org.mockito.internal.configuration.plugins.DefaultMockitoPlugins"
            );
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void filter_EmptyArray_ReturnsNewArrayInstance() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement[] emptyTrace = new StackTraceElement[0];
        
        StackTraceElement[] filtered = filter.filter(emptyTrace, false);
        filter.findSourceFile(filtered, "S-pOJA?<SA5#B9J&^;");
        
        assertNotSame(emptyTrace, filtered);
    }

    @Test(timeout = 4000)
    public void filterFirst_WithDelegate_ReturnsMockFileName() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement element = new StackTraceElement(
            "/34KVo", 
            "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
            "/34KVo",
            "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
            "/34KVo",
            "org.mockito.internal.configuration.plugins.DefaultPluginSwitch",
            1
        );

        MockThrowable throwable = new MockThrowable();
        throwable.setOriginForDelegate(element);

        StackTraceElement result = filter.filterFirst(throwable, true);
        assertEquals("<evosuite>", result.getFileName());
    }

    @Test(timeout = 4000)
    public void filterFirst_EmptyStackTrace_ReturnsNull() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        MockThrowable throwable = new MockThrowable();
        throwable.setStackTrace(new StackTraceElement[0]);
        
        StackTraceElement result = filter.filterFirst(throwable, false);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void filter_InternalMockitoClass_ReturnsEmptyArray() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        StackTraceElement element = new StackTraceElement(
            "org.mockito.internal.PremainAttach",
            "org.mockito.internal.PremainAttach",
            "org.mockito.internal.PremainAttach",
            -1512
        );
        StackTraceElement[] stackTrace = {element};
        
        StackTraceElement[] result = filter.filter(stackTrace, false);
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void filter_AfterFilterFirst_ReturnsValidElement() throws Throwable {
        StackTraceFilter filter = new StackTraceFilter();
        MockThrowable throwable = new MockThrowable();
        StackTraceElement element = filter.filterFirst(throwable, false);
        assertNotNull(element);

        StackTraceElement[] stackTrace = {element};
        StackTraceElement[] result = filter.filter(stackTrace, false);
        
        assertEquals(1, result.length);
        assertNotSame(stackTrace, result);
    }
}