/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 20:22:03 GMT 2025
 */
package org.apache.commons.codec.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.Soundex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class Soundex_ESTest extends Soundex_ESTest_scaffolding {

    // ===========================================================
    // = Constructor Tests =
    // ===========================================================
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullCharArrayThrowsException() {
        // Verify constructor fails with null char array
        new Soundex((char[]) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullStringAndSpecialFlagThrowsException() {
        // Verify constructor fails with null mapping string and special flag
        new Soundex((String) null, false);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testConstructorWithNullStringThrowsException() {
        // Verify constructor fails with null mapping string
        new Soundex((String) null);
    }

    @Test(timeout = 4000)
    public void testConstructorWithCustomMapping() {
        // Verify valid construction with custom mapping
        Soundex soundex = new Soundex("/HU+\"}{6.):e:-&!R");
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000)
    public void testConstructorWithMarkerCharacter() {
        // Verify construction with marker character in mapping
        char[] mapping = {'-'};
        Soundex soundex = new Soundex(mapping);
        assertEquals(4, soundex.getMaxLength());
    }

    // ===========================================================
    // = Encode Method Tests =
    // ===========================================================
    @Test(timeout = 4000)
    public void testEncodeNullReturnsNull() {
        // Verify encoding null returns null
        char[] mapping = new char[3];
        Soundex soundex = new Soundex(mapping);
        assertNull(soundex.US_ENGLISH_GENEALOGY.encode(null));
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000)
    public void testEncodeValidStringReturnsCorrectCode() {
        // Verify standard encoding produces correct Soundex code
        Soundex soundex = new Soundex();
        assertEquals("D124", soundex.encode("dAiwv)]=F=ceL=T[CcF"));
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testEncodeThrowsForUnmappedCharacter() {
        // Verify encoding fails when encountering unmapped character
        Soundex soundex = new Soundex("@'0g");
        soundex.encode("@'0g");
    }

    @Test(timeout = 4000)
    public void testEncodeEmptyStringReturnsEmpty() {
        // Verify empty input returns empty string
        char[] mapping = new char[8];
        Soundex soundex = new Soundex(mapping);
        assertEquals("", soundex.encode(""));
        assertEquals(4, soundex.getMaxLength());
    }

    // ===========================================================
    // = Soundex Method Tests =
    // ===========================================================
    @Test(timeout = 4000)
    public void testSoundexReturnsCorrectCodeForComplexInput() {
        // Verify Soundex code generation for complex strings
        Soundex soundex = Soundex.US_ENGLISH;
        assertEquals("L215", soundex.soundex("[&L!ug<F4wFviM+`RV{"));
    }

    @Test(timeout = 4000)
    public void testSoundexHandlesSpecialCharacters() {
        // Verify Soundex handles special characters correctly
        Soundex soundex = Soundex.US_ENGLISH;
        assertEquals("N660", soundex.soundex("}}'3N[nM+hnR ayR6"));
    }

    @Test(timeout = 4000)
    public void testSoundexReturnsEmptyForNonAlphabeticInput() {
        // Verify non-alphabetic input returns empty string
        Soundex soundex = Soundex.US_ENGLISH;
        assertEquals("", soundex.soundex(")"));
    }

    @Test(timeout = 4000)
    public void testSoundexHandlesLongInput() {
        // Verify Soundex truncates long input correctly
        Soundex soundex = Soundex.US_ENGLISH_GENEALOGY;
        assertEquals("O621", soundex.soundex("org.apache.commons.codec.language.Soundex"));
    }

    @Test(timeout = 4000)
    public void testSoundexWithNullInput() {
        // Verify soundex method handles null without exception
        Soundex soundex = new Soundex();
        soundex.soundex(null);
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testSoundexThrowsForUnmappedCharacter() {
        // Verify soundex fails when encountering unmapped character
        Soundex soundex = new Soundex("IW=es%O[9p.u.:", true);
        soundex.soundex("?9+dzZ o|D}!;?at7Q@");
    }

    // ===========================================================
    // = Difference Method Tests =
    // ===========================================================
    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testDifferenceThrowsForUnmappedCharacter() {
        // Verify difference calculation fails with unmapped character
        char[] mapping = new char[5];
        Soundex soundex = new Soundex(mapping);
        soundex.difference("EF\"kniaAVspLJDz", "$I<`&-Dq*{");
    }

    @Test(timeout = 4000)
    public void testDifferenceReturnsMaxForIdenticalStrings() {
        // Verify identical strings get maximum difference score
        Soundex soundex = new Soundex();
        assertEquals(4, soundex.difference("Hr~hEi", "Hr~hEi"));
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000)
    public void testDifferenceReturnsZeroForCompletelyDifferentStrings() {
        // Verify completely different strings get zero difference score
        Soundex soundex = new Soundex();
        assertEquals(0, soundex.difference("01230120022455012623010202", "6]5]'j=[IE=9"));
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testDifferenceThrowsForUnmappedCharacterInCustomMapping() {
        // Verify difference fails with unmapped character in custom mapping
        char[] mapping = new char[8];
        Soundex soundex = new Soundex(mapping);
        soundex.difference("AW1D!AKs", "AW1D!AKs");
    }

    // ===========================================================
    // = Encode Object Method Tests =
    // ===========================================================
    @Test(timeout = 4000)
    public void testEncodeObjectWithValidString() {
        // Verify object encoding works with valid string input
        Soundex soundex = new Soundex();
        Object result = soundex.encode((Object) "atW+2N,x7`1kf@");
        assertEquals("A352", result);
        assertEquals(4, soundex.getMaxLength());
    }

    @Test(timeout = 4000, expected = IllegalArgumentException.class)
    public void testEncodeObjectThrowsForUnmappedCharacter() {
        // Verify object encoding fails with unmapped character
        Soundex soundex = new Soundex("]jH");
        soundex.encode((Object) "]jH");
    }

    @Test(timeout = 4000, expected = Exception.class)
    public void testEncodeObjectThrowsForNonStringInput() {
        // Verify object encoding fails with non-string input
        Soundex soundex = new Soundex("org.apache.commons.codec.EncoderException", false);
        soundex.US_ENGLISH_SIMPLIFIED.encode(new Object());
    }

    // ===========================================================
    // = MaxLength Method Tests =
    // ===========================================================
    @Test(timeout = 4000)
    public void testSetAndGetMaxLength() {
        // Verify maxLength property can be set and retrieved
        Soundex soundex = new Soundex();
        soundex.setMaxLength(-2841);
        assertEquals(-2841, soundex.getMaxLength());
    }

    @Test(timeout = 4000)
    public void testGetMaxLengthReturnsDefault() {
        // Verify default maxLength value is 4
        Soundex soundex = new Soundex();
        assertEquals(4, soundex.getMaxLength());
    }
}