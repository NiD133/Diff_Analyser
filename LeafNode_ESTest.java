/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:39:23 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.internal.QuietAppendable;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

    // Tests for child nodes
    @Test(timeout = 4000)
    public void testCDataNodeHasNoChildNodes() throws Throwable {
        CDataNode node = new CDataNode("Gl&1]d*:{^7FUW]?uZ");
        List<Node> childNodes = node.ensureChildNodes();
        assertTrue("New CDataNode should have no children", childNodes.isEmpty());
    }

    @Test(timeout = 4000)
    public void testChildNodeSizeIsAlwaysZero() throws Throwable {
        DataNode node = new DataNode("7mqe");
        assertEquals("LeafNode should have 0 children", 0, node.childNodeSize());
    }

    // Tests for base URI handling
    @Test(timeout = 4000)
    public void testSetBaseUriOnDocumentType() throws Throwable {
        DocumentType docType = new DocumentType("Gyb$AWbT${", "Gyb$AWbT${", "Gyb$AWbT${");
        docType.doSetBaseUri("");
        assertFalse("DocumentType should not have a parent", docType.hasParent());
    }

    @Test(timeout = 4000)
    public void testBaseUriWithoutParent() throws Throwable {
        CDataNode node = new CDataNode("Gyb$AWbT${");
        assertEquals("Base URI should be empty without parent", "", node.baseUri());
    }

    @Test(timeout = 4000)
    public void testBaseUriWithParent() throws Throwable {
        TextNode node = new TextNode("body");
        Document parent = Parser.parseBodyFragment("body", "org.jsoup.internal.Normalizer");
        node.setParentNode(parent);
        assertEquals("Base URI should match parent's", "org.jsoup.internal.Normalizer", node.baseUri());
    }

    // Tests for core value operations
    @Test(timeout = 4000)
    public void testSetCoreValue() throws Throwable {
        CDataNode node = new CDataNode("~p1SkcF]Q'5D");
        node.coreValue("");
        assertEquals("Sibling index should remain 0", 0, node.siblingIndex());
    }

    @Test(timeout = 4000)
    public void testGetCoreValue() throws Throwable {
        TextNode node = new TextNode("gMz?D>{rCwB%:");
        assertEquals("Core value should match constructor", "gMz?D>{rCwB%:", node.coreValue());
    }

    @Test(timeout = 4000)
    public void testGetEmptyCoreValue() throws Throwable {
        XmlDeclaration node = new XmlDeclaration("", false);
        assertEquals("Empty core value should be preserved", "", node.coreValue());
    }

    @Test(timeout = 4000)
    public void testSetWholeDataToNull() throws Throwable {
        DataNode node = new DataNode("oML5cI2?Z,t2RXsqa");
        DataNode result = node.setWholeData(null);
        assertNull("Core value should be null after setting", result.coreValue());
    }

    // Tests for attribute handling
    @Test(timeout = 4000)
    public void testNewNodeHasNoAttributes() throws Throwable {
        CDataNode node = new CDataNode("");
        assertFalse("New node should have no attributes", node.hasAttributes());
    }

    @Test(timeout = 4000)
    public void testHasAttributesAfterSetting() throws Throwable {
        CDataNode node = new CDataNode("Gyb$AWbT${");
        node.attr("PUBLIC", null);
        assertTrue("Node should have attributes after setting", node.hasAttributes());
    }

    @Test(timeout = 4000)
    public void testHasCDataAttribute() throws Throwable {
        CDataNode node = new CDataNode("");
        assertTrue("#cdata attribute should always exist", node.hasAttr("#cdata"));
    }

    @Test(timeout = 4000)
    public void testDoesNotHaveNonExistentAttribute() throws Throwable {
        Comment node = new Comment("H4Q{hWcU$Y*");
        assertFalse("Non-existent attribute should return false", node.hasAttr("W"));
    }

    @Test(timeout = 4000)
    public void testGetCDataAttribute() throws Throwable {
        CDataNode node = new CDataNode("roS]");
        assertEquals("#cdata attribute should match core value", "roS]", node.attr("#cdata"));
    }

    @Test(timeout = 4000)
    public void testGetNonExistentAttribute() throws Throwable {
        CDataNode node = new CDataNode("Gyb$AWbT${");
        assertEquals("Non-existent attribute should return empty string", "", node.attr("Gyb$AWbT${"));
    }

    @Test(timeout = 4000)
    public void testSetAttribute() throws Throwable {
        CDataNode node = new CDataNode("6'z rm]|lT");
        Node result = node.attr("#cdata", "Accept-Encoding");
        assertEquals("Sibling index should remain unchanged", 0, result.siblingIndex());
    }

    @Test(timeout = 4000)
    public void testGetEmptyCDataAttribute() throws Throwable {
        CDataNode node = new CDataNode("");
        assertEquals("Empty #cdata attribute should be preserved", "", node.attr("#cdata"));
    }

    @Test(timeout = 4000)
    public void testAbsUrlForNonExistentAttribute() throws Throwable {
        Comment node = new Comment("QuR~!GB`!_");
        assertEquals("absUrl for non-existent attribute should be empty", "", node.absUrl("QuR~!GB`!_"));
    }

    @Test(timeout = 4000)
    public void testSetSameAttributeTwice() throws Throwable {
        CDataNode node = new CDataNode(">eaHx`");
        Node result = node.attr(">eaHx`", ">eaHx`").attr(">eaHx`", ">eaHx`");
        assertFalse("Setting attribute twice shouldn't add parent", result.hasParent());
    }

    // Tests for cloning and empty operations
    @Test(timeout = 4000)
    public void testEmptyAfterSettingSiblingIndex() throws Throwable {
        XmlDeclaration node = new XmlDeclaration("<eaHch", false);
        node.setSiblingIndex(1574);
        Node result = node.empty();
        assertSame("empty() should return self", node, result);
    }

    @Test(timeout = 4000)
    public void testEmptyWithNegativeSiblingIndex() throws Throwable {
        TextNode node = TextNode.createFromEncoded(".");
        node.setSiblingIndex(-2159);
        Node result = node.empty();
        assertSame("empty() should return self", node, result);
    }

    @Test(timeout = 4000)
    public void testCloneAfterCloning() throws Throwable {
        CDataNode original = new CDataNode("%:~n@");
        LeafNode clone = original.doClone(original);
        Node result = clone.empty();
        assertTrue("Cloned node should retain parent", result.hasParent());
    }

    @Test(timeout = 4000)
    public void testCloneWithSiblingIndex() throws Throwable {
        DataNode original = new DataNode("org.jsoup.select.Evaluator$IndexGreaterThan");
        original.setSiblingIndex(74);
        CDataNode target = new CDataNode("'mMH");
        LeafNode clone = original.doClone(target);
        assertTrue("Cloned node should have parent", clone.hasParent());
    }

    @Test(timeout = 4000)
    public void testCloneWithNegativeSiblingIndex() throws Throwable {
        CDataNode original = new CDataNode(">eaHx`");
        original.setSiblingIndex(-1);
        Comment target = new Comment("");
        LeafNode clone = original.doClone(target);
        assertTrue("Cloned node should have parent", clone.hasParent());
    }

    @Test(timeout = 4000)
    public void testCloneWithNull() throws Throwable {
        TextNode original = new TextNode("$j");
        LeafNode clone = original.doClone(null);
        assertNotSame("Cloning with null should create new instance", original, clone);
    }

    @Test(timeout = 4000)
    public void testShallowCloneAfterAttributesInitialized() throws Throwable {
        TextNode node = new TextNode("body");
        node.attributes(); // Force attributes initialization
        Node clone = node.shallowClone();
        assertNotSame("Shallow clone should be different instance", node, clone);
    }

    // Tests for edge cases and exceptions
    @Test(timeout = 4000)
    public void testRemoveAttrAfterSettingSiblingIndex() throws Throwable {
        CDataNode node = new CDataNode("%:~n@");
        node.setSiblingIndex(1);
        Node result = node.removeAttr("");
        assertEquals("Child count should remain 0", 0, result.childNodeSize());
    }

    @Test(timeout = 4000)
    public void testRemoveAttrWithNegativeSiblingIndex() throws Throwable {
        DataNode node = new DataNode("gMz?D>{rCwB%:");
        node.setSiblingIndex(-1447);
        Node result = node.removeAttr("gMz?D>{rCwB%:");
        assertFalse("Node should have no parent after removal", result.hasParent());
    }

    @Test(timeout = 4000)
    public void testSetAttrAfterSettingSiblingIndex() throws Throwable {
        CDataNode node = new CDataNode("SYSTEM");
        node.setSiblingIndex(5696);
        Node result = node.attr("", "<![CDATA[SYSTEM]]>");
        assertEquals("Child count should remain 0", 0, result.childNodeSize());
    }

    @Test(timeout = 4000)
    public void testSetAttrToNullAfterSettingNegativeSiblingIndex() throws Throwable {
        DataNode node = new DataNode("gMz?D>{rCwB%:");
        node.setSiblingIndex(-1447);
        Node result = node.attr("                 ", null);
        assertEquals("Child count should remain 0", 0, result.childNodeSize());
    }

    @Test(timeout = 4000)
    public void testWrapThenSetAttr() throws Throwable {
        DataNode node = new DataNode("PUBLIC");
        Node wrapped = node.wrap("org.jsoup.nodes.LeafNode");
        Node result = wrapped.attr("org.jsoup.nodes.LeafNode", "1jNKR5#n*");
        assertSame("Setting attribute should return same node", wrapped, result);
    }

    @Test(timeout = 4000)
    public void testOuterHtmlTail() throws Throwable {
        CDataNode node = new CDataNode("Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        Document.OutputSettings settings = new Document.OutputSettings();
        node.outerHtmlTail((QuietAppendable) null, settings);
        assertEquals("Sibling index should remain 0", 0, node.siblingIndex());
    }

    // Exception tests
    @Test(timeout = 4000)
    public void testRemoveNullAttrThrows() throws Throwable {
        CDataNode node = new CDataNode("org.jsoup.nodes.LeafNode");
        try {
            node.removeAttr(null);
            fail("Expected IllegalArgumentException for null attribute");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testRemoveAttrWhenValueIsSelfThrows() throws Throwable {
        CDataNode node = new CDataNode("org.jsoup.nodes.LeafNode");
        node.value = node; // Set value to itself
        try {
            node.removeAttr("org.jsoup.nodes.LeafNode");
            fail("Expected ClassCastException for invalid value type");
        } catch (ClassCastException e) {
            assertTrue(e.getMessage().contains("org.jsoup.nodes.CDataNode cannot be cast to java.lang.String"));
        }
    }

    @Test(timeout = 4000)
    public void testAttributesWhenValueIsSelfThrows() throws Throwable {
        CDataNode node = new CDataNode("-/9fsuZ");
        node.value = node; // Set value to itself
        try {
            node.attributes();
            fail("Expected ClassCastException for invalid value type");
        } catch (ClassCastException e) {
            assertTrue(e.getMessage().contains("org.jsoup.nodes.CDataNode cannot be cast to java.lang.String"));
        }
    }

    @Test(timeout = 4000)
    public void testSetAttrWhenParentIsSelfThrows() throws Throwable {
        CDataNode node = new CDataNode("-cOata");
        node.parentNode = node; // Set parent to itself
        try {
            node.attr("-cOata", "-cOata");
            fail("Expected StackOverflowError due to recursive parent");
        } catch (StackOverflowError e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testSetAttrWithNullKeyThrows() throws Throwable {
        CDataNode node = new CDataNode("%:~n@");
        try {
            node.attr(null, null);
            fail("Expected NullPointerException for null key");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testSetAttrWhenValueIsObjectThrows() throws Throwable {
        CDataNode node = new CDataNode(">eaHxh");
        node.value = new Object(); // Invalid value type
        try {
            node.attr(">eaHxh", ">eaHxh");
            fail("Expected ClassCastException for invalid value type");
        } catch (ClassCastException e) {
            assertTrue(e.getMessage().contains("java.lang.Object cannot be cast to java.lang.String"));
        }
    }

    @Test(timeout = 4000)
    public void testGetAttrNullKeyAfterSettingThrows() throws Throwable {
        CDataNode node = new CDataNode("Rcdata");
        node.attr("Rcdata", "Rcdata");
        try {
            node.attr(null);
            fail("Expected IllegalArgumentException for null key");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testAbsUrlEmptyStringThrows() throws Throwable {
        CDataNode node = new CDataNode("iX.>E!");
        try {
            node.absUrl("");
            fail("Expected IllegalArgumentException for empty key");
        } catch (IllegalArgumentException e) {
            assertEquals("String must not be empty", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testHasAttrNullThrows() throws Throwable {
        CDataNode node = new CDataNode("1");
        try {
            node.hasAttr(null);
            fail("Expected IllegalArgumentException for null key");
        } catch (IllegalArgumentException e) {
            assertEquals("Object must not be null", e.getMessage());
        }
    }
}