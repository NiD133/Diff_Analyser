/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:39:23 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.internal.QuietAppendable;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Gl&1]d*:{^7FUW]?uZ");
      List<Node> list0 = cDataNode0.ensureChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Gyb$AWbT${", "Gyb$AWbT${", "Gyb$AWbT${");
      documentType0.doSetBaseUri("");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("~p1SkcF]Q'5D");
      cDataNode0.coreValue("");
      assertEquals(0, cDataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%:~n@");
      cDataNode0.setSiblingIndex(1);
      Node node0 = cDataNode0.removeAttr("");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataNode dataNode0 = new DataNode("gMz?D>{rCwB%:");
      dataNode0.setSiblingIndex((-1447));
      Node node0 = dataNode0.removeAttr("gMz?D>{rCwB%:");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Gyb$AWbT${");
      cDataNode0.attr("PUBLIC", (String) null);
      boolean boolean0 = cDataNode0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      boolean boolean0 = cDataNode0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      boolean boolean0 = cDataNode0.hasAttr("#cdata");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("H4Q{hWcU$Y*");
      boolean boolean0 = comment0.hasAttr("W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("<eaHch", false);
      xmlDeclaration0.siblingIndex = 1574;
      Node node0 = xmlDeclaration0.empty();
      assertSame(xmlDeclaration0, node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(".");
      textNode0.setSiblingIndex((-2159));
      Node node0 = textNode0.empty();
      assertSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%:~n@");
      LeafNode leafNode0 = cDataNode0.doClone(cDataNode0);
      Node node0 = leafNode0.empty();
      assertTrue(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.select.Evaluator$IndexGreaterThan");
      dataNode0.siblingIndex = 74;
      CDataNode cDataNode0 = new CDataNode("'mMH");
      LeafNode leafNode0 = dataNode0.doClone(cDataNode0);
      assertTrue(leafNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(">eaHx`");
      Comment comment0 = new Comment("");
      cDataNode0.siblingIndex = (-1);
      LeafNode leafNode0 = cDataNode0.doClone(comment0);
      assertTrue(leafNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode("$j");
      LeafNode leafNode0 = textNode0.doClone((Node) null);
      assertNotSame(leafNode0, textNode0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(">eaHxh");
      Document document0 = new Document("/4k>HzZAM{i:j+  b");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      Node node0 = leafNode0.removeAttr("/4k>HzZAM{i:j+  b");
      assertTrue(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode("gMz?D>{rCwB%:");
      String string0 = textNode0.coreValue();
      assertEquals("gMz?D>{rCwB%:", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      String string0 = xmlDeclaration0.coreValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataNode dataNode0 = new DataNode("7mqe");
      int int0 = dataNode0.childNodeSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("SYSTEM");
      cDataNode0.setSiblingIndex(5696);
      Node node0 = cDataNode0.attr("", "<![CDATA[SYSTEM]]>");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataNode dataNode0 = new DataNode("gMz?D>{rCwB%:");
      dataNode0.setSiblingIndex((-1447));
      Node node0 = dataNode0.attr("                 ", (String) null);
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataNode dataNode0 = new DataNode("PUBLIC");
      Node node0 = dataNode0.wrap("org.jsoup.nodes.LeafNode");
      Node node1 = node0.attr("org.jsoup.nodes.LeafNode", "1jNKR5#n*");
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("roS]");
      String string0 = cDataNode0.attr("#cdata");
      assertEquals("roS]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.LeafNode");
      // Undeclared exception!
      try { 
        cDataNode0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.LeafNode");
      cDataNode0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        cDataNode0.removeAttr("org.jsoup.nodes.LeafNode");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-/9fsuZ");
      cDataNode0.value = (Object) cDataNode0;
      // Undeclared exception!
      try { 
        cDataNode0.attributes();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("-cOata");
      cDataNode0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      cDataNode0.attr("-cOata", "-cOata");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%:~n@");
      // Undeclared exception!
      try { 
        cDataNode0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(">eaHxh");
      Object object0 = new Object();
      cDataNode0.value = object0;
      // Undeclared exception!
      try { 
        cDataNode0.attr(">eaHxh", ">eaHxh");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Rcdata");
      Node node0 = cDataNode0.attr("Rcdata", "Rcdata");
      // Undeclared exception!
      try { 
        node0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("iX.>E!");
      // Undeclared exception!
      try { 
        cDataNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("6'z rm]|lT");
      Node node0 = cDataNode0.attr("#cdata", "Accept-Encoding");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      String string0 = cDataNode0.attr("#cdata");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = new TextNode("body");
      textNode0.attributes();
      Node node0 = textNode0.shallowClone();
      assertNotSame(node0, textNode0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode("body");
      Document document0 = Parser.parseBodyFragment("body", "org.jsoup.internal.Normalizer");
      textNode0.parentNode = (Node) document0;
      String string0 = textNode0.baseUri();
      assertEquals("org.jsoup.internal.Normalizer", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Gyb$AWbT${");
      String string0 = cDataNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(">eaHx`");
      cDataNode0.attr(">eaHx`", ">eaHx`");
      Node node0 = cDataNode0.attr(">eaHx`", ">eaHx`");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Gyb$AWbT${");
      String string0 = cDataNode0.attr("Gyb$AWbT${");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comment comment0 = new Comment("QuR~!GB`!_");
      String string0 = comment0.absUrl("QuR~!GB`!_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode0.outerHtmlTail((QuietAppendable) null, document_OutputSettings0);
      assertEquals(0, cDataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DataNode dataNode0 = new DataNode("oML5cI2?Z,t2RXsqa");
      DataNode dataNode1 = dataNode0.setWholeData((String) null);
      String string0 = dataNode1.coreValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("1");
      // Undeclared exception!
      try { 
        cDataNode0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
