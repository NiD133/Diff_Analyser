/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 06 11:17:51 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.internal.QuietAppendable;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataNode dataNode0 = new DataNode("s:.U");
      dataNode0.coreValue("");
      assertEquals(0, dataNode0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("?X4WRmKC`*");
      comment0.setSiblingIndex(150);
      Node node0 = comment0.removeAttr("#dan");
      assertEquals(150, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.LeafNode");
      dataNode0.setSiblingIndex((-462));
      Node node0 = dataNode0.removeAttr("org.jsoup.helper.HttpConnection$KeyVal");
      assertSame(dataNode0, node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "xf", "#cdata");
      documentType0.wrap("5Hs(;P}i}q3q");
      Node node0 = documentType0.removeAttr("]dO2ohy.");
      assertSame(documentType0, node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("#cdata");
      boolean boolean0 = comment0.hasAttributes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataNode dataNode0 = new DataNode("L");
      dataNode0.attr("L", "r23cLuT{[9UM)e");
      boolean boolean0 = dataNode0.hasAttr("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8]BXhO<");
      cDataNode0.setSiblingIndex(3372);
      Node node0 = cDataNode0.empty();
      assertSame(cDataNode0, node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      textNode0.setSiblingIndex((-1882));
      Node node0 = textNode0.empty();
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8]BXhO<");
      cDataNode0.setParentNode(cDataNode0);
      Node node0 = cDataNode0.empty();
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataNode dataNode0 = new DataNode("h4");
      DocumentType documentType0 = new DocumentType("jY\"]/f;V!h|,v%A", "", "");
      documentType0.siblingIndex = 1;
      LeafNode leafNode0 = documentType0.doClone(dataNode0);
      assertTrue(leafNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danU");
      dataNode0.setSiblingIndex((-1995955295));
      LeafNode leafNode0 = dataNode0.doClone(dataNode0);
      assertTrue(leafNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "org.jsoup.nodes.LeafNode");
      LeafNode leafNode0 = documentType0.doClone((Node) null);
      assertNotSame(leafNode0, documentType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.LeafNode");
      DataNode dataNode1 = dataNode0.setWholeData("");
      String string0 = dataNode1.coreValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.LeafNode");
      int int0 = dataNode0.childNodeSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataNode dataNode0 = new DataNode("g{NE1)F.(MU,Z%?E@bL");
      Document document0 = Parser.parse("org.jsoup.nodes.LeafNode", "2:.BR9s");
      dataNode0.setParentNode(document0);
      String string0 = dataNode0.baseUri();
      assertEquals("2:.BR9s", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comment comment0 = new Comment("#cdata");
      comment0.attributes();
      boolean boolean0 = comment0.hasAttributes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataNode dataNode0 = new DataNode("G?'A>*{dY\"SZ~");
      dataNode0.siblingIndex = 1;
      Node node0 = dataNode0.attr("", "");
      assertEquals(1, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.siblingIndex = (-2269);
      Node node0 = textNode0.attr("", "G*RUC4oF90:a>8E)");
      assertEquals("#text", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataNode dataNode0 = new DataNode("21sO[s,HTO4|W");
      dataNode0.wrap("21sO[s,HTO4|W");
      Node node0 = dataNode0.attr("2$lX__Nhg/ 55:", "2$lX__Nhg/ 55:");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("_.|M*I]Z,CiM/");
      String string0 = cDataNode0.absUrl("_.|M*I]Z,CiM/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("C");
      // Undeclared exception!
      try { 
        cDataNode0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataNode dataNode0 = new DataNode("");
      // Undeclared exception!
      try { 
        dataNode0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("jY\"]/f;V!h|,v%A", "", "");
      Object object0 = new Object();
      documentType0.value = object0;
      // Undeclared exception!
      try { 
        documentType0.coreValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("N}d87KvAu}u%=Xor:");
      Comment comment1 = comment0.setData("ZBO");
      MockFile mockFile0 = new MockFile("ZBO", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      comment1.value = (Object) outputStreamWriter0;
      // Undeclared exception!
      try { 
        comment1.attributes();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.OutputStreamWriter cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danU");
      dataNode0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      dataNode0.attr("#danU", "#danU");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danG");
      // Undeclared exception!
      try { 
        dataNode0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danU");
      dataNode0.attr("#danU", "#danU");
      // Undeclared exception!
      try { 
        dataNode0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#dajG");
      Node node0 = cDataNode0.attr("#cdata", "ascii");
      assertSame(cDataNode0, node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("#text");
      String string0 = comment0.attr("#comment");
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataNode dataNode0 = new DataNode("L");
      dataNode0.wrap("L");
      String string0 = dataNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danU");
      dataNode0.attr("#danU", "org.jsoup.parser.CharacterReader");
      Node node0 = dataNode0.attr("VM~yOM{=Xo3Hy", "tsp=");
      assertEquals(0, node0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataNode dataNode0 = new DataNode("novalidate");
      String string0 = dataNode0.attr((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      // Undeclared exception!
      try { 
        cDataNode0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#dajG");
      StringBuilder stringBuilder0 = new StringBuilder();
      QuietAppendable quietAppendable0 = QuietAppendable.wrap(stringBuilder0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode0.outerHtmlTail(quietAppendable0, document_OutputSettings0);
      assertEquals(0, cDataNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danG");
      boolean boolean0 = dataNode0.hasAttr("#danG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataNode dataNode0 = new DataNode("novalidate");
      String string0 = dataNode0.coreValue();
      assertEquals("novalidate", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#danU");
      DataNode dataNode1 = dataNode0.clone();
      Object object0 = new Object();
      dataNode1.value = object0;
      // Undeclared exception!
      try { 
        dataNode1.attr("#danU", "dd");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataNode dataNode0 = new DataNode("]-(qwv");
      dataNode0.doSetBaseUri("");
      assertFalse(dataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      List<Node> list0 = documentType0.ensureChildNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataNode dataNode0 = new DataNode("novalidate");
      dataNode0.setWholeData((String) null);
      String string0 = dataNode0.coreValue();
      assertNull(string0);
  }
}
