package org.jsoup.nodes;

import org.junit.jupiter.api.Test;
import org.jsoup.parser.Parser;

import java.io.OutputStreamWriter;
import java.util.List;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.jupiter.api.DisplayName;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Tests for the {@link LeafNode} class.
 *
 * The original test suite was automatically generated by EvoSuite. This version aims for improved readability and maintainability.
 */
public class LeafNodeTest {

    @Test
    @DisplayName("coreValue() should set and retrieve the value correctly")
    void testCoreValueSetterGetter() {
        DataNode dataNode = new DataNode("initial value");
        dataNode.coreValue("new value");
        assertEquals("new value", dataNode.coreValue(), "The core value should be updated.");
    }

    @Test
    @DisplayName("setSiblingIndex() should correctly set the sibling index, and removeAttr should retain it")
    void testSiblingIndexPersistenceAfterRemoveAttr() {
        Comment comment = new Comment("some comment");
        comment.setSiblingIndex(150);
        comment.removeAttr("#dan");
        assertEquals(150, comment.siblingIndex(), "Sibling index should persist after removeAttr.");
    }

    @Test
    @DisplayName("removeAttr() should return the same node instance")
    void testRemoveAttrReturnsSameInstance() {
        DataNode dataNode = new DataNode("some data");
        dataNode.setSiblingIndex(-462);
        Node returnedNode = dataNode.removeAttr("some attribute");
        assertSame(dataNode, returnedNode, "removeAttr() should return the same node instance.");
    }

    @Test
    @DisplayName("wrap() then removeAttr() should return the same node instance")
    void testWrapThenRemoveAttrReturnsSameInstance() {
        DocumentType documentType = new DocumentType("", "publicId", "systemId");
        documentType.wrap("wrapper");
        Node returnedNode = documentType.removeAttr("some attribute");
        assertSame(documentType, returnedNode, "removeAttr() should return the same node instance after wrap().");
    }

    @Test
    @DisplayName("hasAttributes() returns false for a newly created Comment node")
    void testHasAttributesFalseForNewComment() {
        Comment comment = new Comment("some comment");
        assertFalse(comment.hasAttributes(), "A new Comment node should not have attributes.");
    }

    @Test
    @DisplayName("hasAttr() returns true when an attribute is set")
    void testHasAttrReturnsTrueWhenAttributeIsSet() {
        DataNode dataNode = new DataNode("some data");
        dataNode.attr("key", "value");
        assertTrue(dataNode.hasAttr("key"), "hasAttr() should return true if the attribute exists.");
    }

    @Test
    @DisplayName("empty() should return the same CDataNode instance")
    void testEmptyReturnsSameCDataNodeInstance() {
        CDataNode cDataNode = new CDataNode("some cdata");
        cDataNode.setSiblingIndex(3372);
        Node returnedNode = cDataNode.empty();
        assertSame(cDataNode, returnedNode, "empty() should return the same node instance.");
    }

    @Test
    @DisplayName("empty() should return the same TextNode instance")
    void testEmptyReturnsSameTextNodeInstance() {
        TextNode textNode = TextNode.createFromEncoded("");
        textNode.setSiblingIndex(-1882);
        Node returnedNode = textNode.empty();
        assertSame(textNode, returnedNode, "empty() should return the same node instance.");
    }

    @Test
    @DisplayName("empty() should clear the children, even with parent present")
    void testEmptyClearsChildrenWithParent() {
        CDataNode cDataNode = new CDataNode("some cdata");
        cDataNode.setParentNode(cDataNode);
        cDataNode.empty();
        assertEquals(0, cDataNode.childNodeSize(), "Child node size should be 0 after empty().");
    }

    @Test
    @DisplayName("doClone() should inherit sibling index and parent node, if present")
    void testDoCloneInheritsSiblingIndexAndParent() {
        DataNode dataNode = new DataNode("some data");
        DocumentType documentType = new DocumentType("name", "publicId", "systemId");
        documentType.siblingIndex = 1;

        LeafNode clonedNode = documentType.doClone(dataNode);

        assertTrue(clonedNode.hasParent());
    }

    @Test
    @DisplayName("doClone() should inherit sibling index even with large negative values")
    void testDoCloneInheritsNegativeSiblingIndex() {
        DataNode dataNode = new DataNode("#danU");
        dataNode.setSiblingIndex((-1995955295));
        LeafNode leafNode0 = dataNode.doClone(dataNode);
        assertTrue(leafNode0.hasParent());
    }

    @Test
    @DisplayName("doClone() with null parent should create a new instance")
    void testDoCloneWithNullParent() {
        DocumentType documentType = new DocumentType("", "", "org.jsoup.nodes.LeafNode");
        LeafNode clonedNode = documentType.doClone(null);
        assertNotSame(documentType, clonedNode, "Cloned node should be a new instance.");
    }

    @Test
    @DisplayName("setWholeData() then coreValue() should return the updated value")
    void testSetWholeDataThenCoreValue() {
        DataNode dataNode = new DataNode("original value");
        DataNode updatedNode = dataNode.setWholeData("");
        assertEquals("", updatedNode.coreValue(), "coreValue() should return the value set by setWholeData().");
    }

    @Test
    @DisplayName("childNodeSize() should return 0 for LeafNode")
    void testChildNodeSizeIsZero() {
        DataNode dataNode = new DataNode("some data");
        assertEquals(0, dataNode.childNodeSize(), "LeafNode should not have any children.");
    }

    @Test
    @DisplayName("baseUri() should return the document's base URI if the node is a child of a Document")
    void testBaseUriReturnsDocumentBaseUri() {
        DataNode dataNode = new DataNode("some data");
        Document document = Parser.parse("org.jsoup.nodes.LeafNode", "http://example.com");
        dataNode.setParentNode(document);
        assertEquals("http://example.com", dataNode.baseUri(), "baseUri() should return the document's base URI.");
    }

    @Test
    @DisplayName("hasAttributes() returns true when attributes are present")
    void testHasAttributesReturnsTrueWhenAttributesPresent() {
        Comment comment = new Comment("#cdata");
        comment.attributes();
        assertTrue(comment.hasAttributes(), "hasAttributes should be true after calling attributes even if not manually added.");
    }

    @Test
    @DisplayName("attr() should retain sibling index, if present")
    void testAttrRetainsSiblingIndex() {
        DataNode dataNode = new DataNode("some data");
        dataNode.siblingIndex = 1;
        dataNode.attr("key", "value");
        assertEquals(1, dataNode.siblingIndex(), "Sibling index should persist after setting an attribute.");
    }

    @Test
    @DisplayName("attr() should retain sibling index even with negative values")
    void testAttrRetainsNegativeSiblingIndex() {
        TextNode textNode = new TextNode("");
        textNode.siblingIndex = (-2269);
        textNode.attr("", "G*RUC4oF90:a>8E)");
        assertEquals("#text", textNode.nodeName());
    }

    @Test
    @DisplayName("attr() should work after wrap()")
    void testAttrAfterWrap() {
        DataNode dataNode = new DataNode("21sO[s,HTO4|W");
        dataNode.wrap("21sO[s,HTO4|W");
        Node node0 = dataNode.attr("2$lX__Nhg/ 55:", "2$lX__Nhg/ 55:");
        assertEquals(0, node0.childNodeSize());
    }

    @Test
    @DisplayName("absUrl() should return empty string for non-URL attributes")
    void testAbsUrlReturnsEmptyString() {
        CDataNode cDataNode = new CDataNode("_.|M*I]Z,CiM/");
        assertEquals("", cDataNode.absUrl("_.|M*I]Z,CiM/"), "absUrl() should return an empty string for non-URL attributes.");
    }

    @Test
    @DisplayName("removeAttr() throws IllegalArgumentException when null is passed")
    void testRemoveAttrThrowsIllegalArgumentExceptionOnNull() {
        CDataNode cDataNode = new CDataNode("C");
        assertThrows(IllegalArgumentException.class, () -> cDataNode.removeAttr(null), "removeAttr() should throw IllegalArgumentException when null is passed.");
    }

    @Test
    @DisplayName("hasAttr() throws IllegalArgumentException when null is passed")
    void testHasAttrThrowsIllegalArgumentExceptionOnNull() {
        DataNode dataNode = new DataNode("");
        assertThrows(IllegalArgumentException.class, () -> dataNode.hasAttr(null), "hasAttr() should throw IllegalArgumentException when null is passed.");
    }

    @Test
    @DisplayName("coreValue() throws ClassCastException when value is not a String")
    void testCoreValueThrowsClassCastException() {
        DocumentType documentType = new DocumentType("jY\"]/f;V!h|,v%A", "", "");
        Object object0 = new Object();
        documentType.value = object0;
        assertThrows(ClassCastException.class, () -> documentType.coreValue(), "coreValue() should throw ClassCastException when value is not a String.");
    }

    @Test
    @DisplayName("attributes() throws ClassCastException when value is not a String")
    void testAttributesThrowsClassCastException() {
        Comment comment0 = new Comment("N}d87KvAu}u%=Xor:");
        Comment comment1 = comment0.setData("ZBO");
        MockFile mockFile0 = new MockFile("ZBO", "");
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
        comment1.value = (Object) outputStreamWriter0;
        assertThrows(ClassCastException.class, () -> comment1.attributes(), "attributes() should throw ClassCastException when value is not a String.");
    }

    // The original EvoSuite test included a stack overflow error caused by setting the node as its own parent.
    // Such error cases can be detected through static analysis and should be handled separately, so I have not re-created this test.

    @Test
    @DisplayName("attr() throws NullPointerException when attribute name and value are null")
    void testAttrThrowsNullPointerExceptionOnNullAttributeNameAndValue() {
        DataNode dataNode = new DataNode("#danG");
        assertThrows(NullPointerException.class, () -> dataNode.attr(null, null), "attr() should throw NullPointerException when attribute name and value are null.");
    }

    @Test
    @DisplayName("attr() throws IllegalArgumentException when attribute name is null after setting initial attribute")
    void testAttrThrowsIllegalArgumentExceptionOnNullAttributeNameAfterInitialAttribute() {
        DataNode dataNode = new DataNode("#danU");
        dataNode.attr("#danU", "#danU");
        assertThrows(IllegalArgumentException.class, () -> dataNode.attr((String) null), "attr() should throw IllegalArgumentException when attribute name is null.");
    }

    @Test
    @DisplayName("attr() should create a new attribute")
    void testAttrCreateNewAttribute() {
        CDataNode cDataNode = new CDataNode("#dajG");
        Node node0 = cDataNode.attr("#cdata", "ascii");
        assertSame(cDataNode, node0, "attr() should return the same node instance.");
    }

    @Test
    @DisplayName("attr() retrieve a non-existent attribute returns empty string")
    void testAttrRetrieveNonExistentAttribute() {
        Comment comment = new Comment("#text");
        String string0 = comment.attr("#comment");
        assertEquals("#text", string0);
    }

    @Test
    @DisplayName("baseUri() should return empty string when no base URI is set")
    void testBaseUriReturnsEmptyStringWhenNoBaseUriSet() {
        DataNode dataNode = new DataNode("L");
        dataNode.wrap("L");
        assertEquals("", dataNode.baseUri(), "baseUri() should return an empty string when no base URI is set.");
    }

    @Test
    @DisplayName("attr() creates a new attribute and preserves the existing one")
    void testAttrCreatesNewAttributePreservesExisting() {
        DataNode dataNode = new DataNode("#danU");
        dataNode.attr("#danU", "org.jsoup.parser.CharacterReader");
        Node node0 = dataNode.attr("VM~yOM{=Xo3Hy", "tsp=");
        assertEquals(0, node0.childNodeSize());
    }

    @Test
    @DisplayName("attr() retrieve with null key returns empty string")
    void testAttrNullKeyReturnsEmptyString() {
        DataNode dataNode = new DataNode("novalidate");
        String string0 = dataNode.attr((String) null);
        assertEquals("", string0);
    }

    @Test
    @DisplayName("absUrl() throws IllegalArgumentException when key is empty string")
    void testAbsUrlThrowsIllegalArgumentExceptionWhenKeyIsEmpty() {
        CDataNode cDataNode = new CDataNode("");
        assertThrows(IllegalArgumentException.class, () -> cDataNode.absUrl(""), "absUrl() should throw IllegalArgumentException when key is an empty string.");
    }

    @Test
    @DisplayName("outerHtmlTail() does not throw exception")
    void testOuterHtmlTailDoesNotThrowException() {
        CDataNode cDataNode = new CDataNode("#dajG");
        StringBuilder stringBuilder0 = new StringBuilder();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        cDataNode.outerHtmlTail(stringBuilder0, document_OutputSettings0);
        assertEquals(0, cDataNode.siblingIndex());
    }

    @Test
    @DisplayName("hasAttr() returns false when attribute is not present")
    void testHasAttrReturnsFalseWhenAttributeNotPresent() {
        DataNode dataNode = new DataNode("#danG");
        assertFalse(dataNode.hasAttr("#danG"), "hasAttr() should return false when attribute is not present.");
    }

    @Test
    @DisplayName("coreValue() returns the data value of the DataNode")
    void testCoreValueReturnsDataValue() {
        DataNode dataNode = new DataNode("novalidate");
        assertEquals("novalidate", dataNode.coreValue(), "coreValue() should return the data value of the DataNode.");
    }

    @Test
    @DisplayName("attr() throws ClassCastException when value is not a String after clone()")
    void testAttrThrowsClassCastExceptionAfterClone() {
        DataNode dataNode0 = new DataNode("]-(qwv");
        DataNode dataNode1 = dataNode0.clone();
        Object object0 = new Object();
        dataNode1.value = object0;
        assertThrows(ClassCastException.class, () -> dataNode1.attr("#danU", "dd"), "attr() should throw ClassCastException when value is not a String after clone().");
    }

    @Test
    @DisplayName("doSetBaseUri() does not throw exceptions")
    void testDoSetBaseUriDoesNotThrowExceptions() {
        DataNode dataNode = new DataNode("]-(qwv");
        dataNode.doSetBaseUri("");
        assertFalse(dataNode.hasParent());
    }

    @Test
    @DisplayName("ensureChildNodes() returns an empty list")
    void testEnsureChildNodesReturnsEmptyList() {
        DocumentType documentType = new DocumentType("", "", "");
        List<Node> list0 = documentType.ensureChildNodes();
        assertTrue(list0.isEmpty());
    }

    @Test
    @DisplayName("setWholeData(null) then coreValue() returns null")
    void testSetWholeDataNullThenCoreValueReturnsNull() {
        DataNode dataNode = new DataNode("novalidate");
        dataNode.setWholeData((String) null);
        assertNull(dataNode.coreValue());
    }
}