/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:15:44 GMT 2025
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, 
useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlotRenderingInfo_ESTest extends PlotRenderingInfo_ESTest_scaffolding {

    // Test Cases for hashCode()
    @Test(timeout = 4000)
    public void hashCodeChangesAfterSettingDataArea()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        Rectangle dataArea = new Rectangle(-352, 0);
        plotInfo.setDataArea(dataArea);
        plotInfo.hashCode(); // Should not throw exception
    }

    @Test(timeout = 4000)
    public void hashCodeChangesAfterSettingPlotArea()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        Point point = new Point(4047, 4047);
        Line2D.Float line = new Line2D.Float(point, point);
        Rectangle2D plotArea = line.getBounds2D();
        plotInfo.setPlotArea(plotArea);
        plotInfo.hashCode(); // Should not throw exception
    }

    // Test Cases for Subplot Management
    @Test(timeout = 4000)
    public void getSubplotInfoReturnsAddedSubplot()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo mainPlotInfo = chartRenderingInfo.getPlotInfo();
        PlotRenderingInfo subPlotInfo = new PlotRenderingInfo(chartRenderingInfo);
        mainPlotInfo.addSubplotInfo(subPlotInfo);
        PlotRenderingInfo retrieved = mainPlotInfo.getSubplotInfo(0);
        assertNotSame("Retrieved subplot should be different from main plot", 
                     mainPlotInfo, retrieved);
    }

    @Test(timeout = 4000)
    public void addSubplotInfoIncreasesSubplotCount()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.addSubplotInfo(plotInfo);
        PlotRenderingInfo subplot = plotInfo.getSubplotInfo(0);
        assertEquals("Subplot count should be 1", 1, subplot.getSubplotCount());
    }

    @Test(timeout = 4000)
    public void getSubplotCountInitiallyZero()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        assertEquals("Initial subplot count should be 0", 0, plotInfo.getSubplotCount());
    }

    @Test(timeout = 4000)
    public void getSubplotCountAfterAddingSubplot()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        plotInfo.addSubplotInfo(plotInfo);
        assertEquals("Subplot count should be 1 after addition", 
                     1, plotInfo.getSubplotCount());
    }

    @Test(timeout = 4000, expected = IndexOutOfBoundsException.class)
    public void getSubplotInfoThrowsForInvalidIndex()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        plotInfo.getSubplotInfo(1); // Should throw IndexOutOfBoundsException
    }

    // Test Cases for Plot Area Management
    @Test(timeout = 4000)
    public void setAndGetPlotArea()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        Rectangle plotArea = new Rectangle();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.setPlotArea(plotArea);
        Rectangle2D retrieved = plotInfo.getPlotArea();
        assertEquals("Plot area maxY should match", 0.0, retrieved.getMaxY(), 0.01);
    }

    @Test(timeout = 4000)
    public void setAndGetPlotAreaWithSpecificDimensions()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo((EntityCollection) null);
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        Dimension dim = new Dimension(1595, 2);
        Rectangle plotArea = new Rectangle(dim);
        plotInfo.setPlotArea(plotArea);
        Rectangle2D retrieved = plotInfo.getPlotArea();
        assertEquals("Plot area width should match", 1595.0, retrieved.getWidth(), 0.01);
    }

    @Test(timeout = 4000)
    public void getPlotAreaInitiallyNull()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        assertNull("Plot area should be null initially", plotInfo.getPlotArea());
    }

    // Test Cases for Data Area Management
    @Test(timeout = 4000)
    public void setDataAreaToNull()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.setDataArea((Rectangle2D) null);
        assertNull("Data area should be null after explicit set", plotInfo.getDataArea());
    }

    @Test(timeout = 4000)
    public void setAndGetDataArea()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        Rectangle dataArea = new Rectangle(0, 37, 4281, 0);
        plotInfo.setDataArea(dataArea);
        Rectangle2D retrieved = plotInfo.getDataArea();
        assertEquals("Data area height should be 0", 0.0, retrieved.getHeight(), 0.01);
    }

    @Test(timeout = 4000)
    public void setAndGetDataAreaWithNegativeValues()  throws Throwable  {
        PlotRenderingInfo plotInfo = new PlotRenderingInfo((ChartRenderingInfo) null);
        Rectangle2D.Double dataArea = new Rectangle2D.Double(-452.97, -452.97, -452.97, -452.97);
        plotInfo.setDataArea(dataArea);
        Rectangle2D.Double retrieved = (Rectangle2D.Double) plotInfo.getDataArea();
        assertEquals("Data area height should match", -452.97, retrieved.height, 0.01);
    }

    @Test(timeout = 4000)
    public void setDataAreaFromLineBounds()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        Line2D.Float line = new Line2D.Float(0.0F, -1725.4F, 0.0F, 1.0F);
        Rectangle dataArea = line.getBounds();
        plotInfo.setDataArea(dataArea);
        Rectangle2D retrieved = plotInfo.getDataArea();
        assertEquals("Data area Y should match", -1726.0, retrieved.getY(), 0.01);
    }

    @Test(timeout = 4000)
    public void setAndGetDataAreaWithRectangle()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        Rectangle dataArea = new Rectangle(1173, 1173);
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        plotInfo.setDataArea(dataArea);
        Rectangle retrieved = (Rectangle) plotInfo.getDataArea();
        assertEquals("Data area Y should be 0", 0, retrieved.y);
    }

    @Test(timeout = 4000)
    public void setAndGetDataAreaWithNegativeX()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        Rectangle dataArea = new Rectangle(-352, 0);
        plotInfo.setDataArea(dataArea);
        Rectangle2D retrieved = plotInfo.getDataArea();
        assertEquals("Data area X should be -352", -352.0, retrieved.getX(), 0.01);
    }

    @Test(timeout = 4000)
    public void setAndGetDataAreaFromLine2D()  throws Throwable  {
        Point2D.Double point = new Point2D.Double(1994.172678354, -1.0);
        Line2D.Float line = new Line2D.Float(point, point);
        Rectangle2D dataArea = line.getBounds2D();
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        plotInfo.setDataArea(dataArea);
        Rectangle2D retrieved = plotInfo.getDataArea();
        assertEquals("Data area maxY should match", -1.0, retrieved.getMaxY(), 0.01);
    }

    // Test Cases for Owner Reference
    @Test(timeout = 4000)
    public void getOwnerWhenConstructedWithNull()  throws Throwable  {
        PlotRenderingInfo plotInfo = new PlotRenderingInfo((ChartRenderingInfo) null);
        assertNull("Owner should be null when constructed with null", 
                  plotInfo.getOwner());
    }

    @Test(timeout = 4000)
    public void getOwnerReturnsCorrectReference()  throws Throwable  {
        StandardEntityCollection entities = new StandardEntityCollection();
        ChartRenderingInfo chartInfo = new ChartRenderingInfo(entities);
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartInfo);
        ChartRenderingInfo owner = plotInfo.getOwner();
        assertSame("Owner should match constructor argument", chartInfo, owner);
    }

    // Test Cases for Subplot Index Handling
    @Test(timeout = 4000)
    public void getSubplotIndexWhenPointNotInSubplot()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.addSubplotInfo(plotInfo);
        Point point = new Point();
        int index = plotInfo.getSubplotIndex(point);
        assertEquals("Should return -1 when point not in subplot", -1, index);
    }

    @Test(timeout = 4000)
    public void getSubplotIndexThrowsForNullPoint()  throws Throwable  {
        PlotRenderingInfo plotInfo = new PlotRenderingInfo((ChartRenderingInfo) null);
        try {
            plotInfo.getSubplotIndex((Point2D) null);
            fail("Expected IllegalArgumentException for null point");
        } catch (IllegalArgumentException e) {
            assertEquals("Exception message should match", 
                         "Null 'source' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void getSubplotIndexThrowsWhenSubplotInfoContainsNull()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.addSubplotInfo((PlotRenderingInfo) null);
        Point2D.Double point = new Point2D.Double();
        try {
            plotInfo.getSubplotIndex(point);
            fail("Expected NullPointerException when subplot info contains null");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // Test Cases for Cloning
    @Test(timeout = 4000)
    public void cloneAfterAddingSubplot()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo mainPlotInfo = chartRenderingInfo.getPlotInfo();
        PlotRenderingInfo subPlotInfo = new PlotRenderingInfo(chartRenderingInfo);
        mainPlotInfo.addSubplotInfo(subPlotInfo);
        mainPlotInfo.clone(); // Should not throw exception
    }

    @Test(timeout = 4000)
    public void cloneWhenDataAreaIsNull()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        plotInfo.setDataArea((Rectangle2D) null);
        Object clone = plotInfo.clone();
        assertNotSame("Clone should be different object", plotInfo, clone);
    }

    @Test(timeout = 4000)
    public void cloneWhenPlotAreaIsSetToDataArea()  throws Throwable  {
        StandardEntityCollection entities = new StandardEntityCollection();
        ChartRenderingInfo chartInfo = new ChartRenderingInfo(entities);
        PlotRenderingInfo plotInfo = chartInfo.getPlotInfo();
        Rectangle2D dataArea = plotInfo.getDataArea();
        plotInfo.setPlotArea(dataArea);
        Object clone = plotInfo.clone();
        assertNotSame("Clone should be different object", plotInfo, clone);
    }

    // Test Cases for Equality
    @Test(timeout = 4000)
    public void equalsReflexivity()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = chartRenderingInfo.getPlotInfo();
        assertTrue("Object should equal itself", plotInfo.equals(plotInfo));
    }

    @Test(timeout = 4000)
    public void equalsForNewInstances()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo1 = new PlotRenderingInfo(chartRenderingInfo);
        PlotRenderingInfo plotInfo2 = new PlotRenderingInfo(chartRenderingInfo);
        assertTrue("New instances with same owner should be equal", 
                  plotInfo1.equals(plotInfo2));
    }

    @Test(timeout = 4000)
    public void equalsAfterAddingSubplot()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo1 = chartRenderingInfo.getPlotInfo();
        PlotRenderingInfo plotInfo2 = new PlotRenderingInfo(chartRenderingInfo);
        assertTrue("Initially equal", plotInfo1.equals(plotInfo2));
        
        plotInfo2.addSubplotInfo(plotInfo1);
        assertFalse("Should not be equal after adding subplot", 
                   plotInfo1.equals(plotInfo2));
    }

    @Test(timeout = 4000)
    public void equalsAfterSettingPlotArea()  throws Throwable  {
        StandardEntityCollection entities = new StandardEntityCollection();
        ChartRenderingInfo chartInfo = new ChartRenderingInfo(entities);
        PlotRenderingInfo plotInfo1 = chartInfo.getPlotInfo();
        PlotRenderingInfo plotInfo2 = new PlotRenderingInfo(chartInfo);
        assertTrue("Initially equal", plotInfo1.equals(plotInfo2));
        
        Rectangle2D dataArea = plotInfo2.getDataArea();
        plotInfo1.setPlotArea(dataArea);
        assertFalse("Should not be equal after setting plot area", 
                   plotInfo2.equals(plotInfo1));
    }

    @Test(timeout = 4000)
    public void equalsAfterSettingDataArea()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo1 = new PlotRenderingInfo(chartRenderingInfo);
        Point point = new Point(7, 0);
        Dimension dim = new Dimension();
        Rectangle dataArea = new Rectangle(point, dim);
        plotInfo1.setDataArea(dataArea);
        PlotRenderingInfo plotInfo2 = chartRenderingInfo.getPlotInfo();
        assertFalse("Should not be equal after setting data area", 
                   plotInfo1.equals(plotInfo2));
    }

    @Test(timeout = 4000)
    public void equalsWithDifferentClass()  throws Throwable  {
        ChartRenderingInfo chartRenderingInfo = new ChartRenderingInfo();
        PlotRenderingInfo plotInfo = new PlotRenderingInfo(chartRenderingInfo);
        StandardEntityCollection otherObject = new StandardEntityCollection();
        assertFalse("Should not equal object of different class", 
                   plotInfo.equals(otherObject));
    }
}