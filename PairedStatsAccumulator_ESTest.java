/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:17:22 GMT 2025
 */

package com.google.common.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.math.LinearTransformation;
import com.google.common.math.PairedStats;
import com.google.common.math.PairedStatsAccumulator;
import com.google.common.math.Stats;
import java.util.ArrayDeque;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class PairedStatsAccumulator_ESTest extends PairedStatsAccumulator_ESTest_scaffolding {

    // ============================== COVARIANCE TESTS ==============================
    
    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testPopulationCovarianceFailsWhenEmpty() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.populationCovariance(); // Should throw
    }

    @Test(timeout = 4000)
    public void testPopulationCovarianceWithSinglePair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(863464.0975884801, 38.358751);
        assertEquals(0.0, accumulator.populationCovariance(), 0.01);
    }

    @Test(timeout = 4000)
    public void testPopulationCovarianceWithTwoPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(4.9E-324, 1.0);
        accumulator.add(1.0, 4.9E-324);
        assertEquals(-0.25, accumulator.populationCovariance(), 0.01);
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testSampleCovarianceFailsWhenEmpty() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.sampleCovariance(); // Should throw
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testSampleCovarianceFailsWithSinglePair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(0.0, 0.0);
        accumulator.sampleCovariance(); // Should throw
    }

    @Test(timeout = 4000)
    public void testSampleCovarianceWithTwoIdenticalPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(1.9393330267238755E12, 1.9393330267238755E12);
        accumulator.add(1.9393330267238755E12, 1.9393330267238755E12);
        assertEquals(0.0, accumulator.sampleCovariance(), 0.01);
    }

    @Test(timeout = 4000)
    public void testSampleCovarianceWithTwoDifferentPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(4.9E-324, 1.0);
        accumulator.add(-1313.1264, 4.9E-324);
        assertEquals(656.5632, accumulator.sampleCovariance(), 0.01);
    }

    // ============================== CORRELATION TESTS ==============================
    
    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testPearsonsCorrelationFailsWhenEmpty() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.pearsonsCorrelationCoefficient(); // Should throw
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testPearsonsCorrelationFailsWithSinglePair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(0.0, -2551.7129547187);
        accumulator.pearsonsCorrelationCoefficient(); // Should throw
    }

    @Test(timeout = 4000)
    public void testPearsonsCorrelationWithTwoPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(-1.0, -1.0);
        accumulator.add(-1313.1264, 1.0);
        assertEquals(-1.0, accumulator.pearsonsCorrelationCoefficient(), 0.01);
    }

    @Test(timeout = 4000)
    public void testPearsonsCorrelationWithInfiniteValues() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        accumulator.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        assertEquals(Double.NaN, accumulator.pearsonsCorrelationCoefficient(), 0.01);
    }

    @Test(timeout = 4000)
    public void testPearsonsCorrelationWithZeroVariance() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(1896976.6974008642, 969.9234729266376);
        accumulator.add(2.0994296721195953E179, 0.0);
        assertEquals(-0.0, accumulator.pearsonsCorrelationCoefficient(), 0.01);
    }

    // ============================== LEAST SQUARES FIT TESTS ==============================
    
    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testLeastSquaresFitFailsWhenEmpty() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.leastSquaresFit(); // Should throw
    }

    @Test(timeout = 4000, expected = IllegalStateException.class)
    public void testLeastSquaresFitFailsWithSinglePair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(0.0, 0.0);
        accumulator.leastSquaresFit(); // Should throw
    }

    @Test(timeout = 4000)
    public void testLeastSquaresFitWithTwoPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(-1672.7733723256124, -1672.7733723256124);
        accumulator.add(316907.19778532686, -1672.7733723256124);
        assertNotNull(accumulator.leastSquaresFit());
    }

    @Test(timeout = 4000)
    public void testLeastSquaresFitWithThreePairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(-1.0, 1.0);
        accumulator.add(-1.0, -1.0);
        assertNotNull(accumulator.leastSquaresFit());
    }

    @Test(timeout = 4000)
    public void testLeastSquaresFitWithNaNValues() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(1018.9124, 1.0);
        accumulator.add(1.0, Double.NaN);
        assertNotNull(accumulator.leastSquaresFit());
    }

    // ============================== ADDALL & SNAPSHOT TESTS ==============================
    
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAddAllFailsWithNull() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.addAll((PairedStats) null); // Should throw
    }

    @Test(timeout = 4000)
    public void testAddAllWithValidPairedStats() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        Stats stats = new Stats(-1418L, -1672.7733723256124, 0.03, -1418L, 0.03);
        PairedStats pairedStats = new PairedStats(stats, stats, -1418L);
        accumulator.addAll(pairedStats);
        assertEquals(-1418L, accumulator.count());
    }

    @Test(timeout = 4000)
    public void testSnapshotAfterAddingPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(863464.0975884801, 38.358751);
        accumulator.add(-2001.999, -2001.999);
        PairedStats snapshot = accumulator.snapshot();
        assertEquals(2L, snapshot.count());
    }

    @Test(timeout = 4000)
    public void testSnapshotOfEmptyAccumulator() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        PairedStats snapshot = accumulator.snapshot();
        assertEquals(0L, snapshot.count());
    }

    // ============================== COUNT & STATS TESTS ==============================
    
    @Test(timeout = 4000)
    public void testCountWhenEmpty() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        assertEquals(0L, accumulator.count());
    }

    @Test(timeout = 4000)
    public void testCountAfterAddingPairs() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(863464.0975884801, 38.358751);
        assertEquals(1L, accumulator.count());
    }

    @Test(timeout = 4000)
    public void testXStatsAfterAddingPair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(863464.0975884801, 38.358751);
        Stats xStats = accumulator.xStats();
        assertEquals(863464.0975884801, xStats.sum(), 0.01);
    }

    @Test(timeout = 4000)
    public void testYStatsAfterAddingPair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(4.9E-324, 1.0);
        Stats yStats = accumulator.yStats();
        assertEquals(1.0, yStats.sum(), 0.01);
    }

    @Test(timeout = 4000)
    public void testYStatsAfterAddingNegativePair() {
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();
        accumulator.add(-1.0, -1.0);
        Stats yStats = accumulator.yStats();
        assertEquals(-1.0, yStats.sum(), 0.01);
    }
}