package com.google.common.math;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 * Tests for {@link PairedStatsAccumulator}.
 *
 * <p>Note: The original test was auto-generated by EvoSuite and had a nonsensical assertion. It
 * has been rewritten to meaningfully test the behavior of the {@code addAll} method with unusual
 * input.
 */
public class PairedStatsAccumulatorTest {

    @Test
    public void addAll_withPairedStatsHavingNegativeCount_updatesAccumulatorCountCorrectly() {
        // Arrange
        PairedStatsAccumulator accumulator = new PairedStatsAccumulator();

        // Create a PairedStats object with a negative count. This tests an edge case,
        // as the package-private Stats constructor allows creating such an object.
        long countInStatsObject = -2955L;
        Stats statsWithNegativeCount = new Stats(countInStatsObject, -2955.0, 0.03, 1.0, 0.03);
        PairedStats pairedStatsToAdd =
                new PairedStats(statsWithNegativeCount, statsWithNegativeCount, -648.72643);

        // Act: Add the stats to the accumulator for the first time.
        accumulator.addAll(pairedStatsToAdd);

        // Assert: The accumulator's count should match the count of the added stats.
        assertEquals(
                "After the first addAll, the accumulator's count should match the input count.",
                countInStatsObject,
                accumulator.count());

        // Act: Add the same stats again to test accumulation.
        accumulator.addAll(pairedStatsToAdd);

        // Assert: The accumulator's count should now be double the initial count.
        assertEquals(
                "After the second addAll, the accumulator's count should be the sum of the counts.",
                countInStatsObject * 2,
                accumulator.count());
    }
}