package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.fail;

/**
 * Test suite for {@link BinaryCodec}.
 *
 * This improved version clarifies the intent of an automatically generated test case
 * that was difficult to understand.
 */
public class BinaryCodecTest {

    /**
     * Tests that repeatedly applying {@code toAsciiBytes} will eventually cause an
     * {@code OutOfMemoryError} due to the exponential growth of the byte array.
     *
     * The original test was automatically generated by EvoSuite, and its purpose was
     * unclear. It repeatedly called {@code toAsciiBytes} and included a comment
     * suggesting an "Undeclared exception!". This refactored version makes the
     * likely intent—testing for resource exhaustion—explicit and robust.
     *
     * Each call to {@code toAsciiBytes} expands the input array by a factor of 8.
     * For example: 1KB -> 8KB -> 64KB -> 512KB -> 4MB -> 32MB...
     * This will quickly exhaust the heap space available to the JVM.
     *
     * NOTE: This type of test is inherently dependent on the JVM's heap size and
     * can be unstable. It is presented here to clarify the original test's likely
     * intent. In a real-world project, such a test might be omitted due to its
     * fragility.
     */
    @Test(expected = OutOfMemoryError.class, timeout = 4000)
    public void toAsciiBytesWithRepeatedApplicationsShouldCauseOutOfMemoryError() {
        // Start with a 1KB array to accelerate reaching the heap limit.
        byte[] data = new byte[1024];

        // In a loop, repeatedly apply the encoding. The array size grows by 8x each time.
        // This will inevitably lead to an OutOfMemoryError when the JVM cannot allocate
        // a new, massive array. The loop has a finite limit to prevent it from running
        // indefinitely on a machine with a very large heap.
        for (int i = 0; i < 20; i++) {
            data = BinaryCodec.toAsciiBytes(data);
        }

        // This line should be unreachable. If the test reaches this point, it means
        // the expected OutOfMemoryError was not thrown, which constitutes a test failure.
        fail("The test completed without throwing the expected OutOfMemoryError. " +
             "The test environment might have an exceptionally large heap size.");
    }
}