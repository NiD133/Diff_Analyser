package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.assertThrows;

/**
 * This test class contains a test case originally generated by EvoSuite.
 * The case has been refactored for improved clarity and maintainability.
 * It focuses on the behavior of the SimpleBloomFilter when dealing with
 * extremely large shapes that challenge memory constraints.
 */
public class SimpleBloomFilter_ESTestTest35 extends SimpleBloomFilter_ESTest_scaffolding {

    /**
     * Tests that the SimpleBloomFilter constructor throws an OutOfMemoryError
     * when attempting to create a filter with a shape that is too large to
     * allocate in memory.
     *
     * The original auto-generated test expected an "undeclared exception",
     * which occurs because the internal bit map array becomes too large to allocate.
     */
    @Test
    public void constructorShouldThrowErrorForExtremelyLargeShape() {
        // Arrange: Define a shape with a number of bits close to Integer.MAX_VALUE.
        // This size is chosen to require an allocation (~256MB) that is expected
        // to fail on a standard test environment heap.
        final int hugeNumberOfBits = 2147483605;
        final Shape hugeShape = Shape.fromNM(hugeNumberOfBits, hugeNumberOfBits);

        // Act & Assert: Attempting to construct the filter with this massive shape
        // should fail by throwing an OutOfMemoryError. We use assertThrows to
        // make this expectation explicit.
        assertThrows(OutOfMemoryError.class, () -> {
            new SimpleBloomFilter(hugeShape);
        });
    }
}