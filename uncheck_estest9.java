package org.apache.commons.io.function;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.IOException;
import org.junit.Test;

/**
 * Test suite for the {@link Uncheck} utility class.
 * Note: The original test class name "Uncheck_ESTestTest9" was generated by a tool.
 * A more descriptive name like "UncheckTest" would be more appropriate.
 */
public class Uncheck_ESTestTest9 extends Uncheck_ESTest_scaffolding {

    /**
     * Tests that {@link Uncheck#getAsLong(IOLongSupplier)} returns the value from the
     * supplier when the supplier does not throw an {@link IOException}.
     */
    @Test
    public void testGetAsLongShouldReturnValueWhenSupplierSucceeds() throws IOException {
        // Arrange: Set up the test conditions and inputs.
        final long expectedValue = 2444L;
        final IOLongSupplier mockIoLongSupplier = mock(IOLongSupplier.class);

        // Configure the mock supplier to return our expected value.
        // The 'throws IOException' is required by the compiler because the mocked
        // IOLongSupplier.getAsLong() interface is declared to throw it.
        when(mockIoLongSupplier.getAsLong()).thenReturn(expectedValue);

        // Act: Call the method under test.
        final long actualValue = Uncheck.getAsLong(mockIoLongSupplier);

        // Assert: Verify the outcome is as expected.
        assertEquals(expectedValue, actualValue);
    }
}