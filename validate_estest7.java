package org.jsoup.helper;

import org.junit.Test;

import java.util.IllegalFormatFlagsException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

// The original test class name and structure are preserved for context.
public class Validate_ESTestTest7 extends Validate_ESTest_scaffolding {

    /**
     * Tests that Validate.fail() propagates exceptions from String.format()
     * when given a malformed format string. Specifically, it checks for an
     * IllegalFormatFlagsException when a flag is incorrectly applied to a
     * format specifier that does not support it.
     */
    @Test(timeout = 4000)
    public void failWithInvalidFormatStringThrowsFormattingException() {
        // Arrange: A format string with an invalid flag ('-') for the newline specifier ('n').
        // The underlying java.util.Formatter should throw an exception when parsing this.
        String invalidFormatString = "Invalid format specifier: %-n";
        Object[] formatArgs = new Object[0]; // The arguments are not needed to trigger this parsing error.

        // Act & Assert
        try {
            Validate.fail(invalidFormatString, formatArgs);
            fail("Expected an IllegalFormatFlagsException to be thrown due to the invalid format string.");
        } catch (IllegalFormatFlagsException e) {
            // Verify that the expected exception was caught.
            // The message "Flags = '-'" is generated by Java's Formatter.
            assertEquals("Flags = '-'", e.getMessage());
        }
    }
}