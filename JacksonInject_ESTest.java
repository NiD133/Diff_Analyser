/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 09:12:34 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JacksonInject;
import com.fasterxml.jackson.annotation.OptBoolean;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JacksonInject_ESTest extends JacksonInject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      Boolean boolean1 = Boolean.valueOf(true);
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value(object0, boolean0, boolean1);
      Boolean boolean2 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean2);
      boolean boolean3 = jacksonInject_Value0.equals(jacksonInject_Value1);
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertFalse(jacksonInject_Value0.getUseInput());
      assertTrue(jacksonInject_Value1.hasId());
      assertFalse(jacksonInject_Value1.getUseInput());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId((Object) null);
      Boolean boolean0 = Boolean.valueOf(false);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean0);
      String string0 = jacksonInject_Value1.toString();
      assertEquals("JacksonInject.Value(id=null,useInput=null,optional=false)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean("");
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.construct((Object) null, boolean0, boolean1);
      boolean boolean2 = jacksonInject_Value0.willUseInput(false);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.construct(object0, boolean0, (Boolean) null);
      Boolean boolean1 = jacksonInject_Value0.getOptional();
      assertTrue(jacksonInject_Value0.hasId());
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean0);
      Boolean boolean1 = jacksonInject_Value1.getUseInput();
      assertTrue(jacksonInject_Value1.hasId());
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertNull(boolean1);
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = new Boolean("gJ%*=b`O<@AxM)o");
      Boolean boolean1 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value((Object) null, boolean0, boolean1);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional((Boolean) null);
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean0);
      JacksonInject.Value jacksonInject_Value2 = jacksonInject_Value1.withUseInput(boolean0);
      assertNotSame(jacksonInject_Value2, jacksonInject_Value1);
      assertFalse(jacksonInject_Value2.equals((Object)jacksonInject_Value1));
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
      assertTrue(jacksonInject_Value2.hasId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.EMPTY;
      Boolean boolean0 = Boolean.valueOf(false);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput(boolean0);
      JacksonInject.Value jacksonInject_Value2 = jacksonInject_Value1.withUseInput((Boolean) null);
      assertNotSame(jacksonInject_Value2, jacksonInject_Value1);
      assertTrue(jacksonInject_Value2.equals((Object)jacksonInject_Value0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.EMPTY;
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput(boolean0);
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value2 = jacksonInject_Value1.withId(object0);
      assertTrue(jacksonInject_Value2.hasId());
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withId(jacksonInject_Value0);
      assertTrue(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.construct((Object) null, (Boolean) null, boolean0);
      assertFalse(jacksonInject_Value0.hasId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value(object0, boolean0, boolean0);
      JacksonInject.Value jacksonInject_Value1 = JacksonInject.Value.construct(object0, boolean0, boolean0);
      boolean boolean1 = jacksonInject_Value1.equals(jacksonInject_Value0);
      assertTrue(boolean1);
      assertTrue(jacksonInject_Value0.hasId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      JacksonInject.Value jacksonInject_Value1 = JacksonInject.Value.forId(object0);
      boolean boolean0 = jacksonInject_Value1.equals(jacksonInject_Value0);
      assertTrue(boolean0);
      assertTrue(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.EMPTY;
      Boolean boolean0 = new Boolean("zH78ih{ZO&er");
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput(boolean0);
      boolean boolean1 = jacksonInject_Value1.equals(jacksonInject_Value0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value(object0, boolean0, boolean0);
      JacksonInject.Value jacksonInject_Value1 = JacksonInject.Value.construct((Object) "", boolean0, boolean0);
      boolean boolean1 = jacksonInject_Value1.equals(jacksonInject_Value0);
      assertFalse(boolean1);
      assertFalse(jacksonInject_Value1.hasId());
      assertFalse(jacksonInject_Value0.equals((Object)jacksonInject_Value1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = JacksonInject.Value.construct((Object) jacksonInject_Value0, boolean0, boolean0);
      boolean boolean1 = jacksonInject_Value1.equals(jacksonInject_Value0);
      assertFalse(boolean1);
      assertTrue(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      boolean boolean0 = jacksonInject_Value0.equals(jacksonInject_Value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      jacksonInject_Value0.willUseInput(false);
      assertTrue(jacksonInject_Value0.hasId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      JacksonInject.Value jacksonInject_Value1 = JacksonInject.Value.forId(jacksonInject_Value0);
      boolean boolean0 = jacksonInject_Value1.hasId();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      boolean boolean0 = jacksonInject_Value0.hasId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value(object0, boolean0, boolean0);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean0);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
      assertTrue(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional((Boolean) null);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withOptional(boolean0);
      boolean boolean1 = jacksonInject_Value0.equals(jacksonInject_Value1);
      assertTrue(jacksonInject_Value1.hasId());
      assertFalse(boolean1);
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("");
      JacksonInject.Value jacksonInject_Value0 = new JacksonInject.Value(object0, boolean0, boolean0);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput(boolean0);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
      assertTrue(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput((Boolean) null);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      Boolean boolean0 = Boolean.FALSE;
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withUseInput(boolean0);
      boolean boolean1 = jacksonInject_Value0.equals(jacksonInject_Value1);
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
      assertTrue(jacksonInject_Value1.hasId());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withId(object0);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withId((Object) null);
      assertSame(jacksonInject_Value1, jacksonInject_Value0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.construct((Object) boolean0, boolean0, boolean0);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withId((Object) null);
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
      assertFalse(jacksonInject_Value1.hasId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.forId(object0);
      JacksonInject.Value jacksonInject_Value1 = jacksonInject_Value0.withId(jacksonInject_Value0);
      assertTrue(jacksonInject_Value0.hasId());
      assertNotSame(jacksonInject_Value1, jacksonInject_Value0);
      assertFalse(jacksonInject_Value1.equals((Object)jacksonInject_Value0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.from((JacksonInject) null);
      assertNull(jacksonInject_Value0.getOptional());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JacksonInject jacksonInject0 = mock(JacksonInject.class, CALLS_REAL_METHODS);
      doReturn((OptBoolean) null).when(jacksonInject0).useInput();
      doReturn((String) null).when(jacksonInject0).value();
      // Undeclared exception!
      try { 
        JacksonInject.Value.from(jacksonInject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.JacksonInject$Value", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.EMPTY;
      Object object0 = jacksonInject_Value0.getId();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JacksonInject.Value jacksonInject_Value0 = JacksonInject.Value.empty();
      Class<JacksonInject> class0 = jacksonInject_Value0.valueFor();
      assertTrue(class0.isInterface());
  }
}
