/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:08:13 GMT 2025
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.date.SerialDate;
import org.jfree.chart.date.SpreadsheetDate;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultKeyedValueDataset_ESTest extends DefaultKeyedValueDataset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1670);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(serialDate0, 2958465);
      defaultKeyedValueDataset0.updateValue(0);
      assertTrue(defaultKeyedValueDataset0.getNotify());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-53);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(oHLCDataItem0, bigInteger0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)13;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(oHLCDataItem0, bigInteger0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1201.1136675752093), 1.0, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-93);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(simpleHistogramBin0, bigInteger0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals((byte) (-93), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.setValue((Comparable) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = null;
      try {
        defaultKeyedValueDataset0 = new DefaultKeyedValueDataset((Comparable) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1670);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(serialDate0, 2958465);
      Comparable comparable0 = defaultKeyedValueDataset0.getKey();
      assertSame(serialDate0, comparable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      defaultKeyedValueDataset1.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      defaultKeyedValueDataset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      boolean boolean0 = defaultKeyedValueDataset1.equals(defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(379);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(spreadsheetDate0, 2);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(spreadsheetDate0, 3);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      boolean boolean0 = defaultKeyedValueDataset0.equals(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset0.updateValue((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // updateValue: can't update null.
         //
         verifyException("org.jfree.data.general.DefaultKeyedValueDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(defaultKeyedValueDataset0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        defaultKeyedValueDataset1.updateValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(oHLCDataItem0, bigInteger0);
      Number number0 = defaultKeyedValueDataset0.getValue();
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      MockDate mockDate0 = new MockDate(0, 1, 0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 0.0, 0.0, 0.0);
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset(oHLCDataItem0, bigInteger0);
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(bigInteger0, bigInteger0);
      DefaultKeyedValueDataset defaultKeyedValueDataset1 = new DefaultKeyedValueDataset();
      boolean boolean0 = defaultKeyedValueDataset0.equals(defaultKeyedValueDataset1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      Object object0 = defaultKeyedValueDataset0.clone();
      boolean boolean0 = defaultKeyedValueDataset0.equals(object0);
      assertNotSame(object0, defaultKeyedValueDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2363), (-1655), 1600);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1600, (-1655), 1.0, 1600, (-1655));
      BigInteger bigInteger0 = BigInteger.TEN;
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset(oHLCDataItem0, bigInteger0);
      defaultKeyedValueDataset0.setValue(oHLCDataItem0, bigInteger0);
      assertTrue(defaultKeyedValueDataset0.getNotify());
  }
}
