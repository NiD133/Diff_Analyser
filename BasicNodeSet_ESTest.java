/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 19:58:15 GMT 2025
 */

package org.apache.commons.jxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class BasicNodeSet_ESTest extends BasicNodeSet_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void toString_WithUndefinedVariable_ThrowsIllegalArgumentException() throws Throwable {
        BasicVariables variables = new BasicVariables();
        QName undefinedVarName = new QName("5>?Fr~\"n B, <j");
        VariablePointer pointer = new VariablePointer(variables, undefinedVarName);
        pointer.setIndex(1805);
        
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        
        try {
            nodeSet.toString();
            fail("Expected IllegalArgumentException for undefined variable");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.jxpath.BasicVariables", e);
            assertTrue(e.getMessage().contains("No such variable: '5>?Fr~\"n B, <j'"));
        }
    }

    @Test(timeout = 4000)
    public void getValues_WithNullQNameVariable_ThrowsRuntimeException() throws Throwable {
        VariablePointer pointer = new VariablePointer((QName) null);
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        
        try {
            nodeSet.getValues();
            fail("Expected RuntimeException for undefined variable with null QName");
        } catch (RuntimeException e) {
            assertTrue(e.getMessage().contains("Undefined variable: null"));
        }
    }

    @Test(timeout = 4000)
    public void getValues_WithNullPointer_ThrowsNullPointerException() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add((Pointer) null);
        
        try {
            nodeSet.getValues();
            fail("Expected NullPointerException when dereferencing null pointer");
        } catch (NullPointerException e) {
            // Expected when processing null pointer in stream
        }
    }

    @Test(timeout = 4000)
    public void getValues_WithUndefinedVariable_ThrowsIllegalArgumentException() throws Throwable {
        BasicVariables variables = new BasicVariables();
        QName undefinedVarName = new QName("Y2:%V(;/u");
        VariablePointer pointer = new VariablePointer(variables, undefinedVarName);
        
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        
        try {
            nodeSet.getValues();
            fail("Expected IllegalArgumentException for undefined variable");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.jxpath.BasicVariables", e);
            assertTrue(e.getMessage().contains("No such variable: 'Y2:%V(;/u'"));
        }
    }

    @Test(timeout = 4000)
    public void getNodes_WithNullQNameVariable_ThrowsRuntimeException() throws Throwable {
        VariablePointer pointer = new VariablePointer((QName) null);
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        
        try {
            nodeSet.getNodes();
            fail("Expected RuntimeException for undefined variable with null QName");
        } catch (RuntimeException e) {
            assertTrue(e.getMessage().contains("Undefined variable: null"));
        }
    }

    @Test(timeout = 4000)
    public void getNodes_WithNullPointer_ThrowsNullPointerException() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add((Pointer) null);
        
        try {
            nodeSet.getNodes();
            fail("Expected NullPointerException when dereferencing null pointer");
        } catch (NullPointerException e) {
            // Expected when processing null pointer in stream
        }
    }

    @Test(timeout = 4000)
    public void getNodes_WithEmptyQName_ThrowsIllegalArgumentException() throws Throwable {
        BasicVariables variables = new BasicVariables();
        QName emptyName = new QName("", "");
        VariablePointer pointer = new VariablePointer(variables, emptyName);
        
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        
        try {
            nodeSet.getNodes();
            fail("Expected IllegalArgumentException for empty QName variable");
        } catch (IllegalArgumentException e) {
            verifyException("org.apache.commons.jxpath.BasicVariables", e);
            assertTrue(e.getMessage().contains("No such variable: ':'"));
        }
    }

    @Test(timeout = 4000)
    public void add_NullNodeSet_ThrowsNullPointerException() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        try {
            nodeSet.add((NodeSet) null);
            fail("Expected NullPointerException when adding null NodeSet");
        } catch (NullPointerException e) {
            // Expected when adding null NodeSet
        }
    }

    @Test(timeout = 4000)
    public void remove_NullPointer_DoesNothing() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        // Should not throw exception
        nodeSet.remove((Pointer) null);
    }

    @Test(timeout = 4000)
    public void getValues_WhenEmpty_ReturnsEmptyList() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        List<Object> values = nodeSet.getValues();
        assertTrue("Empty node set should return empty values list", values.isEmpty());
    }

    @Test(timeout = 4000)
    public void getPointers_WhenCalledTwice_ReturnsSameList() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        List<Pointer> firstCall = nodeSet.getPointers();
        List<Pointer> secondCall = nodeSet.getPointers();
        assertSame("Multiple calls to getPointers should return same list instance", firstCall, secondCall);
    }

    @Test(timeout = 4000)
    public void getNodes_WhenEmpty_ReturnsEmptyList() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        List<Object> nodes = nodeSet.getNodes();
        assertTrue("Empty node set should return empty nodes list", nodes.isEmpty());
    }

    @Test(timeout = 4000)
    public void add_NodeSetAfterAddingPointer_Succeeds() throws Throwable {
        BasicVariables variables = new BasicVariables();
        QName varName = new QName("D@-&EQH");
        VariablePointer pointer = new VariablePointer(variables, varName);
        
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add(pointer);
        // Should not throw when adding NodeSet containing pointers
        nodeSet.add((NodeSet) nodeSet);
    }

    @Test(timeout = 4000)
    public void add_SelfNodeSet_Succeeds() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        // Should not throw when adding self as NodeSet
        nodeSet.add((NodeSet) nodeSet);
    }

    @Test(timeout = 4000)
    public void toString_WhenEmpty_ReturnsEmptyBrackets() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        assertEquals("Empty node set should have empty bracket representation", "[]", nodeSet.toString());
    }

    @Test(timeout = 4000)
    public void addThenRemoveNullPointer_Succeeds() throws Throwable {
        BasicNodeSet nodeSet = new BasicNodeSet();
        nodeSet.add((Pointer) null);
        // Should not throw when removing null pointer
        nodeSet.remove((Pointer) null);
    }
}