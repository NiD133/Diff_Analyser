/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:23:43 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundedIterator_ESTest extends BoundedIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<Predicate<Object>> iterator0 = (Iterator<Predicate<Object>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null, (Object) null).when(iterator0).next();
      BoundedIterator<Predicate<Object>> boundedIterator0 = new BoundedIterator<Predicate<Object>>(iterator0, 1031L, 1031L);
      boundedIterator0.next();
      BoundedIterator<Predicate<Object>> boundedIterator1 = new BoundedIterator<Predicate<Object>>(boundedIterator0, 1031L, 0L);
      // Undeclared exception!
      try { 
        boundedIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() cannot be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 0L, 508L);
      boolean boolean0 = boundedIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Iterator<Boolean> iterator0 = linkedList0.iterator();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 1909L, 1909L);
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 5L, 5L);
      linkedList0.add((Object) iterator0);
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      linkedList0.add((Object) iterator0);
      BoundedIterator<Object> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Object>(iterator0, 1973L, 287L);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoundedIterator<Boolean> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Boolean>((Iterator<? extends Boolean>) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Predicate<Object>> iterator0 = (Iterator<Predicate<Object>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null).when(iterator0).next();
      BoundedIterator<Predicate<Object>> boundedIterator0 = new BoundedIterator<Predicate<Object>>(iterator0, 1031L, 1031L);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() cannot be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Closure<Integer> closure0 = NOPClosure.nopClosure();
      Iterator<Closure<Integer>> iterator0 = (Iterator<Closure<Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(closure0).when(iterator0).next();
      BoundedIterator<Closure<Integer>> boundedIterator0 = new BoundedIterator<Closure<Integer>>(iterator0, 0L, 909L);
      boundedIterator0.next();
      boundedIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<Closure<Integer>> iterator0 = (Iterator<Closure<Integer>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      BoundedIterator<Closure<Integer>> boundedIterator0 = new BoundedIterator<Closure<Integer>>(iterator0, 1L, 5275L);
      BoundedIterator<Closure<Integer>> boundedIterator1 = new BoundedIterator<Closure<Integer>>(boundedIterator0, 5275L, 0L);
      assertFalse(boundedIterator1.equals((Object)boundedIterator0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.iterator();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 0L, 0L);
      boolean boolean0 = boundedIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoundedIterator<Boolean> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Boolean>((Iterator<? extends Boolean>) null, 0L, (-1022L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoundedIterator<Boolean> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Boolean>((Iterator<? extends Boolean>) null, (-1007L), (-1007L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }
}
