/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:15:57 GMT 2025
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.apache.commons.collections4.set.CompositeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompositeSet_ESTest extends CompositeSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-3865));
      assertNotNull(integer0);
      assertEquals((-3865), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        compositeSet0.removeIf(predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 3);
      setArray0[0] = (Set<Object>) linkedHashSet0;
      setArray0[1] = (Set<Object>) linkedHashSet0;
      boolean boolean0 = linkedHashSet0.add(setArray0[1]);
      assertEquals(3, setArray0.length);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      setArray0[2] = (Set<Object>) linkedHashSet0;
      CompositeSet<Object> compositeSet0 = null;
      try {
        compositeSet0 = new CompositeSet<Object>(setArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      assertNotNull(uniquePredicate0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(uniquePredicate0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = compositeSet0.remove(uniquePredicate0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      compositeSet1.clear();
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 1);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains(linkedHashSet0));
      
      setArray0[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(linkedHashSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      Iterator<LinkedHashSet<Integer>> iterator0 = compositeSet3.iterator();
      assertEquals(1, setArray0.length);
      assertNotNull(iterator0);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet3.contains(linkedHashSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      compositeSet0.setMutator((CompositeSet.SetMutator<Integer>) null);
      assertNotSame(compositeSet0, compositeSet1);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray0[0]);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet4);
      assertFalse(compositeSet4.contains(linkedHashSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      
      compositeSet4.addComposited((Set<LinkedHashSet<Integer>>) compositeSet2, setArray0[0]);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet2, compositeSet4);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet4, compositeSet2);
      assertNotSame(compositeSet4, compositeSet3);
      assertFalse(compositeSet2.contains(linkedHashSet0));
      assertFalse(compositeSet4.contains(linkedHashSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      
      compositeSet2.addComposited((Set<LinkedHashSet<Integer>>) compositeSet3);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet2, compositeSet4);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertNotSame(compositeSet3, compositeSet4);
      
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      Integer integer1 = new Integer((-6));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-6), (int)integer1);
      
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer1);
      assertNotNull(equalPredicate0);
      assertFalse(integer1.equals((Object)integer0));
      
      Predicate<Integer> predicate1 = FalsePredicate.falsePredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      EqualPredicate<Integer> equalPredicate1 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate1);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(compositeSet0, compositeSet1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(compositeSet0.contains(integer0));
      assertFalse(compositeSet0.equals((Object)compositeSet1));
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains(integer0));
      assertFalse(set0.contains(integer0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(compositeSet0.equals((Object)compositeSet1));
      
      boolean boolean1 = compositeSet1.isEmpty();
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.contains((-6)));
      assertTrue(compositeSet1.contains(integer0));
      assertFalse(compositeSet1.contains((-6)));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(compositeSet1.equals((Object)compositeSet0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CompositeSet<CompositeSet<Object>> compositeSet5 = new CompositeSet<CompositeSet<Object>>();
      assertNotNull(compositeSet5);
      
      CompositeSet<CompositeSet<Object>> compositeSet6 = new CompositeSet<CompositeSet<Object>>(compositeSet5);
      assertNotNull(compositeSet6);
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      
      boolean boolean2 = compositeSet6.removeIf((java.util.function.Predicate<? super CompositeSet<Object>>) null);
      assertNotSame(compositeSet5, compositeSet6);
      assertNotSame(compositeSet6, compositeSet5);
      assertTrue(compositeSet5.equals((Object)compositeSet6));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>) null);
      assertNotNull(compositeSet0);
      
      boolean boolean0 = compositeSet0.removeIf((java.util.function.Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer(113);
      assertNotNull(integer0);
      assertEquals(113, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      assertFalse(compositeSet0.contains(113));
      
      Set<Object> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertFalse(compositeSet0.contains(113));
      assertFalse(set0.contains(113));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      compositeSet0.addComposited(set0);
      assertFalse(compositeSet0.contains(113));
      assertFalse(set0.contains(113));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet1.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean1 = compositeSet1.equals(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet0.contains(113));
      assertTrue(compositeSet1.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<CompositeSet<Integer>>[] setArray0 = (Set<CompositeSet<Integer>>[]) Array.newInstance(Set.class, 6);
      LinkedHashSet<CompositeSet<Integer>> linkedHashSet1 = new LinkedHashSet<CompositeSet<Integer>>();
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(compositeSet1));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      setArray0[0] = (Set<CompositeSet<Integer>>) linkedHashSet1;
      CompositeSet<CompositeSet<Integer>> compositeSet2 = new CompositeSet<CompositeSet<Integer>>(setArray0);
      assertEquals(6, setArray0.length);
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains(compositeSet1));
      
      setArray0[1] = (Set<CompositeSet<Integer>>) compositeSet2;
      CompositeSet<CompositeSet<Integer>> compositeSet3 = new CompositeSet<CompositeSet<Integer>>(setArray0[1]);
      assertEquals(6, setArray0.length);
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray0[2] = (Set<CompositeSet<Integer>>) compositeSet3;
      CompositeSet<CompositeSet<Integer>> compositeSet4 = new CompositeSet<CompositeSet<Integer>>(setArray0);
      assertEquals(6, setArray0.length);
      assertNotNull(compositeSet4);
      assertFalse(compositeSet4.contains(compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      
      setArray0[3] = (Set<CompositeSet<Integer>>) compositeSet4;
      LinkedHashSet<CompositeSet<Integer>> linkedHashSet2 = new LinkedHashSet<CompositeSet<Integer>>();
      assertNotNull(linkedHashSet2);
      assertFalse(linkedHashSet2.contains(compositeSet1));
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      
      setArray0[4] = (Set<CompositeSet<Integer>>) linkedHashSet2;
      CompositeSet<CompositeSet<Integer>> compositeSet5 = new CompositeSet<CompositeSet<Integer>>(setArray0[4]);
      assertEquals(6, setArray0.length);
      assertNotNull(compositeSet5);
      assertFalse(compositeSet5.contains(compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      
      setArray0[5] = (Set<CompositeSet<Integer>>) compositeSet5;
      CompositeSet<CompositeSet<Integer>> compositeSet6 = new CompositeSet<CompositeSet<Integer>>(setArray0);
      assertEquals(6, setArray0.length);
      assertNotNull(compositeSet6);
      assertFalse(compositeSet6.contains(compositeSet1));
      assertTrue(compositeSet6.equals((Object)compositeSet2));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
      
      Iterator<CompositeSet<Integer>> iterator0 = compositeSet6.iterator();
      assertEquals(6, setArray0.length);
      assertNotNull(iterator0);
      assertNotSame(compositeSet6, compositeSet5);
      assertNotSame(compositeSet6, compositeSet2);
      assertNotSame(compositeSet6, compositeSet3);
      assertNotSame(compositeSet6, compositeSet4);
      assertFalse(compositeSet6.contains(compositeSet1));
      assertTrue(compositeSet6.equals((Object)compositeSet2));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(compositeSet0);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[0] = (Set<Integer>) compositeSet1;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      setArray0[1] = (Set<Integer>) linkedHashSet0;
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains(integer0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      
      setArray0[2] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray0);
      assertEquals(3, setArray0.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.contains(integer0));
      assertFalse(compositeSet3.equals((Object)compositeSet2));
      assertFalse(compositeSet3.equals((Object)compositeSet1));
      assertFalse(compositeSet3.equals((Object)compositeSet0));
      
      // Undeclared exception!
      try { 
        compositeSet3.addComposited(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      LinkedHashSet<Boolean> linkedHashSet1 = new LinkedHashSet<Boolean>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(boolean0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      compositeSet0.hashCode();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 7);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Integer>) compositeSet0;
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      assertFalse(setArray1.equals((Object)setArray0));
      
      setArray1[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray1);
      assertEquals(1, setArray1.length);
      assertNotNull(compositeSet1);
      assertFalse(setArray1.equals((Object)setArray0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[1] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(setArray0[1]);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet2);
      assertFalse(setArray0.equals((Object)setArray1));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      setArray0[2] = (Set<Integer>) compositeSet2;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      setArray0[3] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet3);
      assertFalse(setArray0.equals((Object)setArray1));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray0[4] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(setArray0[2]);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet4);
      assertFalse(setArray0.equals((Object)setArray1));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      
      setArray0[5] = (Set<Integer>) compositeSet4;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      ConstantTransformer<Object, Object> constantTransformer0 = new ConstantTransformer<Object, Object>(compositeSet0);
      assertNotNull(constantTransformer0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(compositeSet0.equals((Object)compositeSet4));
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) constantTransformer0);
      assertNotNull(closure0);
      assertNotSame(compositeSet0, compositeSet4);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet0, compositeSet2);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(compositeSet0.equals((Object)compositeSet4));
      
      compositeSet4.forEach(closure0);
      assertEquals(7, setArray0.length);
      assertNotSame(setArray0, setArray1);
      assertNotSame(compositeSet0, compositeSet4);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet0, compositeSet2);
      assertNotSame(compositeSet4, compositeSet1);
      assertNotSame(compositeSet4, compositeSet0);
      assertNotSame(compositeSet4, compositeSet3);
      assertNotSame(compositeSet4, compositeSet2);
      assertFalse(setArray0.equals((Object)setArray1));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(compositeSet0.equals((Object)compositeSet4));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      
      setArray0[6] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet5);
      assertFalse(setArray0.equals((Object)setArray1));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>((Predicate<? super Integer>[]) null);
      assertNotNull(anyPredicate0);
      
      OnePredicate<Integer> onePredicate0 = new OnePredicate<Integer>((Predicate<? super Integer>[]) null);
      assertNotNull(onePredicate0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedHashSet1.add(integer0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.contains(0));
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(boolean0);
      
      Predicate<Integer> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) onePredicate0);
      assertNotNull(predicate0);
      
      java.util.function.Predicate<Integer> predicate1 = anyPredicate0.or(predicate0);
      assertNotNull(predicate1);
      
      // Undeclared exception!
      try { 
        compositeSet5.removeIf(anyPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AnyPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet1.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      List<Set<Integer>> list0 = compositeSet1.getSets();
      assertNotNull(list0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet1.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean1 = compositeSet1.isEmpty();
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet1.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      assertNotNull(compositeSet2);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet1.contains(integer0));
      assertTrue(compositeSet2.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      boolean boolean2 = compositeSet2.retainAll(list0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertFalse(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet1.contains(integer0));
      assertFalse(compositeSet2.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      setArray0[1] = (Set<Integer>) linkedHashSet0;
      setArray0[2] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray0);
      assertEquals(3, setArray0.length);
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(integer0));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      
      Set<Integer> set0 = compositeSet1.toSet();
      assertNotNull(set0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet3);
      assertFalse(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet1.contains(integer0));
      assertFalse(set0.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(compositeSet1.equals((Object)compositeSet3));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      boolean boolean3 = compositeSet2.isEmpty();
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet3);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet2, compositeSet1);
      assertFalse(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet1.contains(integer0));
      assertFalse(compositeSet2.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(compositeSet1.equals((Object)compositeSet3));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      List<Set<Integer>> list0 = compositeSet0.getSets();
      assertNotNull(list0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean1 = compositeSet0.isEmpty();
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = compositeSet0.retainAll(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CompositeSet<Integer> compositeSet1 = null;
      try {
        compositeSet1 = new CompositeSet<Integer>(linkedHashSetArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(object0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(linkedHashSet0.contains(object0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean1 = compositeSet0.remove(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedHashSet<Boolean> linkedHashSet1 = new LinkedHashSet<Boolean>();
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(boolean0));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean2 = compositeSet0.equals(linkedHashSet1);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertFalse(linkedHashSet1.contains(boolean0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        compositeSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-468));
      assertNotNull(integer0);
      assertEquals((-468), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Stream<Integer> stream0 = compositeSet0.parallelStream();
      assertNotNull(stream0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Integer> iterator0 = compositeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      int int0 = compositeSet0.size();
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.contains(int0));
      assertFalse(compositeSet0.contains(int0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, int0);
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.contains(int0));
      assertFalse(compositeSet0.contains(int0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(set0.contains(int0));
      assertTrue(set0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = compositeSet0.isEmpty();
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      assertNotNull(equalPredicate0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        compositeSet0.addAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer(512);
      assertNotNull(integer0);
      assertEquals(512, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(512));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      assertFalse(compositeSet0.contains(512));
      
      Set<Object> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertFalse(compositeSet0.contains(512));
      assertFalse(set0.contains(512));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      compositeSet0.addComposited(set0);
      assertFalse(compositeSet0.contains(512));
      assertFalse(set0.contains(512));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean1 = compositeSet0.containsAll(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(512));
      assertFalse(compositeSet0.contains(512));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains((-6)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      linkedHashSetArray0[7] = linkedHashSet0;
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      assertFalse(compositeSet0.contains((-6)));
      
      CompositeSet.SetMutator<Object> compositeSet_SetMutator0 = compositeSet0.getMutator();
      assertNull(compositeSet_SetMutator0);
      assertFalse(compositeSet0.contains((-6)));
      
      compositeSet0.setMutator((CompositeSet.SetMutator<Object>) null);
      assertFalse(compositeSet0.contains((-6)));
      
      compositeSet0.addComposited((Set<Object>) null);
      assertFalse(compositeSet0.contains((-6)));
      
      boolean boolean1 = compositeSet0.containsAll(linkedHashSet0);
      assertTrue(linkedHashSet0.contains((-6)));
      assertFalse(compositeSet0.contains((-6)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      Integer integer1 = new Integer((-6));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-6), (int)integer1);
      
      boolean boolean1 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        compositeSet0.toArray(linkedHashSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 2);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Object>) compositeSet0;
      setArray0[1] = (Set<Object>) compositeSet0;
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      assertEquals(2, setArray0.length);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      compositeSet1.clear();
      assertEquals(2, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      int int0 = compositeSet1.size();
      assertEquals(2, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(int0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = linkedHashSet0.add(integer1);
      assertTrue(linkedHashSet0.contains(int0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      boolean boolean1 = compositeSet0.isEmpty();
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains(0));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet2);
      assertTrue(linkedHashSet0.contains(int0));
      assertTrue(compositeSet2.contains(int0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 0);
      // Undeclared exception!
      try { 
        compositeSet2.toArray(linkedHashSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer((-3881));
      assertNotNull(integer0);
      assertEquals((-3881), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = compositeSet0.toArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean1 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = compositeSet0.isEmpty();
      assertFalse(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer0 = new Integer((-2073));
      assertNotNull(integer0);
      assertEquals((-2073), (int)integer0);
      
      boolean boolean0 = compositeSet0.contains(integer0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains((-2073)));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertFalse(boolean0);
      
      Stream<Integer> stream0 = compositeSet1.stream();
      assertEquals(1, setArray0.length);
      assertNotNull(stream0);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyInt());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer1 = new Integer((-3018));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3018), (int)integer1);
      
      boolean boolean1 = compositeSet1.add(integer1);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = compositeSet1.remove((Object) null);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      compositeSet1.addComposited(setArray0[0], (Set<Integer>) compositeSet0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet0.contains((-2073)));
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      int int0 = compositeSet1.size();
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertEquals(0, int0);
      
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 5);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet2);
      
      setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      setArray1[1] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      Set<LinkedHashSet<Integer>> set0 = compositeSet2.toSet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      setArray1[2] = set0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray1[3] = (Set<LinkedHashSet<Integer>>) compositeSet3;
      Set<LinkedHashSet<Integer>> set1 = compositeSet2.toSet();
      assertNotNull(set1);
      assertNotSame(set1, set0);
      assertNotSame(compositeSet2, compositeSet3);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      
      setArray1[4] = set1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      
      int int1 = compositeSet0.size();
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains((-2073)));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(compositeSet1);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet5);
      assertFalse(compositeSet1.contains((-2073)));
      assertFalse(compositeSet5.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      
      Object[] objectArray0 = compositeSet5.toArray();
      assertEquals(1, setArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertNotSame(compositeSet1, compositeSet5);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(compositeSet5, compositeSet1);
      assertNotSame(compositeSet5, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertFalse(compositeSet5.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet5));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      
      compositeSet1.addComposited(setArray0[0]);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet5);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-2073)));
      assertTrue(compositeSet1.equals((Object)compositeSet5));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator1 = compositeSet0.getMutator();
      assertEquals(1, setArray0.length);
      assertNull(compositeSet_SetMutator1);
      assertNotSame(compositeSet0, compositeSet5);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains((-2073)));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet5));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>[]) null);
      assertNotNull(compositeSet0);
      
      compositeSet0.hashCode();
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      CompositeSet<Closure<Integer>> compositeSet1 = new CompositeSet<Closure<Integer>>();
      assertNotNull(compositeSet1);
      
      boolean boolean0 = compositeSet1.equals(compositeSet0);
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains(integer0));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      
      CompositeSet<Object> compositeSet3 = new CompositeSet<Object>();
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(1));
      
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>(compositeSet3);
      assertNotNull(compositeSet4);
      assertFalse(compositeSet3.contains(1));
      assertFalse(compositeSet4.contains(1));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      
      boolean boolean1 = compositeSet2.retainAll(compositeSet4);
      assertNotSame(compositeSet2, compositeSet0);
      assertNotSame(compositeSet3, compositeSet4);
      assertNotSame(compositeSet4, compositeSet3);
      assertFalse(compositeSet2.contains(integer0));
      assertFalse(compositeSet3.contains(1));
      assertFalse(compositeSet4.contains(1));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet4));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<Closure<Integer>> set0 = new LinkedHashSet<Closure<Integer>>();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>();
      assertNotNull(compositeSet5);
      assertFalse(compositeSet5.contains(integer0));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      
      // Undeclared exception!
      try { 
        compositeSet0.addAll(compositeSet2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet0);
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<Integer> iterator0 = compositeSet2.iterator();
      assertNotNull(iterator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      compositeSet2.clear();
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<LinkedHashSet<Integer>> iterator1 = compositeSet0.iterator();
      assertNotNull(iterator1);
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeSet_SetMutator0).addAll(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyCollection());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet3);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet3, compositeSet0);
      
      Integer[] integerArray0 = new Integer[0];
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(nonePredicate0);
      
      predicateArray0[0] = (Predicate<Integer>) nonePredicate0;
      predicateArray0[1] = predicateArray0[0];
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(nonePredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(nullIsExceptionPredicate0);
      
      predicateArray0[2] = (Predicate<Integer>) nullIsExceptionPredicate0;
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate0);
      
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>(predicateArray0[2], equalPredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(orPredicate0);
      
      predicateArray0[3] = (Predicate<Integer>) orPredicate0;
      Predicate<Integer> predicate0 = FalsePredicate.falsePredicate();
      assertNotNull(predicate0);
      
      predicateArray0[4] = predicate0;
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicateArray0[2]);
      assertEquals(8, predicateArray0.length);
      assertNotNull(notPredicate0);
      
      predicateArray0[5] = (Predicate<Integer>) notPredicate0;
      EqualPredicate<Integer> equalPredicate1 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate1);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      predicateArray0[6] = (Predicate<Integer>) equalPredicate1;
      OrPredicate<Integer> orPredicate1 = new OrPredicate<Integer>(predicateArray0[0], predicateArray0[6]);
      assertEquals(8, predicateArray0.length);
      assertNotNull(orPredicate1);
      assertFalse(orPredicate1.equals((Object)orPredicate0));
      
      predicateArray0[7] = (Predicate<Integer>) orPredicate1;
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(anyPredicate0);
      
      boolean boolean1 = compositeSet1.removeIf(anyPredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotSame(compositeSet1, compositeSet2);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer[] integerArray1 = compositeSet1.toArray(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(compositeSet1, compositeSet2);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      boolean boolean2 = compositeSet1.addAll(compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(boolean2);
      
      compositeSet2.removeComposited(compositeSet1);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer0 = new Integer((-2073));
      assertNotNull(integer0);
      assertEquals((-2073), (int)integer0);
      
      boolean boolean0 = compositeSet0.contains(integer0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertFalse(boolean0);
      
      boolean boolean1 = compositeSet0.contains(integer0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Stream<Integer> stream0 = compositeSet1.stream();
      assertEquals(1, setArray0.length);
      assertNotNull(stream0);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyInt());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer1 = new Integer((-3018));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3018), (int)integer1);
      
      boolean boolean2 = compositeSet1.add(integer1);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = compositeSet1.remove((Object) null);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      compositeSet1.addComposited(setArray0[0], (Set<Integer>) compositeSet0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet0.contains(integer1));
      assertFalse(compositeSet1.contains(integer1));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      int int0 = compositeSet1.size();
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertEquals(0, int0);
      
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 5);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet2);
      
      setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Set<LinkedHashSet<Integer>> set0 = compositeSet2.toSet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      setArray1[2] = set0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray1[4] = setArray1[0];
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      
      Set<LinkedHashSet<Integer>> set1 = compositeSet4.toSet();
      assertEquals(5, setArray1.length);
      assertNotNull(set1);
      assertNotSame(compositeSet4, compositeSet2);
      assertNotSame(compositeSet4, compositeSet3);
      assertNotSame(set1, set0);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(set1.equals((Object)set0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      assertEquals(1, setArray0.length);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer0 = new Integer((-2073));
      assertNotNull(integer0);
      assertEquals((-2073), (int)integer0);
      
      boolean boolean0 = compositeSet0.contains(integer0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertFalse(compositeSet0.contains(integer0));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertFalse(boolean0);
      
      Stream<Integer> stream0 = compositeSet1.stream();
      assertEquals(1, setArray0.length);
      assertNotNull(stream0);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyInt());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(integer0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Integer integer1 = new Integer((-3018));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3018), (int)integer1);
      
      boolean boolean1 = compositeSet1.add(integer1);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-3018)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = compositeSet1.remove((Object) null);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains((-3018)));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      compositeSet1.addComposited(setArray0[0], (Set<Integer>) compositeSet0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet0.contains((-3018)));
      assertFalse(compositeSet1.contains((-3018)));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      int int0 = compositeSet1.size();
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet1.contains(int0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertEquals(0, int0);
      
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 5);
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet2);
      
      setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      setArray1[1] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      Set<LinkedHashSet<Integer>> set0 = compositeSet2.toSet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      setArray1[2] = set0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray1[3] = (Set<LinkedHashSet<Integer>>) compositeSet3;
      Set<LinkedHashSet<Integer>> set1 = compositeSet2.toSet();
      assertNotNull(set1);
      assertNotSame(set1, set0);
      assertNotSame(compositeSet2, compositeSet3);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      
      setArray1[4] = set1;
      CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      
      Set<LinkedHashSet<Integer>> set2 = compositeSet4.toSet();
      assertEquals(5, setArray1.length);
      assertNotNull(set2);
      assertNotSame(compositeSet4, compositeSet3);
      assertNotSame(compositeSet4, compositeSet2);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      
      // Undeclared exception!
      try { 
        compositeSet2.addAll(set2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = compositeSet0.remove(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 0);
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet0);
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet1);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      List<Set<LinkedHashSet<Integer>>> list0 = compositeSet2.getSets();
      assertEquals(0, setArray0.length);
      assertNotNull(list0);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet0, compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet2, compositeSet0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 5);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet3);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      setArray1[0] = (Set<Integer>) compositeSet3;
      DefaultEquator<LinkedHashSet<Integer>> defaultEquator0 = DefaultEquator.defaultEquator();
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(defaultEquator0);
      
      Predicate<LinkedHashSet<Integer>> predicate0 = EqualPredicate.equalPredicate(linkedHashSet0, (Equator<LinkedHashSet<Integer>>) defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotNull(predicate0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = compositeSet1.removeIf(predicate0);
      assertEquals(0, setArray0.length);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet0, compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet0.contains(linkedHashSet0));
      assertFalse(compositeSet1.contains(linkedHashSet0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertFalse(boolean0);
      
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(compositeSet3);
      assertNotNull(compositeSet4);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      
      setArray1[1] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>();
      assertNotNull(compositeSet5);
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      
      setArray1[2] = (Set<Integer>) compositeSet5;
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet6);
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
      
      setArray1[3] = (Set<Integer>) compositeSet6;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      setArray1[4] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>(setArray1);
      assertEquals(5, setArray1.length);
      assertNotNull(compositeSet7);
      assertTrue(compositeSet7.equals((Object)compositeSet5));
      assertTrue(compositeSet7.equals((Object)compositeSet3));
      assertTrue(compositeSet7.equals((Object)compositeSet6));
      assertTrue(compositeSet7.equals((Object)compositeSet4));
      
      Integer integer0 = new Integer((-299));
      assertNotNull(integer0);
      assertEquals((-299), (int)integer0);
      
      boolean boolean1 = linkedHashSet1.add(integer0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.contains((-299)));
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Predicate<Integer> predicate1 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate1);
      
      boolean boolean2 = compositeSet7.removeIf(predicate1);
      assertEquals(5, setArray1.length);
      assertNotSame(compositeSet7, compositeSet4);
      assertNotSame(compositeSet7, compositeSet6);
      assertNotSame(compositeSet7, compositeSet3);
      assertNotSame(compositeSet7, compositeSet5);
      assertFalse(compositeSet7.contains((-299)));
      assertTrue(compositeSet7.equals((Object)compositeSet5));
      assertTrue(compositeSet7.equals((Object)compositeSet3));
      assertTrue(compositeSet7.equals((Object)compositeSet6));
      assertTrue(compositeSet7.equals((Object)compositeSet4));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator0 = compositeSet1.getMutator();
      assertEquals(0, setArray0.length);
      assertNull(compositeSet_SetMutator0);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet0, compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet0);
      assertFalse(compositeSet0.contains(linkedHashSet0));
      assertFalse(compositeSet1.contains(linkedHashSet0));
      assertTrue(compositeSet0.equals((Object)compositeSet2));
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      CompositeSet<Predicate<Integer>> compositeSet8 = new CompositeSet<Predicate<Integer>>();
      assertNotNull(compositeSet8);
      assertFalse(compositeSet8.contains(predicate1));
      
      compositeSet8.addComposited((Set<Predicate<Integer>>[]) null);
      assertFalse(compositeSet8.contains(predicate1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      assertNotNull(uniquePredicate0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(uniquePredicate0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean1 = compositeSet0.containsAll(linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = compositeSet0.isEmpty();
      assertTrue(linkedHashSet0.contains(integer0));
      assertTrue(compositeSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Set<Closure<Integer>>[] setArray0 = (Set<Closure<Integer>>[]) Array.newInstance(Set.class, 7);
      CompositeSet<Closure<Integer>> compositeSet0 = new CompositeSet<Closure<Integer>>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Closure<Integer>>) compositeSet0;
      LinkedHashSet<Closure<Integer>> linkedHashSet0 = new LinkedHashSet<Closure<Integer>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Closure<Integer>> compositeSet1 = new CompositeSet<Closure<Integer>>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[1] = (Set<Closure<Integer>>) compositeSet1;
      CompositeSet<Closure<Integer>> compositeSet2 = new CompositeSet<Closure<Integer>>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      setArray0[2] = (Set<Closure<Integer>>) compositeSet2;
      LinkedHashSet<Closure<Integer>> linkedHashSet1 = new LinkedHashSet<Closure<Integer>>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      setArray0[3] = (Set<Closure<Integer>>) linkedHashSet1;
      CompositeSet<Closure<Integer>> compositeSet3 = new CompositeSet<Closure<Integer>>(compositeSet2);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      boolean boolean0 = compositeSet3.retainAll(setArray0[2]);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet2, compositeSet0);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet1);
      assertNotSame(compositeSet3, compositeSet2);
      assertNotSame(compositeSet3, compositeSet0);
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertFalse(boolean0);
      
      setArray0[4] = (Set<Closure<Integer>>) compositeSet3;
      CompositeSet<Closure<Integer>> compositeSet4 = new CompositeSet<Closure<Integer>>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      
      setArray0[5] = (Set<Closure<Integer>>) compositeSet4;
      CompositeSet<Closure<Integer>> compositeSet5 = new CompositeSet<Closure<Integer>>();
      assertNotNull(compositeSet5);
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      
      setArray0[6] = (Set<Closure<Integer>>) compositeSet5;
      boolean boolean1 = linkedHashSet0.contains(linkedHashSet1);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1);
      
      CompositeSet<Closure<Integer>> compositeSet6 = new CompositeSet<Closure<Integer>>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet6);
      assertTrue(compositeSet6.equals((Object)compositeSet2));
      assertTrue(compositeSet6.equals((Object)compositeSet0));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      assertTrue(compositeSet6.equals((Object)compositeSet1));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
      
      boolean boolean2 = linkedHashSet0.add((Closure<Integer>) null);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(boolean2);
      
      Spliterator<Closure<Integer>> spliterator0 = compositeSet6.spliterator();
      assertEquals(7, setArray0.length);
      assertNotNull(spliterator0);
      assertNotSame(compositeSet6, compositeSet4);
      assertNotSame(compositeSet6, compositeSet0);
      assertNotSame(compositeSet6, compositeSet1);
      assertNotSame(compositeSet6, compositeSet2);
      assertNotSame(compositeSet6, compositeSet3);
      assertNotSame(compositeSet6, compositeSet5);
      assertFalse(compositeSet6.equals((Object)compositeSet4));
      assertFalse(compositeSet6.equals((Object)compositeSet0));
      assertFalse(compositeSet6.equals((Object)compositeSet1));
      assertFalse(compositeSet6.equals((Object)compositeSet2));
      assertFalse(compositeSet6.equals((Object)compositeSet3));
      assertFalse(compositeSet6.equals((Object)compositeSet5));
      
      boolean boolean3 = compositeSet6.removeAll(compositeSet2);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet6, compositeSet4);
      assertNotSame(compositeSet6, compositeSet0);
      assertNotSame(compositeSet6, compositeSet1);
      assertNotSame(compositeSet6, compositeSet2);
      assertNotSame(compositeSet6, compositeSet3);
      assertNotSame(compositeSet6, compositeSet5);
      assertNotSame(compositeSet2, compositeSet5);
      assertNotSame(compositeSet2, compositeSet0);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet2, compositeSet4);
      assertNotSame(compositeSet2, compositeSet6);
      assertNotSame(compositeSet2, compositeSet3);
      assertTrue(compositeSet6.equals((Object)compositeSet2));
      assertTrue(compositeSet6.equals((Object)compositeSet0));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      assertTrue(compositeSet6.equals((Object)compositeSet1));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(compositeSet2.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet5));
      assertTrue(compositeSet2.equals((Object)compositeSet6));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(boolean3);
      
      boolean boolean4 = compositeSet4.removeAll(compositeSet3);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet2, compositeSet5);
      assertNotSame(compositeSet2, compositeSet0);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet2, compositeSet4);
      assertNotSame(compositeSet2, compositeSet6);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet5);
      assertNotSame(compositeSet3, compositeSet6);
      assertNotSame(compositeSet3, compositeSet1);
      assertNotSame(compositeSet3, compositeSet2);
      assertNotSame(compositeSet3, compositeSet4);
      assertNotSame(compositeSet3, compositeSet0);
      assertNotSame(compositeSet4, compositeSet0);
      assertNotSame(compositeSet4, compositeSet5);
      assertNotSame(compositeSet4, compositeSet2);
      assertNotSame(compositeSet4, compositeSet6);
      assertNotSame(compositeSet4, compositeSet1);
      assertNotSame(compositeSet4, compositeSet3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(compositeSet2.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet5));
      assertTrue(compositeSet2.equals((Object)compositeSet6));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet4));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet6));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(compositeSet3.equals((Object)compositeSet5));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet6));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet5));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertFalse(boolean4);
      
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>();
      assertNotNull(compositeSet7);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean5 = linkedHashSet0.contains(object0);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      int int0 = compositeSet3.size();
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet2, compositeSet5);
      assertNotSame(compositeSet2, compositeSet0);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet2, compositeSet4);
      assertNotSame(compositeSet2, compositeSet6);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet5);
      assertNotSame(compositeSet3, compositeSet6);
      assertNotSame(compositeSet3, compositeSet1);
      assertNotSame(compositeSet3, compositeSet2);
      assertNotSame(compositeSet3, compositeSet4);
      assertNotSame(compositeSet3, compositeSet0);
      assertTrue(compositeSet2.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet5));
      assertTrue(compositeSet2.equals((Object)compositeSet6));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet4));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet6));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(compositeSet3.equals((Object)compositeSet5));
      assertEquals(0, int0);
      
      int int1 = compositeSet7.size();
      assertFalse(compositeSet7.contains(int1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean6 = compositeSet5.removeAll(setArray0[1]);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet5, compositeSet4);
      assertNotSame(compositeSet5, compositeSet2);
      assertNotSame(compositeSet5, compositeSet0);
      assertNotSame(compositeSet5, compositeSet6);
      assertNotSame(compositeSet5, compositeSet1);
      assertNotSame(compositeSet5, compositeSet3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet6));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertFalse(boolean6);
      
      List<Set<Integer>> list0 = compositeSet7.getSets();
      assertNotNull(list0);
      assertFalse(compositeSet7.contains(int1));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 7);
      CompositeSet<LinkedHashSet<Integer>> compositeSet8 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet8);
      
      setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet8;
      CompositeSet<LinkedHashSet<Integer>> compositeSet9 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet8);
      assertNotNull(compositeSet9);
      assertTrue(compositeSet9.equals((Object)compositeSet8));
      
      setArray1[1] = (Set<LinkedHashSet<Integer>>) compositeSet9;
      CompositeSet<LinkedHashSet<Integer>> compositeSet10 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet9);
      assertNotNull(compositeSet10);
      assertTrue(compositeSet9.equals((Object)compositeSet8));
      assertTrue(compositeSet10.equals((Object)compositeSet9));
      assertTrue(compositeSet10.equals((Object)compositeSet8));
      assertTrue(compositeSet8.equals((Object)compositeSet9));
      
      setArray1[2] = (Set<LinkedHashSet<Integer>>) compositeSet10;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Integer>>();
      assertNotNull(linkedHashSet2);
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals(0, linkedHashSet2.size());
      
      setArray1[3] = (Set<LinkedHashSet<Integer>>) linkedHashSet2;
      CompositeSet<LinkedHashSet<Integer>> compositeSet11 = new CompositeSet<LinkedHashSet<Integer>>(setArray1[3]);
      assertEquals(7, setArray1.length);
      assertNotNull(compositeSet11);
      assertTrue(compositeSet11.equals((Object)compositeSet10));
      assertTrue(compositeSet11.equals((Object)compositeSet9));
      assertTrue(compositeSet11.equals((Object)compositeSet8));
      
      setArray1[4] = (Set<LinkedHashSet<Integer>>) compositeSet11;
      Set<LinkedHashSet<Integer>> set0 = compositeSet10.toSet();
      assertNotNull(set0);
      assertNotSame(compositeSet9, compositeSet10);
      assertNotSame(compositeSet9, compositeSet11);
      assertNotSame(compositeSet9, compositeSet8);
      assertNotSame(compositeSet10, compositeSet8);
      assertNotSame(compositeSet10, compositeSet9);
      assertNotSame(compositeSet10, compositeSet11);
      assertNotSame(compositeSet8, compositeSet11);
      assertNotSame(compositeSet8, compositeSet9);
      assertNotSame(compositeSet8, compositeSet10);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(compositeSet9.equals((Object)compositeSet10));
      assertTrue(compositeSet9.equals((Object)compositeSet11));
      assertTrue(compositeSet9.equals((Object)compositeSet8));
      assertTrue(compositeSet10.equals((Object)compositeSet9));
      assertTrue(compositeSet10.equals((Object)compositeSet11));
      assertTrue(compositeSet10.equals((Object)compositeSet8));
      assertTrue(compositeSet8.equals((Object)compositeSet10));
      assertTrue(compositeSet8.equals((Object)compositeSet11));
      assertTrue(compositeSet8.equals((Object)compositeSet9));
      
      setArray1[5] = set0;
      CompositeSet<LinkedHashSet<Integer>> compositeSet12 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(7, setArray1.length);
      assertNotNull(compositeSet12);
      assertTrue(compositeSet12.equals((Object)compositeSet9));
      assertTrue(compositeSet12.equals((Object)compositeSet11));
      assertTrue(compositeSet12.equals((Object)compositeSet10));
      assertTrue(compositeSet12.equals((Object)compositeSet8));
      
      setArray1[6] = (Set<LinkedHashSet<Integer>>) compositeSet12;
      CompositeSet<LinkedHashSet<Integer>> compositeSet13 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
      assertEquals(7, setArray1.length);
      assertNotNull(compositeSet13);
      assertTrue(compositeSet13.equals((Object)compositeSet8));
      assertTrue(compositeSet13.equals((Object)compositeSet9));
      assertTrue(compositeSet13.equals((Object)compositeSet10));
      assertTrue(compositeSet13.equals((Object)compositeSet12));
      assertTrue(compositeSet13.equals((Object)compositeSet11));
      
      Iterator<LinkedHashSet<Integer>> iterator0 = compositeSet13.iterator();
      assertEquals(7, setArray1.length);
      assertNotNull(iterator0);
      assertNotSame(compositeSet13, compositeSet9);
      assertNotSame(compositeSet13, compositeSet10);
      assertNotSame(compositeSet13, compositeSet11);
      assertNotSame(compositeSet13, compositeSet12);
      assertNotSame(compositeSet13, compositeSet8);
      assertTrue(compositeSet13.equals((Object)compositeSet8));
      assertTrue(compositeSet13.equals((Object)compositeSet9));
      assertTrue(compositeSet13.equals((Object)compositeSet10));
      assertTrue(compositeSet13.equals((Object)compositeSet12));
      assertTrue(compositeSet13.equals((Object)compositeSet11));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      compositeSet0.removeComposited(compositeSet1);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      setArray0[0] = (Set<Integer>) compositeSet0;
      compositeSet1.addComposited(setArray0);
      assertEquals(1, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      List<Set<Integer>> list0 = compositeSet0.getSets();
      assertNotNull(list0);
      assertNotSame(compositeSet0, compositeSet1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertNotSame(compositeSet0, compositeSet1);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(boolean0);
      
      boolean boolean1 = compositeSet0.retainAll(compositeSet1);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertNotSame(compositeSet0, compositeSet1);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      
      boolean boolean2 = compositeSet1.isEmpty();
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(1720);
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(1720));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertFalse(linkedHashSet0.contains(1720));
      assertFalse(compositeSet0.contains(1720));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(1720));
      assertFalse(compositeSet0.contains(1720));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(compositeSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0, (Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(object0));
      assertTrue(compositeSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(object0));
      assertFalse(compositeSet0.contains(object0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Integer integer0 = new Integer((-468));
      assertNotNull(integer0);
      assertEquals((-468), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains((-468)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains((-468)));
      assertTrue(compositeSet0.contains((-468)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Stream<Integer> stream0 = compositeSet0.parallelStream();
      assertNotNull(stream0);
      assertTrue(linkedHashSet0.contains((-468)));
      assertTrue(compositeSet0.contains((-468)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Iterator<Integer> iterator0 = compositeSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains((-468)));
      assertTrue(compositeSet0.contains((-468)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertTrue(linkedHashSet0.contains((-468)));
      assertTrue(compositeSet0.contains((-468)));
      assertTrue(set0.contains((-468)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Integer>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet0);
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<Integer> iterator0 = compositeSet2.iterator();
      assertNotNull(iterator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      compositeSet2.clear();
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<LinkedHashSet<Integer>> iterator1 = compositeSet0.iterator();
      assertNotNull(iterator1);
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(compositeSet_SetMutator0).addAll(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyCollection());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      
      compositeSet3.addComposited((Set<LinkedHashSet<Integer>>) compositeSet0, (Set<LinkedHashSet<Integer>>) compositeSet0);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet3, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet3);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet3, compositeSet0);
      
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate0);
      
      Predicate<Integer> predicate1 = FalsePredicate.falsePredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      EqualPredicate<Integer> equalPredicate1 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate1);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      boolean boolean1 = compositeSet1.addAll(compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(boolean1 == boolean0);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(boolean1);
      
      compositeSet2.removeComposited(compositeSet1);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      int int0 = compositeSet2.size();
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertFalse(compositeSet1.contains(int0));
      assertFalse(compositeSet2.contains(int0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet0);
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<Integer> iterator0 = compositeSet2.iterator();
      assertNotNull(iterator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      compositeSet2.clear();
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      Iterator<LinkedHashSet<Integer>> iterator1 = compositeSet0.iterator();
      assertNotNull(iterator1);
      
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeSet_SetMutator0).addAll(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyCollection());
      compositeSet1.setMutator(compositeSet_SetMutator0);
      assertNotSame(compositeSet1, compositeSet2);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(compositeSet0);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      
      compositeSet3.addComposited((Set<LinkedHashSet<Integer>>) compositeSet0, (Set<LinkedHashSet<Integer>>) compositeSet0);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet3, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      
      compositeSet0.addComposited((Set<LinkedHashSet<Integer>>) compositeSet3);
      assertNotSame(compositeSet0, compositeSet3);
      assertNotSame(compositeSet3, compositeSet0);
      
      Integer[] integerArray0 = new Integer[0];
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<Integer> nonePredicate0 = new NonePredicate<Integer>(predicateArray0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(nonePredicate0);
      
      predicateArray0[0] = (Predicate<Integer>) nonePredicate0;
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[1] = predicate0;
      NullIsExceptionPredicate<Integer> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Integer>(nonePredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(nullIsExceptionPredicate0);
      
      predicateArray0[2] = (Predicate<Integer>) nullIsExceptionPredicate0;
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate0);
      
      OrPredicate<Integer> orPredicate0 = new OrPredicate<Integer>(predicateArray0[2], equalPredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(orPredicate0);
      
      predicateArray0[3] = (Predicate<Integer>) orPredicate0;
      Predicate<Integer> predicate1 = FalsePredicate.falsePredicate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[4] = predicate1;
      NotPredicate<Integer> notPredicate0 = new NotPredicate<Integer>(predicateArray0[2]);
      assertEquals(8, predicateArray0.length);
      assertNotNull(notPredicate0);
      
      predicateArray0[5] = (Predicate<Integer>) notPredicate0;
      EqualPredicate<Integer> equalPredicate1 = new EqualPredicate<Integer>((Integer) null);
      assertNotNull(equalPredicate1);
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      predicateArray0[6] = (Predicate<Integer>) equalPredicate1;
      OrPredicate<Integer> orPredicate1 = new OrPredicate<Integer>(predicateArray0[0], predicateArray0[6]);
      assertEquals(8, predicateArray0.length);
      assertNotNull(orPredicate1);
      assertFalse(orPredicate1.equals((Object)orPredicate0));
      
      predicateArray0[7] = (Predicate<Integer>) orPredicate1;
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      assertEquals(8, predicateArray0.length);
      assertNotNull(anyPredicate0);
      
      boolean boolean1 = compositeSet1.removeIf(anyPredicate0);
      assertEquals(8, predicateArray0.length);
      assertNotSame(compositeSet1, compositeSet2);
      assertFalse(boolean1 == boolean0);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertFalse(boolean1);
      
      Integer[] integerArray1 = compositeSet1.toArray(integerArray0);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotSame(compositeSet1, compositeSet2);
      assertSame(integerArray0, integerArray1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      boolean boolean2 = compositeSet1.addAll(compositeSet2);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertFalse(boolean2);
      
      compositeSet2.removeComposited(compositeSet1);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(setArray0);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet0);
      
      Object[] objectArray0 = compositeSet0.toArray((Object[]) setArray0);
      assertEquals(0, setArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      compositeSet0.clear();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      assertNotNull(uniquePredicate0);
      
      boolean boolean0 = compositeSet0.removeIf(uniquePredicate0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 7);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      setArray0[0] = (Set<Integer>) compositeSet0;
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      setArray0[1] = set0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[2] = (Set<Integer>) compositeSet1;
      Set<Integer> set1 = compositeSet1.toSet();
      assertNotNull(set1);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(set1, set0);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(set1.equals((Object)set0));
      
      setArray0[3] = set1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(set0);
      assertNotNull(compositeSet2);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(set0.equals((Object)set1));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      
      setArray0[4] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>();
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray0[5] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      
      setArray0[6] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet5);
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
      
      Iterator<Integer> iterator0 = compositeSet5.iterator();
      assertEquals(7, setArray0.length);
      assertNotNull(iterator0);
      assertNotSame(compositeSet5, compositeSet4);
      assertNotSame(compositeSet5, compositeSet0);
      assertNotSame(compositeSet5, compositeSet1);
      assertNotSame(compositeSet5, compositeSet3);
      assertNotSame(compositeSet5, compositeSet2);
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertTrue(compositeSet5.equals((Object)compositeSet0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<LinkedHashSet<Integer>>[] setArray0 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 4);
      int int0 = 512;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>(512);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      setArray0[0] = (Set<LinkedHashSet<Integer>>) linkedHashSet0;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(512));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      boolean boolean0 = linkedHashSet0.add(linkedHashSet1);
      assertTrue(linkedHashSet0.contains(linkedHashSet1));
      assertFalse(linkedHashSet1.contains(512));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(boolean0);
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
      assertEquals(4, setArray0.length);
      assertNotNull(compositeSet0);
      assertTrue(compositeSet0.contains(linkedHashSet1));
      
      setArray0[1] = (Set<LinkedHashSet<Integer>>) compositeSet0;
      Set<LinkedHashSet<Integer>> set0 = compositeSet0.toSet();
      assertEquals(4, setArray0.length);
      assertNotNull(set0);
      assertTrue(compositeSet0.contains(linkedHashSet1));
      assertTrue(set0.contains(linkedHashSet1));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      setArray0[2] = set0;
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet2 = new LinkedHashSet<LinkedHashSet<Integer>>();
      assertNotNull(linkedHashSet2);
      assertFalse(linkedHashSet2.contains(linkedHashSet1));
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet0));
      
      boolean boolean1 = linkedHashSet0.add(linkedHashSet1);
      assertNotSame(linkedHashSet0, linkedHashSet2);
      assertTrue(linkedHashSet0.contains(linkedHashSet1));
      assertFalse(linkedHashSet1.contains(512));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedHashSet2.add(linkedHashSet1);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertFalse(linkedHashSet1.contains(512));
      assertTrue(linkedHashSet2.contains(linkedHashSet1));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(1, linkedHashSet2.size());
      assertFalse(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = linkedHashSet2.add(linkedHashSet1);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertFalse(linkedHashSet1.contains(512));
      assertTrue(linkedHashSet2.contains(linkedHashSet1));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(1, linkedHashSet2.size());
      assertFalse(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      setArray0[3] = (Set<LinkedHashSet<Integer>>) linkedHashSet2;
      boolean boolean4 = linkedHashSet2.add(linkedHashSet1);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertFalse(linkedHashSet1.contains(512));
      assertTrue(linkedHashSet2.contains(linkedHashSet1));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(1, linkedHashSet2.size());
      assertFalse(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = null;
      try {
        compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      compositeSet0.hashCode();
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(boolean0);
      
      boolean boolean1 = compositeSet0.containsAll(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(195);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(195, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(195);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(195, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      assertEquals(8, integerArray0.length);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertEquals(195, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer2));
      assertEquals(0, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = compositeSet0.toArray(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(compositeSet0.contains(integer0));
      
      boolean boolean2 = compositeSet0.removeAll(set0);
      assertFalse(compositeSet0.contains(integer0));
      assertFalse(set0.contains(integer0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      compositeSet0.addComposited(set0, (Set<Integer>) null);
      assertFalse(compositeSet0.contains(integer0));
      assertFalse(set0.contains(integer0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet1 = new CompositeSet<LinkedHashSet<Integer>>();
      assertNotNull(compositeSet1);
      
      Iterator<LinkedHashSet<Integer>> iterator0 = compositeSet1.iterator();
      assertNotNull(iterator0);
      
      Integer[] integerArray2 = new Integer[6];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer integer8 = new Integer(3309);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      assertEquals(3309, (int)integer8);
      
      integerArray2[0] = integer8;
      Integer integer9 = new Integer((int) integerArray2[0]);
      assertEquals(6, integerArray2.length);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer3));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertEquals(3309, (int)integer9);
      
      integerArray2[1] = integer9;
      Integer integer10 = new Integer(3392);
      assertNotNull(integer10);
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)int0));
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer8));
      assertFalse(integer10.equals((Object)integer4));
      assertFalse(integer10.equals((Object)integer2));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer0));
      assertEquals(3392, (int)integer10);
      
      integerArray2[2] = integer10;
      Integer integer11 = new Integer(3309);
      assertNotNull(integer11);
      assertFalse(integer11.equals((Object)integer10));
      assertTrue(integer11.equals((Object)integer8));
      assertFalse(integer11.equals((Object)integer7));
      assertFalse(integer11.equals((Object)integer4));
      assertFalse(integer11.equals((Object)int0));
      assertFalse(integer11.equals((Object)integer5));
      assertFalse(integer11.equals((Object)integer6));
      assertFalse(integer11.equals((Object)integer1));
      assertFalse(integer11.equals((Object)integer0));
      assertFalse(integer11.equals((Object)integer2));
      assertFalse(integer11.equals((Object)integer3));
      assertTrue(integer11.equals((Object)integer9));
      assertEquals(3309, (int)integer11);
      
      integerArray2[3] = integer11;
      Integer integer12 = new Integer(883);
      assertNotNull(integer12);
      assertFalse(integer12.equals((Object)integer8));
      assertFalse(integer12.equals((Object)integer5));
      assertFalse(integer12.equals((Object)integer11));
      assertFalse(integer12.equals((Object)integer3));
      assertFalse(integer12.equals((Object)integer9));
      assertFalse(integer12.equals((Object)integer2));
      assertFalse(integer12.equals((Object)integer10));
      assertFalse(integer12.equals((Object)int0));
      assertFalse(integer12.equals((Object)integer1));
      assertFalse(integer12.equals((Object)integer4));
      assertFalse(integer12.equals((Object)integer7));
      assertFalse(integer12.equals((Object)integer0));
      assertFalse(integer12.equals((Object)integer6));
      assertEquals(883, (int)integer12);
      
      integerArray2[4] = integer12;
      Integer integer13 = new Integer(1565);
      assertNotNull(integer13);
      assertFalse(integer13.equals((Object)integer3));
      assertFalse(integer13.equals((Object)integer9));
      assertFalse(integer13.equals((Object)integer11));
      assertFalse(integer13.equals((Object)integer8));
      assertFalse(integer13.equals((Object)integer6));
      assertFalse(integer13.equals((Object)integer2));
      assertFalse(integer13.equals((Object)integer10));
      assertFalse(integer13.equals((Object)integer5));
      assertFalse(integer13.equals((Object)int0));
      assertFalse(integer13.equals((Object)integer12));
      assertFalse(integer13.equals((Object)integer1));
      assertFalse(integer13.equals((Object)integer4));
      assertFalse(integer13.equals((Object)integer0));
      assertFalse(integer13.equals((Object)integer7));
      assertEquals(1565, (int)integer13);
      
      integerArray2[5] = integer13;
      Integer[] integerArray3 = compositeSet1.toArray(integerArray2);
      assertEquals(6, integerArray3.length);
      assertEquals(6, integerArray2.length);
      assertNotNull(integerArray3);
      assertSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray1);
      assertSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      int int1 = compositeSet1.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 5);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      setArray0[0] = set0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[1] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(setArray0);
      assertEquals(5, setArray0.length);
      assertNotNull(compositeSet2);
      assertTrue(compositeSet2.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      setArray0[2] = (Set<Integer>) compositeSet2;
      Set<Integer> set1 = compositeSet1.toSet();
      assertNotNull(set1);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(set1, set0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(set1.equals((Object)set0));
      
      setArray0[3] = set1;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray0);
      assertEquals(5, setArray0.length);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      
      boolean boolean0 = compositeSet3.retainAll(set1);
      assertEquals(5, setArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(compositeSet1, compositeSet2);
      assertNotSame(compositeSet1, compositeSet3);
      assertNotSame(set1, set0);
      assertNotSame(compositeSet3, compositeSet0);
      assertNotSame(compositeSet3, compositeSet1);
      assertNotSame(compositeSet3, compositeSet2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      assertTrue(compositeSet1.equals((Object)compositeSet3));
      assertTrue(set1.equals((Object)set0));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(compositeSet3.equals((Object)compositeSet0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertFalse(boolean0);
      
      setArray0[4] = (Set<Integer>) compositeSet3;
      // Undeclared exception!
      try { 
        compositeSet3.forEach((Consumer<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer(3270);
      assertNotNull(integer0);
      assertEquals(3270, (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add((Integer) null);
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(3270));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(3270));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.contains(3270));
      assertTrue(compositeSet0.contains(3270));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      
      boolean boolean3 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(compositeSet0.contains(3270));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = compositeSet0.containsAll(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(compositeSet0.contains(3270));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      compositeSet0.hashCode();
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(compositeSet0.contains(3270));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      compositeSet0.clear();
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(compositeSet0.contains(3270));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      boolean boolean5 = linkedHashSet0.add(integer1);
      assertTrue(linkedHashSet0.contains(integer1));
      assertFalse(linkedHashSet0.contains(3270));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Integer>) linkedHashSet0, (Set<Integer>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompositeSet<LinkedHashSet<Object>> compositeSet0 = new CompositeSet<LinkedHashSet<Object>>();
      assertNotNull(compositeSet0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = compositeSet0.removeAll(linkedHashSet0);
      assertFalse(compositeSet0.contains(linkedHashSet0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompositeSet<Boolean> compositeSet0 = new CompositeSet<Boolean>();
      assertNotNull(compositeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = compositeSet0.equals(object0);
      assertFalse(compositeSet0.contains(boolean0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = compositeSet0.isEmpty();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Integer integer0 = new Integer((-6));
      assertNotNull(integer0);
      assertEquals((-6), (int)integer0);
      
      boolean boolean0 = linkedHashSet0.add(integer0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      linkedHashSetArray0[7] = linkedHashSet0;
      Set<Object>[] setArray0 = (Set<Object>[]) Array.newInstance(Set.class, 0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(setArray0);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet1);
      assertFalse(compositeSet1.contains((-6)));
      
      CompositeSet.SetMutator<Object> compositeSet_SetMutator0 = compositeSet1.getMutator();
      assertEquals(0, setArray0.length);
      assertNull(compositeSet_SetMutator0);
      assertFalse(compositeSet1.contains((-6)));
      
      compositeSet1.setMutator((CompositeSet.SetMutator<Object>) null);
      assertEquals(0, setArray0.length);
      assertFalse(compositeSet1.contains((-6)));
      
      CompositeSet<Object> compositeSet2 = new CompositeSet<Object>(setArray0);
      assertEquals(0, setArray0.length);
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains((-6)));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      compositeSet1.addComposited((Set<Object>) compositeSet2);
      assertEquals(0, setArray0.length);
      assertNotSame(compositeSet2, compositeSet1);
      assertNotSame(compositeSet1, compositeSet2);
      assertFalse(compositeSet2.contains((-6)));
      assertFalse(compositeSet1.contains((-6)));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet2));
      
      boolean boolean1 = compositeSet2.containsAll(linkedHashSet0);
      assertEquals(0, setArray0.length);
      assertNotSame(compositeSet2, compositeSet1);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet2.contains((-6)));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CompositeSet<CompositeSet<Object>> compositeSet3 = new CompositeSet<CompositeSet<Object>>();
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(compositeSet2));
      
      boolean boolean2 = compositeSet3.equals(linkedHashSet0);
      assertTrue(linkedHashSet0.contains(integer0));
      assertFalse(compositeSet3.contains(compositeSet2));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 7);
      setArray0[0] = (Set<Integer>) compositeSet0;
      setArray0[1] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Integer> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[0] = predicate0;
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>(predicateArray0);
      assertEquals(1, predicateArray0.length);
      assertNotNull(anyPredicate0);
      
      CompositeSet<Closure<Integer>> compositeSet2 = new CompositeSet<Closure<Integer>>((Set<Closure<Integer>>) null);
      assertNotNull(compositeSet2);
      
      Object[] objectArray0 = compositeSet2.toArray();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      CompositeSet<Closure<Integer>> compositeSet3 = new CompositeSet<Closure<Integer>>(compositeSet2);
      assertNotNull(compositeSet3);
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      Closure<Integer> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Integer>>) compositeSet3);
      assertNotNull(closure0);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet2.contains(closure0));
      assertFalse(compositeSet3.contains(closure0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      Closure<Integer> closure1 = WhileClosure.whileClosure((Predicate<? super Integer>) predicate0, (Closure<? super Integer>) closure0, false);
      assertNotNull(closure1);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet2.contains(closure0));
      assertFalse(compositeSet3.contains(closure0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertFalse(closure1.equals((Object)closure0));
      
      Closure<Integer> closure2 = IfClosure.ifClosure((Predicate<? super Integer>) anyPredicate0, (Closure<? super Integer>) closure1, (Closure<? super Integer>) closure1);
      assertEquals(1, predicateArray0.length);
      assertNotNull(closure2);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet2.contains(closure0));
      assertFalse(compositeSet3.contains(closure0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure2.equals((Object)closure1));
      assertFalse(closure2.equals((Object)closure0));
      
      compositeSet1.forEach(closure2);
      assertEquals(1, predicateArray0.length);
      assertNotSame(compositeSet1, compositeSet0);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet2.contains(closure0));
      assertFalse(compositeSet3.contains(closure0));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertFalse(closure0.equals((Object)closure2));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure2));
      assertFalse(closure2.equals((Object)closure1));
      assertFalse(closure2.equals((Object)closure0));
      
      compositeSet0.addComposited((Set<Integer>) compositeSet1, (Set<Integer>) compositeSet1);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      setArray0[2] = (Set<Integer>) compositeSet0;
      Object[] objectArray1 = compositeSet0.toArray();
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(objectArray1, objectArray0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      setArray0[3] = (Set<Integer>) compositeSet0;
      setArray0[4] = (Set<Integer>) compositeSet0;
      setArray0[5] = (Set<Integer>) compositeSet0;
      setArray0[6] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(setArray0);
      assertEquals(7, setArray0.length);
      assertNotNull(compositeSet4);
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      
      boolean boolean0 = compositeSet0.removeAll(compositeSet4);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet0, compositeSet4);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet4, compositeSet1);
      assertNotSame(compositeSet4, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet4));
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = compositeSet0.equals(object0);
      assertNotSame(compositeSet0, compositeSet4);
      assertNotSame(compositeSet0, compositeSet1);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet0.equals((Object)compositeSet4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = compositeSet4.contains(object0);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet4, compositeSet1);
      assertNotSame(compositeSet4, compositeSet0);
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = compositeSet4.removeIf(predicate0);
      assertEquals(7, setArray0.length);
      assertNotSame(compositeSet4, compositeSet1);
      assertNotSame(compositeSet4, compositeSet0);
      assertTrue(compositeSet4.equals((Object)compositeSet0));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = compositeSet3.contains((Object) null);
      assertNotSame(compositeSet2, compositeSet3);
      assertNotSame(compositeSet3, compositeSet2);
      assertFalse(compositeSet2.contains(closure0));
      assertFalse(compositeSet3.contains(closure0));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      boolean boolean0 = compositeSet0.contains(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = compositeSet0.contains(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      
      // Undeclared exception!
      try { 
        compositeSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<Boolean> linkedHashSet1 = new LinkedHashSet<Boolean>();
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(boolean0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(boolean0);
      
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      assertNotNull(compositeSet0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet2);
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet0));
      
      boolean boolean1 = compositeSet0.remove(linkedHashSet2);
      assertNotSame(linkedHashSet0, linkedHashSet2);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet2));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      assertNotNull(compositeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = compositeSet0.remove(object0);
      assertFalse(boolean0);
      
      int int0 = compositeSet0.size();
      assertFalse(compositeSet0.contains(int0));
      assertEquals(0, int0);
      
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      boolean boolean1 = compositeSet0.removeIf(predicate0);
      assertFalse(compositeSet0.contains(int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = compositeSet0.removeIf(predicate0);
      assertFalse(compositeSet0.contains(int0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Set<Integer> set0 = compositeSet0.toSet();
      assertNotNull(set0);
      assertFalse(compositeSet0.contains(int0));
      assertFalse(set0.contains(int0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      compositeSet0.addComposited(set0, set0);
      assertFalse(compositeSet0.contains(int0));
      assertFalse(set0.contains(int0));
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Predicate<Integer>>[] setArray0 = (Set<Predicate<Integer>>[]) Array.newInstance(Set.class, 9);
      LinkedHashSet<Predicate<Integer>> linkedHashSet0 = new LinkedHashSet<Predicate<Integer>>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(predicate0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      setArray0[0] = (Set<Predicate<Integer>>) linkedHashSet0;
      CompositeSet<Predicate<Integer>> compositeSet1 = new CompositeSet<Predicate<Integer>>(linkedHashSet0);
      assertNotNull(compositeSet1);
      assertFalse(linkedHashSet0.contains(predicate0));
      assertFalse(compositeSet1.contains(predicate0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      setArray0[1] = (Set<Predicate<Integer>>) compositeSet1;
      CompositeSet<Predicate<Integer>> compositeSet2 = new CompositeSet<Predicate<Integer>>(setArray0[0]);
      assertEquals(9, setArray0.length);
      assertNotNull(compositeSet2);
      assertFalse(compositeSet2.contains(predicate0));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      
      setArray0[2] = (Set<Predicate<Integer>>) compositeSet2;
      CompositeSet<Predicate<Integer>> compositeSet3 = new CompositeSet<Predicate<Integer>>(setArray0);
      assertEquals(9, setArray0.length);
      assertNotNull(compositeSet3);
      assertFalse(compositeSet3.contains(predicate0));
      assertTrue(compositeSet3.equals((Object)compositeSet1));
      assertTrue(compositeSet3.equals((Object)compositeSet2));
      
      setArray0[3] = (Set<Predicate<Integer>>) compositeSet3;
      CompositeSet<Predicate<Integer>> compositeSet4 = new CompositeSet<Predicate<Integer>>();
      assertNotNull(compositeSet4);
      assertFalse(compositeSet4.contains(predicate0));
      assertTrue(compositeSet4.equals((Object)compositeSet3));
      assertTrue(compositeSet4.equals((Object)compositeSet1));
      assertTrue(compositeSet4.equals((Object)compositeSet2));
      
      setArray0[4] = (Set<Predicate<Integer>>) compositeSet4;
      CompositeSet<Predicate<Integer>> compositeSet5 = new CompositeSet<Predicate<Integer>>(compositeSet2);
      assertEquals(9, setArray0.length);
      assertNotNull(compositeSet5);
      assertFalse(compositeSet5.contains(predicate0));
      assertFalse(compositeSet2.contains(predicate0));
      assertTrue(compositeSet5.equals((Object)compositeSet1));
      assertTrue(compositeSet5.equals((Object)compositeSet3));
      assertTrue(compositeSet5.equals((Object)compositeSet2));
      assertTrue(compositeSet5.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet4));
      assertTrue(compositeSet2.equals((Object)compositeSet1));
      assertTrue(compositeSet2.equals((Object)compositeSet3));
      
      setArray0[5] = (Set<Predicate<Integer>>) compositeSet5;
      LinkedHashSet<Predicate<Integer>> linkedHashSet1 = new LinkedHashSet<Predicate<Integer>>();
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains(predicate0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      setArray0[6] = (Set<Predicate<Integer>>) linkedHashSet1;
      CompositeSet<Predicate<Integer>> compositeSet6 = new CompositeSet<Predicate<Integer>>(setArray0[2]);
      assertEquals(9, setArray0.length);
      assertNotNull(compositeSet6);
      assertFalse(compositeSet6.contains(predicate0));
      assertTrue(compositeSet6.equals((Object)compositeSet3));
      assertTrue(compositeSet6.equals((Object)compositeSet1));
      assertTrue(compositeSet6.equals((Object)compositeSet2));
      assertTrue(compositeSet6.equals((Object)compositeSet5));
      assertTrue(compositeSet6.equals((Object)compositeSet4));
      
      setArray0[7] = (Set<Predicate<Integer>>) compositeSet6;
      LinkedHashSet<Predicate<Integer>> linkedHashSet2 = new LinkedHashSet<Predicate<Integer>>();
      assertNotNull(linkedHashSet2);
      assertFalse(linkedHashSet2.contains(predicate0));
      assertEquals(0, linkedHashSet2.size());
      assertTrue(linkedHashSet2.isEmpty());
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet0));
      
      setArray0[8] = (Set<Predicate<Integer>>) linkedHashSet2;
      CompositeSet<Predicate<Integer>> compositeSet7 = new CompositeSet<Predicate<Integer>>(setArray0);
      assertEquals(9, setArray0.length);
      assertNotNull(compositeSet7);
      assertFalse(compositeSet7.contains(predicate0));
      assertTrue(compositeSet7.equals((Object)compositeSet4));
      assertTrue(compositeSet7.equals((Object)compositeSet2));
      assertTrue(compositeSet7.equals((Object)compositeSet1));
      assertTrue(compositeSet7.equals((Object)compositeSet5));
      assertTrue(compositeSet7.equals((Object)compositeSet3));
      assertTrue(compositeSet7.equals((Object)compositeSet6));
      
      // Undeclared exception!
      try { 
        compositeSet7.toArray((Predicate<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      assertNotNull(compositeSet0);
      
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>(compositeSet0);
      assertNotNull(compositeSet1);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      
      boolean boolean0 = compositeSet0.remove(compositeSet1);
      assertNotSame(compositeSet0, compositeSet1);
      assertNotSame(compositeSet1, compositeSet0);
      assertTrue(compositeSet0.equals((Object)compositeSet1));
      assertTrue(compositeSet1.equals((Object)compositeSet0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeSet<LinkedHashSet<Integer>> compositeSet0 = new CompositeSet<LinkedHashSet<Integer>>();
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator0 = (CompositeSet.SetMutator<LinkedHashSet<Integer>>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      compositeSet0.setMutator(compositeSet_SetMutator0);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 8);
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>();
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      setArray0[0] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>();
      setArray0[1] = (Set<Integer>) compositeSet3;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[2] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(compositeSet1);
      setArray0[3] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      setArray0[4] = (Set<Integer>) compositeSet5;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      setArray0[5] = (Set<Integer>) linkedHashSet1;
      compositeSet5.addComposited(setArray0);
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>(setArray0);
      setArray0[6] = (Set<Integer>) compositeSet6;
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>(setArray0);
      Set<Predicate<Integer>>[] setArray1 = (Set<Predicate<Integer>>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Predicate<Integer>> compositeSet8 = new CompositeSet<Predicate<Integer>>(setArray1);
      setArray1[0] = (Set<Predicate<Integer>>) compositeSet8;
      CompositeSet<Predicate<Integer>> compositeSet9 = new CompositeSet<Predicate<Integer>>(setArray1);
      Predicate<Integer> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Integer>>) compositeSet9);
      compositeSet7.removeIf(predicate0);
      setArray0[7] = (Set<Integer>) compositeSet7;
      CompositeSet<Integer> compositeSet10 = new CompositeSet<Integer>(setArray0);
      compositeSet10.clear();
      compositeSet10.removeComposited(setArray0[2]);
      int int0 = (-2970);
      Integer integer0 = new Integer(int0);
      compositeSet0.equals(integer0);
      CompositeSet.SetMutator<LinkedHashSet<Integer>> compositeSet_SetMutator1 = (CompositeSet.SetMutator<LinkedHashSet<Integer>>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(compositeSet_SetMutator1).addAll(any(org.apache.commons.collections4.set.CompositeSet.class) , anyList() , anyCollection());
      compositeSet0.setMutator(compositeSet_SetMutator1);
      LinkedList<LinkedHashSet<Integer>> linkedList0 = new LinkedList<LinkedHashSet<Integer>>();
      compositeSet0.addAll(linkedList0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Object object0 = new Object();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet1);
      // Undeclared exception!
      try { 
        compositeSet0.add(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      setArray0[1] = set0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      Set<Integer> set1 = compositeSet1.toSet();
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(set1);
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      compositeSet0.setMutator(compositeSet_SetMutator0);
      Integer integer0 = new Integer(20);
      // Undeclared exception!
      try { 
        compositeSet2.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      CompositeSet<LinkedHashSet<Object>> compositeSet0 = new CompositeSet<LinkedHashSet<Object>>(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addAll(linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      compositeSet0.addComposited(setArray0[0]);
      Set<Integer> set0 = compositeSet0.toSet();
      setArray0[1] = set0;
      Set<Integer> set1 = compositeSet0.toSet();
      compositeSet0.retainAll(linkedHashSet0);
      setArray0[2] = set1;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      // Undeclared exception!
      try { 
        compositeSet2.addAll(set1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // addAll() is not supported on CompositeSet without a SetMutator strategy
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 6);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      CompositeSet<Object> compositeSet1 = new CompositeSet<Object>();
      boolean boolean0 = compositeSet0.equals(compositeSet1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 18);
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 18);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray1);
      compositeSet0.removeComposited(setArray0[0]);
      assertNotSame(setArray1, setArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
      setArray0[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      compositeSet1.removeComposited(setArray0[0]);
      assertTrue(compositeSet1.equals((Object)compositeSet0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-6));
      linkedHashSet0.add(integer0);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      setArray0[1] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = null;
      try {
        compositeSet0 = new CompositeSet<Integer>(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 6);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      Set<Integer> set0 = compositeSet0.toSet();
      setArray0[0] = set0;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[1] = (Set<Integer>) linkedHashSet0;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      setArray0[2] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
      setArray0[3] = (Set<Integer>) compositeSet1;
      Integer integer0 = new Integer(818);
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      setArray0[4] = (Set<Integer>) compositeSet2;
      LinkedHashSet<Integer> linkedHashSet2 = new LinkedHashSet<Integer>();
      setArray0[5] = (Set<Integer>) linkedHashSet2;
      CompositeSet<Integer> compositeSet3 = null;
      try {
        compositeSet3 = new CompositeSet<Integer>(setArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Boolean> linkedHashSet1 = new LinkedHashSet<Boolean>();
      linkedHashSet0.add(linkedHashSet1);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      // Undeclared exception!
      try { 
        compositeSet0.addComposited((Set<Object>) linkedHashSet0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      UniquePredicate<Integer> uniquePredicate0 = new UniquePredicate<Integer>();
      boolean boolean0 = compositeSet0.removeIf(uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) compositeSet0);
      boolean boolean0 = compositeSet0.removeIf(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Object> set0 = compositeSet0.toSet();
      compositeSet0.addComposited(set0, set0);
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 3);
      Object[] objectArray0 = compositeSet0.toArray((Object[]) setArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      compositeSet0.addComposited((Set<Object>) linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.clear();
      boolean boolean0 = compositeSet0.retainAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 6);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[0] = (Set<Integer>) linkedHashSet0;
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      setArray1[0] = (Set<Integer>) linkedHashSet0;
      setArray1[1] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray1);
      setArray0[1] = (Set<Integer>) compositeSet0;
      Set<Integer>[] setArray2 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      Set<Integer> set0 = compositeSet0.toSet();
      setArray2[0] = set0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray2);
      setArray0[2] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>();
      setArray0[3] = (Set<Integer>) compositeSet2;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>();
      setArray0[4] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>();
      setArray0[5] = (Set<Integer>) compositeSet4;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      Set<Integer> set1 = compositeSet5.toSet();
      CompositeSet<Integer> compositeSet6 = new CompositeSet<Integer>(set1);
      compositeSet6.stream();
      CompositeSet<Integer> compositeSet7 = new CompositeSet<Integer>();
      compositeSet6.addComposited((Set<Integer>) compositeSet4, (Set<Integer>) compositeSet7);
      Iterator<Integer> iterator0 = compositeSet7.iterator();
      compositeSet3.clear();
      compositeSet7.getMutator();
      Iterator<Integer> iterator1 = compositeSet4.iterator();
      assertSame(iterator1, iterator0);
      
      CompositeSet<LinkedHashSet<Integer>> compositeSet8 = new CompositeSet<LinkedHashSet<Integer>>();
      compositeSet8.toArray();
      compositeSet4.getMutator();
      assertTrue(compositeSet4.equals((Object)compositeSet6));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>(linkedHashSet0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = compositeSet0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      linkedHashSetArray0[7] = linkedHashSet0;
      linkedHashSetArray0[8] = linkedHashSet0;
      LinkedHashSet<Integer>[] linkedHashSetArray1 = compositeSet0.toArray(linkedHashSetArray0);
      assertEquals(9, linkedHashSetArray1.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      Object[] objectArray0 = compositeSet0.toArray((Object[]) setArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(3205);
      linkedHashSet0.add(integer0);
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) null);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.hashCode();
      Set<Integer> set0 = compositeSet0.toSet();
      assertTrue(set0.contains(3205));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      Integer integer0 = new Integer((-6));
      linkedHashSet0.add(integer0);
      LinkedHashSet<Integer>[] linkedHashSetArray0 = (LinkedHashSet<Integer>[]) Array.newInstance(LinkedHashSet.class, 9);
      linkedHashSetArray0[0] = linkedHashSet0;
      linkedHashSetArray0[1] = linkedHashSet0;
      linkedHashSetArray0[2] = linkedHashSet0;
      linkedHashSetArray0[3] = linkedHashSet0;
      compositeSet0.toArray();
      linkedHashSetArray0[4] = linkedHashSet0;
      linkedHashSetArray0[5] = linkedHashSet0;
      linkedHashSetArray0[6] = linkedHashSet0;
      linkedHashSetArray0[7] = linkedHashSet0;
      Integer integer1 = new Integer((-6));
      linkedHashSet0.add(integer1);
      linkedHashSetArray0[8] = linkedHashSet0;
      // Undeclared exception!
      try { 
        compositeSet0.toArray(linkedHashSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer((-1669));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add(integer0);
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.getMutator();
      compositeSet0.setMutator((CompositeSet.SetMutator<Object>) null);
      compositeSet0.addComposited((Set<Object>) null);
      boolean boolean0 = compositeSet0.containsAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 7);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      setArray0[0] = (Set<Integer>) compositeSet0;
      Set<Integer>[] setArray1 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
      setArray1[0] = (Set<Integer>) compositeSet0;
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray1);
      setArray0[1] = (Set<Integer>) compositeSet1;
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(setArray0[1]);
      setArray0[2] = (Set<Integer>) compositeSet2;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setArray0[3] = (Set<Integer>) linkedHashSet0;
      CompositeSet<Integer> compositeSet3 = new CompositeSet<Integer>(setArray0);
      setArray0[4] = (Set<Integer>) compositeSet3;
      CompositeSet<Integer> compositeSet4 = new CompositeSet<Integer>(setArray0[2]);
      setArray0[5] = (Set<Integer>) compositeSet4;
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      setArray0[6] = (Set<Integer>) linkedHashSet1;
      CompositeSet<Integer> compositeSet5 = new CompositeSet<Integer>(setArray0);
      AnyPredicate<Integer> anyPredicate0 = new AnyPredicate<Integer>((Predicate<? super Integer>[]) null);
      OnePredicate<Integer> onePredicate0 = new OnePredicate<Integer>((Predicate<? super Integer>[]) null);
      Predicate<Integer> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) onePredicate0);
      anyPredicate0.or(predicate0);
      boolean boolean0 = compositeSet5.removeIf(anyPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-6));
      linkedHashSet0.add(integer0);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.containsAll(linkedHashSet0);
      compositeSet0.isEmpty();
      CompositeSet<IteratorChain<Integer>> compositeSet1 = new CompositeSet<IteratorChain<Integer>>();
      CompositeSet<IteratorChain<Integer>> compositeSet2 = new CompositeSet<IteratorChain<Integer>>(compositeSet1);
      CompositeSet<IteratorChain<Integer>> compositeSet3 = new CompositeSet<IteratorChain<Integer>>(compositeSet1);
      compositeSet2.addComposited((Set<IteratorChain<Integer>>) compositeSet3);
      CompositeSet<Object> compositeSet4 = new CompositeSet<Object>();
      // Undeclared exception!
      try { 
        compositeSet4.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      compositeSet0.hashCode();
      boolean boolean0 = compositeSet0.retainAll(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 2);
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>((Set<Object>[]) null);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CompositeSet<Transformer<Boolean, Boolean>> compositeSet0 = new CompositeSet<Transformer<Boolean, Boolean>>();
      CompositeSet.SetMutator<Transformer<Boolean, Boolean>> compositeSet_SetMutator0 = compositeSet0.getMutator();
      assertNull(compositeSet_SetMutator0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CompositeSet<Predicate<Object>> compositeSet0 = new CompositeSet<Predicate<Object>>();
      Set<Predicate<Object>> set0 = compositeSet0.toSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      Set<Integer> set0 = compositeSet0.toSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CompositeSet<Boolean> compositeSet0 = new CompositeSet<Boolean>();
      Object[] objectArray0 = compositeSet0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(linkedHashSet0);
      boolean boolean0 = compositeSet0.retainAll(compositeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>();
      boolean boolean0 = compositeSet0.containsAll(linkedHashSet0);
      boolean boolean1 = compositeSet0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CompositeSet<Object> compositeSet0 = new CompositeSet<Object>();
      compositeSet0.getMutator();
      compositeSet0.setMutator((CompositeSet.SetMutator<Object>) null);
      Set<Object> set0 = compositeSet0.toSet();
      compositeSet0.addComposited(set0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>((Set<Integer>[]) null);
      compositeSet0.hashCode();
      CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>((Set<Integer>[]) null);
      CompositeSet<Integer> compositeSet2 = new CompositeSet<Integer>(compositeSet1);
      boolean boolean0 = compositeSet2.retainAll(compositeSet1);
      CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
      compositeSet0.setMutator(compositeSet_SetMutator0);
      boolean boolean1 = compositeSet0.containsAll(compositeSet2);
      assertFalse(boolean1 == boolean0);
      
      compositeSet0.toSet();
      compositeSet0.getSets();
      compositeSet0.size();
      compositeSet2.toArray();
      compositeSet0.addComposited((Set<Integer>) compositeSet1);
      compositeSet2.getMutator();
      assertTrue(compositeSet2.equals((Object)compositeSet1));
  }
}
