package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.apache.commons.collections4.bloomfilter.BloomFilter.EMPTY;

/**
 * This class contains tests for the SparseBloomFilter, focusing on specific behaviors.
 * The original test class name generated by EvoSuite is preserved.
 */
public class SparseBloomFilter_ESTestTest39 extends SparseBloomFilter_ESTest_scaffolding {

    /**
     * Tests that merging an empty SparseBloomFilter with itself reports a change,
     * while the filter's state remains empty.
     *
     * This test verifies a specific, potentially non-obvious, behavior of the merge
     * operation where merging an empty filter with itself is considered a modification.
     */
    @Test
    public void testMergeWithSelfOnEmptyFilterReportsChangeButRemainsEmpty() {
        // Arrange: Create an empty SparseBloomFilter.
        final Shape shape = Shape.fromKM(10, 100); // Using smaller, more readable values.
        final SparseBloomFilter emptyFilter = new SparseBloomFilter(shape);

        // Verify the initial state: the filter is empty.
        // The 'EMPTY' characteristic is a flag indicating the filter has no enabled bits.
        assertEquals("A new filter should be empty", EMPTY, emptyFilter.characteristics());

        // Act: Merge the filter with itself.
        final boolean wasChanged = emptyFilter.merge(emptyFilter);

        // Assert: The merge operation should report a change, but the filter's content
        // should not be altered, and it should still be considered empty.
        assertTrue("Merging an empty filter with itself should report a change", wasChanged);
        assertEquals("The filter should remain empty after merging with itself",
                EMPTY, emptyFilter.characteristics());
    }
}