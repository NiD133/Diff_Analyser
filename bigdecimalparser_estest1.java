package com.fasterxml.jackson.core.io;

import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * Test suite for {@link BigDecimalParser}.
 * This class focuses on edge cases and dependency-related behaviors.
 */
// The original test class extended a scaffolding class generated by EvoSuite.
// This is maintained to preserve the original test structure.
public class BigDecimalParser_ESTestTest1 extends BigDecimalParser_ESTest_scaffolding {

    /**
     * Tests that calling {@code BigDecimalParser.parse()} with a very long number
     * (length > 500) correctly throws a {@link NoClassDefFoundError} if the optional
     * 'fastdoubleparser' dependency is not available on the classpath.
     *
     * <p>This test validates the behavior in a specific, misconfigured environment
     * where the faster parsing library is expected but missing.
     */
    @Test(timeout = 4000)
    public void parseWithLargeInputShouldThrowErrorWhenFastParserDependencyIsMissing() {
        // Arrange: Set up inputs to trigger the fast-parser code path.
        // The content of the char array is irrelevant for this test.
        char[] inputChars = new char[1];

        // A length > 500 forces BigDecimalParser to delegate to the 'fastdoubleparser' library.
        int largeLength = 771;

        // The offset is invalid, but the code attempts to load the fast parser class
        // before this offset is used, which is why we expect a NoClassDefFoundError
        // instead of an IndexOutOfBoundsException.
        int invalidOffset = -1747;

        // Act & Assert: Verify that the expected error is thrown.
        try {
            BigDecimalParser.parse(inputChars, invalidOffset, largeLength);
            fail("A NoClassDefFoundError was expected, but no exception was thrown.");
        } catch (NoClassDefFoundError e) {
            // This is the expected outcome.
            // Now, we verify the error message to ensure it's the correct class that's missing.
            String expectedMissingClass = "ch/randelshofer/fastdoubleparser/JavaBigDecimalParser";
            String actualMessage = e.getMessage();

            assertTrue(
                "The error message should specify the missing fast parser class. Got: " + actualMessage,
                actualMessage != null && actualMessage.contains(expectedMissingClass)
            );
        }
    }
}