/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 18:21:45 GMT 2025
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ISOChronology_ESTest extends ISOChronology_ESTest_scaffolding {

    // Tests for assemble() method
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testAssembleWithValidFieldsObject() throws Throwable {
        ISOChronology chrono = ISOChronology.getInstance();
        AssembledChronology.Fields fields = new AssembledChronology.Fields();
        chrono.assemble(fields); // Should execute without exceptions
    }

    @Test(timeout = 4000)
    public void testAssembleAfterChangingTimeZone() throws Throwable {
        ISOChronology defaultChrono = ISOChronology.getInstance();
        DateTimeZone customZone = DateTimeZone.forOffsetMillis(7593750);
        ISOChronology customChrono = (ISOChronology) defaultChrono.withZone(customZone);
        
        AssembledChronology.Fields fields = new AssembledChronology.Fields();
        customChrono.assemble(fields); // Should execute without exceptions
        assertNotSame(customChrono, defaultChrono); // Verify new instance created
    }

    @Test(timeout = 4000)
    public void testAssembleWithNullFieldsThrowsException() throws Throwable {
        ISOChronology chrono = ISOChronology.getInstance();
        try {
            chrono.assemble(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    // Tests for equals() method
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testEqualsSameInstance() throws Throwable {
        ISOChronology chrono = ISOChronology.getInstanceUTC();
        assertTrue(chrono.equals(chrono)); // Identity check
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentType() throws Throwable {
        ISOChronology chrono = ISOChronology.getInstanceUTC();
        Object other = new Object();
        assertFalse(chrono.equals(other)); // Different type
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentTimeZone() throws Throwable {
        ISOChronology utcChrono = ISOChronology.getInstanceUTC();
        DateTimeZone customZone = DateTimeZone.forOffsetMillis(-1322);
        Chronology customChrono = utcChrono.withZone(customZone);
        assertFalse(utcChrono.equals(customChrono)); // Different time zones
    }

    // Tests for toString() method
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testToStringWithUTC() throws Throwable {
        ISOChronology chrono = ISOChronology.getInstanceUTC();
        assertEquals("ISOChronology[UTC]", chrono.toString());
    }

    // Tests for getInstance() with time zones
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testGetInstanceWithCustomTimeZone() throws Throwable {
        DateTimeZone customZone = DateTimeZone.forOffsetMillis(85);
        ISOChronology chrono = ISOChronology.getInstance(customZone);
        assertNotNull(chrono);
    }

    @Test(timeout = 4000)
    public void testGetInstanceWithNullTimeZone() throws Throwable {
        // Null time zone should use default time zone
        ISOChronology chrono = ISOChronology.getInstance((DateTimeZone) null);
        assertNotNull(chrono);
    }

    // Tests for withZone() method
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testWithZoneNullReturnsSameInstance() throws Throwable {
        // Setting zone to null (default) should return same instance if already using default
        ISOChronology chrono = ISOChronology.getInstance();
        Chronology result = chrono.withZone(null);
        assertSame(chrono, result);
    }

    @Test(timeout = 4000)
    public void testWithUTCWhenDefaultTimeZoneIsUTC() throws Throwable {
        // This test assumes JVM's default time zone is UTC
        ISOChronology chrono = ISOChronology.getInstance((DateTimeZone) null);
        Chronology utcChrono = chrono.withUTC();
        assertSame(chrono, utcChrono); // Only passes if default time zone is UTC
    }

    // Tests for hashCode() method
    //-----------------------------------------------------------------------
    
    @Test(timeout = 4000)
    public void testHashCodeWithCustomTimeZone() throws Throwable {
        DateTimeZone customZone = DateTimeZone.forOffsetMillis(-84);
        ISOChronology chrono = ISOChronology.getInstance(customZone);
        chrono.hashCode(); // Should execute without exceptions
    }
}