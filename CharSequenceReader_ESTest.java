/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 18:59:58 GMT 2025
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.CharSequenceReader;
import java.io.IOException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.mark(666);
      assertTrue(charSequenceReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1191);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      long long0 = charSequenceReader0.skip(1191);
      assertEquals(1191L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('B');
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charBuffer0.flip();
      charSequenceReader0.read(charBuffer0);
      long long0 = charSequenceReader0.skip(0);
      assertEquals("", charBuffer0.toString());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0, 0, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer2 = charBuffer0.append('2');
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer1);
      int int0 = charSequenceReader0.read(charBuffer2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals(103, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.skip(2031L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(93);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read((char[]) null, 93, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charArray0, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // java.lang.String@0000000002 (java.lang.Integer@0000000003) must not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer1);
      charBuffer0.append((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        charSequenceReader0.read();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.mark(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharSequenceReader charSequenceReader0 = null;
      try {
        charSequenceReader0 = new CharSequenceReader((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.mark((-1897));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // readAheadLimit (java.lang.Integer@0000000002) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      long long0 = charSequenceReader0.skip(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.skip((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // n (java.lang.Long@0000000002) may not be negative
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.read(charBuffer0);
      int int0 = charSequenceReader0.read(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      // Undeclared exception!
      try { 
        charSequenceReader0.read(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      boolean boolean0 = charSequenceReader0.markSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      int int0 = charSequenceReader0.read(charArray0);
      assertEquals(6, int0);
      
      int int1 = charSequenceReader0.read(charArray0, 0, 0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.close();
      try { 
        charSequenceReader0.read(charArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reader closed
         //
         verifyException("com.google.common.io.CharSequenceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      boolean boolean0 = charSequenceReader0.ready();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharSequenceReader charSequenceReader0 = new CharSequenceReader(charBuffer0);
      charSequenceReader0.reset();
      assertTrue(charSequenceReader0.markSupported());
  }
}
