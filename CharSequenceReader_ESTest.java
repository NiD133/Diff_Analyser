/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 18:59:58 GMT 2025
 */

package com.google.common.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.io.CharSequenceReader;
import java.io.IOException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class CharSequenceReader_ESTest extends CharSequenceReader_ESTest_scaffolding {

    // Basic Functionality Tests
    @Test(timeout = 4000)
    public void markSupportedAfterMark_returnsTrue() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.mark(666);
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void readIntoSmallerCharArray_returnsBytesRead() throws Throwable {
        char[] targetArray = new char[6];
        char[] sourceArray = new char[1];
        CharBuffer buffer = CharBuffer.wrap(sourceArray);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        int bytesRead = reader.read(targetArray);
        assertEquals(1, bytesRead);
    }

    @Test(timeout = 4000)
    public void skipAllBytes_returnsBytesSkipped() throws Throwable {
        CharBuffer buffer = CharBuffer.allocate(1191);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        long skipped = reader.skip(1191);
        assertEquals(1191L, skipped);
    }

    @Test(timeout = 4000)
    public void readCharBufferWithZeroLength_returnsZero() throws Throwable {
        char[] chars = new char[2];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        int bytesRead = reader.read(chars, 0, 0);
        assertEquals(0, bytesRead);
    }

    @Test(timeout = 4000)
    public void readCharBufferWithLength_returnsBytesRead() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        int bytesRead = reader.read(chars, 0, 4);
        assertEquals(4, bytesRead);
    }

    @Test(timeout = 4000)
    public void readSingleChar_returnsCorrectChar() throws Throwable {
        char[] chars = new char[6];
        chars[0] = 'g';
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        int charRead = reader.read();
        assertEquals('g', charRead);
    }

    @Test(timeout = 4000)
    public void readSingleCharFromEmptyBuffer_returnsEOF() throws Throwable {
        char[] chars = new char[0];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        int charRead = reader.read();
        assertEquals(-1, charRead);
    }

    @Test(timeout = 4000)
    public void skipZeroBytes_returnsZero() throws Throwable {
        CharBuffer buffer = CharBuffer.allocate(0);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        long skipped = reader.skip(0);
        assertEquals(0L, skipped);
    }

    @Test(timeout = 4000)
    public void markSupported_returnsTrue() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        assertTrue(reader.markSupported());
    }

    @Test(timeout = 4000)
    public void resetWithoutMark_succeeds() throws Throwable {
        char[] chars = new char[2];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.reset();
        assertTrue(reader.markSupported());
    }

    // Edge Case Tests
    @Test(timeout = 4000)
    public void skipAfterReading_returnsRemainingBytes() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        buffer.append('B');
        CharSequenceReader reader = new CharSequenceReader(buffer);
        buffer.flip();
        reader.read(buffer);
        long skipped = reader.skip(0);
        assertEquals(-1L, skipped);
        assertEquals("", buffer.toString());
    }

    @Test(timeout = 4000)
    public void readCharBufferAfterReadingAll_returnsEOF() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.read(buffer);
        int bytesRead = reader.read(buffer);
        assertEquals(0, buffer.length());
        assertEquals(-1, bytesRead);
    }

    @Test(timeout = 4000)
    public void readCharArrayAfterReadingAll_returnsEOF() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.read(chars);
        int bytesRead = reader.read(chars, 0, 0);
        assertEquals(-1, bytesRead);
    }

    @Test(timeout = 4000)
    public void readyWhenBufferEmpty_returnsTrue() throws Throwable {
        CharBuffer buffer = CharBuffer.allocate(0);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        assertTrue(reader.ready());
    }

    // Exception Handling Tests
    @Test(timeout = 4000)
    public void constructorWithNull_throwsNullPointerException() {
        try {
            new CharSequenceReader(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readNullCharArray_throwsNullPointerException() throws Throwable {
        CharBuffer buffer = CharBuffer.allocate(93);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.read(null, 93, 93);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readCharArrayWithNegativeParams_throwsIndexOutOfBounds() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.read(chars, -1, -1);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readIntoReadOnlyCharBuffer_throwsReadOnlyBufferException() throws Throwable {
        char[] source = new char[1];
        CharBuffer buffer = CharBuffer.wrap(source);
        CharBuffer readOnlyBuffer = CharBuffer.wrap(source).asReadOnlyBuffer();
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.read(readOnlyBuffer);
            fail("Expected ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readNullCharBuffer_throwsNullPointerException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.read((CharBuffer) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void markWithNegativeLimit_throwsIllegalArgumentException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.mark(-1897);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void skipNegativeBytes_throwsIllegalArgumentException() throws Throwable {
        char[] chars = new char[3];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        try {
            reader.skip(-1L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected
        }
    }

    // Closed Reader Behavior Tests
    @Test(timeout = 4000)
    public void skipAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.skip(2031L);
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void resetAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[2];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.reset();
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readyAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.ready();
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.read(buffer);
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readSingleCharAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[6];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.read();
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void markAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[1];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.mark(0);
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void readCharArrayAfterClose_throwsIOException() throws Throwable {
        char[] chars = new char[3];
        CharBuffer buffer = CharBuffer.wrap(chars);
        CharSequenceReader reader = new CharSequenceReader(buffer);
        reader.close();
        try {
            reader.read(chars, 0, 0);
            fail("Expected IOException: reader closed");
        } catch (IOException e) {
            // Expected
        }
    }
}