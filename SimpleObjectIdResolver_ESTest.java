/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:46 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleObjectIdResolver_ESTest extends SimpleObjectIdResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<Object> class0 = Object.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, simpleObjectIdResolver0);
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, class0);
      Class class1 = (Class)simpleObjectIdResolver0.resolveId(objectIdGenerator_IdKey0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        simpleObjectIdResolver0.canUseFor((ObjectIdResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Object object0 = new Object();
      simpleObjectIdResolver0.bindItem((ObjectIdGenerator.IdKey) null, object0);
      // Undeclared exception!
      try { 
        simpleObjectIdResolver0.bindItem((ObjectIdGenerator.IdKey) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      boolean boolean0 = simpleObjectIdResolver0.canUseFor(simpleObjectIdResolver0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, simpleObjectIdResolver0);
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, (Object) null);
      Object object0 = simpleObjectIdResolver0.resolveId(objectIdGenerator_IdKey0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<Object> class0 = Object.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, simpleObjectIdResolver0);
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, class0);
      // Undeclared exception!
      try { 
        simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, (Object) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object Id conflict: Id [ObjectId: key=com.fasterxml.jackson.annotation.SimpleObjectIdResolver@1, type=java.lang.Object, scope=java.lang.Object] already bound to an Object (type: `java.lang.Class`, value: java.lang.Class@0000000003): attempt to re-bind to a different Object (null)
         //
         verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<String> class0 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, "");
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, "");
      // Undeclared exception!
      try { 
        simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, "");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Object Id conflict: Id [ObjectId: key=, type=java.lang.String, scope=java.lang.String] already bound to an Object (type: `java.lang.String`, value: \"\"): attempt to re-bind to a different Object (type: `java.lang.String`, value: \"\")
         //
         verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, simpleObjectIdResolver0);
      Object object0 = simpleObjectIdResolver0.resolveId(objectIdGenerator_IdKey0);
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, (Object) null);
      simpleObjectIdResolver0.bindItem(objectIdGenerator_IdKey0, object0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization((Object) null);
      assertNotSame(objectIdResolver0, simpleObjectIdResolver0);
  }
}
