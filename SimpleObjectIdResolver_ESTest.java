/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:46 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class SimpleObjectIdResolver_ESTest extends SimpleObjectIdResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testResolveId_returnsBoundValue() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Class<Object> objectClass = Object.class;
      ObjectIdGenerator.IdKey idKey = new ObjectIdGenerator.IdKey(objectClass, objectClass, resolver);
      
      // Bind class object to resolver and verify resolution
      resolver.bindItem(idKey, objectClass);
      Class<?> resolvedClass = (Class<?>) resolver.resolveId(idKey);
      
      assertFalse("Resolved class should not be an enum", resolvedClass.isEnum());
  }

  @Test(timeout = 4000)
  public void testCanUseFor_withNullResolver_throwsNullPointerException() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      
      // Verify null parameter causes NullPointerException
      try { 
          resolver.canUseFor(null);
          fail("Expected NullPointerException when passing null resolver");
      } catch(NullPointerException e) {
          // NPE expected when resolver is null
          verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void testBindItem_withNullIdKey_throwsNullPointerException() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Object object = new Object();
      
      // First binding with null key should succeed
      resolver.bindItem(null, object);
      
      // Second binding with null key should fail during conflict resolution
      try { 
          resolver.bindItem(null, null);
          fail("Expected NullPointerException when binding to null key");
      } catch(NullPointerException e) {
          // NPE expected during exception message construction
          verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void testCanUseFor_withSameResolverType_returnsTrue() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      boolean result = resolver.canUseFor(resolver);
      assertTrue("Should be able to use same resolver type", result);
  }

  @Test(timeout = 4000)
  public void testResolveId_afterBindingNull_returnsNull() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Class<Object> objectClass = Object.class;
      Class<String> stringClass = String.class;
      ObjectIdGenerator.IdKey idKey = new ObjectIdGenerator.IdKey(objectClass, stringClass, resolver);
      
      // Bind null value and verify resolution returns null
      resolver.bindItem(idKey, null);
      Object result = resolver.resolveId(idKey);
      
      assertNull("Should return null for bound null value", result);
  }

  @Test(timeout = 4000)
  public void testBindItem_duplicateBindingWithNull_throwsIllegalStateException() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Class<Object> objectClass = Object.class;
      ObjectIdGenerator.IdKey idKey = new ObjectIdGenerator.IdKey(objectClass, objectClass, resolver);
      
      // Initial binding
      resolver.bindItem(idKey, objectClass);
      
      // Verify duplicate binding with null fails
      try { 
          resolver.bindItem(idKey, null);
          fail("Expected IllegalStateException for duplicate binding");
      } catch(IllegalStateException e) {
          // Exception expected when rebinding to different value
          verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void testBindItem_duplicateBindingWithSameString_throwsIllegalStateException() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Class<String> stringClass = String.class;
      ObjectIdGenerator.IdKey idKey = new ObjectIdGenerator.IdKey(stringClass, stringClass, "");
      
      // Initial binding with empty string
      resolver.bindItem(idKey, "");
      
      // Verify duplicate binding fails (even with same value)
      try { 
          resolver.bindItem(idKey, "");
          fail("Expected IllegalStateException for duplicate binding");
      } catch(IllegalStateException e) {
          // Exception expected when rebinding same key
          verifyException("com.fasterxml.jackson.annotation.SimpleObjectIdResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void testBindItem_afterResolvingNullCanRebindNull() throws Throwable {
      SimpleObjectIdResolver resolver = new SimpleObjectIdResolver();
      Class<Object> objectClass = Object.class;
      Class<String> stringClass = String.class;
      ObjectIdGenerator.IdKey idKey = new ObjectIdGenerator.IdKey(objectClass, stringClass, resolver);
      
      // Initial resolution (returns null)
      Object initialResolution = resolver.resolveId(idKey);
      
      // Bind null and then rebind with same value
      resolver.bindItem(idKey, null);
      resolver.bindItem(idKey, initialResolution); // rebinding with null
      
      // Test passes if no exception thrown
  }

  @Test(timeout = 4000)
  public void testNewForDeserialization_returnsNewInstance() throws Throwable {
      SimpleObjectIdResolver originalResolver = new SimpleObjectIdResolver();
      ObjectIdResolver newResolver = originalResolver.newForDeserialization(null);
      
      assertNotSame("Should return new resolver instance", originalResolver, newResolver);
  }
}