package com.fasterxml.jackson.core.io;

import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.util.BufferRecycler;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

/**
 * Test suite for the {@link UTF8Writer} class.
 *
 * The original test class name 'UTF8Writer_ESTestTest41' was generated by a tool
 * and has been renamed to 'UTF8WriterTest' to follow standard Java testing conventions.
 */
public class UTF8WriterTest {

    /**
     * This test verifies that calling {@code write(char[], int, int)} with a length
     * parameter that exceeds the bounds of the source character array throws an
     * {@link ArrayIndexOutOfBoundsException}.
     */
    // The test method name has been changed from the generic 'test40()' to be descriptive
    // of the specific behavior under test.
    // The 'expected' attribute of the @Test annotation provides a clear and concise
    // way to assert that an exception is thrown, replacing the original try-catch-fail block.
    @Test(timeout = 4000, expected = ArrayIndexOutOfBoundsException.class)
    public void write_whenLengthExceedsArrayBounds_shouldThrowArrayIndexOutOfBoundsException() throws IOException {
        // Arrange: Set up the necessary objects for the UTF8Writer.
        // This setup, while verbose, is required to construct an IOContext.
        IOContext ioContext = new IOContext(
                StreamReadConstraints.defaults(),
                StreamWriteConstraints.defaults(),
                ErrorReportConfiguration.defaults(),
                new BufferRecycler(),
                ContentReference.unknown(),
                true);

        // Using a standard ByteArrayOutputStream makes the test more self-contained
        // and removes the dependency on a mocking framework (EvoSuite's MockFileOutputStream).
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        UTF8Writer writer = new UTF8Writer(ioContext, outputStream);

        char[] sourceBuffer = new char[4];
        int offset = 0;
        // The 'length' is intentionally set to be greater than the buffer's size
        // to trigger the boundary condition.
        int length = 6;

        // Act: Attempt to write from the buffer using arguments that specify a region
        // extending beyond the buffer's actual size.
        writer.write(sourceBuffer, offset, length);

        // Assert: The test passes if the expected ArrayIndexOutOfBoundsException is thrown.
        // This is handled automatically by the 'expected' attribute on the @Test annotation.
    }
}