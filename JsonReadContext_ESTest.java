/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:47 GMT 2025
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonReadContext_ESTest extends JsonReadContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(187, 187, dupDetector0);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, dupDetector0, (-499), (-499), (-499));
      boolean boolean0 = jsonReadContext1.expectComma();
      assertEquals(1, jsonReadContext1.getEntryCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(11, 11, (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext(11, 11);
      assertEquals("Object", jsonReadContext1.typeDesc());
      assertEquals(0, jsonReadContext1.getEntryCount());
      
      JsonReadContext jsonReadContext2 = jsonReadContext0.createChildObjectContext(1, 0);
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertSame(jsonReadContext2, jsonReadContext1);
      assertNotNull(jsonReadContext2);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(1, jsonReadContext2.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      DupDetector dupDetector1 = dupDetector0.child();
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector1);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (-2901), dupDetector0, (-2901), 490, 2);
      JsonReadContext jsonReadContext2 = jsonReadContext1.withDupDetector(dupDetector1);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals("?", jsonReadContext2.getTypeDesc());
      assertEquals((-2901), jsonReadContext2.getNestingDepth());
      assertEquals(0, jsonReadContext2.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (DupDetector) null, 2, 2, 1);
      JsonReadContext jsonReadContext2 = jsonReadContext1.withDupDetector((DupDetector) null);
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals("OBJECT", jsonReadContext2.getTypeDesc());
      assertTrue(jsonReadContext0.inRoot());
      assertEquals(0, jsonReadContext2.getEntryCount());
      assertEquals(1, jsonReadContext2.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(191, 191, dupDetector0);
      jsonReadContext0.setCurrentName("?3");
      jsonReadContext0.withDupDetector(dupDetector0);
      assertTrue(jsonReadContext0.hasCurrentName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, 1, dupDetector0, 1, 1, 1);
      JsonReadContext jsonReadContext2 = jsonReadContext1.withDupDetector(dupDetector0);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertFalse(jsonReadContext0.inArray());
      assertEquals(1, jsonReadContext2.getNestingDepth());
      assertEquals(0, jsonReadContext2.getEntryCount());
      assertTrue(jsonReadContext2.inArray());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(191, 191, dupDetector0);
      jsonReadContext0.expectComma();
      jsonReadContext0.expectComma();
      jsonReadContext0.withDupDetector(dupDetector0);
      assertEquals(2, jsonReadContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(0, 50000, (DupDetector) null);
      ContentReference contentReference0 = ContentReference.unknown();
      JsonLocation jsonLocation0 = jsonReadContext0.startLocation(contentReference0);
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertTrue(jsonReadContext0.inRoot());
      assertEquals(50000, jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-1), (-3968), dupDetector0);
      ContentReference contentReference0 = ContentReference.rawReference((Object) dupDetector0);
      JsonLocation jsonLocation0 = jsonReadContext0.startLocation(contentReference0);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals((-3968), jsonLocation0.getColumnNr());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation0 = jsonReadContext0.startLocation(contentReference0);
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (DupDetector) null, (-2792), 2, (-380));
      Object object0 = new Object();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference0 = ContentReference.construct(false, object0, errorReportConfiguration0);
      JsonLocation jsonLocation0 = jsonReadContext1.startLocation(contentReference0);
      assertEquals((-380), jsonLocation0.getColumnNr());
      assertEquals(1, jsonReadContext1.getNestingDepth());
      assertEquals(2, jsonLocation0.getLineNr());
      assertFalse(jsonReadContext1.hasCurrentIndex());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals("?", jsonReadContext1.typeDesc());
      assertEquals("root", jsonReadContext0.typeDesc());
      assertEquals((-1L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      jsonReadContext0.setCurrentName("Duplicate field '");
      boolean boolean0 = jsonReadContext0.hasCurrentName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      boolean boolean0 = jsonReadContext0.hasCurrentName();
      assertFalse(boolean0);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals("root", jsonReadContext0.typeDesc());
      assertEquals(0, jsonReadContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(0, 1, dupDetector0);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation((Object) null);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(1, jsonLocation0.getColumnNr());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(11, 11, (DupDetector) null);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation(jsonReadContext0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertTrue(jsonReadContext0.inRoot());
      assertEquals(11, jsonLocation0.getLineNr());
      assertEquals(11, jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-966), (-504), dupDetector0);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation(dupDetector0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertTrue(jsonReadContext0.inRoot());
      assertEquals((-966), jsonLocation0.getLineNr());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals((-504), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.getParent();
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertNull(jsonReadContext1);
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (DupDetector) null, 2, 2, 1);
      JsonReadContext jsonReadContext2 = new JsonReadContext(jsonReadContext1, (DupDetector) null, 1, 2, 0);
      JsonReadContext jsonReadContext3 = jsonReadContext2.getParent();
      assertEquals(0, jsonReadContext3.getEntryCount());
      assertNotNull(jsonReadContext3);
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(1, jsonReadContext3.getNestingDepth());
      assertEquals(2, jsonReadContext2.getNestingDepth());
      assertEquals("OBJECT", jsonReadContext3.getTypeDesc());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertFalse(jsonReadContext2.inObject());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-966), (-504), dupDetector0);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext((-1087), 2393);
      jsonReadContext0.setCurrentName("");
      jsonReadContext1.getParent();
      assertTrue(jsonReadContext0.hasCurrentName());
      assertEquals(1, jsonReadContext1.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(2783, 2783, (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildArrayContext(0, 1257);
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildObjectContext((-1275), 2783);
      JsonReadContext jsonReadContext3 = jsonReadContext2.getParent();
      assertEquals(1, jsonReadContext3.getNestingDepth());
      assertNotNull(jsonReadContext3);
      assertEquals("OBJECT", jsonReadContext2.getTypeDesc());
      assertEquals(2, jsonReadContext2.getNestingDepth());
      assertEquals(0, jsonReadContext3.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (-1476), dupDetector0, (-1476), 92, 2);
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildObjectContext(92, 1);
      JsonReadContext jsonReadContext3 = jsonReadContext2.getParent();
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertTrue(jsonReadContext2.inObject());
      assertEquals((-1475), jsonReadContext2.getNestingDepth());
      assertNotNull(jsonReadContext3);
      assertFalse(jsonReadContext3.inObject());
      assertEquals(0, jsonReadContext3.getEntryCount());
      assertTrue(jsonReadContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(2783, 2783, (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildArrayContext(484, 2783);
      JsonReadContext jsonReadContext2 = jsonReadContext1.getParent();
      assertEquals(0, jsonReadContext2.getNestingDepth());
      assertNotNull(jsonReadContext2);
      assertTrue(jsonReadContext1.inArray());
      assertEquals(1, jsonReadContext1.getNestingDepth());
      assertFalse(jsonReadContext2.inArray());
      assertEquals(0, jsonReadContext2.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      jsonReadContext0.getDupDetector();
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertTrue(jsonReadContext0.inRoot());
      assertEquals(0, jsonReadContext0.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      jsonReadContext0.getCurrentName();
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals(0, jsonReadContext0.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      jsonReadContext0.setCurrentName("K{/Yj{U");
      jsonReadContext0.getCurrentName();
      assertTrue(jsonReadContext0.hasCurrentName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      jsonReadContext0.setCurrentName("");
      jsonReadContext0.getCurrentName();
      assertTrue(jsonReadContext0.hasCurrentName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      jsonReadContext0._child = jsonReadContext0;
      assertFalse(jsonReadContext0._child.inObject());
      
      jsonReadContext0.createChildObjectContext(1, 1);
      assertEquals("Object", jsonReadContext0.typeDesc());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = JsonReadContext.createRootContext((-2391), 1, dupDetector0);
      jsonReadContext1._child = jsonReadContext0;
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildArrayContext(547, (-2391));
      assertEquals(0, jsonReadContext2.getCurrentIndex());
      assertEquals(0, jsonReadContext1.getNestingDepth());
      assertEquals("ARRAY", jsonReadContext2.getTypeDesc());
      assertEquals(0, jsonReadContext2.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-2041), (-2041), dupDetector0);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (-2041), dupDetector0, 1, 2, (-2260));
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildArrayContext((-2041), 2);
      assertEquals((-2040), jsonReadContext2.getNestingDepth());
      assertEquals(0, jsonReadContext2.getEntryCount());
      assertFalse(jsonReadContext0.inArray());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals("ARRAY", jsonReadContext2.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(11, 11, (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext(11, 11);
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildObjectContext(1, 11);
      JsonReadContext jsonReadContext3 = jsonReadContext2.clearAndGetParent();
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals(0, jsonReadContext3.getEntryCount());
      assertEquals("Object", jsonReadContext3.typeDesc());
      assertEquals(2, jsonReadContext2.getNestingDepth());
      assertEquals(1, jsonReadContext3.getNestingDepth());
      assertNotNull(jsonReadContext3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-2732), (-1735), (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext(2, 1);
      jsonReadContext0.setCurrentName("o;?KjQ~B");
      jsonReadContext1.clearAndGetParent();
      assertTrue(jsonReadContext0.hasCurrentName());
      assertFalse(jsonReadContext1.inRoot());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-1735), (-1735), (DupDetector) null);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildArrayContext((-1735), (-1));
      JsonReadContext jsonReadContext2 = jsonReadContext1.createChildObjectContext(3270, (-1735));
      JsonReadContext jsonReadContext3 = jsonReadContext2.clearAndGetParent();
      assertEquals(2, jsonReadContext2.getNestingDepth());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertNotNull(jsonReadContext3);
      assertFalse(jsonReadContext3.inObject());
      assertEquals("root", jsonReadContext0.typeDesc());
      assertTrue(jsonReadContext2.inObject());
      assertEquals(0, jsonReadContext3.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonReadContext jsonReadContext0 = new JsonReadContext((JsonReadContext) null, (-2325), (DupDetector) null, 73, 1473, (-29));
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (DupDetector) null, (-29), (-1754), (-2786));
      JsonReadContext jsonReadContext2 = jsonReadContext1.clearAndGetParent();
      assertEquals((-2324), jsonReadContext1.getNestingDepth());
      assertEquals(0, jsonReadContext1.getEntryCount());
      assertEquals(0, jsonReadContext2.getEntryCount());
      assertNotNull(jsonReadContext2);
      assertNotSame(jsonReadContext2, jsonReadContext1);
      assertEquals("?", jsonReadContext2.getTypeDesc());
      assertEquals("?", jsonReadContext1.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(191, 191, dupDetector0);
      jsonReadContext0.expectComma();
      jsonReadContext0.expectComma();
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildArrayContext((-1), 191);
      jsonReadContext1.clearAndGetParent();
      assertEquals(2, jsonReadContext0.getEntryCount());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      dupDetector0.isDup("np*=*,a*YZ)0");
      // Undeclared exception!
      try { 
        jsonReadContext0.setCurrentName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.DupDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      assertTrue(jsonReadContext0.inRoot());
      
      jsonReadContext0.reset(1, 1, (-1187));
      assertEquals("ARRAY", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      dupDetector0.isDup("f9<!$CG5[0)&Gl:Fy");
      try { 
        jsonReadContext0.setCurrentName("f9<!$CG5[0)&Gl:Fy");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Duplicate field 'f9<!$CG5[0)&Gl:Fy'
         //
         verifyException("com.fasterxml.jackson.core.json.JsonReadContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteBufferParser();
      DupDetector dupDetector0 = DupDetector.rootDetector(jsonParser0);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      jsonReadContext0.setCurrentName("JSON");
      try { 
        jsonReadContext0.setCurrentName("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Duplicate field 'JSON'
         //  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.json.JsonReadContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, (DupDetector) null, 2, 2, 1);
      jsonReadContext1.expectComma();
      boolean boolean0 = jsonReadContext1.expectComma();
      assertEquals(1, jsonReadContext1.getCurrentIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      jsonReadContext0.expectComma();
      JsonReadContext jsonReadContext1 = new JsonReadContext(jsonReadContext0, dupDetector0, 0, 1, 0);
      jsonReadContext0.expectComma();
      jsonReadContext1.getParent();
      assertEquals(2, jsonReadContext0.getEntryCount());
      assertEquals(1, jsonReadContext0.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext(1, (-1694));
      assertTrue(jsonReadContext1.inObject());
      assertNotNull(jsonReadContext1);
      assertEquals(0, jsonReadContext1.getEntryCount());
      
      JsonReadContext jsonReadContext2 = jsonReadContext0.createChildObjectContext(778, 1);
      assertEquals(1, jsonReadContext2.getNestingDepth());
      assertSame(jsonReadContext2, jsonReadContext1);
      assertEquals("Object", jsonReadContext2.typeDesc());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = jsonReadContext0.createChildObjectContext(1, (-1694));
      assertEquals("Object", jsonReadContext1.typeDesc());
      assertNotNull(jsonReadContext1);
      
      JsonReadContext jsonReadContext2 = jsonReadContext0.createChildArrayContext(1, (-1526));
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonReadContext2.getEntryCount());
      assertTrue(jsonReadContext2.inArray());
      assertEquals(1, jsonReadContext2.getNestingDepth());
      assertSame(jsonReadContext2, jsonReadContext1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((DupDetector) null);
      jsonReadContext0.reset(0, (-2789), 0);
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertTrue(jsonReadContext0.inRoot());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonReadContext jsonReadContext0 = new JsonReadContext((JsonReadContext) null, (DupDetector) null, 2, 1, 0);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertTrue(jsonReadContext0.inObject());
      assertEquals(0, jsonReadContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(0, 1, dupDetector0);
      jsonReadContext0.setCurrentValue("6\"");
      Object object0 = jsonReadContext0.getCurrentValue();
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertTrue(jsonReadContext0.inRoot());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(0, 1, dupDetector0);
      jsonReadContext0.getCurrentValue();
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals(0, jsonReadContext0.getNestingDepth());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonReadContext jsonReadContext1 = jsonReadContext0.clearAndGetParent();
      assertNull(jsonReadContext1);
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals(0, jsonReadContext0.getEntryCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext((-1), (-3968), dupDetector0);
      DupDetector dupDetector1 = jsonReadContext0.getDupDetector();
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertNotNull(dupDetector1);
      assertEquals(0, jsonReadContext0.getEntryCount());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonGenerator) null);
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(dupDetector0);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation(jsonReadContext0);
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals("ROOT", jsonReadContext0.getTypeDesc());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonReadContext0.getNestingDepth());
      assertEquals(0, jsonReadContext0.getEntryCount());
  }
}
