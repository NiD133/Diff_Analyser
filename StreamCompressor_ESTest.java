/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:40:03 GMT 2025
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.channels.SeekableByteChannel;
import java.util.Enumeration;
import java.util.zip.Deflater;
import org.apache.commons.compress.archivers.zip.StreamCompressor;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamCompressor_ESTest extends StreamCompressor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(0, (ScatterGatherBackingStore) null);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      streamCompressor0.deflate(sequenceInputStream0, 0);
      assertEquals(0L, streamCompressor0.getBytesWrittenForLastEntry());
      assertEquals(0L, streamCompressor0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      streamCompressor0.write(byteArray0, 1, (byte)1, 4);
      // Undeclared exception!
      streamCompressor0.deflate(pipedInputStream0, (byte) (-102));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sq~)ZO");
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      streamCompressor0.writeCounted(byteArray0, 2, 2);
      assertEquals(2L, streamCompressor0.getTotalBytesWritten());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      streamCompressor0.reset();
      assertEquals(0L, streamCompressor0.getBytesWrittenForLastEntry());
      assertEquals(0L, streamCompressor0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      streamCompressor0.writeCounted(byteArray0);
      assertEquals(1L, streamCompressor0.getTotalBytesWritten());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      long long0 = streamCompressor0.write(byteArray0, 0, 0, 1213);
      assertEquals(0L, streamCompressor0.getTotalBytesWritten());
      assertEquals(0L, streamCompressor0.getBytesRead());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      streamCompressor0.write(byteArray0, 1, (byte)1, 1871);
      long long0 = streamCompressor0.getTotalBytesWritten();
      assertEquals(3523407757L, streamCompressor0.getCrc32());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      streamCompressor0.write(byteArray0, 1, (byte)1, 4);
      long long0 = streamCompressor0.getCrc32();
      assertEquals(3523407757L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, 1, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sq~)ZO");
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, (-2345), (int) (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2345
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      try { 
        streamCompressor0.writeCounted((byte[]) null, 1682, 935);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(8, (ScatterGatherBackingStore) null);
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      // Undeclared exception!
      try { 
        streamCompressor0.write((byte[]) null, 2, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        streamCompressor0.write(byteArray0, (-822), (-822), (-822));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(0, (ScatterGatherBackingStore) null);
      // Undeclared exception!
      try { 
        streamCompressor0.flushDeflater();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      try { 
        streamCompressor0.flushDeflater();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(0, (ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1129), 754);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate(byteArrayInputStream0, 754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        streamCompressor0.deflate(pipedInputStream0, 2573);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((DataOutput) dataOutputStream0, deflater0);
      try { 
        streamCompressor0.deflate();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamCompressor.create((-2410), (ScatterGatherBackingStore) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create(0, (ScatterGatherBackingStore) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        streamCompressor0.writeCounted(byteArray0, 0, (int) (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0, (Deflater) null);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      streamCompressor0.flushDeflater();
      long long0 = streamCompressor0.getBytesWrittenForLastEntry();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      streamCompressor0.deflate(sequenceInputStream0, 8192);
      assertEquals(0L, streamCompressor0.getBytesWrittenForLastEntry());
      assertEquals(0L, streamCompressor0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      streamCompressor0.deflate();
      assertEquals(0L, streamCompressor0.getTotalBytesWritten());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StreamCompressor streamCompressor0 = StreamCompressor.create(8, (ScatterGatherBackingStore) null);
      // Undeclared exception!
      try { 
        streamCompressor0.deflate(sequenceInputStream0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      streamCompressor0.close();
      assertEquals(0L, streamCompressor0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Deflater deflater0 = new Deflater();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      StreamCompressor streamCompressor0 = StreamCompressor.create((DataOutput) objectOutputStream0, deflater0);
      streamCompressor0.deflate();
      assertEquals(2, deflater0.getTotalOut());
      assertEquals(2L, streamCompressor0.getTotalBytesWritten());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      long long0 = streamCompressor0.getTotalBytesWritten();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StreamCompressor streamCompressor0 = StreamCompressor.create((ScatterGatherBackingStore) null);
      assertEquals(0L, streamCompressor0.getTotalBytesWritten());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      long long0 = streamCompressor0.getBytesWrittenForLastEntry();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[1];
      try { 
        streamCompressor0.writeCounted(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      long long0 = streamCompressor0.getCrc32();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      long long0 = streamCompressor0.getBytesRead();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Deflater deflater0 = new Deflater();
      StreamCompressor streamCompressor0 = StreamCompressor.create((SeekableByteChannel) null, deflater0);
      assertEquals(0L, streamCompressor0.getBytesRead());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StreamCompressor streamCompressor0 = StreamCompressor.create((OutputStream) pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      try { 
        streamCompressor0.write(byteArray0, 1, (byte)1, 4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
