/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:15:30 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.apache.commons.lang3.ArrayFill;
import org.apache.commons.lang3.function.FailableIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayFill_ESTest extends ArrayFill_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayFill.fill(booleanArray0, true);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayFill.fill(shortArray0, (short) (-838));
      assertArrayEquals(new short[] {(short) (-838), (short) (-838), (short) (-838), (short) (-838), (short) (-838), (short) (-838)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FailableIntFunction<Object, Throwable> failableIntFunction0 = FailableIntFunction.nop();
      Object[] objectArray1 = ArrayFill.fill(objectArray0, (FailableIntFunction<?, Throwable>) failableIntFunction0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Throwable[] throwableArray0 = new Throwable[8];
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable[] throwableArray1 = ArrayFill.fill(throwableArray0, (Throwable) mockThrowable0);
      assertSame(throwableArray1, throwableArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayFill.fill(longArray0, 0L);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayFill.fill(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayFill.fill(floatArray0, 95.0F);
      assertArrayEquals(new float[] {95.0F, 95.0F, 95.0F, 95.0F, 95.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayFill.fill(doubleArray0, (double) (-259));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayFill.fill(charArray0, ']');
      assertArrayEquals(new char[] {']'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayFill.fill(byteArray0, (byte)76);
      assertArrayEquals(new byte[] {(byte)76}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Throwable[] throwableArray0 = new Throwable[3];
      FailableIntFunction<Object, Throwable> failableIntFunction0 = FailableIntFunction.nop();
      // Undeclared exception!
      try { 
        ArrayFill.fill((Object[]) throwableArray0, (Object) failableIntFunction0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.function.FailableIntFunction$$Lambda$153/1790855301
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FailableIntFunction<Object, Throwable> failableIntFunction0 = FailableIntFunction.nop();
      Object[] objectArray1 = ArrayFill.fill(objectArray0, (Object) failableIntFunction0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(".MLY42", (Throwable) null);
      Object[] objectArray0 = ArrayFill.fill((Object[]) null, (Object) mockThrowable0);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = ArrayFill.fill(objectArray0, (FailableIntFunction<?, Throwable>) null);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      FailableIntFunction<Object, Throwable> failableIntFunction0 = FailableIntFunction.nop();
      Object[] objectArray1 = ArrayFill.fill(objectArray0, (FailableIntFunction<?, Throwable>) failableIntFunction0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FailableIntFunction<Throwable, Throwable> failableIntFunction0 = FailableIntFunction.nop();
      Throwable[] throwableArray0 = ArrayFill.fill((Throwable[]) null, (FailableIntFunction<? extends Throwable, Throwable>) failableIntFunction0);
      assertNull(throwableArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayFill.fill(shortArray0, (short)2);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      short[] shortArray0 = ArrayFill.fill((short[]) null, (short) (-3333));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayFill.fill(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = ArrayFill.fill((long[]) null, 1003L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayFill.fill(intArray0, 0);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = ArrayFill.fill((int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayFill.fill(floatArray0, 1.0F);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[] floatArray0 = ArrayFill.fill((float[]) null, (-4645.361F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayFill.fill(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = ArrayFill.fill((double[]) null, (double) (short) (-3333));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayFill.fill(charArray0, 's');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = ArrayFill.fill((char[]) null, 'B');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayFill.fill(byteArray0, (byte)0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = ArrayFill.fill((byte[]) null, (byte)87);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayFill.fill(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean[] booleanArray0 = ArrayFill.fill((boolean[]) null, true);
      assertNull(booleanArray0);
  }
}
