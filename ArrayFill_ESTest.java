/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:15:30 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.apache.commons.lang3.ArrayFill;
import org.apache.commons.lang3.function.FailableIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class ArrayFill_ESTest extends ArrayFill_ESTest_scaffolding {

    // Tests for fill(boolean[], boolean)
    @Test(timeout = 4000)
    public void testFillBoolean_EmptyArray() throws Throwable {
        boolean[] input = new boolean[0];
        boolean[] result = ArrayFill.fill(input, true);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillBoolean_NonEmptyArray() throws Throwable {
        boolean[] input = new boolean[4];
        boolean[] result = ArrayFill.fill(input, true);
        assertTrue(Arrays.equals(new boolean[]{true, true, true, true}, result));
    }

    @Test(timeout = 4000)
    public void testFillBoolean_NullArray() throws Throwable {
        boolean[] result = ArrayFill.fill((boolean[]) null, true);
        assertNull(result);
    }

    // Tests for fill(byte[], byte)
    @Test(timeout = 4000)
    public void testFillByte_NonEmptyArray() throws Throwable {
        byte[] input = new byte[1];
        byte[] result = ArrayFill.fill(input, (byte) 76);
        assertArrayEquals(new byte[]{76}, result);
    }

    @Test(timeout = 4000)
    public void testFillByte_EmptyArray() throws Throwable {
        byte[] input = new byte[0];
        byte[] result = ArrayFill.fill(input, (byte) 0);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillByte_NullArray() throws Throwable {
        byte[] result = ArrayFill.fill((byte[]) null, (byte) 87);
        assertNull(result);
    }

    // Tests for fill(char[], char)
    @Test(timeout = 4000)
    public void testFillChar_NonEmptyArray() throws Throwable {
        char[] input = new char[1];
        char[] result = ArrayFill.fill(input, ']');
        assertArrayEquals(new char[]{']'}, result);
    }

    @Test(timeout = 4000)
    public void testFillChar_EmptyArray() throws Throwable {
        char[] input = new char[0];
        char[] result = ArrayFill.fill(input, 's');
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testFillChar_NullArray() throws Throwable {
        char[] result = ArrayFill.fill((char[]) null, 'B');
        assertNull(result);
    }

    // Tests for fill(short[], short)
    @Test(timeout = 4000)
    public void testFillShort_NonEmptyArray() throws Throwable {
        short[] input = new short[6];
        short[] result = ArrayFill.fill(input, (short) -838);
        assertArrayEquals(new short[]{-838, -838, -838, -838, -838, -838}, result);
    }

    @Test(timeout = 4000)
    public void testFillShort_EmptyArray() throws Throwable {
        short[] input = new short[0];
        short[] result = ArrayFill.fill(input, (short) 2);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillShort_NullArray() throws Throwable {
        short[] result = ArrayFill.fill((short[]) null, (short) -3333);
        assertNull(result);
    }

    // Tests for fill(int[], int)
    @Test(timeout = 4000)
    public void testFillInt_NonEmptyArray() throws Throwable {
        int[] input = new int[7];
        int[] result = ArrayFill.fill(input, -1);
        assertArrayEquals(new int[]{-1, -1, -1, -1, -1, -1, -1}, result);
    }

    @Test(timeout = 4000)
    public void testFillInt_EmptyArray() throws Throwable {
        int[] input = new int[0];
        int[] result = ArrayFill.fill(input, 0);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillInt_NullArray() throws Throwable {
        int[] result = ArrayFill.fill((int[]) null, 0);
        assertNull(result);
    }

    // Tests for fill(long[], long)
    @Test(timeout = 4000)
    public void testFillLong_NonEmptyArray() throws Throwable {
        long[] input = new long[8];
        long[] result = ArrayFill.fill(input, -1L);
        assertArrayEquals(new long[]{-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L}, result);
    }

    @Test(timeout = 4000)
    public void testFillLong_EmptyArray() throws Throwable {
        long[] input = new long[0];
        long[] result = ArrayFill.fill(input, 0L);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillLong_NullArray() throws Throwable {
        long[] result = ArrayFill.fill((long[]) null, 1003L);
        assertNull(result);
    }

    // Tests for fill(float[], float)
    @Test(timeout = 4000)
    public void testFillFloat_NonEmptyArray() throws Throwable {
        float[] input = new float[5];
        float[] result = ArrayFill.fill(input, 95.0F);
        assertArrayEquals(new float[]{95.0F, 95.0F, 95.0F, 95.0F, 95.0F}, result, 0.01F);
    }

    @Test(timeout = 4000)
    public void testFillFloat_EmptyArray() throws Throwable {
        float[] input = new float[0];
        float[] result = ArrayFill.fill(input, 1.0F);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillFloat_NullArray() throws Throwable {
        float[] result = ArrayFill.fill((float[]) null, -4645.361F);
        assertNull(result);
    }

    // Tests for fill(double[], double)
    @Test(timeout = 4000)
    public void testFillDouble_NonEmptyArray() throws Throwable {
        double[] input = new double[8];
        double[] result = ArrayFill.fill(input, 0.0);
        assertArrayEquals(new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, result, 0.01);
    }

    @Test(timeout = 4000)
    public void testFillDouble_EmptyArray() throws Throwable {
        double[] input = new double[0];
        double[] result = ArrayFill.fill(input, -259.0);
        assertEquals(0, result.length);
    }

    @Test(timeout = 4000)
    public void testFillDouble_NullArray() throws Throwable {
        double[] result = ArrayFill.fill((double[]) null, -3333.0);
        assertNull(result);
    }

    // Tests for fill(T[], T) - Object arrays with constant value
    @Test(timeout = 4000)
    public void testFillObjectArray_NonEmptyArray() throws Throwable {
        Throwable[] input = new Throwable[8];
        MockThrowable value = new MockThrowable();
        Throwable[] result = ArrayFill.fill(input, value);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArray_EmptyArray() throws Throwable {
        Object[] input = new Object[0];
        FailableIntFunction<Object, Throwable> value = FailableIntFunction.nop();
        Object[] result = ArrayFill.fill(input, value);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArray_NullArray() throws Throwable {
        MockThrowable value = new MockThrowable(".MLY42", null);
        Object[] result = ArrayFill.fill((Object[]) null, value);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArray_ArrayStoreException() throws Throwable {
        Throwable[] input = new Throwable[3];
        FailableIntFunction<Object, Throwable> value = FailableIntFunction.nop();
        try {
            ArrayFill.fill((Object[]) input, value);
            fail("Expecting exception: ArrayStoreException");
        } catch (ArrayStoreException e) {
            // Expected: FailableIntFunction cannot be stored in Throwable array
        }
    }

    // Tests for fill(T[], FailableIntFunction) - Object arrays with generator
    @Test(timeout = 4000)
    public void testFillObjectArrayWithGenerator_NonEmptyArray() throws Throwable {
        Object[] input = new Object[6];
        FailableIntFunction<Object, Throwable> generator = FailableIntFunction.nop();
        Object[] result = ArrayFill.fill(input, generator);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArrayWithGenerator_EmptyArray() throws Throwable {
        Object[] input = new Object[0];
        FailableIntFunction<Object, Throwable> generator = FailableIntFunction.nop();
        Object[] result = ArrayFill.fill(input, generator);
        assertSame(input, result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArrayWithGenerator_NullArray() throws Throwable {
        FailableIntFunction<Throwable, Throwable> generator = FailableIntFunction.nop();
        Throwable[] result = ArrayFill.fill((Throwable[]) null, generator);
        assertNull(result);
    }

    @Test(timeout = 4000)
    public void testFillObjectArrayWithGenerator_NullGenerator() throws Throwable {
        Object[] input = new Object[4];
        Object[] result = ArrayFill.fill(input, (FailableIntFunction<?, Throwable>) null);
        assertSame(input, result);
    }
}