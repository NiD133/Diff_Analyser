/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:26:20 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import org.apache.commons.collections4.bloomfilter.BitMapExtractor;
import org.apache.commons.collections4.bloomfilter.BloomFilter;
import org.apache.commons.collections4.bloomfilter.CellExtractor;
import org.apache.commons.collections4.bloomfilter.CountingLongPredicate;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.Hasher;
import org.apache.commons.collections4.bloomfilter.IndexExtractor;
import org.apache.commons.collections4.bloomfilter.IndexFilter;
import org.apache.commons.collections4.bloomfilter.LayerManager;
import org.apache.commons.collections4.bloomfilter.LayeredBloomFilter;
import org.apache.commons.collections4.bloomfilter.LongBiPredicate;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleBloomFilter_ESTest extends SimpleBloomFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1540);
      int[] intArray0 = new int[8];
      intArray0[0] = 5023;
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(indexExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexExtractor should only send values in the range[0,1540)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(19, 2654L);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      boolean boolean1 = simpleBloomFilter0.merge((BitMapExtractor) sparseBloomFilter0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(78, 78, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1L, (-9223372036854775808L));
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      boolean boolean1 = simpleBloomFilter0.merge((BitMapExtractor) simpleBloomFilter0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483647L, 0L);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(115, 115, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1L, (-9223372036854775808L));
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      assertTrue(boolean0);
      
      simpleBloomFilter0.isFull();
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(78, 78, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      boolean boolean0 = simpleBloomFilter0.processIndices(indexFilter_ArrayTracker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(3419, 3419, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[3];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      boolean boolean0 = simpleBloomFilter0.processBitMaps(longPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Shape shape0 = Shape.fromNM(10, 10);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[1];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      boolean boolean0 = simpleBloomFilter0.processBitMaps(countingLongPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Shape shape0 = Shape.fromNM(51, 51);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.processBitMapPairs(layeredBloomFilter0, longBiPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Shape shape0 = Shape.fromKM(22, 22);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((IndexExtractor) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Shape shape0 = Shape.fromNM(294, 294);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      Shape shape1 = simpleBloomFilter0.getShape();
      assertEquals(203.7852710846239, shape1.estimateMaxN(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(64, 64, 1);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains((IndexExtractor) layeredBloomFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Shape shape0 = Shape.fromKM(4, 4);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int int0 = simpleBloomFilter0.characteristics();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Shape shape0 = Shape.fromNM(38, 38);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(38, 38);
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(1, int0);
      
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2147483605;
      Shape shape0 = Shape.fromNM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      // Undeclared exception!
      simpleBloomFilter0.processIndices(indexFilter_ArrayTracker0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Shape shape0 = Shape.fromNM(38, 38);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.processIndices((IntPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483639, 2147483639);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = new long[0];
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(longBiPredicate0).test(anyLong() , anyLong());
      CountingLongPredicate countingLongPredicate0 = new CountingLongPredicate(longArray0, longBiPredicate0);
      LongPredicate longPredicate0 = countingLongPredicate0.negate();
      // Undeclared exception!
      simpleBloomFilter0.processBitMaps(longPredicate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.processBitMaps((LongPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // consumer
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(15, 15, 15);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.processBitMapPairs(simpleBloomFilter0, (LongBiPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483602, 2147483602);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((IndexExtractor) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Shape shape0 = Shape.fromKM(668, 668);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((IndexExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // indexExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Shape shape0 = Shape.fromKM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483605, 2147483605);
      // Undeclared exception!
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Shape shape0 = Shape.fromKM(56, 56);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // hasher
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BloomFilter<?>) simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Shape shape0 = Shape.fromNM(38, 38);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BloomFilter<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // other
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Shape shape0 = Shape.fromNM(49, 49);
      Shape shape1 = Shape.fromKM(49, 5906);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape1);
      SimpleBloomFilter simpleBloomFilter1 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter1.merge((BloomFilter<?>) simpleBloomFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapExtractor should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483602, 2147483602);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.merge((BitMapExtractor) sparseBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1, 1);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((BitMapExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Shape shape0 = Shape.fromKM(20, 20);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromIndexExtractor(simpleBloomFilter0, 283);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(bitMapExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BitMapExtractor should send at most 1 maps
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Shape shape0 = Shape.fromNM(Integer.MAX_VALUE, Integer.MAX_VALUE);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-154L), 2147483647L);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      // Undeclared exception!
      simpleBloomFilter0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483605, 1047039L);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      assertNotSame(simpleBloomFilter1, simpleBloomFilter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      CellExtractor cellExtractor0 = CellExtractor.from(simpleBloomFilter0);
      // Undeclared exception!
      simpleBloomFilter0.contains((IndexExtractor) cellExtractor0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Shape shape0 = Shape.fromKM(668, 668);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains((IndexExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Shape shape0 = Shape.fromNM(10, 10);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[8];
      intArray0[0] = 977;
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.contains(indexExtractor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.collections4.bloomfilter.BitMaps", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(2147483605, 2147483605);
      simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      // Undeclared exception!
      simpleBloomFilter0.cardinality();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleBloomFilter simpleBloomFilter0 = null;
      try {
        simpleBloomFilter0 = new SimpleBloomFilter((Shape) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // shape
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Shape shape0 = Shape.fromNM(64, 64);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      boolean boolean0 = simpleBloomFilter0.merge((BitMapExtractor) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Shape shape0 = Shape.fromKM(28, 28);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromIndexExtractor(simpleBloomFilter0, (-1));
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.processBitMapPairs(bitMapExtractor0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Shape shape0 = Shape.fromNM(294, 294);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      LongBiPredicate longBiPredicate0 = mock(LongBiPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(longBiPredicate0).test(anyLong() , anyLong());
      boolean boolean0 = simpleBloomFilter0.processBitMapPairs(simpleBloomFilter0, longBiPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Shape shape0 = Shape.fromKM(655, 1);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(655, 655);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexExtractor should only send values in the range[0,1)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Shape shape0 = Shape.fromNM(10, 10);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte) (-89);
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        simpleBloomFilter0.merge(indexExtractor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IndexExtractor should only send values in the range[0,10)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.SimpleBloomFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter<?>) sparseBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(19, 19, 19);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter<?>) simpleBloomFilter0);
      boolean boolean1 = simpleBloomFilter0.isEmpty();
      assertEquals(0, simpleBloomFilter0.characteristics());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Shape shape0 = Shape.fromNM(294, 294);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      boolean boolean0 = simpleBloomFilter0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(15, 15, 15);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.merge((BloomFilter<?>) simpleBloomFilter0);
      assertTrue(boolean0);
      
      int int0 = simpleBloomFilter0.cardinality();
      assertEquals(0, int0);
      assertEquals(0, simpleBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147483605, 2147483605);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      long[] longArray0 = simpleBloomFilter0.asBitMapArray();
      assertEquals(33554432, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Shape shape0 = Shape.fromNM(294, 294);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      boolean boolean0 = simpleBloomFilter0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Shape shape0 = Shape.fromKM(23, 23);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      simpleBloomFilter0.clear();
      assertEquals(0, simpleBloomFilter0.characteristics());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Shape shape0 = Shape.fromKM(19, 19);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher(1956L, (-2388L));
      boolean boolean0 = simpleBloomFilter0.merge((Hasher) enhancedDoubleHasher0);
      IndexFilter.ArrayTracker indexFilter_ArrayTracker0 = new IndexFilter.ArrayTracker(shape0);
      IntPredicate intPredicate0 = indexFilter_ArrayTracker0.negate();
      boolean boolean1 = simpleBloomFilter0.processIndices(intPredicate0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Shape shape0 = Shape.fromNM(294, 294);
      LayerManager<SparseBloomFilter> layerManager0 = (LayerManager<SparseBloomFilter>) mock(LayerManager.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(layerManager0).processBloomFilters(any(java.util.function.Predicate.class));
      LayeredBloomFilter<SparseBloomFilter> layeredBloomFilter0 = new LayeredBloomFilter<SparseBloomFilter>(shape0, layerManager0);
      SimpleBloomFilter simpleBloomFilter0 = layeredBloomFilter0.flatten();
      boolean boolean0 = simpleBloomFilter0.contains((IndexExtractor) simpleBloomFilter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Shape shape0 = Shape.fromNMK(78, 78, 2);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      SimpleBloomFilter simpleBloomFilter1 = simpleBloomFilter0.copy();
      assertNotSame(simpleBloomFilter0, simpleBloomFilter1);
  }
}
