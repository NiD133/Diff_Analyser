/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:31:19 GMT 2025
 */

package com.itextpdf.text.pdf.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.pdf.parser.Matrix;
import com.itextpdf.text.pdf.parser.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, 
                     resetStaticState = true, separateClassLoader = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

    // Basic Operations Tests
    @Test(timeout = 4000)
    public void length_zeroVector_returnsZero() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        float length = vector.length();
        assertEquals(0.0F, length, 0.01F);
    }

    @Test(timeout = 4000)
    public void lengthSquared_zeroVector_returnsZero() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        float lengthSquared = vector.lengthSquared();
        assertEquals(0.0F, lengthSquared, 0.01F);
    }

    @Test(timeout = 4000)
    public void get_index0_returnsXComponent() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        float x = vector.get(0);
        assertEquals(0.0F, x, 0.01F);
    }

    @Test(timeout = 4000)
    public void get_index1_returnsYComponent() {
        Vector vector = new Vector(1864.694F, -105.0F, -1351.098F);
        float y = vector.get(1);
        assertEquals(-105.0F, y, 0.01F);
    }

    @Test(timeout = 4000)
    public void get_invalidIndex_throwsArrayIndexOutOfBoundsException() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        try {
            vector.get(360);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void toString_returnsCommaSeparatedComponents() {
        Vector vector = new Vector(-2905.637F, -2905.637F, -1.0F);
        String result = vector.toString();
        assertEquals("-2905.637,-2905.637,-1.0", result);
    }

    @Test(timeout = 4000)
    public void hashCode_calculatesHashBasedOnComponents() {
        Vector vector = new Vector(-2905.637F, -2905.637F, -1.0F);
        vector.hashCode();  // Verify no exception
        assertEquals(4109.191F, vector.length(), 0.01F);
    }

    // Dot Product Tests
    @Test(timeout = 4000)
    public void dotProduct_withSelf_returnsSumOfSquares() {
        Vector vector = new Vector(-528.75F, -528.75F, 1.0F);
        float result = vector.dot(vector);
        assertEquals(559154.1F, result, 0.01F);
    }

    @Test(timeout = 4000)
    public void dotProduct_zeroVectorWithNonZeroVector_returnsZero() {
        Vector zeroVector = new Vector(0.0F, 0.0F, 0.0F);
        Vector nonZeroVector = new Vector(1103.0195F, 0.0F, 8.0F);
        float result = zeroVector.dot(nonZeroVector);
        assertEquals(0.0F, result, 0.01F);
        assertEquals(1103.0486F, nonZeroVector.length(), 0.01F);
    }

    @Test(timeout = 4000)
    public void dotProduct_orthogonalVectorsWithOppositeZ_returnsNegative2() {
        Vector v1 = new Vector(0.0F, 0.0F, -1.0F);
        Vector v2 = new Vector(0.0F, -1.0F, 2);
        float result = v1.dot(v2);
        assertEquals(-2.0F, result, 0.01F);
        assertEquals(5.0F, v2.lengthSquared(), 0.01F);
    }

    @Test(timeout = 4000)
    public void dotProduct_nullVector_throwsNullPointerException() {
        Vector vector = new Vector(4, 3, 8);
        try {
            vector.dot(null);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    // Cross Product Tests
    @Test(timeout = 4000)
    public void crossProduct_withSelf_returnsZeroVector() {
        Vector vector = new Vector(-2905.637F, -2905.637F, -1.0F);
        Vector result = vector.cross(vector);
        assertEquals(0.0F, result.length(), 0.01F);
        assertEquals(4109.191F, vector.length(), 0.01F);
    }

    @Test(timeout = 4000)
    public void crossProduct_zeroVectorWithMatrix_returnsZeroVector() {
        Vector zeroVector = new Vector(0.0F, 0.0F, 0.0F);
        Matrix matrix = new Matrix(135.0858F, 0.0F, 2, 0, 0.0F, -1.0F);
        Vector result = zeroVector.cross(matrix);
        assertTrue(result.equals(zeroVector));
    }

    @Test(timeout = 4000)
    public void crossProduct_withMatrixAfterSubtract_producesExpectedLength() {
        Vector zeroVector = new Vector(0.0F, 0.0F, 0.0F);
        Vector vector = new Vector(-1465.0F, -1465.0F, 1);
        Vector subtracted = zeroVector.subtract(vector);
        Matrix matrix = new Matrix(490.69257F, -667.658F, -1.0F, 0.0F, -1465.0F, 0.0F);
        Vector result = subtracted.cross(matrix).multiply(8);
        assertEquals(9710969.0F, result.length(), 0.01F);
    }

    @Test(timeout = 4000)
    public void crossProduct_chainOperations_producesExpectedResults() {
        Vector v1 = new Vector(-2905.637F, -2905.637F, -1.0F);
        Vector v2 = new Vector(0, -444.7289F, -3839.2217F);
        Vector cross1 = v1.cross(v2);
        Vector subtract = v1.subtract(cross1);
        Vector cross2 = subtract.cross(v2);
        Vector cross3 = cross2.cross(v1);
        Vector cross4 = cross3.cross(cross1);
        Vector normalized = cross4.normalize();
        
        assertEquals(0.0F, normalized.length(), 0.01F);
        assertEquals(4.2085848E26F, cross3.lengthSquared(), 0.01F);
    }

    @Test(timeout = 4000)
    public void crossProduct_nullVector_throwsNullPointerException() {
        Vector vector = new Vector(-557.00323F, -557.00323F, -557.00323F);
        try {
            vector.cross((Vector) null);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void crossProduct_nullMatrix_throwsNullPointerException() {
        Vector vector = new Vector(-557.00323F, -557.00323F, -557.00323F);
        try {
            vector.cross((Matrix) null);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    // Vector Arithmetic Tests
    @Test(timeout = 4000)
    public void subtract_sameVector_returnsZeroVector() {
        Vector vector = new Vector(-2905.637F, -2905.637F, -1.0F);
        Vector result = vector.subtract(vector);
        assertEquals(0.0F, result.length(), 0.01F);
        assertEquals(1.6885452E7F, vector.lengthSquared(), 0.01F);
    }

    @Test(timeout = 4000)
    public void subtract_negativeVectorFromZero_returnsPositiveVector() {
        Vector zeroVector = new Vector(0.0F, 0.0F, 0.0F);
        Vector negativeVector = new Vector(-1465.0F, -1465.0F, 1);
        Vector result = zeroVector.subtract(negativeVector);
        assertEquals(1465.0F, result.get(0), 0.01F);
        assertEquals(2071.823F, result.length(), 0.01F);
    }

    @Test(timeout = 4000)
    public void subtract_nullVector_throwsNullPointerException() {
        Vector vector = new Vector(-2350.2F, -2350.2F, -2350.2F);
        try {
            vector.subtract(null);
            fail("Expected NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void multiply_byZero_producesZeroVector() {
        Vector vector = new Vector(0.0F, 0.0F, 742.77F);
        Vector result = vector.multiply(0.0F);
        assertEquals(0.0F, result.length(), 0.01F);
        assertEquals(742.77F, vector.length(), 0.01F);
    }

    // Normalization Tests
    @Test(timeout = 4000)
    public void normalize_zeroVector_returnsZeroVector() {
        Vector zeroVector = new Vector(0.0F, 0.0F, 0.0F);
        Vector normalized = zeroVector.normalize();
        Matrix matrix = new Matrix(135.0858F, 0.0F, 2, 0, 0.0F, -1.0F);
        Vector result = normalized.cross(matrix);
        assertTrue(result.equals(normalized));
        assertEquals(0.0F, zeroVector.length(), 0.01F);
    }

    // Equality Tests
    @Test(timeout = 4000)
    public void equals_sameObject_returnsTrue() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        boolean result = vector.equals(vector);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void equals_differentZComponents_returnsFalse() {
        Vector v1 = new Vector(0.0F, 0.0F, 3.3516045F);
        Vector v2 = new Vector(0.0F, 0.0F, 1);
        boolean result = v1.equals(v2);
        assertFalse(result);
        assertEquals(1.0F, v2.length(), 0.01F);
    }

    @Test(timeout = 4000)
    public void equals_nullObject_returnsFalse() {
        Vector vector = new Vector(-80.165F, -80.165F, -80.165F);
        boolean result = vector.equals(null);
        assertFalse(result);
        assertEquals(19279.281F, vector.lengthSquared(), 0.01F);
    }

    @Test(timeout = 4000)
    public void equals_nonVectorObject_returnsFalse() {
        Vector vector = new Vector(0.0F, 0.0F, 0.0F);
        Object obj = new Object();
        boolean result = vector.equals(obj);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void equals_afterMatrixCrossProduct_returnsTrue() {
        Vector vector = new Vector(0.0F, 0.0F, 3.3516045F);
        Matrix matrix = new Matrix(0.0F, 0);
        Vector result = vector.cross(matrix);
        boolean equals = vector.equals(result);
        assertTrue(equals);
        assertEquals(11.233253F, vector.lengthSquared(), 0.01F);
    }
}