/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 14:22:57 GMT 2025
 */

package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.bloomfilter.ArrayCountingBloomFilter;
import org.apache.commons.collections4.bloomfilter.BitMapExtractor;
import org.apache.commons.collections4.bloomfilter.EnhancedDoubleHasher;
import org.apache.commons.collections4.bloomfilter.IndexExtractor;
import org.apache.commons.collections4.bloomfilter.Shape;
import org.apache.commons.collections4.bloomfilter.SimpleBloomFilter;
import org.apache.commons.collections4.bloomfilter.SparseBloomFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IndexExtractor_ESTest extends IndexExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Shape shape0 = Shape.fromKM(1856, 1856);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      int[] intArray0 = simpleBloomFilter0.asIndexArray();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnhancedDoubleHasher enhancedDoubleHasher0 = new EnhancedDoubleHasher((-2285L), (-2285L));
      Shape shape0 = Shape.fromNM(6, 2147352576);
      IndexExtractor indexExtractor0 = enhancedDoubleHasher0.indices(shape0);
      // Undeclared exception!
      indexExtractor0.uniqueIndices();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray((int[]) null);
      // Undeclared exception!
      try { 
        indexExtractor0.uniqueIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexExtractor$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      // Undeclared exception!
      try { 
        indexExtractor0.uniqueIndices();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexExtractor.fromBitMapExtractor((BitMapExtractor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bitMapExtractor
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Shape shape0 = Shape.fromNM(2147352576, 2147352576);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      // Undeclared exception!
      simpleBloomFilter0.asIndexArray();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray((int[]) null);
      // Undeclared exception!
      try { 
        indexExtractor0.asIndexArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bloomfilter.IndexExtractor$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      IndexExtractor indexExtractor1 = indexExtractor0.uniqueIndices();
      // Undeclared exception!
      try { 
        indexExtractor1.asIndexArray();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -2147483648
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      IndexExtractor indexExtractor1 = indexExtractor0.uniqueIndices();
      Shape shape0 = Shape.fromKM(1867, 31);
      SimpleBloomFilter simpleBloomFilter0 = new SimpleBloomFilter(shape0);
      boolean boolean0 = simpleBloomFilter0.contains(indexExtractor1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-1L);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromBitMapArray(longArray0);
      IndexExtractor indexExtractor0 = IndexExtractor.fromBitMapExtractor(bitMapExtractor0);
      int[] intArray0 = indexExtractor0.asIndexArray();
      assertEquals(64, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      Shape shape0 = Shape.fromNM(1624, 1624);
      ArrayCountingBloomFilter arrayCountingBloomFilter0 = new ArrayCountingBloomFilter(shape0);
      boolean boolean0 = arrayCountingBloomFilter0.contains(indexExtractor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2401L);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromBitMapArray(longArray0);
      IndexExtractor indexExtractor0 = IndexExtractor.fromBitMapExtractor(bitMapExtractor0);
      int[] intArray0 = indexExtractor0.asIndexArray();
      assertEquals(60, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[18];
      longArray0[2] = (-1L);
      BitMapExtractor bitMapExtractor0 = BitMapExtractor.fromBitMapArray(longArray0);
      IndexExtractor indexExtractor0 = IndexExtractor.fromBitMapExtractor(bitMapExtractor0);
      Shape shape0 = Shape.fromNM(2147479552, 2147479552);
      SparseBloomFilter sparseBloomFilter0 = new SparseBloomFilter(shape0);
      boolean boolean0 = sparseBloomFilter0.contains(indexExtractor0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      IndexExtractor indexExtractor1 = indexExtractor0.uniqueIndices();
      int[] intArray1 = indexExtractor1.asIndexArray();
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      IndexExtractor indexExtractor0 = IndexExtractor.fromIndexArray(intArray0);
      IndexExtractor indexExtractor1 = indexExtractor0.uniqueIndices();
      IndexExtractor indexExtractor2 = indexExtractor1.uniqueIndices();
      assertSame(indexExtractor1, indexExtractor2);
  }
}
