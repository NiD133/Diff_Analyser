/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 20:22:07 GMT 2025
 */

package org.apache.commons.codec.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.RefinedSoundex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RefinedSoundex_ESTest extends RefinedSoundex_ESTest_scaffolding {

    // Test data constants
    private static final String SAMPLE_PACKAGE_NAME = "org.apache.commons.codec.EncoderException";
    private static final String CUSTOM_MAPPING = "U>";
    private static final String LONG_PACKAGE_NAME = "org.apache.commons.codec.language.RefinedSoundex";
    private static final String SPECIAL_CHARS_STRING = "<+Eq|qK!wg0f\u0006n_~";

    @Test(timeout = 4000)
    public void testDifference_SameStrings_ReturnsExpectedScore() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING);
        
        int differenceScore = soundex.difference(SAMPLE_PACKAGE_NAME, SAMPLE_PACKAGE_NAME);
        
        assertEquals("Identical strings should have difference score of 3", 3, differenceScore);
    }

    @Test(timeout = 4000)
    public void testConstructor_EmptyCharArray_CreatesInstance() throws Throwable {
        char[] emptyMapping = new char[0];
        
        RefinedSoundex soundex = new RefinedSoundex(emptyMapping);
        
        assertNotNull("Should create instance with empty mapping", soundex);
    }

    @Test(timeout = 4000)
    public void testGetMappingCode_USEnglish_ReturnsCorrectCode() throws Throwable {
        RefinedSoundex soundex = RefinedSoundex.US_ENGLISH;
        
        char mappingCode = soundex.getMappingCode('y');
        
        assertEquals("Letter 'y' should map to '0' in US English mapping", '0', mappingCode);
    }

    @Test(timeout = 4000)
    public void testGetMappingCode_CustomMapping_ReturnsCorrectCode() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        char mappingCode = soundex.getMappingCode('X');
        
        assertEquals("Letter 'X' should map to 'c' with custom mapping", 'c', mappingCode);
    }

    @Test(timeout = 4000)
    public void testEncode_NullString_ReturnsNull() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex();
        
        String result = soundex.encode((String) null);
        
        assertNull("Encoding null string should return null", result);
    }

    @Test(timeout = 4000)
    public void testEncode_EmptyString_ReturnsEmptyString() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex();
        
        String result = soundex.encode("");
        
        assertEquals("Encoding empty string should return empty string", "", result);
    }

    @Test(timeout = 4000)
    public void testConstructor_NullStringMapping_ThrowsNullPointerException() throws Throwable {
        try {
            new RefinedSoundex((String) null);
            fail("Constructor with null string mapping should throw NullPointerException");
        } catch(NullPointerException e) {
            verifyException("org.apache.commons.codec.language.RefinedSoundex", e);
        }
    }

    @Test(timeout = 4000)
    public void testSoundex_LongPackageName_ReturnsExpectedCode() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        String soundexCode = soundex.US_ENGLISH.soundex(LONG_PACKAGE_NAME);
        
        assertEquals("Package name should encode to expected soundex code", 
                    "O09401030308083060370840409020806308605", soundexCode);
    }

    @Test(timeout = 4000)
    public void testSoundex_EmptyString_ReturnsEmptyString() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        String result = soundex.soundex("");
        
        assertEquals("Soundex of empty string should return empty string", "", result);
    }

    @Test(timeout = 4000)
    public void testSoundex_NullString_ReturnsNull() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex();
        
        String result = soundex.soundex((String) null);
        
        assertNull("Soundex of null string should return null", result);
    }

    @Test(timeout = 4000)
    public void testDifference_BothNullStrings_ReturnsZero() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex();
        
        int differenceScore = soundex.difference((String) null, (String) null);
        
        assertEquals("Difference between two null strings should be 0", 0, differenceScore);
    }

    @Test(timeout = 4000)
    public void testGetMappingCode_NonAlphabeticChar_ReturnsNullChar() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        char mappingCode = soundex.getMappingCode('+');
        
        assertEquals("Non-alphabetic character should map to null character", '\u0000', mappingCode);
    }

    @Test(timeout = 4000)
    public void testEncodeObject_ValidString_ReturnsEncodedString() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        Object result = soundex.US_ENGLISH.encode((Object) "O0");
        
        assertEquals("Object encoding should return the encoded string", "O0", result);
        assertNotNull("Result should not be null", result);
    }

    @Test(timeout = 4000)
    public void testEncode_CustomMappingString_ReturnsExpectedCode() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(LONG_PACKAGE_NAME);
        
        String result = soundex.encode(LONG_PACKAGE_NAME);
        
        assertEquals("Custom mapping should produce expected encoding", 
                    "Omsaogcagmom.gm.agcomaoasaphma.mom.ac", result);
        assertNotNull("Result should not be null", result);
    }

    @Test(timeout = 4000)
    public void testConstructor_NullCharArrayMapping_ThrowsNullPointerException() throws Throwable {
        try {
            new RefinedSoundex((char[]) null);
            fail("Constructor with null char array mapping should throw NullPointerException");
        } catch(NullPointerException e) {
            verifyException("org.apache.commons.codec.language.RefinedSoundex", e);
        }
    }

    @Test(timeout = 4000)
    public void testEncodeObject_NullObject_ThrowsException() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex();
        
        try { 
            soundex.encode((Object) null);
            fail("Encoding null object should throw Exception");
        } catch(Exception e) {
            assertEquals("Should throw exception with specific message",
                        "Parameter supplied to RefinedSoundex encode is not of type java.lang.String", 
                        e.getMessage());
            verifyException("org.apache.commons.codec.language.RefinedSoundex", e);
        }
    }

    @Test(timeout = 4000)
    public void testSoundex_SpecialCharacters_ReturnsFilteredCode() throws Throwable {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING);
        
        String result = soundex.soundex(SPECIAL_CHARS_STRING);
        
        assertEquals("Special characters should be filtered, leaving only 'E'", "E", result);
        assertNotNull("Result should not be null", result);
    }
}