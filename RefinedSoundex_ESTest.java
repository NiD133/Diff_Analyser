/*
 * This file was automatically generated by EvoSuite
 * Refactored for improved understandability and maintainability
 */
package org.apache.commons.codec.language;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.codec.language.RefinedSoundex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class RefinedSoundex_ESTest extends RefinedSoundex_ESTest_scaffolding {
    private static final String CUSTOM_MAPPING_STRING = "org.apache.commons.codec.language.RefinedSoundex";
    private static final String SHORT_CUSTOM_MAPPING = "U>";
    private static final String TEST_STRING = "org.apache.commons.codec.language.RefinedSoundex";
    private static final String COMPLEX_STRING = "<+Eq|qK!wg0f\u0006n_~";

    // ================= Constructor Tests =================
    @Test(timeout = 4000)
    public void testConstructorWithCustomStringMapping() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertNotNull(soundex);
    }

    @Test(timeout = 4000)
    public void testConstructorWithEmptyCharArray() {
        RefinedSoundex soundex = new RefinedSoundex(new char[0]);
        assertNotNull(soundex);
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullStringMappingThrowsNPE() {
        try {
            new RefinedSoundex((String) null);
            fail("Expected NullPointerException for null mapping string");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithNullCharArrayThrowsNPE() {
        try {
            new RefinedSoundex((char[]) null);
            fail("Expected NullPointerException for null char array");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    // ================ getMappingCode Tests ================
    @Test(timeout = 4000)
    public void testGetMappingCodeForYInUSEnglish() {
        RefinedSoundex soundex = RefinedSoundex.US_ENGLISH;
        assertEquals('0', soundex.getMappingCode('y'));
    }

    @Test(timeout = 4000)
    public void testGetMappingCodeForXInCustomMapping() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertEquals('c', soundex.getMappingCode('X'));
    }

    @Test(timeout = 4000)
    public void testGetMappingCodeForNonLetterCharacter() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertEquals('\u0000', soundex.getMappingCode('+'));
    }

    // ================== encode Tests ==================
    @Test(timeout = 4000)
    public void testEncodeNullStringReturnsNull() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertNull(soundex.encode((String) null));
    }

    @Test(timeout = 4000)
    public void testEncodeNonLetterStringReturnsEmpty() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals("", soundex.encode(""));
    }

    @Test(timeout = 4000)
    public void testEncodeValidStringWithCustomMapping() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertEquals("Omsaogcagmom.gm.agcomaoasaphma.mom.ac", 
                     soundex.encode(TEST_STRING));
    }

    // ================ encode(Object) Tests ================
    @Test(timeout = 4000)
    public void testEncodeObjectWithString() {
        RefinedSoundex customSoundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        Object result = RefinedSoundex.US_ENGLISH.encode((Object) "O0");
        assertEquals("O0", result);
    }

    @Test(timeout = 4000)
    public void testEncodeNullObjectThrowsException() {
        try {
            RefinedSoundex soundex = new RefinedSoundex();
            soundex.encode((Object) null);
            fail("Expected EncoderException for null object parameter");
        } catch (EncoderException e) {
            // Expected behavior
        }
    }

    // ================== soundex Tests ==================
    @Test(timeout = 4000)
    public void testSoundexNullInputReturnsNull() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertNull(soundex.soundex((String) null));
    }

    @Test(timeout = 4000)
    public void testSoundexEmptyInputReturnsEmpty() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertEquals("", soundex.soundex(""));
    }

    @Test(timeout = 4000)
    public void testSoundexWithLongInput() {
        RefinedSoundex soundex = new RefinedSoundex(CUSTOM_MAPPING_STRING);
        assertEquals("O09401030308083060370840409020806308605", 
                     soundex.soundex(TEST_STRING));
    }

    @Test(timeout = 4000)
    public void testSoundexWithSpecialCharacters() {
        RefinedSoundex soundex = new RefinedSoundex(SHORT_CUSTOM_MAPPING);
        assertEquals("E", soundex.soundex(COMPLEX_STRING));
    }

    // ================= difference Tests =================
    @Test(timeout = 4000)
    public void testDifferenceWithNullInputs() {
        RefinedSoundex soundex = new RefinedSoundex();
        assertEquals(0, soundex.difference(null, null));
    }

    @Test(timeout = 4000)
    public void testDifferenceWithIdenticalStrings() {
        RefinedSoundex soundex = new RefinedSoundex(SHORT_CUSTOM_MAPPING);
        String input = "org.apache.commons.codec.EncoderException";
        assertEquals(3, soundex.difference(input, input));
    }
}