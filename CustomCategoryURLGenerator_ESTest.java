/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:09:42 GMT 2025
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CustomCategoryURLGenerator_ESTest extends CustomCategoryURLGenerator_ESTest_scaffolding {

    // ============================================================
    // Tests for getURL()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testGetURL_WithNonNullEntry_ReturnsCorrectURL() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        Vector<String> urlSeries = new Vector<>();
        urlSeries.add("anchor");
        generator.addURLSeries(urlSeries);
        
        String url = generator.getURL(0, 0);
        assertEquals("anchor", url);
    }

    @Test(timeout = 4000)
    public void testGetURL_WithEmptySeries_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        
        String url = generator.getURL(0, 0);
        assertNull(url);
    }

    @Test(timeout = 4000)
    public void testGetURL_WithNullSeries_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(null);
        
        String url = generator.getURL(0, 0);
        assertNull(url);
    }

    @Test(timeout = 4000)
    public void testGetURL_WithOutOfBoundsSeriesIndex_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        String url = generator.getURL(5, -1785);
        assertNull(url);
    }

    @Test(timeout = 4000)
    public void testGetURL_WithOutOfBoundsItemIndexInEmptySeries_ThrowsException() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        
        try {
            generator.getURL(0, -1052);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testGetURL_WithOutOfBoundsItemIndexInNonEmptySeries_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        
        String url = generator.getURL(0, 2440);
        assertNull(url);
    }

    @Test(timeout = 4000)
    public void testGetURL_WithNullSeriesInMultiSeriesGenerator_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        generator.addURLSeries(null);
        generator.addURLSeries(null);
        generator.addURLSeries(null);
        generator.addURLSeries(new ArrayList<>());
        
        String url = generator.getURL(5, -1785);
        assertNull(url);
    }

    // ============================================================
    // Tests for getURLCount()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testGetURLCount_ForNonEmptySeries_ReturnsCorrectCount() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        List<String> urlList = List.of("A", "B", "C", "D", "E", "F");
        generator.addURLSeries(urlList);
        
        int count = generator.getURLCount(0);
        assertEquals(6, count);
    }

    @Test(timeout = 4000)
    public void testGetURLCount_ForEmptySeries_ReturnsZero() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        
        int count = generator.getURLCount(0);
        assertEquals(0, count);
    }

    @Test(timeout = 4000)
    public void testGetURLCount_ForNullSeries_ReturnsZero() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(null);
        
        int count = generator.getURLCount(0);
        assertEquals(0, count);
    }

    @Test(timeout = 4000)
    public void testGetURLCount_WithInvalidSeriesIndex_ThrowsException() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        try {
            generator.getURLCount(5570);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    // ============================================================
    // Tests for getListCount()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testGetListCount_Initially_ReturnsZero() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        int count = generator.getListCount();
        assertEquals(0, count);
    }

    @Test(timeout = 4000)
    public void testGetListCount_AfterAddingSeries_ReturnsCorrectCount() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        generator.addURLSeries(new ArrayList<>());
        int count = generator.getListCount();
        assertEquals(1, count);
    }

    // ============================================================
    // Tests for generateURL()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testGenerateURL_WithNegativeIndices_ThrowsException() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        DefaultKeyedValues2DDataset dataset = new DefaultKeyedValues2DDataset();
        try {
            generator.generateURL(dataset, -3864, -3864);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testGenerateURL_WithOutOfBoundsIndices_ReturnsNull() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        String url = generator.generateURL(dataset, 860, 0);
        assertNull(url);
    }

    // ============================================================
    // Tests for equals()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testEquals_WithSameObject_ReturnsTrue() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        boolean result = generator.equals(generator);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentClass_ReturnsFalse() throws Throwable {
        CustomCategoryURLGenerator generator = new CustomCategoryURLGenerator();
        boolean result = generator.equals("I8p");
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentURLSeriesCount_ReturnsFalse() throws Throwable {
        CustomCategoryURLGenerator generator1 = new CustomCategoryURLGenerator();
        List<String> urlList = List.of("A");
        generator1.addURLSeries(urlList);
        
        CustomCategoryURLGenerator generator2 = new CustomCategoryURLGenerator();
        generator2.addURLSeries(null);
        
        boolean result = generator1.equals(generator2);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithDifferentSeriesContent_ReturnsFalse() throws Throwable {
        CustomCategoryURLGenerator generator1 = new CustomCategoryURLGenerator();
        Vector<String> series1 = new Vector<>();
        series1.add("N8)j");
        generator1.addURLSeries(series1);
        
        CustomCategoryURLGenerator generator2 = new CustomCategoryURLGenerator();
        Stack<String> series2 = new Stack<>();
        series2.add("NmY|");
        generator2.addURLSeries(series2);
        
        boolean result = generator1.equals(generator2);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_WithNullContentVsNonNull_ReturnsFalse() throws Throwable {
        CustomCategoryURLGenerator generator1 = new CustomCategoryURLGenerator();
        Stack<String> series1 = new Stack<>();
        series1.add(null);
        generator1.addURLSeries(series1);
        
        CustomCategoryURLGenerator generator2 = new CustomCategoryURLGenerator();
        Vector<String> series2 = new Vector<>();
        series2.add("N8)j");
        generator2.addURLSeries(series2);
        
        boolean result = generator1.equals(generator2);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void testEquals_AfterAddingEmptySeries_ReturnsFalse() throws Throwable {
        CustomCategoryURLGenerator generator1 = new CustomCategoryURLGenerator();
        CustomCategoryURLGenerator generator2 = new CustomCategoryURLGenerator();
        assertTrue(generator1.equals(generator2));
        
        generator2.addURLSeries(new Vector<>());
        boolean result = generator1.equals(generator2);
        assertFalse(result);
    }

    // ============================================================
    // Tests for clone()
    // ============================================================
    
    @Test(timeout = 4000)
    public void testClone_ProducesEqualButNotSameObject() throws Throwable {
        CustomCategoryURLGenerator original = new CustomCategoryURLGenerator();
        Vector<String> series = new Vector<>();
        series.add("URL1");
        series.add("URL2");
        original.addURLSeries(series);
        
        Object clone = original.clone();
        boolean areEqual = original.equals(clone);
        
        assertNotSame(clone, original);
        assertTrue(areEqual);
    }

    @Test(timeout = 4000)
    public void testClone_WithNullInSeries_ProducesEqualObject() throws Throwable {
        CustomCategoryURLGenerator original = new CustomCategoryURLGenerator();
        Stack<String> series = new Stack<>();
        series.add(null);
        original.addURLSeries(series);
        
        Object clone = original.clone();
        boolean areEqual = original.equals(clone);
        
        assertNotSame(clone, original);
        assertTrue(areEqual);
    }
}