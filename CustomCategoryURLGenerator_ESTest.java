/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:09:42 GMT 2025
 */

package org.jfree.chart.urls;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CustomCategoryURLGenerator_ESTest extends CustomCategoryURLGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Vector<String> vector0 = new Vector<String>();
      vector0.add(",ql\"(}:Q!;Ew");
      vector0.add(",ql\"(}:Q!;Ew");
      customCategoryURLGenerator0.addURLSeries(vector0);
      Object object0 = customCategoryURLGenerator0.clone();
      boolean boolean0 = customCategoryURLGenerator0.equals(object0);
      assertTrue(boolean0);
      assertNotSame(object0, customCategoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      List<String> list0 = List.of("");
      customCategoryURLGenerator0.addURLSeries(list0);
      CustomCategoryURLGenerator customCategoryURLGenerator1 = new CustomCategoryURLGenerator();
      customCategoryURLGenerator1.addURLSeries((List<String>) null);
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator1);
      assertFalse(boolean0);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      List<String> list0 = List.of("2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "", "");
      customCategoryURLGenerator0.addURLSeries(list0);
      CustomCategoryURLGenerator customCategoryURLGenerator1 = new CustomCategoryURLGenerator();
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator1);
      assertFalse(boolean0);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      // Undeclared exception!
      try { 
        customCategoryURLGenerator0.getURL(0, (-1052));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      String string0 = customCategoryURLGenerator0.getURL(0, 2440);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      customCategoryURLGenerator0.addURLSeries((List<String>) null);
      customCategoryURLGenerator0.addURLSeries((List<String>) null);
      customCategoryURLGenerator0.addURLSeries((List<String>) null);
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      String string0 = customCategoryURLGenerator0.getURL(5, (-1785));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      List<String> list0 = List.of("2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "2p8~6Bu{q8c&Ro)", "", "");
      customCategoryURLGenerator0.addURLSeries(list0);
      int int0 = customCategoryURLGenerator0.getURLCount(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      customCategoryURLGenerator0.addURLSeries(stack0);
      String string0 = customCategoryURLGenerator0.getURL(0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      int int0 = customCategoryURLGenerator0.getListCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      // Undeclared exception!
      try { 
        customCategoryURLGenerator0.getURLCount(5570);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      DefaultKeyedValues2DDataset<String, String> defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset<String, String>();
      // Undeclared exception!
      try { 
        customCategoryURLGenerator0.generateURL(defaultKeyedValues2DDataset0, (-3864), (-3864));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Vector<String> vector0 = new Vector<String>(3458);
      vector0.add("anchor");
      customCategoryURLGenerator0.addURLSeries(vector0);
      String string0 = customCategoryURLGenerator0.getURL(0, 0);
      assertEquals("anchor", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      String string0 = customCategoryURLGenerator0.getURL(5, (-1785));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      customCategoryURLGenerator0.addURLSeries(arrayList0);
      int int0 = customCategoryURLGenerator0.getURLCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      customCategoryURLGenerator0.addURLSeries((List<String>) null);
      int int0 = customCategoryURLGenerator0.getURLCount(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      int int0 = customCategoryURLGenerator0.getListCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      CustomCategoryURLGenerator customCategoryURLGenerator1 = new CustomCategoryURLGenerator();
      assertTrue(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      
      Vector<String> vector0 = new Vector<String>();
      vector0.add("N8)j");
      customCategoryURLGenerator1.addURLSeries(vector0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      customCategoryURLGenerator0.addURLSeries(stack0);
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator1);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      customCategoryURLGenerator0.addURLSeries(stack0);
      Object object0 = customCategoryURLGenerator0.clone();
      boolean boolean0 = customCategoryURLGenerator0.equals(object0);
      assertNotSame(object0, customCategoryURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      List<String> list0 = List.of("o<]R");
      customCategoryURLGenerator0.addURLSeries(list0);
      CustomCategoryURLGenerator customCategoryURLGenerator1 = new CustomCategoryURLGenerator();
      Stack<String> stack0 = new Stack<String>();
      customCategoryURLGenerator1.addURLSeries(stack0);
      boolean boolean0 = customCategoryURLGenerator1.equals(customCategoryURLGenerator0);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      assertFalse(customCategoryURLGenerator0.equals((Object)customCategoryURLGenerator1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      boolean boolean0 = customCategoryURLGenerator0.equals("I8p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      Stack<String> stack0 = new Stack<String>();
      customCategoryURLGenerator0.addURLSeries(stack0);
      String string0 = customCategoryURLGenerator0.getURL(0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      customCategoryURLGenerator0.addURLSeries((List<String>) null);
      String string0 = customCategoryURLGenerator0.getURL(0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      CustomCategoryURLGenerator customCategoryURLGenerator1 = new CustomCategoryURLGenerator();
      assertTrue(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      
      Vector<String> vector0 = new Vector<String>();
      vector0.add("N8)j");
      customCategoryURLGenerator0.addURLSeries(vector0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("NmY|");
      customCategoryURLGenerator1.addURLSeries(stack0);
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator1);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      DefaultCategoryDataset<String, String> defaultCategoryDataset0 = new DefaultCategoryDataset<String, String>();
      String string0 = customCategoryURLGenerator0.generateURL(defaultCategoryDataset0, 860, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      CustomCategoryURLGenerator customCategoryURLGenerator1 = (CustomCategoryURLGenerator)customCategoryURLGenerator0.clone();
      assertTrue(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
      
      Vector<String> vector0 = new Vector<String>();
      customCategoryURLGenerator1.addURLSeries(vector0);
      boolean boolean0 = customCategoryURLGenerator0.equals(customCategoryURLGenerator1);
      assertFalse(boolean0);
      assertFalse(customCategoryURLGenerator1.equals((Object)customCategoryURLGenerator0));
  }
}
