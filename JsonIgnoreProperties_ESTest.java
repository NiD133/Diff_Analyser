/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 22 08:54:38 GMT 2025
 */

package com.fasterxml.jackson.annotation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonIgnoreProperties_ESTest extends JsonIgnoreProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value0.withOverrides(jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value3 = jsonIgnoreProperties_Value0.withoutMerge();
      assertFalse(jsonIgnoreProperties_Value3.getMerge());
      assertFalse(jsonIgnoreProperties_Value3.getAllowSetters());
      
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[2];
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value3;
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_Value2;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value4 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertNotSame(jsonIgnoreProperties_Value4, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value4.equals((Object)jsonIgnoreProperties_Value1));
      assertTrue(jsonIgnoreProperties_Value4.getAllowSetters());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      linkedHashSet0.remove(jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, false, true);
      String string0 = jsonIgnoreProperties_Value1.toString();
      assertEquals("JsonIgnoreProperties.Value(ignored=[],ignoreUnknown=false,allowGetters=true,allowSetters=false,merge=true)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      String string0 = jsonIgnoreProperties_Value0.toString();
      assertEquals("JsonIgnoreProperties.Value(ignored=[],ignoreUnknown=true,allowGetters=false,allowSetters=false,merge=true)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = new JsonIgnoreProperties.Value(set0, false, false, true, true);
      boolean boolean0 = jsonIgnoreProperties_Value1.getAllowSetters();
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      boolean boolean0 = jsonIgnoreProperties_Value0.getAllowSetters();
      assertFalse(boolean0);
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      Set<String> set0 = jsonIgnoreProperties_Value0.getIgnored();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = new JsonIgnoreProperties.Value(set0, true, false, true, true);
      boolean boolean0 = jsonIgnoreProperties_Value1.getAllowGetters();
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.equals((Object)jsonIgnoreProperties_Value0));
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      jsonIgnoreProperties_Value1.findIgnoredForSerialization();
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, true, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value3 = (JsonIgnoreProperties.Value)jsonIgnoreProperties_Value2.readResolve();
      assertTrue(jsonIgnoreProperties_Value3.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value3.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value3, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value3.equals((Object)jsonIgnoreProperties_Value1));
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value3.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = (JsonIgnoreProperties.Value)jsonIgnoreProperties_Value0.readResolve();
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutMerge();
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.construct(linkedHashSet0, false, false, false, false);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withMerge();
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.getMerge());
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutMerge();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withMerge();
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertNotSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[5];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(false);
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      
      jsonIgnoreProperties_ValueArray0[2] = jsonIgnoreProperties_Value0;
      Set<String> set0 = jsonIgnoreProperties_ValueArray0[2].findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, true, false, true, false);
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      
      jsonIgnoreProperties_ValueArray0[4] = jsonIgnoreProperties_Value1;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_ValueArray0[4].withMerge();
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[6];
      JsonIgnoreProperties jsonIgnoreProperties0 = mock(JsonIgnoreProperties.class, CALLS_REAL_METHODS);
      doReturn(false).when(jsonIgnoreProperties0).allowGetters();
      doReturn(false).when(jsonIgnoreProperties0).allowSetters();
      doReturn(false).when(jsonIgnoreProperties0).ignoreUnknown();
      doReturn((String[]) null).when(jsonIgnoreProperties0).value();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.from(jsonIgnoreProperties0);
      jsonIgnoreProperties_ValueArray0[2] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_ValueArray0[2].withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowSetters();
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getMerge());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowSetters();
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertNotSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_ValueArray0[0];
      Set<String> set0 = jsonIgnoreProperties_ValueArray0[1].findIgnoredForDeserialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, true, true, false, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withAllowSetters();
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, false, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowGetters();
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
      assertSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, true, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value3 = jsonIgnoreProperties_Value2.withoutAllowGetters();
      assertNotSame(jsonIgnoreProperties_Value3, jsonIgnoreProperties_Value1);
      assertSame(jsonIgnoreProperties_Value3, jsonIgnoreProperties_Value2);
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value3.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value3.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value3.getMerge());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[6];
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      jsonIgnoreProperties_ValueArray0[3] = jsonIgnoreProperties_ValueArray0[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_ValueArray0[3].withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withAllowGetters();
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JsonIgnoreProperties jsonIgnoreProperties0 = mock(JsonIgnoreProperties.class, CALLS_REAL_METHODS);
      doReturn(false).when(jsonIgnoreProperties0).allowGetters();
      doReturn(false).when(jsonIgnoreProperties0).allowSetters();
      doReturn(true).when(jsonIgnoreProperties0).ignoreUnknown();
      doReturn(stringArray0).when(jsonIgnoreProperties0).value();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.from(jsonIgnoreProperties0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutIgnoreUnknown();
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.equals((Object)jsonIgnoreProperties_Value0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      Set<String> set0 = jsonIgnoreProperties_ValueArray0[0].findIgnoredForDeserialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, true, true, false, true);
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      
      jsonIgnoreProperties_ValueArray0[7] = jsonIgnoreProperties_Value1;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_ValueArray0[7].withoutIgnoreUnknown();
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = new JsonIgnoreProperties.Value((Set<String>) null, false, true, true, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withIgnoreUnknown();
      assertTrue(jsonIgnoreProperties_Value0.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withIgnoreUnknown();
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[7];
      String[] stringArray0 = new String[4];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, true, false, true, false);
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertEquals(1, set0.size());
      
      jsonIgnoreProperties_ValueArray0[3] = jsonIgnoreProperties_Value1;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_ValueArray0[3].withoutIgnored();
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getMerge());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties((Set<String>) null);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowGetters();
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withIgnored(stringArray0);
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withIgnored(stringArray0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.equals((Object)jsonIgnoreProperties_Value0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowGetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withIgnored(set0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value0));
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withIgnored(set0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.equals((Object)jsonIgnoreProperties_Value0));
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.merge(jsonIgnoreProperties_Value0, jsonIgnoreProperties_Value1);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value3 = JsonIgnoreProperties.Value.merge(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value3.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertSame(jsonIgnoreProperties_Value3, jsonIgnoreProperties_Value2);
      assertTrue(jsonIgnoreProperties_Value3.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value3.getMerge());
      assertFalse(jsonIgnoreProperties_Value3.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.merge((JsonIgnoreProperties.Value) null, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertNotNull(jsonIgnoreProperties_Value1);
      assertSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.construct(linkedHashSet0, true, true, true, true);
      String[] stringArray0 = new String[8];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value1;
      jsonIgnoreProperties_ValueArray0[5] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertFalse(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value0));
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
      assertNotNull(jsonIgnoreProperties_Value2);
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutIgnored();
      boolean boolean0 = jsonIgnoreProperties_Value0.equals(jsonIgnoreProperties_Value1);
      assertTrue(boolean0);
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      
      jsonIgnoreProperties_ValueArray0[2] = jsonIgnoreProperties_Value1;
      boolean boolean0 = jsonIgnoreProperties_ValueArray0[2].equals(jsonIgnoreProperties_ValueArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.empty();
      boolean boolean0 = jsonIgnoreProperties_Value0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jsonIgnoreProperties_Value0);
      boolean boolean0 = predicate0.test(jsonIgnoreProperties_Value0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      Object object0 = new Object();
      boolean boolean0 = jsonIgnoreProperties_Value0.equals(object0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.construct(linkedHashSet0, false, false, false, false);
      linkedHashSet0.contains(jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.construct(linkedHashSet0, true, true, true, true);
      linkedHashSet0.remove(jsonIgnoreProperties_Value0);
      assertTrue(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = linkedHashSet0.remove(jsonIgnoreProperties_Value0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      Set<String> set0 = jsonIgnoreProperties_Value1.findIgnoredForDeserialization();
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertNotSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertEquals(0, set0.size());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = new JsonIgnoreProperties.Value(linkedHashSet0, true, true, true, true);
      jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      assertTrue(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = (JsonIgnoreProperties.Value)jsonIgnoreProperties_Value0.readResolve();
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutMerge();
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[2];
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value1;
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertNotNull(jsonIgnoreProperties_Value2);
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value0));
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withMerge();
      assertSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties((Set<String>) linkedHashSet0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutAllowSetters();
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowSetters();
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withAllowSetters();
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, true, false);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withoutAllowGetters();
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value2.getMerge());
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.empty();
      Set<String> set0 = jsonIgnoreProperties_Value0.getIgnored();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = new JsonIgnoreProperties.Value(set0, true, true, true, true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withAllowGetters();
      assertSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.getMerge());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutIgnoreUnknown();
      assertNotSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withIgnoreUnknown();
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties(stringArray0);
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[2];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.empty();
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value1;
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value0));
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.construct(linkedHashSet0, true, true, true, true);
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = new JsonIgnoreProperties.Value(linkedHashSet0, false, true, true, true);
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      
      jsonIgnoreProperties_ValueArray0[5] = jsonIgnoreProperties_Value1;
      jsonIgnoreProperties_ValueArray0[7] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value0);
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value0));
      assertTrue(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertNotNull(jsonIgnoreProperties_Value2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = new JsonIgnoreProperties.Value(linkedHashSet0, false, true, true, true);
      jsonIgnoreProperties_ValueArray0[5] = jsonIgnoreProperties_Value1;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertTrue(jsonIgnoreProperties_Value2.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertTrue(jsonIgnoreProperties_Value2.getAllowGetters());
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertNotNull(jsonIgnoreProperties_Value2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoreUnknown(true);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withAllowSetters();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = jsonIgnoreProperties_Value1.withOverrides(jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value2.equals((Object)jsonIgnoreProperties_Value1));
      assertNotSame(jsonIgnoreProperties_Value2, jsonIgnoreProperties_Value1);
      assertTrue(jsonIgnoreProperties_Value0.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[2];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties((Set<String>) linkedHashSet0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(linkedHashSet0, false, false, false, false);
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_Value1;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value2 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertFalse(jsonIgnoreProperties_Value2.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value2.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value2.getAllowGetters());
      assertNotNull(jsonIgnoreProperties_Value2);
      assertFalse(jsonIgnoreProperties_Value2.getMerge());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.empty();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.merge(jsonIgnoreProperties_Value0, (JsonIgnoreProperties.Value) null);
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.EMPTY;
      JsonIgnoreProperties.Value[] jsonIgnoreProperties_ValueArray0 = new JsonIgnoreProperties.Value[8];
      jsonIgnoreProperties_ValueArray0[0] = jsonIgnoreProperties_Value0;
      jsonIgnoreProperties_ValueArray0[1] = jsonIgnoreProperties_Value0;
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.mergeAll(jsonIgnoreProperties_ValueArray0);
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.from((JsonIgnoreProperties) null);
      Set<String> set0 = jsonIgnoreProperties_Value0.findIgnoredForSerialization();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = JsonIgnoreProperties.Value.construct(set0, false, true, true, true);
      boolean boolean0 = jsonIgnoreProperties_Value1.getIgnoreUnknown();
      assertTrue(jsonIgnoreProperties_Value1.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value1.getAllowSetters());
      assertTrue(jsonIgnoreProperties_Value1.getMerge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonIgnoreProperties jsonIgnoreProperties0 = mock(JsonIgnoreProperties.class, CALLS_REAL_METHODS);
      doReturn(false).when(jsonIgnoreProperties0).allowGetters();
      doReturn(false).when(jsonIgnoreProperties0).allowSetters();
      doReturn(false).when(jsonIgnoreProperties0).ignoreUnknown();
      doReturn((String[]) null).when(jsonIgnoreProperties0).value();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.from(jsonIgnoreProperties0);
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value1 = jsonIgnoreProperties_Value0.withoutMerge();
      assertFalse(jsonIgnoreProperties_Value0.getMerge());
      assertFalse(jsonIgnoreProperties_Value1.getAllowSetters());
      assertSame(jsonIgnoreProperties_Value1, jsonIgnoreProperties_Value0);
      assertFalse(jsonIgnoreProperties_Value1.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value1.getIgnoreUnknown());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties((Set<String>) linkedHashSet0);
      jsonIgnoreProperties_Value0.valueFor();
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertTrue(jsonIgnoreProperties_Value0.getMerge());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsonIgnoreProperties.Value jsonIgnoreProperties_Value0 = JsonIgnoreProperties.Value.forIgnoredProperties((Set<String>) linkedHashSet0);
      boolean boolean0 = jsonIgnoreProperties_Value0.getMerge();
      assertFalse(jsonIgnoreProperties_Value0.getIgnoreUnknown());
      assertTrue(boolean0);
      assertFalse(jsonIgnoreProperties_Value0.getAllowGetters());
      assertFalse(jsonIgnoreProperties_Value0.getAllowSetters());
  }
}
