package org.apache.commons.cli.help;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.io.PipedWriter;
import java.util.Collections;
import org.junit.Test;

/**
 * This test class contains tests for TextHelpAppendable.
 * The original test class name and inheritance from a scaffolding class
 * suggest it was generated by a tool. This improved version retains the
 * original structure but focuses on making the test's logic and intent clear.
 */
public class TextHelpAppendable_ESTestTest59 extends TextHelpAppendable_ESTest_scaffolding {

    /**
     * Verifies that appendTable() throws an IOException when the underlying Appendable
     * is an unconnected PipedWriter. A PipedWriter must be connected to a
     * PipedReader before it can be used, otherwise any write operation will fail.
     */
    @Test
    public void appendTableShouldThrowIOExceptionForUnconnectedWriter() {
        // Arrange: Create a TextHelpAppendable with a PipedWriter that is not
        // connected to a PipedReader.
        final PipedWriter unconnectedWriter = new PipedWriter();
        final TextHelpAppendable helpFormatter = new TextHelpAppendable(unconnectedWriter);

        // A simple, empty table definition is sufficient to trigger the write operation.
        final TableDefinition dummyTable = TableDefinition.from(
            "Header",
            Collections.emptyList(),
            Collections.emptyList(),
            Collections.emptyList()
        );

        // Act & Assert: Attempting to append the table should throw an IOException.
        try {
            helpFormatter.appendTable(dummyTable);
            fail("Expected an IOException because the PipedWriter is not connected.");
        } catch (final IOException e) {
            // Verify that the exception is the specific one thrown for an unconnected pipe.
            assertEquals("Pipe not connected", e.getMessage());
        }
    }
}