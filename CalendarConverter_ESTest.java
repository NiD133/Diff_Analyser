/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:18:45 GMT 2025
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.convert.CalendarConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class CalendarConverter_ESTest extends CalendarConverter_ESTest_scaffolding {

    // Tests for getChronology() method
    @Test(timeout = 4000)
    public void testGetChronology_WithTimeZoneAndMockGregorianCalendar_ReturnsNotNull() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        ZoneOffset zoneOffset = ZoneOffset.MIN;
        TimeZone timeZone = TimeZone.getTimeZone((ZoneId) zoneOffset);
        MockGregorianCalendar calendar = new MockGregorianCalendar(timeZone);
        
        Chronology result = converter.getChronology(calendar, (Chronology) null);
        assertNotNull(result);
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithMockGregorianCalendarAndNullDateTimeZone_ReturnsNotNull() throws Throwable {
        CalendarConverter converter = CalendarConverter.INSTANCE;
        MockGregorianCalendar calendar = new MockGregorianCalendar(-3785, -2040, 0, -1127, -2040);
        
        Chronology result = converter.getChronology(calendar, (DateTimeZone) null);
        assertNotNull(result);
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithGregorianCalendarFromZonedDateTime_ReturnsNotNull() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        ZonedDateTime zonedDateTime = MockZonedDateTime.now();
        GregorianCalendar calendar = MockGregorianCalendar.from(zonedDateTime);
        
        Chronology result = converter.getChronology(calendar, (Chronology) null);
        assertNotNull(result);
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithGregorianChangeDateSet_ReturnsNotNull() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        MockDate changeDate = new MockDate(9223372036854775785L);
        MockGregorianCalendar calendar = new MockGregorianCalendar();
        calendar.setGregorianChange(changeDate);
        
        Chronology result = converter.getChronology(calendar, (DateTimeZone) null);
        assertNotNull(result);
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithGregorianCalendarFromZonedDateTimeAndSpecificTimeZone_ReturnsNotNull() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        DateTimeZone timeZone = DateTimeZone.forOffsetMillis(1963);
        MockGregorianCalendar mockCalendar = new MockGregorianCalendar(0, 1963, 0, -247581896, -21, 3826);
        ZonedDateTime zonedDateTime = mockCalendar.toZonedDateTime();
        GregorianCalendar calendar = MockGregorianCalendar.from(zonedDateTime);
        
        Chronology result = converter.getChronology(calendar, timeZone);
        assertNotNull(result);
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithUnsupportedTypeAndDateTimeZone_ReturnsISOChronology() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        // Passing converter instance (unsupported type) should return ISO chronology
        Chronology result = converter.getChronology(converter, (DateTimeZone) null);
        assertNotNull(result);
    }

    // Tests for exception cases in getChronology()
    @Test(timeout = 4000)
    public void testGetChronology_WithNullObjectAndDateTimeZone_ThrowsNullPointerException() throws Throwable {
        CalendarConverter converter = CalendarConverter.INSTANCE;
        try {
            converter.getChronology(null, (DateTimeZone) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithNullObjectAndChronology_ThrowsNullPointerException() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        try {
            converter.getChronology(null, (Chronology) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testGetChronology_WithUnsupportedTypeAndChronology_ThrowsClassCastException() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        try {
            converter.getChronology(converter, (Chronology) null);
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
            // Verify exception message
            assertTrue(e.getMessage().contains("org.joda.time.convert.CalendarConverter cannot be cast to java.util.Calendar"));
        }
    }

    // Tests for getInstantMillis() method
    @Test(timeout = 4000)
    public void testGetInstantMillis_WithMockGregorianCalendar_ReturnsZero() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        MockGregorianCalendar calendar = new MockGregorianCalendar(741, 206, 741, 741, 741, 206);
        
        long result = converter.getInstantMillis(calendar, (Chronology) null);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_WithDefaultMockGregorianCalendar_ReturnsFixedTime() throws Throwable {
        CalendarConverter converter = CalendarConverter.INSTANCE;
        MockGregorianCalendar calendar = new MockGregorianCalendar();
        
        // Expected value corresponds to mock's fixed time setting
        long result = converter.getInstantMillis(calendar, (Chronology) null);
        assertEquals(1392409281320L, result);
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_WithSystemTimeSet_ReturnsSetTime() throws Throwable {
        System.setCurrentTimeMillis(-1870L);
        CalendarConverter converter = CalendarConverter.INSTANCE;
        TimeZone timeZone = TimeZone.getDefault();
        MockGregorianCalendar calendar = new MockGregorianCalendar(timeZone);
        
        long result = converter.getInstantMillis(calendar, (Chronology) null);
        assertEquals(-1870L, result);
    }

    // Tests for exception cases in getInstantMillis()
    @Test(timeout = 4000)
    public void testGetInstantMillis_WithNullObject_ThrowsNullPointerException() throws Throwable {
        CalendarConverter converter = CalendarConverter.INSTANCE;
        try {
            converter.getInstantMillis(null, (Chronology) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testGetInstantMillis_WithUnsupportedObjectType_ThrowsClassCastException() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        try {
            converter.getInstantMillis(new Object(), (Chronology) null);
            fail("Expected ClassCastException");
        } catch (ClassCastException e) {
            // Verify exception message
            assertTrue(e.getMessage().contains("java.lang.Object cannot be cast to java.util.Calendar"));
        }
    }

    // Test for getSupportedType()
    @Test(timeout = 4000)
    public void testGetSupportedType_ReturnsCalendarClass() throws Throwable {
        CalendarConverter converter = new CalendarConverter();
        Class<?> result = converter.getSupportedType();
        assertFalse("Returned class should not be synthetic", result.isSynthetic());
    }
}