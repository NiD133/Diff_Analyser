package org.apache.commons.codec.binary;

import org.junit.Test;

/**
 * Test suite for {@link BinaryCodec}.
 *
 * Note: The original test was auto-generated by EvoSuite and was designed to
 * trigger a resource limit, likely an OutOfMemoryError. This refactored version
 * clarifies that intent.
 */
public class BinaryCodecUnderstandableTest {

    /**
     * Tests that attempting to encode an already-encoded, very large byte array
     * results in an OutOfMemoryError due to excessive memory allocation.
     *
     * <p>The {@link BinaryCodec#encode(byte[])} method expands the input byte array by a factor of 8.
     * This test demonstrates that repeatedly encoding the output can quickly lead to an
     * array size that exceeds the available heap memory in a constrained environment.
     */
    @Test(expected = OutOfMemoryError.class)
    public void encode_whenInputGrowsExponentially_throwsOutOfMemoryError() {
        // ARRANGE: Create input data that grows exponentially in size with each encoding step.
        // The BinaryCodec#encode method converts each byte into 8 bytes representing
        // ASCII '0's and '1's.

        // 1. Start with a small raw byte array.
        byte[] initialRawData = new byte[17]; // Size: 17 bytes

        // 2. First encoding pass.
        // Output size: 17 * 8 = 136 bytes
        byte[] onceEncodedData = BinaryCodec.toAsciiBytes(initialRawData);

        // 3. Second encoding pass. The input is now the output of the first pass.
        // Output size: 136 * 8 = 1,088 bytes
        byte[] twiceEncodedData = BinaryCodec.toAsciiBytes(onceEncodedData);

        // The next encoding step will attempt to allocate 1,088 * 8 = 8,704 bytes.
        // While this is not large for a modern JVM, test generation tools like
        // EvoSuite often run with a very small heap, making this allocation fail.
        // This test preserves that original intent.
        BinaryCodec binaryCodec = new BinaryCodec();

        // ACT & ASSERT
        // The encode method is expected to throw an OutOfMemoryError when it
        // cannot allocate the resulting 8,704-byte array.
        binaryCodec.encode(twiceEncodedData);
    }
}