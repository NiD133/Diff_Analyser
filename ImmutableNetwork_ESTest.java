/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:07:52 GMT 2025
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableNetwork;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardNetwork;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImmutableNetwork_ESTest extends ImmutableNetwork_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0);
      NetworkBuilder<Integer, Integer> networkBuilder1 = NetworkBuilder.from((Network<Integer, Integer>) standardNetwork0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder0 = new ImmutableNetwork.Builder<Integer, Integer>(networkBuilder1);
      Integer integer0 = new Integer(1029);
      Integer integer1 = new Integer(1);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder1 = immutableNetwork_Builder0.addEdge(integer0, integer1, integer1);
      assertNotNull(immutableNetwork_Builder1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableNetwork.copyOf((Network<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.NetworkBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableNetwork.copyOf((ImmutableNetwork<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<Integer, Comparable<Integer>> standardNetwork0 = new StandardNetwork<Integer, Comparable<Integer>>(networkBuilder0);
      NetworkBuilder<Integer, Comparable<Integer>> networkBuilder1 = NetworkBuilder.from((Network<Integer, Comparable<Integer>>) standardNetwork0);
      networkBuilder1.allowsParallelEdges(true);
      StandardNetwork<Integer, Integer> standardNetwork1 = new StandardNetwork<Integer, Integer>(networkBuilder1);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardNetwork1);
      NetworkBuilder<Integer, Integer> networkBuilder2 = NetworkBuilder.from((Network<Integer, Integer>) immutableNetwork0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder0 = networkBuilder2.immutable();
      Integer integer0 = new Integer(949);
      immutableNetwork_Builder0.addNode(integer0);
      ImmutableNetwork<Integer, Integer> immutableNetwork1 = immutableNetwork_Builder0.build();
      assertNotSame(immutableNetwork0, immutableNetwork1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      networkBuilder0.allowsParallelEdges(true);
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardNetwork0);
      NetworkBuilder<Integer, Integer> networkBuilder1 = NetworkBuilder.from((Network<Integer, Integer>) immutableNetwork0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder0 = networkBuilder1.immutable();
      Integer integer0 = new Integer((-967));
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder1 = immutableNetwork_Builder0.addNode(integer0);
      ImmutableNetwork<Integer, Integer> immutableNetwork1 = immutableNetwork_Builder1.build();
      assertNotSame(immutableNetwork1, immutableNetwork0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Integer, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Integer, Integer>(networkBuilder0);
      Integer integer0 = new Integer((-405));
      NetworkBuilder<Integer, Integer> networkBuilder1 = NetworkBuilder.from((Network<Integer, Integer>) standardMutableNetwork0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder0 = networkBuilder1.immutable();
      Integer integer1 = new Integer((-1124));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer1, integer0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder1 = immutableNetwork_Builder0.addEdge(endpointPair0, integer1);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = immutableNetwork_Builder1.build();
      assertNotNull(immutableNetwork0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardNetwork0);
      ImmutableNetwork<Integer, Integer> immutableNetwork1 = ImmutableNetwork.copyOf((Network<Integer, Integer>) immutableNetwork0);
      assertSame(immutableNetwork0, immutableNetwork1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Object, Object> standardMutableNetwork0 = new StandardMutableNetwork<Object, Object>(networkBuilder0);
      ImmutableNetwork<Object, Object> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Object, Object>) standardMutableNetwork0);
      ImmutableNetwork<Object, Object> immutableNetwork1 = ImmutableNetwork.copyOf(immutableNetwork0);
      assertSame(immutableNetwork0, immutableNetwork1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = ImmutableNetwork.copyOf((Network<Integer, Integer>) standardNetwork0);
      ImmutableGraph<Integer> immutableGraph0 = immutableNetwork0.asGraph();
      assertNotNull(immutableGraph0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Integer, Integer> standardNetwork0 = new StandardNetwork<Integer, Integer>(networkBuilder0);
      NetworkBuilder<Integer, Integer> networkBuilder1 = NetworkBuilder.from((Network<Integer, Integer>) standardNetwork0);
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder0 = networkBuilder1.immutable();
      Integer integer0 = new Integer((-967));
      ImmutableNetwork.Builder<Integer, Integer> immutableNetwork_Builder1 = immutableNetwork_Builder0.addNode(integer0);
      ImmutableNetwork<Integer, Integer> immutableNetwork0 = immutableNetwork_Builder1.build();
      assertNotNull(immutableNetwork0);
  }
}
