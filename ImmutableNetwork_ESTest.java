/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 19:07:52 GMT 2025
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableNetwork;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardNetwork;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class ImmutableNetwork_ESTest extends ImmutableNetwork_ESTest_scaffolding {

    // ========================= Builder Pattern Tests =========================
    
    @Test(timeout = 4000)
    public void builderAddEdge_returnsNonNullBuilder() throws Throwable {
        // Test that adding an edge returns a non-null builder instance
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        StandardNetwork<Integer, Integer> baseNetwork = new StandardNetwork<>(baseBuilder);
        NetworkBuilder<Integer, Integer> networkBuilder = NetworkBuilder.from(baseNetwork);
        
        ImmutableNetwork.Builder<Integer, Integer> builder = new ImmutableNetwork.Builder<>(networkBuilder);
        Integer node1 = 1029;
        Integer node2 = 1;
        Integer edge = 1;
        
        ImmutableNetwork.Builder<Integer, Integer> resultBuilder = builder.addEdge(node1, node2, edge);
        assertNotNull("Builder should be non-null after adding edge", resultBuilder);
    }

    @Test(timeout = 4000)
    public void builderAddNodeToUndirectedNetwork_createsNewNetworkInstance() throws Throwable {
        // Test that adding a node creates a new network instance
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.undirected();
        StandardNetwork<Integer, Comparable<Integer>> baseNetwork = new StandardNetwork<>(baseBuilder);
        NetworkBuilder<Integer, Comparable<Integer>> networkBuilder = NetworkBuilder.from(baseNetwork);
        
        networkBuilder.allowsParallelEdges(true);
        StandardNetwork<Integer, Integer> network = new StandardNetwork<>(networkBuilder);
        ImmutableNetwork<Integer, Integer> original = ImmutableNetwork.copyOf(network);
        
        NetworkBuilder<Integer, Integer> newBuilder = NetworkBuilder.from(original);
        ImmutableNetwork.Builder<Integer, Integer> builder = newBuilder.immutable();
        Integer node = 949;
        
        builder.addNode(node);
        ImmutableNetwork<Integer, Integer> newNetwork = builder.build();
        assertNotSame("New network should be different instance", original, newNetwork);
    }

    @Test(timeout = 4000)
    public void builderAddNodeToDirectedNetwork_createsNewNetworkInstance() throws Throwable {
        // Test that adding a node creates a new network instance
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        baseBuilder.allowsParallelEdges(true);
        StandardNetwork<Integer, Integer> baseNetwork = new StandardNetwork<>(baseBuilder);
        ImmutableNetwork<Integer, Integer> original = ImmutableNetwork.copyOf(baseNetwork);
        
        NetworkBuilder<Integer, Integer> networkBuilder = NetworkBuilder.from(original);
        ImmutableNetwork.Builder<Integer, Integer> builder = networkBuilder.immutable();
        Integer node = -967;
        
        builder.addNode(node);
        ImmutableNetwork<Integer, Integer> newNetwork = builder.build();
        assertNotSame("New network should be different instance", original, newNetwork);
    }

    @Test(timeout = 4000)
    public void builderAddEdgeWithEndpointPair_buildsSuccessfully() throws Throwable {
        // Test that adding an edge via EndpointPair builds successfully
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.undirected();
        StandardMutableNetwork<Integer, Integer> network = new StandardMutableNetwork<>(baseBuilder);
        NetworkBuilder<Integer, Integer> networkBuilder = NetworkBuilder.from(network);
        
        ImmutableNetwork.Builder<Integer, Integer> builder = networkBuilder.immutable();
        Integer node1 = -1124;
        Integer node2 = -405;
        EndpointPair<Integer> endpoints = EndpointPair.unordered(node1, node2);
        Integer edge = -1124;
        
        builder.addEdge(endpoints, edge);
        ImmutableNetwork<Integer, Integer> result = builder.build();
        assertNotNull("Network should be built successfully", result);
    }

    @Test(timeout = 4000)
    public void builderAddNode_buildsSuccessfully() throws Throwable {
        // Test that building after adding a node succeeds
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        StandardNetwork<Integer, Integer> baseNetwork = new StandardNetwork<>(baseBuilder);
        NetworkBuilder<Integer, Integer> networkBuilder = NetworkBuilder.from(baseNetwork);
        
        ImmutableNetwork.Builder<Integer, Integer> builder = networkBuilder.immutable();
        Integer node = -967;
        
        builder.addNode(node);
        ImmutableNetwork<Integer, Integer> result = builder.build();
        assertNotNull("Network should be built successfully", result);
    }

    // ========================= copyOf() Method Tests =========================
    
    @Test(timeout = 4000)
    public void copyOf_nullNetwork_throwsNullPointerException() throws Throwable {
        // Test that copying null network throws NPE
        try {
            ImmutableNetwork.copyOf((Network<Integer, Integer>) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void copyOf_nullImmutableNetwork_throwsNullPointerException() throws Throwable {
        // Test that copying null ImmutableNetwork throws NPE (deprecated method)
        try {
            ImmutableNetwork.copyOf((ImmutableNetwork<Object, Integer>) null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void copyOf_standardNetwork_returnsSameInstanceOnSubsequentCopy() throws Throwable {
        // Test that copying a standard network twice returns same instance
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        StandardNetwork<Integer, Integer> network = new StandardNetwork<>(baseBuilder);
        
        ImmutableNetwork<Integer, Integer> firstCopy = ImmutableNetwork.copyOf(network);
        ImmutableNetwork<Integer, Integer> secondCopy = ImmutableNetwork.copyOf(firstCopy);
        assertSame("Subsequent copies should return same instance", firstCopy, secondCopy);
    }

    @Test(timeout = 4000)
    public void copyOf_mutableNetwork_returnsSameInstanceOnSubsequentCopy() throws Throwable {
        // Test that copying a mutable network twice returns same instance
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        StandardMutableNetwork<Object, Object> mutableNetwork = new StandardMutableNetwork<>(baseBuilder);
        
        ImmutableNetwork<Object, Object> firstCopy = ImmutableNetwork.copyOf(mutableNetwork);
        ImmutableNetwork<Object, Object> secondCopy = ImmutableNetwork.copyOf(firstCopy);
        assertSame("Subsequent copies should return same instance", firstCopy, secondCopy);
    }

    // ========================= Other Method Tests =========================
    
    @Test(timeout = 4000)
    public void asGraph_returnsNonNullGraph() throws Throwable {
        // Test that asGraph() returns non-null
        NetworkBuilder<Object, Object> baseBuilder = NetworkBuilder.directed();
        StandardNetwork<Integer, Integer> network = new StandardNetwork<>(baseBuilder);
        ImmutableNetwork<Integer, Integer> immutableNetwork = ImmutableNetwork.copyOf(network);
        
        ImmutableGraph<Integer> graph = immutableNetwork.asGraph();
        assertNotNull("asGraph() should return non-null", graph);
    }
}