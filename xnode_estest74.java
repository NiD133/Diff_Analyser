package org.apache.ibatis.parsing;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.Properties;
import javax.imageio.metadata.IIOMetadataNode;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

public class XNode_ESTestTest74 extends XNode_ESTest_scaffolding {

    /**
     * Verifies that getLongAttribute throws a NumberFormatException when the
     * attribute value is a non-numeric string.
     */
    @Test(timeout = 4000)
    public void getLongAttributeShouldThrowNumberFormatExceptionForNonNumericValue() {
        // Arrange
        final String attributeName = "port";
        final String nonNumericValue = "eighty";

        // Create a DOM node and set an attribute with a non-numeric value.
        IIOMetadataNode node = new IIOMetadataNode();
        node.setAttribute(attributeName, nonNumericValue);

        // The XPathParser and Properties are required by the XNode constructor but are not
        // directly involved in the logic being tested.
        XPathParser parser = new XPathParser((Document) null, false);
        Properties variables = new Properties();
        XNode xNode = new XNode(parser, node, variables);

        // Act & Assert
        try {
            // Attempt to get the attribute as a Long, which should fail.
            xNode.getLongAttribute(attributeName, null);
            fail("Expected NumberFormatException because the attribute value is not a valid long.");
        } catch (NumberFormatException e) {
            // Verify that the exception was thrown for the expected reason.
            // The message is generated by Long.parseLong().
            String expectedMessage = "For input string: \"" + nonNumericValue + "\"";
            assertEquals(expectedMessage, e.getMessage());
        }
    }
}