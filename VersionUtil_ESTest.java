/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:40 GMT 2025
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.VersionUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VersionUtil_ESTest extends VersionUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = VersionUtil.parseVersionPart("0T*A{.*6/lD:1tm E_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = VersionUtil.parseVersionPart("9c*fdp6?ec}ur$$");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = VersionUtil.parseVersionPart("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = VersionUtil.parseVersionPart("3$Qtt~IU2x^1~fgh4]+");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("8juvlng,dux%Z/Gd4", "8juvlng,dux%Z/Gd4", "8juvlng,dux%Z/Gd4");
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMinorVersion());
      assertEquals(8, version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionUtil.parseVersionPart((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionUtil.parseVersion(";", ";", ";");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionUtil.mavenVersionFor((ClassLoader) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<JsonFactory> class0 = JsonFactory.class;
      Version version0 = VersionUtil.versionFor(class0);
      assertEquals(0, version0.getPatchLevel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("iQT[E/73*QBf", "iQT[E/73*QBf", "iQT[E/73*QBf");
      assertEquals(0, version0.getMajorVersion());
      assertEquals(73, version0.getMinorVersion());
      assertEquals(0, version0.getPatchLevel());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("com.fasterxml.jackson.core.util.VersionUtil", "com.fasterxml.jackson.core.util.VersionUtil", "com.fasterxml.jackson.core.util.VersionUtil");
      assertTrue(version0.isSnapshot());
      assertEquals(0, version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("yf;Hr?-6", "yf;Hr?-6", "yf;Hr?-6");
      assertEquals(6, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("", "", "");
      assertTrue(version0.isUknownVersion());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion("Ve", "GR", "");
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("GR", version0.getGroupId());
      assertEquals(0, version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = VersionUtil.parseVersion((String) null, (String) null, (String) null);
      assertEquals("", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Version version0 = VersionUtil.mavenVersionFor(classLoader0, "[][.~r)|i/l/", "Ve");
      assertEquals(0, version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionUtil.throwInternalReturnAny();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        VersionUtil.throwInternal();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Version version0 = VersionUtil.packageVersionFor(class0);
      assertTrue(version0.isUknownVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VersionUtil versionUtil0 = new VersionUtil();
      Version version0 = versionUtil0.version();
      assertFalse(version0.isSnapshot());
  }
}
