/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:40 GMT 2025
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.util.VersionUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VersionUtil_ESTest extends VersionUtil_ESTest_scaffolding {

    // Tests for parseVersionPart method
    // ================================
    
    @Test(timeout = 4000)
    public void testParseVersionPart_WithLeadingZeroAndNonDigits()  throws Throwable {
        int result = VersionUtil.parseVersionPart("0T*A{.*6/lD:1tm E_");
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void testParseVersionPart_WithLeadingNineAndNonDigits()  throws Throwable {
        int result = VersionUtil.parseVersionPart("9c*fdp6?ec}ur$$");
        assertEquals(9, result);
    }

    @Test(timeout = 4000)
    public void testParseVersionPart_EmptyString()  throws Throwable {
        int result = VersionUtil.parseVersionPart("");
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void testParseVersionPart_WithLeadingThreeAndNonDigits()  throws Throwable {
        int result = VersionUtil.parseVersionPart("3$Qtt~IU2x^1~fgh4]+");
        assertEquals(3, result);
    }

    @Test(timeout = 4000)
    public void testParseVersionPart_NullInput_ThrowsNPE()  throws Throwable {
        try { 
            VersionUtil.parseVersionPart((String) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    // Tests for parseVersion method
    // =============================
    
    @Test(timeout = 4000)
    public void testParseVersion_WithLeading8_ReturnsMajor8()  throws Throwable {
        Version version = VersionUtil.parseVersion("8juvlng,dux%Z/Gd4", "8juvlng,dux%Z/Gd4", "8juvlng,dux%Z/Gd4");
        assertEquals(8, version.getMajorVersion());
        assertEquals(0, version.getMinorVersion());
        assertEquals(0, version.getPatchLevel());
    }

    @Test(timeout = 4000)
    public void testParseVersion_With73InMiddle_ReturnsMinor73()  throws Throwable {
        Version version = VersionUtil.parseVersion("iQT[E/73*QBf", "iQT[E/73*QBf", "iQT[E/73*QBf");
        assertEquals(0, version.getMajorVersion());
        assertEquals(73, version.getMinorVersion());
        assertEquals(0, version.getPatchLevel());
    }

    @Test(timeout = 4000)
    public void testParseVersion_WithPackageName_ReturnsSnapshot()  throws Throwable {
        Version version = VersionUtil.parseVersion("com.fasterxml.jackson.core.util.VersionUtil", 
            "com.fasterxml.jackson.core.util.VersionUtil", 
            "com.fasterxml.jackson.core.util.VersionUtil");
        assertTrue(version.isSnapshot());
        assertEquals(0, version.getMinorVersion());
    }

    @Test(timeout = 4000)
    public void testParseVersion_WithTrailing6_ReturnsPatch6()  throws Throwable {
        Version version = VersionUtil.parseVersion("yf;Hr?-6", "yf;Hr?-6", "yf;Hr?-6");
        assertEquals(0, version.getMajorVersion());
        assertEquals(6, version.getPatchLevel());
    }

    @Test(timeout = 4000)
    public void testParseVersion_EmptyString_ReturnsUnknownVersion()  throws Throwable {
        Version version = VersionUtil.parseVersion("", "", "");
        assertTrue(version.isUknownVersion());
    }

    @Test(timeout = 4000)
    public void testParseVersion_ShortVersionString_ReturnsBaseVersion()  throws Throwable {
        Version version = VersionUtil.parseVersion("Ve", "GR", "");
        assertEquals("", version.getArtifactId());
        assertEquals(0, version.getPatchLevel());
        assertEquals(0, version.getMajorVersion());
        assertEquals("GR", version.getGroupId());
        assertEquals(0, version.getMinorVersion());
    }

    @Test(timeout = 4000)
    public void testParseVersion_NullInput_ReturnsVersionWithEmptyArtifactId()  throws Throwable {
        Version version = VersionUtil.parseVersion((String) null, (String) null, (String) null);
        assertEquals("", version.getArtifactId());
    }

    @Test(timeout = 4000)
    public void testParseVersion_InvalidString_ThrowsArrayIndexOutOfBounds()  throws Throwable {
        try { 
            VersionUtil.parseVersion(";", ";", ";");
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch(ArrayIndexOutOfBoundsException e) {
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    // Tests for mavenVersionFor method
    // ================================
    
    @Test(timeout = 4000)
    public void testMavenVersionFor_NullClassLoader_ThrowsNPE()  throws Throwable {
        try { 
            VersionUtil.mavenVersionFor((ClassLoader) null, "", "");
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void testMavenVersionFor_NonExistentModule_ReturnsDefaultVersion()  throws Throwable {
        ClassLoader classLoader = ClassLoader.getSystemClassLoader();
        Version version = VersionUtil.mavenVersionFor(classLoader, "[][.~r)|i/l/", "Ve");
        assertEquals(0, version.getMajorVersion());
    }

    // Tests for versionFor and packageVersionFor methods
    // =================================================
    
    @Test(timeout = 4000)
    public void testVersionFor_JsonFactoryClass_ReturnsNonUnknownVersion()  throws Throwable {
        Class<JsonFactory> jsonFactoryClass = JsonFactory.class;
        Version version = VersionUtil.versionFor(jsonFactoryClass);
        assertEquals(0, version.getPatchLevel());
    }

    @Test(timeout = 4000)
    public void testPackageVersionFor_ObjectClass_ReturnsUnknownVersion()  throws Throwable {
        Class<Object> objectClass = Object.class;
        Version version = VersionUtil.packageVersionFor(objectClass);
        assertTrue(version.isUknownVersion());
    }

    // Tests for deprecated version() method
    // =====================================
    
    @Test(timeout = 4000)
    public void testVersionUtilInstanceVersion_ReturnsNonSnapshot()  throws Throwable {
        VersionUtil versionUtil = new VersionUtil();
        Version version = versionUtil.version();
        assertFalse(version.isSnapshot());
    }

    // Tests for internal exception throwing utilities
    // ==============================================
    
    @Test(timeout = 4000)
    public void testThrowInternal_ThrowsRuntimeException()  throws Throwable {
        try { 
            VersionUtil.throwInternal();
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }

    @Test(timeout = 4000)
    public void testThrowInternalReturnAny_ThrowsRuntimeException()  throws Throwable {
        try { 
            VersionUtil.throwInternalReturnAny();
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
        }
    }
}