/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:46:36 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.NodeIterator;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class NodeIterator_ESTest extends NodeIterator_ESTest_scaffolding {

    // Tests for basic iteration functionality
    // =======================================

    @Test(timeout = 4000)
    public void next_returnsNodesWithValidParent() throws Throwable {
        // Setup: Create document with content
        Document document = Parser.parseBodyFragment(
            "org.jsouphnodes.NodeIterator", 
            "org.jsouphnodes.NodeIterator"
        );
        NodeIterator<Node> iterator = NodeIterator.from(document);
        
        // Skip root node
        iterator.next();
        // Get first child node
        Node childNode = iterator.next();
        
        // Verify node has parent relationship
        assertTrue("Child node should have parent", childNode.hasParent());
    }

    @Test(timeout = 4000)
    public void hasNext_returnsTrueForDocumentWithNodes() throws Throwable {
        Document document = Parser.parseBodyFragment(
            "org.jsoup.nodes.NodeIterator", 
            "org.jsoup.nodes.NodeIterator"
        );
        NodeIterator<Node> iterator = NodeIterator.from(document);
        
        assertTrue("Should have next node in populated document", iterator.hasNext());
    }

    // Tests for edge cases
    // ====================

    @Test(timeout = 4000)
    public void hasNext_returnsFalseForEmptyDocumentWithFilteredType() throws Throwable {
        // Setup: Empty document + filtered node type
        Document document = Parser.parseBodyFragment("", "");
        NodeIterator<FormElement> iterator = new NodeIterator<>(document, FormElement.class);
        
        assertFalse("No form elements should exist", iterator.hasNext());
    }

    @Test(timeout = 4000)
    public void restart_resetsIteratorToNewRoot() throws Throwable {
        Document document = Parser.parseBodyFragment("", "");
        NodeIterator<Node> iterator = NodeIterator.from(document);
        
        // Should reset iterator state
        iterator.restart(document);
        
        // Basic document property check
        assertFalse("Document should not be block element", document.isBlock());
    }

    // Tests for exception cases
    // =========================

    @Test(timeout = 4000)
    public void remove_beforeNextCall_throwsException() throws Throwable {
        Document document = new Document("org.jsoup.nodes.NodeIterator", "");
        Element element = document.doClone(document);
        NodeIterator<FormElement> iterator = new NodeIterator<>(element, FormElement.class);
        
        try {
            iterator.remove();
            fail("Expected IndexOutOfBoundsException when removing before next()");
        } catch (IndexOutOfBoundsException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void next_whenNoMatchingNodes_throwsException() throws Throwable {
        Document document = Parser.parseBodyFragment("   ", "   ");
        Element element = document.prependChild(document);
        NodeIterator<FormElement> iterator = new NodeIterator<>(element, FormElement.class);
        
        try {
            iterator.next();
            fail("Expected NoSuchElementException when no matching nodes exist");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void next_onCorruptedDocument_throwsException() throws Throwable {
        Document document = new Document("", null);
        document.childNodes = null; // Corrupt state
        NodeIterator<FormElement> iterator = new NodeIterator<>(document, FormElement.class);
        
        try {
            iterator.next();
            fail("Expected NullPointerException on corrupted document structure");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void from_nullStartNode_throwsException() throws Throwable {
        try {
            NodeIterator.from(null);
            fail("Expected IllegalArgumentException for null start node");
        } catch (IllegalArgumentException e) {
            // Verify correct exception message
            assertTrue(e.getMessage().contains("Object must not be null"));
        }
    }

    @Test(timeout = 4000)
    public void constructor_nullStartNode_throwsException() throws Throwable {
        try {
            new NodeIterator<>(null, FormElement.class);
            fail("Expected IllegalArgumentException for null start node");
        } catch (IllegalArgumentException e) {
            // Verify correct exception message
            assertTrue(e.getMessage().contains("Object must not be null"));
        }
    }

    @Test(timeout = 4000)
    public void restart_nullNode_throwsException() throws Throwable {
        Document document = Parser.parse("http://www.w3.org/1999/xhtml", "http://www.w3.org/2000/svg");
        NodeIterator<FormElement> iterator = new NodeIterator<>(document, FormElement.class);
        
        try {
            iterator.restart(null);
            fail("Expected NullPointerException when restarting with null");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void remove_invalidatesIterator_nextThrowsException() throws Throwable {
        Document document = Parser.parseBodyFragment(
            "org.jsoup.nodes.NodeIterator", 
            "org.jsoup.nodes.NodeIterator"
        );
        Element element = document.doClone(document);
        NodeIterator<FormElement> iterator = new NodeIterator<>(element, FormElement.class);
        
        // Remove without calling next() first (should be invalid)
        iterator.remove();
        
        try {
            iterator.next();
            fail("Expected NoSuchElementException after invalid remove");
        } catch (NoSuchElementException e) {
            // Expected exception
        }
    }

    // Additional tests (may be unrelated but preserved)
    // =================================================

    @Test(timeout = 4000)
    public void wholeText_emptyWhenOnlyWhitespaceInDocument() throws Throwable {
        Document document = Document.createShell("org.jsoup.>odes.NodeIterator");
        document.appendElement("org.jsoup.>odes.NodeIterator");
        assertEquals("Document text should be empty", "", document.wholeText());
    }

    @Test(timeout = 4000)
    public void wholeText_emptyForNewDocument() throws Throwable {
        Document document = new Document("org.jsoup.>odes.NodeIterator", "org.jsoup.>odes.NodeIterator");
        assertEquals("New document should have empty text", "", document.wholeText());
    }
}