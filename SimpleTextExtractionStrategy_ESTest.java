/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 17 18:30:28 GMT 2025
 */

package com.itextpdf.text.pdf.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.pdf.CMapAwareDocumentFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfDate;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfIndirectReference;
import com.itextpdf.text.pdf.PdfSigLockDictionary;
import com.itextpdf.text.pdf.PdfString;
import com.itextpdf.text.pdf.parser.GraphicsState;
import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.MarkedContentInfo;
import com.itextpdf.text.pdf.parser.Matrix;
import com.itextpdf.text.pdf.parser.SimpleTextExtractionStrategy;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import java.nio.CharBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import javax.swing.text.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleTextExtractionStrategy_ESTest extends SimpleTextExtractionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = new Matrix();
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = new PdfAction();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      simpleTextExtractionStrategy0.appendTextChunk("Cp1257");
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      assertEquals("Cp1257", simpleTextExtractionStrategy0.getResultantText());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      StringBuffer stringBuffer0 = new StringBuffer(",.,u/K'~XTk8go");
      simpleTextExtractionStrategy0.appendTextChunk(stringBuffer0);
      String string0 = simpleTextExtractionStrategy0.getResultantText();
      assertEquals(",.,u/K'~XTk8go", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = graphicsState0.getCtm();
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = new PdfAction("UnicodeBig", "UnicodeBig", "", "PDF");
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      PdfString pdfString0 = new PdfString("MacRoman", "Times-BoldItalic");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.renderText(textRenderInfo0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Times-BoldItalic
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = new Matrix();
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = PdfAction.createLaunch("", "", "PDF", "");
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      PdfString pdfString0 = new PdfString("Identity-H", ">|");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.renderText(textRenderInfo0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // >|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = graphicsState0.getCtm();
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = new PdfAction("");
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      PdfString pdfString0 = new PdfString("Cp1252", "Cp1250");
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfString0, graphicsState0, matrix0, linkedHashSet0);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.renderText(textRenderInfo0);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      Segment segment0 = new Segment((char[]) null, 2087, 2087);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.appendTextChunk(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      char[] charArray0 = new char[2];
      Segment segment0 = new Segment(charArray0, (-26), (-26));
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.appendTextChunk(segment0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end -26, s.length() -26
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      char[] charArray0 = new char[0];
      Segment segment0 = new Segment(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.appendTextChunk(segment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("javax.swing.text.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = graphicsState0.ctm;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = new PdfAction();
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      StringBuffer stringBuffer0 = new StringBuffer("Inserting row at position ");
      simpleTextExtractionStrategy0.appendTextChunk(stringBuffer0);
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      assertEquals("Inserting row at position ", simpleTextExtractionStrategy0.getResultantText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = graphicsState0.ctm;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = PdfAction.createLaunch("", "", "PDF", "");
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      CharBuffer charBuffer0 = CharBuffer.allocate(1037);
      simpleTextExtractionStrategy0.appendTextChunk(charBuffer0);
      // Undeclared exception!
      try { 
        simpleTextExtractionStrategy0.renderText(textRenderInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.pdf.parser.SimpleTextExtractionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      simpleTextExtractionStrategy0.beginTextBlock();
      assertEquals("", simpleTextExtractionStrategy0.getResultantText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PdfDate pdfDate0 = new PdfDate();
      GraphicsState graphicsState0 = new GraphicsState();
      Matrix matrix0 = graphicsState0.ctm;
      LinkedHashSet<MarkedContentInfo> linkedHashSet0 = new LinkedHashSet<MarkedContentInfo>();
      PdfAction pdfAction0 = PdfAction.createLaunch("", "", "PDF", "");
      CMapAwareDocumentFont cMapAwareDocumentFont0 = new CMapAwareDocumentFont(pdfAction0);
      graphicsState0.font = cMapAwareDocumentFont0;
      TextRenderInfo textRenderInfo0 = new TextRenderInfo(pdfDate0, graphicsState0, matrix0, linkedHashSet0);
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1037);
      simpleTextExtractionStrategy0.appendTextChunk(charBuffer0);
      simpleTextExtractionStrategy0.renderText(textRenderInfo0);
      assertEquals(0, textRenderInfo0.getTextRenderMode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      String string0 = simpleTextExtractionStrategy0.getResultantText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      simpleTextExtractionStrategy0.endTextBlock();
      assertEquals("", simpleTextExtractionStrategy0.getResultantText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTextExtractionStrategy simpleTextExtractionStrategy0 = new SimpleTextExtractionStrategy();
      PdfSigLockDictionary.LockPermissions pdfSigLockDictionary_LockPermissions0 = PdfSigLockDictionary.LockPermissions.FORM_FILLING_AND_ANNOTATION;
      PdfSigLockDictionary pdfSigLockDictionary0 = new PdfSigLockDictionary(pdfSigLockDictionary_LockPermissions0);
      GraphicsState graphicsState0 = new GraphicsState();
      HashSet<MarkedContentInfo> hashSet0 = new HashSet<MarkedContentInfo>();
      ImageRenderInfo imageRenderInfo0 = ImageRenderInfo.createForXObject(graphicsState0, (PdfIndirectReference) null, (PdfDictionary) pdfSigLockDictionary0, (Collection<MarkedContentInfo>) hashSet0);
      simpleTextExtractionStrategy0.renderImage(imageRenderInfo0);
      assertEquals("", simpleTextExtractionStrategy0.getResultantText());
  }
}
