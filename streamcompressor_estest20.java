package org.apache.commons.compress.archivers.zip;

import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

/**
 * This test class contains tests for the {@link StreamCompressor} factory methods.
 * The original test class name, generated by a test tool, has been preserved.
 */
public class StreamCompressor_ESTestTest20 extends StreamCompressor_ESTest_scaffolding {

    /**
     * Tests that calling {@link StreamCompressor#create(int, ScatterGatherBackingStore)}
     * with an invalid compression level throws an {@link IllegalArgumentException}.
     * <p>
     * The valid compression levels are defined by {@link java.util.zip.Deflater},
     * which expects a value between -1 (default) and 9.
     */
    @Test(timeout = 4000)
    public void createWithInvalidCompressionLevelThrowsIllegalArgumentException() {
        // Arrange: Define an invalid compression level. According to java.util.zip.Deflater,
        // valid levels are -1 (for the default) and the range 0-9.
        final int invalidCompressionLevel = -2;

        // Act & Assert: Attempt to create a StreamCompressor and expect an exception.
        try {
            // The ScatterGatherBackingStore argument is not relevant for this test, so it can be null.
            StreamCompressor.create(invalidCompressionLevel, null);
            fail("Expected an IllegalArgumentException for an invalid compression level, but none was thrown.");
        } catch (final IllegalArgumentException e) {
            // This is the expected outcome. The exception originates from the underlying
            // java.util.zip.Deflater constructor. We can verify its message to confirm the cause.
            final String expectedMessageFragment = "invalid compression level";
            assertTrue(
                "The exception message should indicate the cause of the error.",
                e.getMessage() != null && e.getMessage().contains(expectedMessageFragment)
            );
        }
    }
}