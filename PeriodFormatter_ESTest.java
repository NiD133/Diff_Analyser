/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:25:25 GMT 2025
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodFormatter_ESTest extends PeriodFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Parsing not supported", "Parsing not supported");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, true, 2078, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Locale locale0 = Locale.GERMANY;
      StringWriter stringWriter0 = new StringWriter(2078);
      Period period0 = new Period(0, 1818, Integer.MAX_VALUE, 0, 623158436, 0, 0, 0);
      Duration duration0 = Duration.standardMinutes((-1814L));
      Seconds seconds0 = duration0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      periodFormatter0.printTo((Writer) stringWriter0, (ReadablePeriod) period0);
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      stringArray0[2] = "E";
      stringArray0[3] = "E";
      stringArray0[4] = "E";
      stringArray0[5] = "E";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("E", "E", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, false, true);
      Locale locale0 = Locale.KOREA;
      PeriodType periodType0 = PeriodType.millis();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertSame(periodFormatter0, periodFormatter1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("PeriodFormat.months.list");
      Locale locale0 = Locale.KOREA;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, (PeriodType) null);
      Period period0 = new Period();
      Minutes minutes0 = period0.toStandardMinutes();
      String string0 = periodFormatter0.print(minutes0);
      assertEquals("PeriodFormat.months.list", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("}=pKmkg&.wlkU)`)%`");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Period period0 = periodFormatter0.parsePeriod("}=pKmkg&.wlkU)`)%`");
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Weeks weeks0 = Weeks.weeks(1);
      Minutes minutes0 = weeks0.toStandardMinutes();
      MutablePeriod mutablePeriod0 = minutes0.toMutablePeriod();
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "/M:TICzBQXt^", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, periodType0);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, ",6DaFIC#Q<", 10);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      PeriodPrinter periodPrinter0 = periodFormatter0.getPrinter();
      assertSame(periodPrinter0, periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Parsing not supported", "Parsing not supported");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, true, 2078, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Locale locale0 = Locale.GERMANY;
      Duration duration0 = Duration.standardMinutes((-1814L));
      Seconds seconds0 = duration0.toStandardSeconds();
      PeriodType periodType0 = seconds0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_FieldFormatter0, periodParser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.ENGLISH;
      Hours hours0 = Hours.TWO;
      PeriodType periodType0 = hours0.getPeriodType();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType1);
      PeriodType periodType2 = periodFormatter0.getParseType();
      assertEquals(0, periodType2.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      PeriodType periodType1 = periodFormatter0.getParseType();
      assertEquals(1, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.KOREAN;
      PeriodType periodType0 = PeriodType.seconds();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      Locale locale1 = periodFormatter0.getLocale();
      assertEquals("ko", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) minutes0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((StringBuffer) null, (ReadablePeriod) seconds0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Weeks weeks0 = Weeks.TWO;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) weeks0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) stringWriter0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Weeks weeks0 = Weeks.TWO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      try { 
        periodFormatter0.printTo((Writer) pipedWriter0, (ReadablePeriod) minutes0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "AJq6";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("AJq6");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("AJq6", "AJq6", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      Locale locale0 = Locale.GERMANY;
      Years years0 = Years.MAX_VALUE;
      PeriodType periodType0 = years0.getPeriodType();
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.print(years0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        periodFormatter0.print(hours0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.print((ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("year");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormat_DynamicWordBased0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "qn";
      stringArray0[2] = "qn";
      stringArray0[3] = "qn";
      stringArray0[4] = "qn";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("qn", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, false);
      Locale locale0 = Locale.ENGLISH;
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Separator0, locale0, periodType0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormat_DynamicWordBased0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("qn");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, "", (-711));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto(mutablePeriod0, (String) null, 3121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseInto((ReadWritablePeriod) null, (String) null, (-1402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("MIT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"MIT\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("PeriodFormat.months.list");
      Locale locale0 = Locale.KOREA;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, (PeriodType) null);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("v:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"v:\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatter0.getParser();
      assertNull(periodParser0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      Locale locale0 = periodFormatter0.getLocale();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      // Undeclared exception!
      try { 
        periodFormatter0.parseMutablePeriod("aXDKT&");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\"");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.parsePeriod("Parsing not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Parsing not supported\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      StringBuffer stringBuffer0 = new StringBuffer("~eGa!VG)p");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      Seconds seconds0 = Seconds.ZERO;
      // Undeclared exception!
      try { 
        periodFormatter0.print(seconds0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0);
      PeriodType periodType0 = PeriodType.years();
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertNotSame(periodFormatter2, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\"");
      Locale locale0 = Locale.KOREAN;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Locale locale1 = (Locale)locale0.clone();
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withLocale(locale1);
      assertNotSame(periodFormatter2, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      Locale locale0 = Locale.JAPANESE;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, (PeriodType) null);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale((Locale) null);
      assertNotSame(periodFormatter1, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      Locale locale0 = Locale.US;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0, locale0, periodType0);
      boolean boolean0 = periodFormatter0.isParser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null, locale0, periodType0);
      boolean boolean0 = periodFormatter0.isParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\"");
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Composite0);
      boolean boolean0 = periodFormatter0.isPrinter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(11, 11, 1350, true, (-1158), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.GERMANY;
      PeriodType periodType0 = PeriodType.time();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      String string0 = periodFormatter0.print(mutablePeriod0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("", periodFormatter0);
      int int0 = periodFormatter0.parseInto(mutablePeriod0, "", 514);
      assertEquals((-515), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(11, 11, 1350, true, (-1158), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.GERMANY;
      PeriodType periodType0 = PeriodType.time();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      // Undeclared exception!
      periodFormatter0.parseInto(mutablePeriod0, "LimitChronology[", (-1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodType periodType0 = periodFormatter0.getParseType();
      assertNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        periodFormatter0.printTo((Writer) null, (ReadablePeriod) weeks0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(11, 11, 1350, true, (-1158), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.GERMANY;
      PeriodType periodType0 = PeriodType.time();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, locale0, periodType0);
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      StringBuffer stringBuffer0 = new StringBuffer();
      periodFormatter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0);
      assertEquals(0, stringBuffer0.length());
  }
}
