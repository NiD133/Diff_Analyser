package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * This class contains refactored tests for the {@link SimpleBloomFilter}.
 * The original test was auto-generated by EvoSuite and has been rewritten
 * for improved human understandability and maintainability.
 */
public class SimpleBloomFilter_ESTestTest4 {

    /**
     * Tests that merging a Hasher into an empty SimpleBloomFilter correctly
     * marks the filter as non-empty and reports that a change was made.
     */
    @Test
    public void testMergeWithHasherMakesFilterNonEmpty() {
        // Arrange: Create an empty SimpleBloomFilter and a Hasher.
        // The shape parameters are chosen to match the original test's values.
        Shape shape = Shape.fromNM(64, 64);
        SimpleBloomFilter filter = new SimpleBloomFilter(shape);

        // Verify the initial state: the filter should be empty.
        assertTrue("Filter should be empty before merging", filter.isEmpty());

        // A hasher that will produce indices to set in the filter.
        Hasher hasher = new EnhancedDoubleHasher(Integer.MAX_VALUE, 0L);

        // Act: Merge the hasher into the filter. The method should return true
        // because the filter's state was changed.
        boolean wasModified = filter.merge(hasher);

        // Assert: The filter should now be non-empty, and the merge operation
        // should have reported that the filter was modified.
        assertTrue("Merge should return true as the filter was modified", wasModified);
        assertFalse("Filter should not be empty after merging a hasher", filter.isEmpty());
    }
}