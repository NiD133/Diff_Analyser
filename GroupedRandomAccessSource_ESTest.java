/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 16:27:23 GMT 2025
 */

package com.itextpdf.text.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.io.ArrayRandomAccessSource;
import com.itextpdf.text.io.ByteBufferRandomAccessSource;
import com.itextpdf.text.io.GetBufferedRandomAccessSource;
import com.itextpdf.text.io.GroupedRandomAccessSource;
import com.itextpdf.text.io.IndependentRandomAccessSource;
import com.itextpdf.text.io.MappedChannelRandomAccessSource;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.WindowRandomAccessSource;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupedRandomAccessSource_ESTest extends GroupedRandomAccessSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[11];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get(10L, byteArray0, 5, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[1];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) 0, byteArray0, (-10), (-10));
      assertEquals(2L, groupedRandomAccessSource0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[0];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.sourceInUse(arrayRandomAccessSource0);
      assertEquals(0L, groupedRandomAccessSource0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[0];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      long long0 = groupedRandomAccessSource0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[3];
      randomAccessSourceArray0[0] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[2] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      long long0 = groupedRandomAccessSource0.length();
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[9];
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      WindowRandomAccessSource windowRandomAccessSource0 = new WindowRandomAccessSource(getBufferedRandomAccessSource0, (-2024L), (-2024L));
      randomAccessSourceArray0[2] = (RandomAccessSource) windowRandomAccessSource0;
      randomAccessSourceArray0[3] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[4] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[5] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[6] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[7] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[8] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      long long0 = groupedRandomAccessSource0.length();
      assertEquals((-1936L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[1];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      WindowRandomAccessSource windowRandomAccessSource0 = new WindowRandomAccessSource(arrayRandomAccessSource0, 7L, 7L);
      IndependentRandomAccessSource independentRandomAccessSource0 = new IndependentRandomAccessSource(windowRandomAccessSource0);
      randomAccessSourceArray0[0] = (RandomAccessSource) independentRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) windowRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.getStartingSourceIndex(7L);
      assertEquals(1, int0);
      assertEquals(14L, groupedRandomAccessSource0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)3;
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[5];
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      randomAccessSourceArray0[2] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[3] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[4] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get(2L);
      assertEquals(3, int0);
      assertEquals(20L, groupedRandomAccessSource0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[3];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.close();
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get((long) 1, byteArray0, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.io.ArrayRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[7];
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[2] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[3] = (RandomAccessSource) arrayRandomAccessSource0;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1297);
      ByteBufferRandomAccessSource byteBufferRandomAccessSource0 = new ByteBufferRandomAccessSource(byteBuffer0);
      randomAccessSourceArray0[4] = (RandomAccessSource) byteBufferRandomAccessSource0;
      randomAccessSourceArray0[5] = (RandomAccessSource) arrayRandomAccessSource0;
      randomAccessSourceArray0[6] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get((long) 1297, byteArray0, (-1228), 1297);
        fail("Expecting exception: NoSuchMethodError");
      
      } catch(NoSuchMethodError e) {
         //
         // java.nio.ByteBuffer.position(I)Ljava/nio/ByteBuffer;
         //
         verifyException("com.itextpdf.text.io.ByteBufferRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[1];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      WindowRandomAccessSource windowRandomAccessSource0 = new WindowRandomAccessSource(arrayRandomAccessSource0, 7L, 7L);
      IndependentRandomAccessSource independentRandomAccessSource0 = new IndependentRandomAccessSource(windowRandomAccessSource0);
      randomAccessSourceArray0[0] = (RandomAccessSource) independentRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) windowRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.close();
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get((long) 1, byteArray0, 1, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already closed
         //
         verifyException("com.itextpdf.text.io.ArrayRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[7];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get((long) 1, byteArray0, 5239, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.io.ArrayRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[4];
      MappedChannelRandomAccessSource mappedChannelRandomAccessSource0 = new MappedChannelRandomAccessSource((FileChannel) null, 2L, 2L);
      randomAccessSourceArray0[0] = (RandomAccessSource) mappedChannelRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) mappedChannelRandomAccessSource0;
      byte[] byteArray0 = new byte[7];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[2] = (RandomAccessSource) arrayRandomAccessSource0;
      IndependentRandomAccessSource independentRandomAccessSource0 = new IndependentRandomAccessSource(randomAccessSourceArray0[1]);
      randomAccessSourceArray0[3] = (RandomAccessSource) independentRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      try { 
        groupedRandomAccessSource0.get(2L, byteArray0, (int) (byte)109, (int) (byte)43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // RandomAccessSource not opened
         //
         verifyException("com.itextpdf.text.io.MappedChannelRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[2];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.close();
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.io.ArrayRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[10];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.close();
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.get(10L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already closed
         //
         verifyException("com.itextpdf.text.io.ArrayRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      WindowRandomAccessSource windowRandomAccessSource0 = new WindowRandomAccessSource((RandomAccessSource) null, 328L, 328L);
      randomAccessSourceArray0[0] = (RandomAccessSource) windowRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      // Undeclared exception!
      try { 
        groupedRandomAccessSource0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.io.WindowRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GroupedRandomAccessSource groupedRandomAccessSource0 = null;
      try {
        groupedRandomAccessSource0 = new GroupedRandomAccessSource((RandomAccessSource[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.itextpdf.text.io.GroupedRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[0];
      GroupedRandomAccessSource groupedRandomAccessSource0 = null;
      try {
        groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.itextpdf.text.io.GroupedRandomAccessSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[1];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      WindowRandomAccessSource windowRandomAccessSource0 = new WindowRandomAccessSource(arrayRandomAccessSource0, 7L, 7L);
      IndependentRandomAccessSource independentRandomAccessSource0 = new IndependentRandomAccessSource(windowRandomAccessSource0);
      randomAccessSourceArray0[0] = (RandomAccessSource) independentRandomAccessSource0;
      randomAccessSourceArray0[1] = (RandomAccessSource) windowRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) 1, byteArray0, 1, 1);
      assertEquals(14L, groupedRandomAccessSource0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[5];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) 3, byteArray0, 3, 3);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[3];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get(12L);
      assertEquals((-1), int0);
      assertEquals(3L, groupedRandomAccessSource0.length());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[1];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) 1, byteArray0, 1, 1);
      assertEquals(1L, groupedRandomAccessSource0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[8];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.getStartingSourceIndex(1L);
      assertEquals(8L, groupedRandomAccessSource0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[7];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) (-3), byteArray0, (-3), (-3));
      assertEquals(7L, groupedRandomAccessSource0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[1];
      byte[] byteArray0 = new byte[2];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      int int0 = groupedRandomAccessSource0.get((long) 0);
      assertEquals(2L, groupedRandomAccessSource0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomAccessSource[] randomAccessSourceArray0 = new RandomAccessSource[2];
      byte[] byteArray0 = new byte[0];
      ArrayRandomAccessSource arrayRandomAccessSource0 = new ArrayRandomAccessSource(byteArray0);
      randomAccessSourceArray0[0] = (RandomAccessSource) arrayRandomAccessSource0;
      GetBufferedRandomAccessSource getBufferedRandomAccessSource0 = new GetBufferedRandomAccessSource(arrayRandomAccessSource0);
      randomAccessSourceArray0[1] = (RandomAccessSource) getBufferedRandomAccessSource0;
      GroupedRandomAccessSource groupedRandomAccessSource0 = new GroupedRandomAccessSource(randomAccessSourceArray0);
      groupedRandomAccessSource0.sourceReleased(arrayRandomAccessSource0);
      assertEquals(0L, groupedRandomAccessSource0.length());
  }
}
