/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 16:27:23 GMT 2025
 */

package com.itextpdf.text.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.itextpdf.text.io.ArrayRandomAccessSource;
import com.itextpdf.text.io.ByteBufferRandomAccessSource;
import com.itextpdf.text.io.GetBufferedRandomAccessSource;
import com.itextpdf.text.io.GroupedRandomAccessSource;
import com.itextpdf.text.io.IndependentRandomAccessSource;
import com.itextpdf.text.io.MappedChannelRandomAccessSource;
import com.itextpdf.text.io.RandomAccessSource;
import com.itextpdf.text.io.WindowRandomAccessSource;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
)
public class GroupedRandomAccessSource_ESTest extends GroupedRandomAccessSource_ESTest_scaffolding {

    // ================= Constructor Tests =================

    @Test(timeout = 4000)
    public void testConstructorWithNullSourcesThrowsException() {
        try {
            new GroupedRandomAccessSource((RandomAccessSource[]) null);
            fail("Expected NullPointerException for null sources array");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testConstructorWithEmptySourcesThrowsException() {
        RandomAccessSource[] emptySources = new RandomAccessSource[0];
        try {
            new GroupedRandomAccessSource(emptySources);
            fail("Expected ArrayIndexOutOfBoundsException for empty sources array");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    // ================= get() Method Tests =================

    @Test(timeout = 4000)
    public void testGetWithValidOffsetAndLength() throws Throwable {
        // Setup: Two sources with 11 bytes total
        byte[] sourceData = new byte[11]; // Defaults to zeros
        ArrayRandomAccessSource source1 = new ArrayRandomAccessSource(sourceData);
        GetBufferedRandomAccessSource source2 = new GetBufferedRandomAccessSource(source1);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source1, source2 }
        );

        byte[] buffer = new byte[11];
        int bytesRead = groupedSource.get(10L, buffer, 5, 5);

        assertEquals(5, bytesRead);
    }

    @Test(timeout = 4000)
    public void testGetWithNegativeLengthReturnsMinusOne() throws Throwable {
        byte[] sourceData = new byte[1];
        ArrayRandomAccessSource source1 = new ArrayRandomAccessSource(sourceData);
        GetBufferedRandomAccessSource source2 = new GetBufferedRandomAccessSource(source1);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source1, source2 }
        );

        byte[] buffer = new byte[1];
        int bytesRead = groupedSource.get(0L, buffer, -10, -10);

        assertEquals(-1, bytesRead);
        assertEquals(2L, groupedSource.length());
    }

    @Test(timeout = 4000)
    public void testGetAfterCloseThrowsException() throws Throwable {
        byte[] sourceData = new byte[1];
        ArrayRandomAccessSource source = new ArrayRandomAccessSource(sourceData);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source }
        );
        
        groupedSource.close();
        
        try {
            groupedSource.get(1L, sourceData, 1, 1);
            fail("Expected NullPointerException after closing source");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testGetWithOutOfBoundsOffsetReturnsMinusOne() throws Throwable {
        byte[] sourceData = new byte[3];
        ArrayRandomAccessSource source = new ArrayRandomAccessSource(sourceData);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source }
        );

        int result = groupedSource.get(12L);

        assertEquals(-1, result);
        assertEquals(3L, groupedSource.length());
    }

    @Test(timeout = 4000)
    public void testGetWithSingleSource() throws Throwable {
        byte[] sourceData = new byte[2];
        ArrayRandomAccessSource source = new ArrayRandomAccessSource(sourceData);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source }
        );

        int result = groupedSource.get(0L);

        assertEquals(0, result);
        assertEquals(2L, groupedSource.length());
    }

    // ================= length() Method Tests =================

    @Test(timeout = 4000)
    public void testLengthWithZeroLengthSources() throws Throwable {
        byte[] emptyData = new byte[0];
        ArrayRandomAccessSource source1 = new ArrayRandomAccessSource(emptyData);
        GetBufferedRandomAccessSource source2 = new GetBufferedRandomAccessSource(source1);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source1, source2 }
        );

        long length = groupedSource.length();

        assertEquals(0L, length);
    }

    @Test(timeout = 4000)
    public void testLengthWithMultipleSources() throws Throwable {
        byte[] data = new byte[5];
        ArrayRandomAccessSource source = new ArrayRandomAccessSource(data);
        GetBufferedRandomAccessSource bufferedSource = new GetBufferedRandomAccessSource(source);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { bufferedSource, bufferedSource, bufferedSource }
        );

        long length = groupedSource.length();

        assertEquals(15L, length);
    }

    @Test(timeout = 4000)
    public void testLengthWithNegativeSizedSource() throws Throwable {
        // Setup: Includes a WindowRandomAccessSource with negative size
        byte[] data = new byte[11];
        ArrayRandomAccessSource arraySource = new ArrayRandomAccessSource(data);
        GetBufferedRandomAccessSource bufferedSource = new GetBufferedRandomAccessSource(arraySource);
        WindowRandomAccessSource windowSource = new WindowRandomAccessSource(
            bufferedSource, -2024L, -2024L
        );

        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { 
                arraySource, bufferedSource, windowSource, bufferedSource,
                bufferedSource, bufferedSource, arraySource, bufferedSource, bufferedSource 
            }
        );

        long length = groupedSource.length();

        assertEquals(-1936L, length);
    }

    // ================= getStartingSourceIndex() Tests =================

    @Test(timeout = 4000)
    public void testGetStartingSourceIndex() throws Throwable {
        byte[] data = new byte[1];
        ArrayRandomAccessSource arraySource = new ArrayRandomAccessSource(data);
        WindowRandomAccessSource windowSource = new WindowRandomAccessSource(arraySource, 7L, 7L);
        IndependentRandomAccessSource independentSource = new IndependentRandomAccessSource(windowSource);

        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { independentSource, windowSource }
        );

        int sourceIndex = groupedSource.getStartingSourceIndex(7L);

        assertEquals(1, sourceIndex);
        assertEquals(14L, groupedSource.length());
    }

    // ================= sourceInUse/sourceReleased Tests =================

    @Test(timeout = 4000)
    public void testSourceInUse() throws Throwable {
        byte[] emptyData = new byte[0];
        ArrayRandomAccessSource source1 = new ArrayRandomAccessSource(emptyData);
        GetBufferedRandomAccessSource source2 = new GetBufferedRandomAccessSource(source1);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source1, source2 }
        );

        groupedSource.sourceInUse(source1); // Verify no exception
        assertEquals(0L, groupedSource.length());
    }

    @Test(timeout = 4000)
    public void testSourceReleased() throws Throwable {
        byte[] emptyData = new byte[0];
        ArrayRandomAccessSource source1 = new ArrayRandomAccessSource(emptyData);
        GetBufferedRandomAccessSource source2 = new GetBufferedRandomAccessSource(source1);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source1, source2 }
        );

        groupedSource.sourceReleased(source1); // Verify no exception
        assertEquals(0L, groupedSource.length());
    }

    // ================= Edge Case Tests =================

    @Test(timeout = 4000)
    public void testGetWithInvalidBufferOffset() throws Throwable {
        byte[] sourceData = new byte[2];
        ArrayRandomAccessSource source = new ArrayRandomAccessSource(sourceData);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { source }
        );

        try {
            groupedSource.get(1L, sourceData, 5239, 1);
            fail("Expected ArrayIndexOutOfBoundsException for invalid buffer offset");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testCloseWithNullSourceThrowsException() throws Throwable {
        WindowRandomAccessSource windowSource = new WindowRandomAccessSource(null, 328L, 328L);
        GroupedRandomAccessSource groupedSource = new GroupedRandomAccessSource(
            new RandomAccessSource[] { windowSource }
        );

        try {
            groupedSource.close();
            fail("Expected NullPointerException when closing source with null delegate");
        } catch (NullPointerException e) {
            // Expected behavior
        }
    }
}