/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:38 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import org.apache.commons.io.IORandomAccessFile;
import org.apache.commons.io.RandomAccessFileMode;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(
    mockJVMNonDeterminism = true,
    useVFS = true,
    useVNET = true,
    resetStaticState = true,
    separateClassLoader = true
)
public class RandomAccessFileMode_ESTest extends RandomAccessFileMode_ESTest_scaffolding {

    // Enum value tests
    @Test(timeout = 4000)
    public void testEnumValues_ShouldReturnAllModes() {
        RandomAccessFileMode[] modes = RandomAccessFileMode.values();
        assertEquals(4, modes.length);
    }

    @Test(timeout = 4000)
    public void testValueOf_READ_WRITE_ShouldReturnCorrectMode() {
        RandomAccessFileMode mode = RandomAccessFileMode.valueOf("READ_WRITE");
        assertEquals(RandomAccessFileMode.READ_WRITE, mode);
    }

    // Mode validation tests
    @Test(timeout = 4000)
    public void testValueOfMode_r_ShouldReturnReadOnly() {
        RandomAccessFileMode mode = RandomAccessFileMode.valueOfMode("r");
        assertEquals(RandomAccessFileMode.READ_ONLY, mode);
    }

    @Test(timeout = 4000)
    public void testValueOfMode_rws_ShouldReturnSyncAll() {
        RandomAccessFileMode mode = RandomAccessFileMode.valueOfMode("rws");
        assertEquals(RandomAccessFileMode.READ_WRITE_SYNC_ALL, mode);
    }

    @Test(timeout = 4000)
    public void testValueOfMode_rwd_ShouldReturnSyncContent() {
        RandomAccessFileMode mode = RandomAccessFileMode.valueOfMode("rwd");
        assertEquals(RandomAccessFileMode.READ_WRITE_SYNC_CONTENT, mode);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testValueOfMode_NullMode_ShouldThrowNullPointerException() {
        RandomAccessFileMode.valueOfMode(null);
    }

    @Test(timeout = 4000)
    public void testValueOfMode_InvalidMode_ShouldThrowIllegalArgumentException() {
        try {
            RandomAccessFileMode.valueOfMode("listener");
            fail("Expected IllegalArgumentException for invalid mode");
        } catch (IllegalArgumentException e) {
            assertEquals("listener", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testValueOf_WithWriteOption_ShouldReturnReadWrite() {
        OpenOption[] options = {StandardOpenOption.WRITE};
        RandomAccessFileMode mode = RandomAccessFileMode.valueOf(options);
        assertEquals(RandomAccessFileMode.READ_WRITE, mode);
    }

    @Test(timeout = 4000)
    public void testValueOf_WithSyncOptions_ShouldReturnSyncAll() {
        OpenOption[] options = new OpenOption[5];
        options[1] = StandardOpenOption.SYNC;
        options[2] = StandardOpenOption.SYNC;
        RandomAccessFileMode mode = RandomAccessFileMode.valueOf(options);
        assertEquals(RandomAccessFileMode.READ_WRITE_SYNC_ALL, mode);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testValueOf_NullOptions_ShouldThrowNullPointerException() {
        RandomAccessFileMode.valueOf((OpenOption[]) null);
    }

    // Mode property tests
    @Test(timeout = 4000)
    public void testGetMode_READ_WRITE_SYNC_ALL_ShouldReturn_rws() {
        assertEquals("rws", RandomAccessFileMode.READ_WRITE_SYNC_ALL.getMode());
    }

    // Implication logic tests
    @Test(timeout = 4000)
    public void testImplies_SameMode_ShouldReturnTrue() {
        assertTrue(RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.implies(
            RandomAccessFileMode.READ_WRITE_SYNC_CONTENT
        ));
    }

    @Test(timeout = 4000)
    public void testImplies_HigherLevelMode_ShouldReturnTrue() {
        assertTrue(RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.implies(
            RandomAccessFileMode.READ_ONLY
        ));
    }

    @Test(timeout = 4000)
    public void testImplies_LowerLevelMode_ShouldReturnFalse() {
        assertFalse(RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.implies(
            RandomAccessFileMode.READ_WRITE_SYNC_ALL
        ));
    }

    // File creation tests
    @Test(timeout = 4000)
    public void testCreateFile_READ_WRITE_SYNC_CONTENT_ShouldSucceed() throws Exception {
        // Setup file with content
        MockFile file = new MockFile("testFile");
        EvoSuiteFile evoFile = new EvoSuiteFile("testFile");
        FileSystemHandling.appendLineToFile(evoFile, "content");
        
        RandomAccessFile raf = RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.create(file);
        assertEquals(0L, raf.getFilePointer());
        assertEquals("rwd", raf.getMode());
    }

    @Test(timeout = 4000)
    public void testCreateString_READ_WRITE_SYNC_ALL_ShouldReturnCorrectMode() throws Exception {
        IORandomAccessFile file = (IORandomAccessFile) RandomAccessFileMode.READ_WRITE_SYNC_ALL.create("rws");
        assertEquals("rws", file.getMode());
    }

    @Test(timeout = 4000)
    public void testCreatePath_READ_WRITE_SYNC_CONTENT_ShouldSucceed() throws Exception {
        MockFile file = new MockFile("testPath");
        Path path = file.toPath();
        RandomAccessFile raf = RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.create(path);
        assertEquals(0L, raf.getFilePointer());
    }

    // IO operation tests
    @Test(timeout = 4000)
    public void testIo_READ_WRITE_SYNC_CONTENT_ShouldCreateFile() throws Exception {
        IORandomAccessFile file = RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.io(".4");
        assertEquals(0L, file.length());
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testIo_NullPath_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_WRITE_SYNC_ALL.io((String) null);
    }

    @Test(timeout = 4000)
    public void testIo_READ_ONLY_FileDoesNotExist_ShouldThrowException() {
        try {
            RandomAccessFileMode.READ_ONLY.io("nonexistent");
            fail("Expected FileNotFoundException for missing file in read-only mode");
        } catch (FileNotFoundException e) {
            // Expected exception
        }
    }

    // Exception handling tests
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testCreateString_READ_ONLY_NullPath_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_ONLY.create((String) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testCreateFile_READ_ONLY_NullFile_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_ONLY.create((File) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testCreatePath_NullPath_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_WRITE_SYNC_ALL.create((Path) null);
    }

    @Test(timeout = 4000)
    public void testCreate_READ_ONLY_FileDoesNotExist_ShouldThrowFileNotFoundException() {
        try {
            RandomAccessFileMode.READ_ONLY.create("missing.txt");
            fail("Expected FileNotFoundException for missing file in read-only mode");
        } catch (FileNotFoundException e) {
            // Expected exception
        }
    }

    // Functional operation tests
    @Test(timeout = 4000)
    public void testAccept_READ_WRITE_SYNC_ALL_WithExistingFile_ShouldSucceed() throws Exception {
        MockFile file = new MockFile("testAccept");
        Path path = file.toPath();
        IOConsumer<RandomAccessFile> noop = IOConsumer.noop();
        RandomAccessFileMode.READ_WRITE_SYNC_ALL.accept(path, noop);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAccept_READ_WRITE_SYNC_CONTENT_NullConsumer_ShouldThrowNullPointerException() throws Exception {
        MockFile file = new MockFile("testFile");
        Path path = file.toPath();
        RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.accept(path, null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAccept_READ_WRITE_SYNC_ALL_NullPath_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_WRITE_SYNC_ALL.accept(null, IOConsumer.noop());
    }

    @Test(timeout = 4000)
    public void testAccept_READ_WRITE_SYNC_CONTENT_IOException_ShouldPropagate() {
        MockFile file = new MockFile("testIO");
        Path path = file.toPath();
        FileSystemHandling.shouldAllThrowIOExceptions();
        
        try {
            RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.accept(path, IOConsumer.noop());
            fail("Expected IOException from simulated file system");
        } catch (IOException e) {
            assertEquals("Simulated IOException", e.getMessage());
        }
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApply_READ_WRITE_SYNC_CONTENT_NullFunction_ShouldThrowNullPointerException() throws Exception {
        MockFile file = new MockFile("testFile");
        Path path = file.toPath();
        RandomAccessFileMode.READ_WRITE_SYNC_CONTENT.apply(path, null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApply_READ_WRITE_NullArguments_ShouldThrowNullPointerException() throws Exception {
        RandomAccessFileMode.READ_WRITE.apply(null, null);
    }
}