/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:33:11 GMT 2025
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
import com.google.gson.Strictness;
import com.google.gson.stream.JsonReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonParser_ESTest extends JsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonElement jsonElement0 = JsonParser.parseString("");
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonElement jsonElement0 = JsonParser.parseString("[GoyG.G]");
      assertTrue(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MUB_qz@d");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)JsonParser.parseReader((Reader) stringReader0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{}3+1M-tu;%QX!~Y");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonElement jsonElement0 = JsonParser.parseReader(jsonReader0);
      assertFalse(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[GoyG.G]");
      JsonParser.parseReader((Reader) stringReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonElement jsonElement0 = JsonParser.parseReader(jsonReader0);
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse("");
      assertTrue(jsonElement0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)jsonParser0.parse("N");
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("M(");
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)jsonParser0.parse((Reader) stringReader0);
      assertFalse(jsonPrimitive0.isBoolean());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("{}/GH6t)T:8sOB3 #");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonElement jsonElement0 = jsonParser0.parse(jsonReader0);
      assertTrue(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("|h|[8&ZGQ1Fbg]Xp");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      JsonElement jsonElement0 = jsonParser0.parse(jsonReader0);
      assertFalse(jsonElement0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonParser.parseString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        JsonParser.parseString("lP ?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 5 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonParser.parseReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=PC x;DM1DK}c/;");
      try { 
        JsonParser.parseReader((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonParser.parseReader((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R3P?4");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonParser.parseReader(jsonReader0);
      // Undeclared exception!
      try { 
        JsonParser.parseReader(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected token: END_DOCUMENT
         //
         verifyException("com.google.gson.internal.bind.JsonElementTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      try { 
        jsonParser0.parse("Did not consume the entire document.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 6 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("}Yz");
      try { 
        jsonParser0.parse((Reader) stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      // Undeclared exception!
      try { 
        jsonParser0.parse((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("?3p");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonParser0.parse(jsonReader0);
      // Undeclared exception!
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected token: END_DOCUMENT
         //
         verifyException("com.google.gson.internal.bind.JsonElementTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      StringReader stringReader0 = new StringReader("}pm");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonParser0.parse(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected value at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[GoyG.G]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonElement jsonElement0 = JsonParser.parseReader(jsonReader0);
      assertFalse(jsonElement0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonElement jsonElement0 = JsonParser.parseReader((Reader) stringReader0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonPrimitive jsonPrimitive0 = (JsonPrimitive)JsonParser.parseString("A");
      assertFalse(jsonPrimitive0.isNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MUB_qz@d");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Strictness strictness0 = Strictness.STRICT;
      jsonReader0.setStrictness(strictness0);
      try { 
        JsonParser.parseReader(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 1 column 1 path $
         // See https://github.com/google/gson/blob/main/Troubleshooting.md#malformed-json
         //
         verifyException("com.google.gson.internal.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[GoyG.G]");
      JsonParser.parseReader((Reader) stringReader0);
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse((Reader) stringReader0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonParser jsonParser0 = new JsonParser();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonElement jsonElement0 = jsonParser0.parse(jsonReader0);
      assertFalse(jsonElement0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[GoyG.G]");
      JsonParser jsonParser0 = new JsonParser();
      JsonArray jsonArray0 = (JsonArray)jsonParser0.parse((Reader) stringReader0);
      assertFalse(jsonArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonParser jsonParser0 = new JsonParser();
      JsonElement jsonElement0 = jsonParser0.parse("[GoyG.G]");
      assertFalse(jsonElement0.isJsonObject());
  }
}
