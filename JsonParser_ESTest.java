/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:33:11 GMT 2025
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
import com.google.gson.Strictness;
import com.google.gson.stream.JsonReader;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonParser_ESTest extends JsonParser_ESTest_scaffolding {

    // ===================================================
    // Tests for parseString (static method)
    // ===================================================

    @Test(timeout = 4000)
    public void test_parseString_emptyString_returnsJsonNull()  throws Throwable  {
        JsonElement jsonElement = JsonParser.parseString("");
        assertTrue(jsonElement.isJsonNull());
    }

    @Test(timeout = 4000)
    public void test_parseString_validJsonArray_returnsJsonArray()  throws Throwable  {
        JsonElement jsonElement = JsonParser.parseString("[GoyG.G]");
        assertTrue(jsonElement.isJsonArray());
    }

    @Test(timeout = 4000)
    public void test_parseString_singleCharacter_returnsJsonPrimitive()  throws Throwable  {
        JsonPrimitive jsonPrimitive = (JsonPrimitive) JsonParser.parseString("A");
        assertFalse(jsonPrimitive.isNumber());
        assertTrue(jsonPrimitive.isString());
    }

    @Test(timeout = 4000)
    public void test_parseString_nullString_throwsNullPointerException()  throws Throwable  {
        // Undeclared exception!
        try { 
            JsonParser.parseString(null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            verifyException("java.io.StringReader", e);
        }
    }

    @Test(timeout = 4000)
    public void test_parseString_malformedJson_throwsRuntimeException()  throws Throwable  {
        try { 
            JsonParser.parseString("lP ?");
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            // Verify exception contains troubleshooting info
            assertTrue(e.getMessage().contains("Troubleshooting.md#malformed-json"));
        }
    }

    // ===================================================
    // Tests for parseReader(Reader) (static method)
    // ===================================================

    @Test(timeout = 4000)
    public void test_parseReaderReader_validString_returnsJsonPrimitive()  throws Throwable  {
        StringReader reader = new StringReader("MUB_qz@d");
        JsonPrimitive jsonPrimitive = (JsonPrimitive) JsonParser.parseReader(reader);
        assertFalse(jsonPrimitive.isBoolean());
        assertTrue(jsonPrimitive.isString());
    }

    @Test(timeout = 4000)
    public void test_parseReaderReader_validJsonObject_returnsJsonObject()  throws Throwable  {
        StringReader reader = new StringReader("{}3+1M-tu;%QX!~Y");
        JsonElement jsonElement = JsonParser.parseReader(reader);
        assertTrue(jsonElement.isJsonObject());
    }

    @Test(timeout = 4000)
    public void test_parseReaderReader_emptyReader_returnsJsonNull()  throws Throwable  {
        StringReader reader = new StringReader("");
        JsonElement jsonElement = JsonParser.parseReader(reader);
        assertTrue(jsonElement.isJsonNull());
    }

    @Test(timeout = 4000)
    public void test_parseReaderReader_nullReader_throwsNullPointerException()  throws Throwable  {
        // Undeclared exception!
        try { 
            JsonParser.parseReader((Reader) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            assertEquals("in == null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_parseReaderReader_malformedJson_throwsRuntimeException()  throws Throwable  {
        StringReader reader = new StringReader("=PC x;DM1DK}c/;");
        try { 
            JsonParser.parseReader(reader);
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            // Verify exception contains troubleshooting info
            assertTrue(e.getMessage().contains("Troubleshooting.md#malformed-json"));
        }
    }

    // ===================================================
    // Tests for parseReader(JsonReader) (static method)
    // ===================================================

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_validJsonArray_returnsJsonArray()  throws Throwable  {
        StringReader stringReader = new StringReader("[GoyG.G]");
        JsonReader jsonReader = new JsonReader(stringReader);
        JsonElement jsonElement = JsonParser.parseReader(jsonReader);
        assertTrue(jsonElement.isJsonArray());
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_validJsonObject_returnsJsonObject()  throws Throwable  {
        StringReader stringReader = new StringReader("{}3+1M-tu;%QX!~Y");
        JsonReader jsonReader = new JsonReader(stringReader);
        JsonElement jsonElement = JsonParser.parseReader(jsonReader);
        assertTrue(jsonElement.isJsonObject());
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_exhaustedReader_returnsJsonNull()  throws Throwable  {
        StringReader stringReader = new StringReader("[GoyG.G]");
        // First parse consumes all data
        JsonParser.parseReader(new JsonReader(stringReader));
        
        // Subsequent parse on exhausted reader
        JsonReader jsonReader = new JsonReader(stringReader);
        JsonElement jsonElement = JsonParser.parseReader(jsonReader);
        assertTrue(jsonElement.isJsonNull());
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_nullReader_throwsNullPointerException()  throws Throwable  {
        // Undeclared exception!
        try { 
            JsonParser.parseReader((JsonReader) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_malformedJson_throwsRuntimeException()  throws Throwable  {
        StringReader stringReader = new StringReader("}pm");
        JsonReader jsonReader = new JsonReader(stringReader);
        try { 
            JsonParser.parseReader(jsonReader);
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            // Verify exception contains troubleshooting info
            assertTrue(e.getMessage().contains("Troubleshooting.md#malformed-json"));
        }
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_strictMode_throwsRuntimeException()  throws Throwable  {
        StringReader stringReader = new StringReader("MUB_qz@d");
        JsonReader jsonReader = new JsonReader(stringReader);
        jsonReader.setStrictness(Strictness.STRICT);
        try { 
            JsonParser.parseReader(jsonReader);
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            // Verify exception contains troubleshooting info
            assertTrue(e.getMessage().contains("Troubleshooting.md#malformed-json"));
        }
    }

    @Test(timeout = 4000)
    public void test_parseReaderJsonReader_afterFullParse_throwsIllegalState()  throws Throwable  {
        StringReader stringReader = new StringReader("R3P?4");
        JsonReader jsonReader = new JsonReader(stringReader);
        JsonParser.parseReader(jsonReader);  // First parse
        
        // Attempt second parse on same reader
        try { 
            JsonParser.parseReader(jsonReader);
            fail("Expecting exception: IllegalStateException");
        } catch(IllegalStateException e) {
            assertEquals("Unexpected token: END_DOCUMENT", e.getMessage());
        }
    }

    // ===================================================
    // Tests for deprecated JsonParser instance methods
    // ===================================================

    @Test(timeout = 4000)
    public void test_deprecatedParseString_emptyString_returnsJsonNull()  throws Throwable  {
        JsonParser parser = new JsonParser();
        JsonElement jsonElement = parser.parse("");
        assertTrue(jsonElement.isJsonNull());
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseString_validString_returnsJsonPrimitive()  throws Throwable  {
        JsonParser parser = new JsonParser();
        JsonPrimitive jsonPrimitive = (JsonPrimitive) parser.parse("N");
        assertFalse(jsonPrimitive.isNumber());
        assertTrue(jsonPrimitive.isString());
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseReader_validString_returnsJsonPrimitive()  throws Throwable  {
        JsonParser parser = new JsonParser();
        StringReader reader = new StringReader("M(");
        JsonPrimitive jsonPrimitive = (JsonPrimitive) parser.parse(reader);
        assertFalse(jsonPrimitive.isBoolean());
        assertTrue(jsonPrimitive.isString());
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseJsonReader_validJsonObject_returnsJsonObject()  throws Throwable  {
        JsonParser parser = new JsonParser();
        StringReader stringReader = new StringReader("{}/GH6t)T:8sOB3 #");
        JsonReader jsonReader = new JsonReader(stringReader);
        JsonElement jsonElement = parser.parse(jsonReader);
        assertTrue(jsonElement.isJsonObject());
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseJsonReader_afterFullParse_returnsJsonNull()  throws Throwable  {
        JsonParser parser = new JsonParser();
        StringReader stringReader = new StringReader("|h|[8&ZGQ1Fbg]Xp");
        JsonReader jsonReader = new JsonReader(stringReader);
        parser.parse(jsonReader);  // First parse
        
        // Second parse on exhausted reader
        JsonElement jsonElement = parser.parse(jsonReader);
        assertTrue(jsonElement.isJsonNull());
    }

    // Error cases for deprecated methods
    @Test(timeout = 4000)
    public void test_deprecatedParseString_nullString_throwsNullPointerException()  throws Throwable  {
        JsonParser parser = new JsonParser();
        try { 
            parser.parse((String) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseString_malformedJson_throwsRuntimeException()  throws Throwable  {
        JsonParser parser = new JsonParser();
        try { 
            parser.parse("Did not consume the entire document.");
            fail("Expecting exception: RuntimeException");
        } catch(RuntimeException e) {
            // Verify exception contains troubleshooting info
            assertTrue(e.getMessage().contains("Troubleshooting.md#malformed-json"));
        }
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseReader_nullReader_throwsNullPointerException()  throws Throwable  {
        JsonParser parser = new JsonParser();
        try { 
            parser.parse((Reader) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            assertEquals("in == null", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_deprecatedParseJsonReader_nullReader_throwsNullPointerException()  throws Throwable  {
        JsonParser parser = new JsonParser();
        try { 
            parser.parse((JsonReader) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected exception
        }
    }
}