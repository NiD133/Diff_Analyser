package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.IOException;

/**
 * Test suite for the {@link ByteUtils} class.
 */
// The original test was auto-generated by EvoSuite. This version is refactored for clarity.
public class ByteUtilsTest {

    @Test
    public void fromLittleEndianShouldReadMultiByteValueFromDataInput() throws IOException {
        // Arrange
        // The number 57344 is represented as 0x0000E000 in hexadecimal.
        // In a 5-byte little-endian format, the bytes are [0x00, 0xE0, 0x00, 0x00, 0x00].
        // Note: (byte) 0xE0 is equivalent to the original (byte) -32.
        final byte[] littleEndianBytes = {0x00, (byte) 0xE0, 0x00, 0x00, 0x00};
        final long expectedValue = 57344L;
        final int bytesToRead = 5;

        final ByteArrayInputStream byteStream = new ByteArrayInputStream(littleEndianBytes);
        final DataInput dataInput = new DataInputStream(byteStream);

        // Act
        final long actualValue = ByteUtils.fromLittleEndian(dataInput, bytesToRead);

        // Assert
        assertEquals("The decoded long value should match the expected value.", expectedValue, actualValue);
        assertEquals("The input stream should be fully consumed.", 0, byteStream.available());
    }
}