/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 13:28:38 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.io.ContentReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonLocation_ESTest extends JsonLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 500, 500, 500);
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation1 = new JsonLocation(contentReference0, (long) 500, (long) 500, 500, 500);
      boolean boolean0 = jsonLocation1.equals(jsonLocation0);
      assertEquals(500, jsonLocation1.getLineNr());
      assertEquals(500, jsonLocation1.getColumnNr());
      assertEquals(500L, jsonLocation1.getByteOffset());
      assertFalse(boolean0);
      assertEquals(500L, jsonLocation0.getCharOffset());
      assertFalse(jsonLocation0.equals((Object)jsonLocation1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation(jsonLocation0, 500, 500, 500, 500);
      JsonLocation jsonLocation2 = new JsonLocation(jsonLocation0, 500, 1L, 500, 500);
      boolean boolean0 = jsonLocation2.equals(jsonLocation1);
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals(500, jsonLocation2.getLineNr());
      assertEquals(500L, jsonLocation2.getByteOffset());
      assertFalse(jsonLocation1.equals((Object)jsonLocation2));
      assertEquals(500, jsonLocation2.getColumnNr());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 500, 500, 500);
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation1 = new JsonLocation((Object) contentReference0, 1127L, (-304L), 500, 92);
      boolean boolean0 = jsonLocation1.equals(jsonLocation0);
      assertEquals(1127L, jsonLocation1.getByteOffset());
      assertFalse(boolean0);
      assertEquals((-304L), jsonLocation1.getCharOffset());
      assertEquals(92, jsonLocation1.getColumnNr());
      assertEquals(500, jsonLocation1.getLineNr());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation(jsonLocation0, 500, 500, 500);
      JsonLocation jsonLocation2 = new JsonLocation(jsonLocation0, 500, 500, 500, (-42));
      boolean boolean0 = jsonLocation1.equals(jsonLocation2);
      assertEquals(500, jsonLocation2.getLineNr());
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals((-1L), jsonLocation1.getByteOffset());
      assertFalse(boolean0);
      assertEquals((-42), jsonLocation2.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation((Object) null, 500, 500, 500);
      boolean boolean0 = jsonLocation1.equals(jsonLocation0);
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals(500, jsonLocation1.getLineNr());
      assertEquals((-1L), jsonLocation1.getByteOffset());
      assertEquals(500, jsonLocation1.getColumnNr());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration(1, 1);
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null, 2879, 2879, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (long) 314, 0, (-2189));
      jsonLocation0.hashCode();
      assertEquals(314L, jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-2189), jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = JsonLocation._wrap(object0);
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, 0L, 0L, 1831, 0);
      jsonLocation0.hashCode();
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(1831, jsonLocation0.getLineNr());
      assertFalse(contentReference0.hasTextualContent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, (-2650L), 0L, 3981, 2);
      String string0 = jsonLocation0.toString();
      assertEquals((-2650L), jsonLocation0.getByteOffset());
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals("[Source: (Object); line: 3981, column: 2]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 3981, 2, 2, 0);
      String string0 = jsonLocation0.toString();
      assertEquals(2L, jsonLocation0.getCharOffset());
      assertEquals("[Source: (Object); line: 2]", string0);
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(3981L, jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = JsonLocation._wrap(object0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (-1L), 1L, 0, 0);
      String string0 = jsonLocation0.offsetDescription();
      assertEquals("byte offset: #UNKNOWN", string0);
      assertEquals(1L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) null);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (-2758L), 0L, (-3036), 0);
      int int0 = jsonLocation0.getColumnNr();
      assertEquals((-2758L), jsonLocation0.getByteOffset());
      assertEquals(0, int0);
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals((-3036), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(true, object0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (-4198L), (-4198L), (-1143), 0);
      int int0 = jsonLocation0.getLineNr();
      assertEquals((-4198L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals((-1143), int0);
      assertEquals((-4198L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation((Object) null, 500, 500, 500);
      ContentReference contentReference0 = ContentReference.redacted();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ErrorReportConfiguration.overrideDefaultErrorReportConfiguration(errorReportConfiguration0);
      JsonLocation._wrap(contentReference0);
      Object object0 = new Object();
      String string0 = jsonLocation0.sourceDescription();
      assertEquals("UNKNOWN", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 0L, 0L, 0, 0);
      Object object1 = jsonLocation0.getSourceRef();
      assertNotNull(object1);
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, (-219L), 314, 314);
      int int0 = jsonLocation0.getLineNr();
      assertEquals(314, int0);
      assertEquals(314, jsonLocation0.getColumnNr());
      assertEquals((-219L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      int int0 = jsonLocation0.getColumnNr();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 0L, 0L, (-1678), (-1678));
      jsonLocation0.getCharOffset();
      assertEquals((-1678), jsonLocation0.getLineNr());
      assertEquals((-1678), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((ContentReference) null, 2675L, 2675L, (-356), (-356));
      long long0 = jsonLocation0.getCharOffset();
      assertEquals(2675L, long0);
      assertEquals((-356), jsonLocation0.getLineNr());
      assertEquals((-356), jsonLocation0.getColumnNr());
      assertEquals(2675L, jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 0L, 0L, (-1678), (-1678));
      jsonLocation0.getByteOffset();
      assertEquals((-1678), jsonLocation0.getColumnNr());
      assertEquals((-1678), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, 1852L, (-413L), 0, 74);
      long long0 = jsonLocation0.getByteOffset();
      assertEquals(1852L, long0);
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-413L), jsonLocation0.getCharOffset());
      assertEquals(74, jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference1 = ContentReference.construct(true, (Object) contentReference0, 0, 1929, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference1, (-578L), 500, 500);
      ContentReference contentReference2 = jsonLocation0.contentReference();
      assertEquals(500, jsonLocation0.getLineNr());
      assertEquals(500, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertTrue(contentReference2.hasTextualContent());
      assertEquals((-578L), jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration((-1262), (-1262));
      ContentReference contentReference0 = ContentReference.construct(true, object0, errorReportConfiguration0);
      ContentReference contentReference1 = ContentReference.construct(true, (Object) contentReference0, 4615, 0, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference1, 3039L, 575, (-559));
      ContentReference contentReference2 = jsonLocation0.contentReference();
      assertEquals(575, jsonLocation0.getLineNr());
      assertEquals(0, contentReference2.contentLength());
      assertEquals((-559), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(3039L, jsonLocation0.getCharOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration(1, 1);
      ContentReference contentReference0 = ContentReference.construct(false, (Object) null, 2879, 2879, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (long) 314, 0, (-2189));
      ContentReference contentReference1 = jsonLocation0.contentReference();
      assertEquals(314L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getLineNr());
      assertEquals((-2189), jsonLocation0.getColumnNr());
      assertEquals(2879, contentReference1.contentOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference1 = ContentReference.construct(true, (Object) contentReference0, 0, 1929, errorReportConfiguration0);
      ContentReference contentReference2 = JsonLocation._wrap(contentReference1);
      assertTrue(contentReference2.hasTextualContent());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration(0, 0);
      ContentReference contentReference0 = ContentReference.construct(true, object0, 2492, 0, errorReportConfiguration0);
      ContentReference contentReference1 = JsonLocation._wrap(contentReference0);
      assertSame(contentReference0, contentReference1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(500);
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration(500, (-1));
      ContentReference contentReference0 = ContentReference.construct(true, (Object) stringBuilder0, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (long) 500, (long) 500, 1571, 500);
      // Undeclared exception!
      try { 
        jsonLocation0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      ErrorReportConfiguration errorReportConfiguration0 = new ErrorReportConfiguration(8, (-1));
      ContentReference contentReference0 = ContentReference.construct(true, (Object) stringBuilder0, errorReportConfiguration0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (long) 8, (long) 500, 1571, 500);
      // Undeclared exception!
      try { 
        jsonLocation0.sourceDescription();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 0L, 1840L, (-201), 93);
      StringBuilder stringBuilder0 = new StringBuilder("_K|FUenM:'d");
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("_K|FUenM:'dbyte offset: #0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      Object object0 = jsonLocation0.getSourceRef();
      StringBuilder stringBuilder0 = new StringBuilder("byte offset: #UNKNOWN");
      JsonLocation jsonLocation1 = new JsonLocation(object0, (-1L), 2, (-4651));
      jsonLocation1.appendOffsetDescription(stringBuilder0);
      assertEquals("byte offset: #UNKNOWNline: 2", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, (-219L), 314, 314);
      StringBuilder stringBuilder0 = new StringBuilder("; ");
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("; line: 314, column: 314", stringBuilder0.toString());
      assertEquals(314, jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 0L, 759, (-1047));
      // Undeclared exception!
      try { 
        jsonLocation0.appendOffsetDescription((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.rawReference(true, (Object) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (long) (-3036), 500, (-1291));
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("line: 500, column: UNKNOWN", stringBuilder0.toString());
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(true, object0);
      JsonLocation jsonLocation0 = new JsonLocation(contentReference0, (-4198L), (-4198L), (-1143), 0);
      StringBuilder stringBuilder0 = new StringBuilder(863);
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("line: UNKNOWN, column: 0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("byte offset: #UNKNOWN", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(true, object0);
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, (long) 0, 0, 0);
      StringBuilder stringBuilder0 = new StringBuilder(863);
      jsonLocation0.appendOffsetDescription(stringBuilder0);
      assertEquals("line: 0, column: 0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation(jsonLocation0, 500, 500, 500, 500);
      JsonLocation jsonLocation2 = new JsonLocation(jsonLocation0, 500, 500, 500, 500);
      boolean boolean0 = jsonLocation2.equals(jsonLocation1);
      assertTrue(boolean0);
      assertEquals(500, jsonLocation2.getLineNr());
      assertEquals(500L, jsonLocation2.getCharOffset());
      assertEquals(500L, jsonLocation2.getByteOffset());
      assertFalse(jsonLocation2.equals((Object)jsonLocation0));
      assertEquals(500, jsonLocation2.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 500, 500, 500);
      ContentReference contentReference0 = ContentReference.unknown();
      JsonLocation jsonLocation1 = new JsonLocation(contentReference0, 344L, 0L, 500, 500);
      boolean boolean0 = jsonLocation0.equals(jsonLocation1);
      assertEquals(500, jsonLocation1.getLineNr());
      assertEquals(500, jsonLocation1.getColumnNr());
      assertEquals(500L, jsonLocation0.getCharOffset());
      assertFalse(boolean0);
      assertEquals(344L, jsonLocation1.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 500, 500, 500);
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation1 = new JsonLocation((Object) contentReference0, (-1513L), (long) 500, 500, 500);
      boolean boolean0 = jsonLocation1.equals(jsonLocation0);
      assertFalse(boolean0);
      assertEquals(500, jsonLocation1.getLineNr());
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals((-1513L), jsonLocation1.getByteOffset());
      assertEquals(500, jsonLocation1.getColumnNr());
      assertFalse(jsonLocation0.equals((Object)jsonLocation1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      ContentReference contentReference0 = ContentReference.rawReference((Object) jsonLocation0);
      JsonLocation jsonLocation1 = new JsonLocation((Object) contentReference0, 1795L, (long) 500, 2, 3981);
      boolean boolean0 = jsonLocation0.equals(jsonLocation1);
      assertEquals(3981, jsonLocation1.getColumnNr());
      assertEquals(1795L, jsonLocation1.getByteOffset());
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals(2, jsonLocation1.getLineNr());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      Object object0 = new Object();
      boolean boolean0 = jsonLocation0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      boolean boolean0 = jsonLocation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      boolean boolean0 = jsonLocation0.equals(jsonLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonLocation jsonLocation1 = new JsonLocation((Object) null, 500, 500, 500);
      boolean boolean0 = jsonLocation0.equals(jsonLocation1);
      assertEquals(500, jsonLocation1.getColumnNr());
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertFalse(boolean0);
      assertEquals((-1L), jsonLocation1.getByteOffset());
      assertEquals(500, jsonLocation1.getLineNr());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 62, 500, (-2898), (-26));
      String string0 = jsonLocation0.toString();
      assertEquals((-26), jsonLocation0.getColumnNr());
      assertEquals(500L, jsonLocation0.getCharOffset());
      assertEquals("[Source: UNKNOWN; byte offset: #62]", string0);
      assertEquals((-2898), jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      ErrorReportConfiguration errorReportConfiguration0 = ErrorReportConfiguration.defaults();
      ContentReference contentReference0 = ContentReference.construct(true, (Object) jsonLocation0, errorReportConfiguration0);
      JsonLocation jsonLocation1 = new JsonLocation(contentReference0, (long) 500, (-1), 256);
      String string0 = jsonLocation1.toString();
      assertEquals((-1L), jsonLocation1.getByteOffset());
      assertEquals((-1), jsonLocation1.getLineNr());
      assertEquals(500L, jsonLocation1.getCharOffset());
      assertEquals("[Source: (com.fasterxml.jackson.core.JsonLocation); line: UNKNOWN, column: 256]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      ContentReference contentReference0 = ContentReference.rawReference(true, object0);
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, (long) 0, 0, 0);
      int int0 = jsonLocation0.getLineNr();
      assertEquals(0, int0);
      assertEquals(0L, jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, (-578L), 500, 500);
      long long0 = jsonLocation0.getCharOffset();
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(500, jsonLocation0.getLineNr());
      assertEquals(500, jsonLocation0.getColumnNr());
      assertEquals((-578L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, (-578L), 500, 500);
      int int0 = jsonLocation0.getColumnNr();
      assertEquals((-578L), jsonLocation0.getCharOffset());
      assertEquals(500, jsonLocation0.getLineNr());
      assertEquals(500, int0);
      assertEquals((-1L), jsonLocation0.getByteOffset());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ContentReference contentReference0 = ContentReference.redacted();
      JsonLocation jsonLocation0 = new JsonLocation((Object) contentReference0, (-578L), 500, 500);
      ContentReference contentReference1 = jsonLocation0.contentReference();
      assertNotNull(contentReference1);
      assertEquals((-578L), jsonLocation0.getCharOffset());
      assertEquals(500, jsonLocation0.getColumnNr());
      assertSame(contentReference1, contentReference0);
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(500, jsonLocation0.getLineNr());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      long long0 = jsonLocation0.getByteOffset();
      assertEquals((-1L), long0);
  }
}
