package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class CompositeSet_ESTestTest25 extends CompositeSet_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Set<Integer>[] setArray0 = (Set<Integer>[]) Array.newInstance(Set.class, 1);
        CompositeSet<Integer> compositeSet0 = new CompositeSet<Integer>(setArray0);
        assertEquals(1, setArray0.length);
        assertNotNull(compositeSet0);
        setArray0[0] = (Set<Integer>) compositeSet0;
        CompositeSet<Integer> compositeSet1 = new CompositeSet<Integer>(setArray0);
        assertEquals(1, setArray0.length);
        assertNotNull(compositeSet1);
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        Integer integer0 = new Integer((-2073));
        assertNotNull(integer0);
        assertEquals((-2073), (int) integer0);
        boolean boolean0 = compositeSet0.contains(integer0);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet0, compositeSet1);
        assertFalse(compositeSet0.contains(integer0));
        assertTrue(compositeSet0.equals((Object) compositeSet1));
        assertFalse(boolean0);
        boolean boolean1 = compositeSet0.contains(integer0);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet0, compositeSet1);
        assertFalse(compositeSet0.contains(integer0));
        assertTrue(compositeSet0.equals((Object) compositeSet1));
        assertTrue(boolean1 == boolean0);
        assertFalse(boolean1);
        Stream<Integer> stream0 = compositeSet1.stream();
        assertEquals(1, setArray0.length);
        assertNotNull(stream0);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet1.contains(integer0));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        CompositeSet.SetMutator<Integer> compositeSet_SetMutator0 = (CompositeSet.SetMutator<Integer>) mock(CompositeSet.SetMutator.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(compositeSet_SetMutator0).add(any(org.apache.commons.collections4.set.CompositeSet.class), anyList(), anyInt());
        compositeSet1.setMutator(compositeSet_SetMutator0);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet1.contains(integer0));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        Integer integer1 = new Integer((-3018));
        assertNotNull(integer1);
        assertFalse(integer1.equals((Object) integer0));
        assertEquals((-3018), (int) integer1);
        boolean boolean2 = compositeSet1.add(integer1);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet1.contains(integer1));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        assertFalse(integer1.equals((Object) integer0));
        assertFalse(boolean2 == boolean1);
        assertFalse(boolean2 == boolean0);
        assertTrue(boolean2);
        boolean boolean3 = compositeSet1.remove((Object) null);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet1.contains(integer1));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        assertTrue(boolean3 == boolean0);
        assertTrue(boolean3 == boolean1);
        assertFalse(boolean3 == boolean2);
        assertFalse(boolean3);
        compositeSet1.addComposited(setArray0[0], (Set<Integer>) compositeSet0);
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet0, compositeSet1);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet0.contains(integer1));
        assertFalse(compositeSet1.contains(integer1));
        assertTrue(compositeSet0.equals((Object) compositeSet1));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        int int0 = compositeSet1.size();
        assertEquals(1, setArray0.length);
        assertNotSame(compositeSet1, compositeSet0);
        assertFalse(compositeSet1.contains(integer1));
        assertTrue(compositeSet1.equals((Object) compositeSet0));
        assertEquals(0, int0);
        Set<LinkedHashSet<Integer>>[] setArray1 = (Set<LinkedHashSet<Integer>>[]) Array.newInstance(Set.class, 5);
        CompositeSet<LinkedHashSet<Integer>> compositeSet2 = new CompositeSet<LinkedHashSet<Integer>>();
        assertNotNull(compositeSet2);
        setArray1[0] = (Set<LinkedHashSet<Integer>>) compositeSet2;
        LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
        assertNotNull(linkedHashSet0);
        assertTrue(linkedHashSet0.isEmpty());
        assertEquals(0, linkedHashSet0.size());
        Set<LinkedHashSet<Integer>> set0 = compositeSet2.toSet();
        assertNotNull(set0);
        assertTrue(set0.isEmpty());
        assertEquals(0, set0.size());
        setArray1[2] = set0;
        CompositeSet<LinkedHashSet<Integer>> compositeSet3 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
        assertEquals(5, setArray1.length);
        assertNotNull(compositeSet3);
        assertTrue(compositeSet3.equals((Object) compositeSet2));
        setArray1[4] = setArray1[0];
        CompositeSet<LinkedHashSet<Integer>> compositeSet4 = new CompositeSet<LinkedHashSet<Integer>>(setArray1);
        assertEquals(5, setArray1.length);
        assertNotNull(compositeSet4);
        assertTrue(compositeSet4.equals((Object) compositeSet3));
        assertTrue(compositeSet4.equals((Object) compositeSet2));
        Set<LinkedHashSet<Integer>> set1 = compositeSet4.toSet();
        assertEquals(5, setArray1.length);
        assertNotNull(set1);
        assertNotSame(compositeSet4, compositeSet2);
        assertNotSame(compositeSet4, compositeSet3);
        assertNotSame(set1, set0);
        assertTrue(set1.isEmpty());
        assertEquals(0, set1.size());
        assertTrue(compositeSet4.equals((Object) compositeSet3));
        assertTrue(compositeSet4.equals((Object) compositeSet2));
        assertTrue(set1.equals((Object) set0));
    }
}
