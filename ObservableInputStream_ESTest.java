/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 01:02:37 GMT 2025
 */

package org.apache.commons.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.file.NoSuchFileException;
import java.security.MessageDigest;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.io.input.MessageDigestInputStream;
import org.apache.commons.io.input.ObservableInputStream;
import org.apache.commons.io.input.TimestampedObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObservableInputStream_ESTest extends ObservableInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      MockIOException mockIOException0 = new MockIOException();
      observableInputStream0.noteError(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      observableInputStream0.noteDataBytes(byteArray0, 10, 10);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      observableInputStream0.noteDataByte(2158);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      observableInputStream0.noteFinished();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
      observableInputStream0.noteClosed();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      observableInputStream0.removeAllObservers();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      observableInputStream0.remove(timestampedObserver0);
      assertFalse(timestampedObserver0.isClosed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      observableInputStream0.add((ObservableInputStream.Observer) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
      byte[] byteArray0 = new byte[2];
      int int0 = observableInputStream0.read(byteArray0, 0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[0];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(sequenceInputStream0, observableInputStream_ObserverArray0);
      byte[] byteArray0 = new byte[6];
      int int0 = observableInputStream0.read(byteArray0, (int) (byte) (-69), 47);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
      byte[] byteArray0 = new byte[2];
      int int0 = observableInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(byteArrayInputStream0);
      int int0 = observableInputStream0.read();
      assertEquals(77, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      List<ObservableInputStream.Observer> list0 = observableInputStream0.getObservers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[4];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pushbackInputStream0, observableInputStream_ObserverArray0);
      // Undeclared exception!
      try { 
        observableInputStream0.removeAllObservers();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        observableInputStream0.read(byteArray0, 1665, 1665);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder0.get();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        observableInputStream0.read(byteArray0, 0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array Size=0, offset=0, length=-1
         //
         verifyException("org.apache.commons.io.input.CharSequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)6);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        observableInputStream0.read(byteArray0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[0];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pushbackInputStream0, observableInputStream_ObserverArray0);
      byte[] byteArray0 = new byte[2];
      try { 
        observableInputStream0.read(byteArray0, 3, (-2701));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[1];
      try { 
        observableInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      observableInputStream_ObserverArray0[0] = (ObservableInputStream.Observer) timestampedObserver0;
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      try { 
        observableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 1 exception(s): [org.evosuite.runtime.mock.java.lang.MockThrowable: IOException #0: Pipe not connected]
         //
         verifyException("org.apache.commons.io.IOExceptionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-792), (byte)73);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        observableInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -792
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0);
      try { 
        observableInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      observableInputStream_ObserverArray0[0] = (ObservableInputStream.Observer) timestampedObserver0;
      ObservableInputStream observableInputStream0 = new ObservableInputStream(sequenceInputStream0, observableInputStream_ObserverArray0);
      MockIOException mockIOException0 = new MockIOException("");
      try { 
        observableInputStream0.noteError(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 1 exception(s): [org.evosuite.runtime.mock.java.lang.MockThrowable: MockIOException #0: ]
         //
         verifyException("org.apache.commons.io.IOExceptionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      // Undeclared exception!
      try { 
        observableInputStream0.noteDataBytes((byte[]) null, 3677, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1136);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[3];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      // Undeclared exception!
      try { 
        observableInputStream0.noteDataByte(1136);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObservableInputStream.Builder observableInputStream_Builder1 = observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder1.get();
      // Undeclared exception!
      try { 
        observableInputStream0.getObservers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        observableInputStream0.consume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1732), 1);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        observableInputStream0.consume();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      observableInputStream_Builder0.setPath("PZkNv|C6'u*&le;,");
      ObservableInputStream observableInputStream0 = null;
      try {
        observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      observableInputStream_Builder0.setWriter(stringWriter0);
      ObservableInputStream observableInputStream0 = null;
      try {
        observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // WriterOrigin#getPath() for StringWriter origin 
         //
         verifyException("org.apache.commons.io.build.AbstractOrigin", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObservableInputStream observableInputStream0 = null;
      try {
        observableInputStream0 = new ObservableInputStream((ObservableInputStream.AbstractBuilder<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      ObservableInputStream observableInputStream0 = null;
      try {
        observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // origin == null
         //
         verifyException("org.apache.commons.io.build.AbstractOriginSupplier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      ObservableInputStream observableInputStream1 = null;
      try {
        observableInputStream1 = new ObservableInputStream(observableInputStream0, (ObservableInputStream.Observer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObservableInputStream observableInputStream0 = new ObservableInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        observableInputStream0.read(byteArray0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ProxyInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      MockIOException mockIOException0 = new MockIOException("org.apache.commons.io.input.ObservableInputStream$Builder");
      try { 
        timestampedObserver0.error(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(957);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      // Undeclared exception!
      try { 
        observableInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[0];
      int int0 = observableInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      CharBuffer charBuffer0 = CharBuffer.allocate(255);
      observableInputStream_Builder0.setCharSequence(charBuffer0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
      observableInputStream0.consume();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(dataInputStream0);
      observableInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      timestampedObserver0.finished();
      assertFalse(timestampedObserver0.isClosed());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      timestampedObserver0.data(1225);
      assertFalse(timestampedObserver0.isClosed());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigest.getInstance("MD5");
      MessageDigestInputStream.MessageDigestMaintainingObserver messageDigestInputStream_MessageDigestMaintainingObserver0 = new MessageDigestInputStream.MessageDigestMaintainingObserver(messageDigest0);
      messageDigestInputStream_MessageDigestMaintainingObserver0.closed();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      timestampedObserver0.data((byte[]) null, (-1), (-1));
      assertFalse(timestampedObserver0.isClosed());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      observableInputStream_ObserverArray0[0] = (ObservableInputStream.Observer) timestampedObserver0;
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      byte[] byteArray0 = new byte[1];
      try { 
        observableInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 1 exception(s): [org.evosuite.runtime.mock.java.lang.MockThrowable: IOException #0: Pipe not connected]
         //
         verifyException("org.apache.commons.io.IOExceptionList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      LinkedList<ObservableInputStream.Observer> linkedList0 = new LinkedList<ObservableInputStream.Observer>();
      observableInputStream_Builder0.setObservers(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(pipedInputStream0, observableInputStream_ObserverArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(observableInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      ObservableInputStream observableInputStream1 = new ObservableInputStream(bufferedInputStream0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        observableInputStream1.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1332);
      observableInputStream_Builder0.setCharSequence(charBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder0.get();
      byte[] byteArray0 = new byte[5];
      int int0 = observableInputStream0.read(byteArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder0.get();
      // Undeclared exception!
      try { 
        observableInputStream0.add((ObservableInputStream.Observer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      CharBuffer charBuffer0 = CharBuffer.allocate(255);
      observableInputStream_Builder0.setCharSequence(charBuffer0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(observableInputStream_Builder0);
      observableInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObservableInputStream.Observer[] observableInputStream_ObserverArray0 = new ObservableInputStream.Observer[1];
      ObservableInputStream observableInputStream0 = new ObservableInputStream(sequenceInputStream0, observableInputStream_ObserverArray0);
      List<ObservableInputStream.Observer> list0 = observableInputStream0.getObservers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObservableInputStream.Builder observableInputStream_Builder1 = observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder1.get();
      TimestampedObserver timestampedObserver0 = new TimestampedObserver();
      // Undeclared exception!
      try { 
        observableInputStream0.remove(timestampedObserver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(byteArrayInputStream0);
      int int0 = observableInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ObservableInputStream.Builder observableInputStream_Builder1 = observableInputStream_Builder0.setCharSequence(stringBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder1.get();
      // Undeclared exception!
      try { 
        observableInputStream0.removeAllObservers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.input.ObservableInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObservableInputStream observableInputStream0 = new ObservableInputStream(bufferedInputStream0);
      try { 
        observableInputStream0.consume();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObservableInputStream.Builder observableInputStream_Builder0 = new ObservableInputStream.Builder();
      CharBuffer charBuffer0 = CharBuffer.allocate(1332);
      observableInputStream_Builder0.setCharSequence(charBuffer0);
      ObservableInputStream observableInputStream0 = observableInputStream_Builder0.get();
      int int0 = observableInputStream0.read();
      assertEquals(0, int0);
  }
}
