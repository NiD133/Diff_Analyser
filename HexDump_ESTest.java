/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:25 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.commons.io.HexDump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HexDump_ESTest extends HexDump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.EmptyFileFilter");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      HexDump.dump(byteArray0, (-1131L), (OutputStream) mockPrintStream0, (int) (byte)0);
      assertEquals(61L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      HexDump.dump(byteArray0, (Appendable) mockPrintStream0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      HexDump.dump(byteArray0, (long) (byte) (-1), (Appendable) outputStreamWriter0, 6, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) 5, (Appendable) charBuffer0, 5, 6);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)3);
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) (byte)17, (Appendable) charBuffer0, 1, (int) (byte)2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      mockFileWriter0.close();
      try { 
        HexDump.dump(byteArray0, 0L, (Appendable) mockFileWriter0, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      // Undeclared exception!
      try { 
        HexDump.dump((byte[]) null, (-2841L), (OutputStream) mockPrintStream0, 198);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(146);
      try { 
        HexDump.dump(byteArray0, (-1587L), (OutputStream) byteArrayOutputStream0, 146);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 146 into array of length 20
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HexDump.dump(byteArray0, 804L, (OutputStream) pipedOutputStream0, 16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)127;
      File file0 = MockFile.createTempFile("x>m*Oh>@'Wm7jA", "x>m*Oh>@'Wm7jA");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      HexDump.dump(byteArray0, (long) (byte)59, (Appendable) mockPrintStream0, (int) (byte)3, (int) (byte)3);
      assertEquals(61L, file0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      byteArray0[0] = (byte)110;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      HexDump.dump(byteArray0, (long) (byte)110, (Appendable) mockFileWriter0, (int) (byte)0, (int) (byte)1);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[37];
      MockFileWriter mockFileWriter0 = new MockFileWriter("\n");
      HexDump.dump(byteArray0, (long) (byte)1, (Appendable) mockFileWriter0, (int) (byte)1, 32);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      try { 
        HexDump.dump(byteArray0, (long) 136, (Appendable) mockPrintStream0, 136, 136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 136 into array of length 2
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)127;
      try { 
        HexDump.dump(byteArray0, (Appendable) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      try { 
        HexDump.dump(byteArray0, 1506L, (Appendable) mockPrintStream0, 13, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Range [13, 13 + 13) out of bounds for length 25
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      try { 
        HexDump.dump(byteArray0, (long) (-545), (Appendable) mockPrintStream0, 0, (-545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Range [0, 0 + -545) out of bounds for length 5
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) pipedWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: 0 into array of length 0
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      // Undeclared exception!
      try { 
        HexDump.dump((byte[]) null, 3744L, (Appendable) stringWriter0, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      try { 
        HexDump.dump(byteArray0, (long) (-706), (Appendable) mockPrintStream0, (-706), (-706));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // illegal index: -706 into array of length 8
         //
         verifyException("org.apache.commons.io.HexDump", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HexDump hexDump0 = new HexDump();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (long) 2185, (OutputStream) null, 2185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // stream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      // Undeclared exception!
      try { 
        HexDump.dump(byteArray0, (Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // appendable
         //
         verifyException("java.util.Objects", e);
      }
  }
}
