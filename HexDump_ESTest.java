/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:25 GMT 2025
 */
package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.commons.io.HexDump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class HexDump_ESTest extends HexDump_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000)
    public void testConstructorInstantiation() {
        HexDump hexDump = new HexDump();
        assertNotNull(hexDump);
    }

    // Normal Dump Scenarios
    @Test(timeout = 4000)
    public void testDumpToOutputStream_NormalCase() throws Throwable {
        byte[] data = new byte[3];
        MockFile mockFile = new MockFile("org.apache.commons.io.filefilter.EmptyFileFilter");
        MockFileOutputStream fileOutputStream = new MockFileOutputStream(mockFile);
        MockPrintStream printStream = new MockPrintStream(fileOutputStream);
        
        HexDump.dump(data, -1131L, printStream, 0);
        
        assertEquals(61L, mockFile.length());
    }

    @Test(timeout = 4000)
    public void testDumpToAppendable_NormalCase() throws Throwable {
        byte[] data = new byte[7];
        data[0] = (byte) -1;
        MockPrintStream printStream = new MockPrintStream("\n");
        
        HexDump.dump(data, printStream);
        
        assertEquals(7, data.length);
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndLengthToAppendable_NormalCase() throws Throwable {
        byte[] data = new byte[8];
        MockFileOutputStream fileOutputStream = new MockFileOutputStream("\n", false);
        OutputStreamWriter writer = new OutputStreamWriter(fileOutputStream);
        
        HexDump.dump(data, -1L, writer, 6, 0);
        
        assertArrayEquals(new byte[8], data);
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRange_NonZeroByte() throws Throwable {
        byte[] data = new byte[8];
        data[4] = (byte) 127;
        File file = MockFile.createTempFile("x>m*Oh>@'Wm7jA", "x>m*Oh>@'Wm7jA");
        MockPrintStream printStream = new MockPrintStream(file);
        
        HexDump.dump(data, 59L, printStream, 3, 3);
        
        assertEquals(61L, file.length());
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRange_NonZeroByteAtStart() throws Throwable {
        byte[] data = new byte[37];
        data[0] = (byte) 110;
        MockFileWriter writer = new MockFileWriter("\n");
        
        HexDump.dump(data, 110L, writer, 0, 1);
        
        assertEquals(37, data.length);
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRange_LargeRange() throws Throwable {
        byte[] data = new byte[37];
        MockFileWriter writer = new MockFileWriter("\n");
        
        HexDump.dump(data, 1L, writer, 1, 32);
        
        assertEquals(37, data.length);
    }

    // Edge Cases
    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRange_EmptyArray() throws Throwable {
        PipedWriter pipedWriter = new PipedWriter();
        byte[] emptyData = new byte[0];
        
        try {
            HexDump.dump(emptyData, pipedWriter);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("illegal index: 0 into array of length 0", e.getMessage());
        }
    }

    // Exception Handling Tests
    @Test(timeout = 4000)
    public void testDumpToAppendable_ReadOnlyBuffer() throws Throwable {
        byte[] data = new byte[5];
        CharBuffer readOnlyBuffer = CharBuffer.wrap("\n");
        
        try {
            HexDump.dump(data, readOnlyBuffer);
            fail("Expected ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpToAppendable_BufferOverflow() throws Throwable {
        byte[] data = new byte[10];
        char[] smallBuffer = new char[2];
        CharBuffer charBuffer = CharBuffer.wrap(smallBuffer);
        
        try {
            HexDump.dump(data, charBuffer);
            fail("Expected BufferOverflowException");
        } catch (BufferOverflowException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_ReadOnlyBuffer() throws Throwable {
        byte[] data = new byte[12];
        CharBuffer readOnlyBuffer = CharBuffer.wrap("\n");
        
        try {
            HexDump.dump(data, 5L, readOnlyBuffer, 5, 6);
            fail("Expected ReadOnlyBufferException");
        } catch (ReadOnlyBufferException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_BufferOverflow() throws Throwable {
        byte[] data = new byte[5];
        CharBuffer smallBuffer = CharBuffer.allocate(3);
        
        try {
            HexDump.dump(data, 17L, smallBuffer, 1, 2);
            fail("Expected BufferOverflowException");
        } catch (BufferOverflowException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_ClosedWriter() throws Throwable {
        byte[] data = new byte[42];
        MockFileWriter closedWriter = new MockFileWriter("\n");
        closedWriter.close();
        
        try {
            HexDump.dump(data, 0L, closedWriter, 1, 1);
            fail("Expected IOException");
        } catch (IOException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpToOutputStream_UnconnectedPipe() throws Throwable {
        byte[] data = new byte[37];
        PipedOutputStream pipedOutput = new PipedOutputStream();
        
        try {
            HexDump.dump(data, 804L, pipedOutput, 16);
            fail("Expected IOException due to unconnected pipe");
        } catch (IOException e) {
            assertEquals("Pipe not connected", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpToAppendable_UnconnectedPipe() throws Throwable {
        PipedWriter pipedWriter = new PipedWriter();
        byte[] data = new byte[3];
        data[2] = (byte) 127;
        
        try {
            HexDump.dump(data, pipedWriter);
            fail("Expected IOException due to unconnected pipe");
        } catch (IOException e) {
            assertEquals("Pipe not connected", e.getMessage());
        }
    }

    // Index Boundary Tests
    @Test(timeout = 4000)
    public void testDumpToOutputStream_IndexOutOfBounds() throws Throwable {
        byte[] data = new byte[20];
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(146);
        
        try {
            HexDump.dump(data, -1587L, outputStream, 146);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("illegal index: 146 into array of length 20", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_IndexOutOfBounds() throws Throwable {
        byte[] data = new byte[2];
        MockPrintStream printStream = new MockPrintStream("\n");
        
        try {
            HexDump.dump(data, 136L, printStream, 136, 136);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("illegal index: 136 into array of length 2", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_RangeExceedingArrayLength() throws Throwable {
        byte[] data = new byte[25];
        MockPrintStream printStream = new MockPrintStream("\n");
        
        try {
            HexDump.dump(data, 1506L, printStream, 13, 13);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("Range [13, 13 + 13) out of bounds for length 25", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_NegativeLength() throws Throwable {
        byte[] data = new byte[5];
        MockPrintStream printStream = new MockPrintStream("\n");
        
        try {
            HexDump.dump(data, -545L, printStream, 0, -545);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("Range [0, 0 + -545) out of bounds for length 5", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_NegativeIndex() throws Throwable {
        byte[] data = new byte[8];
        MockPrintStream printStream = new MockPrintStream("\n");
        
        try {
            HexDump.dump(data, -706L, printStream, -706, -706);
            fail("Expected ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            assertEquals("illegal index: -706 into array of length 8", e.getMessage());
        }
    }

    // Null Input Validations
    @Test(timeout = 4000)
    public void testDumpToOutputStream_NullArray() throws Throwable {
        MockPrintStream printStream = new MockPrintStream("\n");
        
        try {
            HexDump.dump(null, -2841L, printStream, 198);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpToAppendable_NullAppendable() throws Throwable {
        byte[] data = new byte[20];
        
        try {
            HexDump.dump(data, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("appendable", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testDumpWithOffsetAndRangeToAppendable_NullArray() throws Throwable {
        StringWriter stringWriter = new StringWriter(2);
        
        try {
            HexDump.dump(null, 3744L, stringWriter, 2, 2);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Expected exception
        }
    }

    @Test(timeout = 4000)
    public void testDumpToOutputStream_NullOutputStream() throws Throwable {
        byte[] data = new byte[9];
        
        try {
            HexDump.dump(data, 2185L, null, 2185);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("stream", e.getMessage());
        }
    }
}