/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 13:10:35 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZippingIterator_ESTest extends ZippingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ZippingIterator<Integer> zippingIterator0 = new ZippingIterator<Integer>(iterator0, iterator0);
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      iteratorArray0[0] = (Iterator<Integer>) zippingIterator0;
      ZippingIterator<Integer> zippingIterator1 = new ZippingIterator<Integer>(iteratorArray0);
      assertFalse(zippingIterator1.equals((Object)zippingIterator0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0);
      Object object0 = zippingIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.push(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0);
      Object object1 = zippingIterator0.next();
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-550));
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0, iterator0);
      Object object0 = zippingIterator0.next();
      linkedList0.removeLastOccurrence(object0);
      // Undeclared exception!
      try { 
        zippingIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ListIterator<InstanceofPredicate> listIterator0 = linkedList0.listIterator();
      linkedList0.add((InstanceofPredicate) null);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = new ZippingIterator<InstanceofPredicate>(listIterator0, listIterator0, listIterator0);
      // Undeclared exception!
      try { 
        zippingIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 1);
      ZippingIterator<Object> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<Object>(iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZippingIterator<Integer> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<Integer>((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZippingIterator<Object> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<Object>((Iterator<?>) null, (Iterator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterator
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      ListIterator<InstanceofPredicate> listIterator0 = linkedList0.listIterator();
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      ZippingIterator<InstanceofPredicate> zippingIterator0 = new ZippingIterator<InstanceofPredicate>(listIterator0, listIterator0);
      zippingIterator0.hasNext();
      boolean boolean0 = zippingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      ZippingIterator<Integer> zippingIterator0 = new ZippingIterator<Integer>(iterator0, iterator0, iterator0);
      boolean boolean0 = zippingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      ZippingIterator<Integer> zippingIterator0 = new ZippingIterator<Integer>(iterator0, iterator0, iterator0);
      ZippingIterator<Object> zippingIterator1 = new ZippingIterator<Object>(zippingIterator0, iterator0, iterator0);
      // Undeclared exception!
      try { 
        zippingIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-550));
      linkedList0.add(integer0);
      Iterator<Integer> iterator0 = linkedList0.iterator();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0, iterator0);
      zippingIterator0.next();
      zippingIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Iterator<Integer> iterator0 = linkedList0.iterator();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0, iterator0);
      try { 
        zippingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }
}
