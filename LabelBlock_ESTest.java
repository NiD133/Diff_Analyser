/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:09:21 GMT 2025
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.api.RectangleAnchor;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.block.Size2D;
import org.jfree.chart.text.TextBlockAnchor;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LabelBlock_ESTest extends LabelBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("F\"M5 ; wfEs");
      labelBlock0.setURLText("F\"M5 ; wfEs");
      String string0 = labelBlock0.getURLText();
      assertEquals("F\"M5 ; wfEs", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.setURLText("");
      String string0 = labelBlock0.getURLText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("/s");
      labelBlock0.setToolTipText("mpAJ'YV3YX;OK");
      String string0 = labelBlock0.getToolTipText();
      assertEquals("mpAJ'YV3YX;OK", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("\"IAf&@`u", 1447, 1447);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1447, (double) 1447);
      Font font1 = font0.deriveFont(affineTransform0);
      Color color0 = Color.cyan;
      LabelBlock labelBlock0 = new LabelBlock("\"IAf&@`u", font1, color0);
      Font font2 = labelBlock0.getFont();
      assertSame(font1, font2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Font font0 = new Font("~", 1, 1);
      LabelBlock labelBlock0 = new LabelBlock("~", font0);
      Font font1 = labelBlock0.getFont();
      assertFalse(font1.isTransformed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("5");
      Font font0 = new Font("(J*5t4K-JH}", (-2963), (-2963));
      Font font1 = font0.deriveFont((-2963), 0.0F);
      labelBlock0.setFont(font1);
      Font font2 = labelBlock0.getFont();
      assertFalse(font2.hasUniformLineMetrics());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("<iBHKz~", (-250218615), (-250218615));
      Color color0 = Color.ORANGE;
      LabelBlock labelBlock0 = new LabelBlock("org.jfree.data.flow.DefaultFlowDataset", font0, color0);
      Font font1 = labelBlock0.getFont();
      assertSame(font1, font0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("{VWG-Lf]Z_E1vj+i'tt");
      BufferedImage bufferedImage0 = new BufferedImage(11, 1028, 11);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, rectangleConstraint0);
      assertEquals(13.0, size2D0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("font");
      // Undeclared exception!
      try { 
        labelBlock0.setPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(";8O?_[S");
      // Undeclared exception!
      try { 
        labelBlock0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      LabelBlock labelBlock1 = new LabelBlock("", (Font) null);
      // Undeclared exception!
      try { 
        labelBlock1.equals(labelBlock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LabelBlock labelBlock0 = new LabelBlock("FaFh7Y@oA>oU`EV9|Ws");
      // Undeclared exception!
      try { 
        labelBlock0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0, (Object) rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LabelBlock labelBlock0 = new LabelBlock("Duplicate items in 'columnKeys'.");
      // Undeclared exception!
      try { 
        labelBlock0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("EJ");
      // Undeclared exception!
      try { 
        labelBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.GREEN;
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock("The 'item' index is out of bounds.", (Font) null, color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock("YpgCb8jaC&Q", (Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LabelBlock labelBlock0 = null;
      try {
        labelBlock0 = new LabelBlock((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'text' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("9\"M5 ; _s");
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point();
      Rectangle rectangle0 = new Rectangle(point0);
      Object object0 = labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle0, (Object) point0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Sg~6fAVv>P)");
      LabelBlock labelBlock1 = new LabelBlock("Sg~6fAVv>P)");
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      
      TextBlockAnchor textBlockAnchor0 = TextBlockAnchor.TOP_RIGHT;
      labelBlock1.setContentAlignmentPoint(textBlockAnchor0);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      LabelBlock labelBlock1 = new LabelBlock("");
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      
      labelBlock1.setToolTipText("");
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Color color0 = Color.cyan;
      Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      Font font0 = new Font(hashtable0);
      LabelBlock labelBlock0 = new LabelBlock("SansSeri", font0, color0);
      Color color1 = Color.pink;
      LabelBlock labelBlock1 = new LabelBlock("SansSeri", font0, color1);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      LabelBlock labelBlock1 = new LabelBlock("", (Font) null);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("F\"M5 ; ws");
      Font font0 = Font.decode("F\"M5 ; ws");
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Color color0 = defaultStyledDocument0.getBackground(styleContext_NamedStyle0);
      LabelBlock labelBlock1 = new LabelBlock("SansSerif", font0, color0);
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("\"IAf&@`u", 1447, 1447);
      Color color0 = Color.cyan;
      LabelBlock labelBlock0 = new LabelBlock("\"IAf&@`u", font0, color0);
      boolean boolean0 = labelBlock0.equals(color0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      boolean boolean0 = labelBlock0.equals(labelBlock0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      TextBlockAnchor textBlockAnchor0 = labelBlock0.getContentAlignmentPoint();
      assertEquals(TextBlockAnchor.CENTER, textBlockAnchor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Sg~6fAVv>P)");
      String string0 = labelBlock0.getToolTipText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.setURLText("");
      LabelBlock labelBlock1 = new LabelBlock("");
      boolean boolean0 = labelBlock1.equals(labelBlock0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" xof?pcOt?!");
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      labelBlock0.setTextAnchor(rectangleAnchor0);
      LabelBlock labelBlock1 = new LabelBlock(" xof?pcOt?!");
      boolean boolean0 = labelBlock0.equals(labelBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      // Undeclared exception!
      try { 
        labelBlock0.setContentAlignmentPoint((TextBlockAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
         verifyException("org.jfree.chart.internal.Args", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      Font font0 = labelBlock0.getFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.setToolTipText("");
      String string0 = labelBlock0.getToolTipText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("\"IAf&@`u", 1447, 1447);
      Color color0 = Color.cyan;
      LabelBlock labelBlock0 = new LabelBlock("\"IAf&@`u", font0, color0);
      Color color1 = (Color)labelBlock0.getPaint();
      assertEquals(255, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      String string0 = labelBlock0.getURLText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      RectangleAnchor rectangleAnchor0 = labelBlock0.getTextAnchor();
      assertEquals(RectangleAnchor.CENTER, rectangleAnchor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertEquals(0.0, labelBlock1.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertNull(labelBlock0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.FIXED;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0F, (Range) null, lengthConstraintType0, 3392.70533605612, (Range) null, lengthConstraintType0);
      Size2D size2D0 = labelBlock0.arrange(graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      SystemColor systemColor0 = SystemColor.desktop;
      labelBlock0.setPaint(systemColor0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      labelBlock0.draw(graphics2D0, (Rectangle2D) rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }
}
