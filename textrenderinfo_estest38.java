package com.itextpdf.text.pdf.parser;

import com.itextpdf.text.pdf.CMapAwareDocumentFont;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfString;
import org.junit.Test;

import java.util.Stack;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
 * This is a refactored version of a test originally generated by EvoSuite.
 * The scaffolding and runner configuration are kept for compatibility.
 */
public class TextRenderInfo_ESTestTest38 extends TextRenderInfo_ESTest_scaffolding {

    /**
     * Tests that calling getText() on a TextRenderInfo with a specific font and encoding
     * results in a NoSuchMethodError.
     * <p>
     * This test case simulates a known linkage error that can occur in specific runtime
     * environments where the version of a dependency (like the JRE) at runtime is
     * different from the one used at compile time. The underlying PdfEncodings class
     * attempts to call a method that may not exist, leading to this error.
     */
    @Test(timeout = 4000)
    public void getTextWithCMapFontAndCp1250EncodingShouldThrowLinkageError() throws Throwable {
        // Arrange: Set up a TextRenderInfo with a CMapAware font and a PdfString
        // using an encoding ("Cp1250") that is known to trigger a linkage issue
        // in the PdfEncodings utility class under certain environments.
        GraphicsState graphicsState = new GraphicsState();
        CMapAwareDocumentFont font = new CMapAwareDocumentFont(new PdfGState());
        graphicsState.font = font;

        Matrix textMatrix = graphicsState.ctm;
        Stack<MarkedContentInfo> markedContentStack = new Stack<>();
        PdfString pdfStringWithCp1250Encoding = new PdfString("UnicodeBig", "Cp1250");

        TextRenderInfo renderInfo = new TextRenderInfo(
                pdfStringWithCp1250Encoding,
                graphicsState,
                textMatrix,
                markedContentStack
        );

        // Act & Assert: Verify that calling getText() throws NoSuchMethodError.
        try {
            renderInfo.getText();
            fail("Expected a NoSuchMethodError to be thrown due to a linkage issue.");
        } catch (NoSuchMethodError e) {
            // The error is expected because the underlying PdfEncodings class calls
            // java.nio.ByteBuffer.rewind(), which may not exist in the test runtime environment.
            // The error message for NoSuchMethodError is the signature of the missing method.
            final String expectedMissingMethodSignature = "java.nio.ByteBuffer.rewind()Ljava/nio/ByteBuffer;";
            assertEquals(expectedMissingMethodSignature, e.getMessage());

            // verifyException is an EvoSuite-specific assertion that checks the origin
            // of the exception in the stack trace.
            verifyException("com.itextpdf.text.pdf.PdfEncodings", e);
        }
    }
}