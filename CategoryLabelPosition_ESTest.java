/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 17:14:29 GMT 2025
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.api.RectangleAnchor;
import org.jfree.chart.axis.CategoryLabelPosition;
import org.jfree.chart.axis.CategoryLabelWidthType;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextBlockAnchor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CategoryLabelPosition_ESTest extends CategoryLabelPosition_ESTest_scaffolding {

    // ========================= Constructor Validation Tests ========================
    @Test(timeout = 4000)
    public void testConstructorThrowsWhenLabelAnchorNull1() {
        try {
            new CategoryLabelPosition(RectangleAnchor.TOP_RIGHT, null, TextAnchor.CENTER, 
                                      1000.4695532, CategoryLabelWidthType.CATEGORY, -1517.6609F);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'labelAnchor' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testConstructorThrowsWhenLabelAnchorNull2() {
        try {
            new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT, null, 
                                      CategoryLabelWidthType.RANGE, 2093.0F);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'labelAnchor' argument.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testConstructorThrowsWhenLabelAnchorNull3() {
        try {
            new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT, null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null 'labelAnchor' argument.", e.getMessage());
        }
    }

    // ========================= Property Accessor Tests ========================
    @Test(timeout = 4000)
    public void testGetWidthRatio() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.CENTER, 
            TextBlockAnchor.TOP_CENTER, 
            CategoryLabelWidthType.RANGE, 
            0.0F
        );
        assertEquals(0.0F, position.getWidthRatio(), 0.01F);
    }

    @Test(timeout = 4000)
    public void testGetWidthRatioWithNegativeValue() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.BOTTOM, 
            TextBlockAnchor.TOP_LEFT, 
            TextAnchor.BASELINE_RIGHT, 
            -1.0, 
            CategoryLabelWidthType.CATEGORY, 
            -1989.5195F
        );
        assertEquals(-1989.5195F, position.getWidthRatio(), 0.01F);
    }

    @Test(timeout = 4000)
    public void testGetAngle() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.CENTER, 
            TextBlockAnchor.CENTER, 
            TextAnchor.TOP_CENTER, 
            1.0, 
            CategoryLabelWidthType.RANGE, 
            0.0F
        );
        assertEquals(1.0, position.getAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void testGetAngleWithNegativeValue() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.TOP_RIGHT, 
            TextBlockAnchor.CENTER_RIGHT, 
            TextAnchor.TOP_RIGHT, 
            -1.0, 
            CategoryLabelWidthType.RANGE, 
            3650.8F
        );
        assertEquals(-1.0, position.getAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void testGetRotationAnchor() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.CENTER, 
            TextBlockAnchor.CENTER, 
            TextAnchor.TOP_CENTER, 
            1.0, 
            CategoryLabelWidthType.RANGE, 
            0.0F
        );
        assertNotNull(position.getRotationAnchor());
    }

    @Test(timeout = 4000)
    public void testGetDefaultWidthRatio() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertEquals(0.95F, position.getWidthRatio(), 0.01F);
    }

    @Test(timeout = 4000)
    public void testGetDefaultAngle() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertEquals(0.0, position.getAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void testGetLabelAnchor() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertNotNull(position.getLabelAnchor());
    }

    @Test(timeout = 4000)
    public void testGetWidthType() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertNotNull(position.getWidthType());
    }

    // ========================= Equality Tests ========================
    @Test(timeout = 4000)
    public void testEqualsSameObject() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertTrue(position.equals(position));
    }

    @Test(timeout = 4000)
    public void testEqualsEqualObjects() {
        CategoryLabelPosition position1 = new CategoryLabelPosition();
        CategoryLabelPosition position2 = new CategoryLabelPosition();
        assertTrue(position1.equals(position2));
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentWidthRatio() {
        CategoryLabelPosition position1 = new CategoryLabelPosition(
            RectangleAnchor.TOP_LEFT, 
            TextBlockAnchor.BOTTOM_LEFT
        );
        CategoryLabelPosition position2 = new CategoryLabelPosition(
            RectangleAnchor.TOP_LEFT, 
            TextBlockAnchor.BOTTOM_LEFT, 
            CategoryLabelWidthType.CATEGORY, 
            0.0F
        );
        assertFalse(position1.equals(position2));
        assertEquals(0.0F, position2.getWidthRatio(), 0.01F);
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentAngle() {
        CategoryLabelPosition position1 = new CategoryLabelPosition(
            RectangleAnchor.TOP, 
            TextBlockAnchor.CENTER_RIGHT
        );
        CategoryLabelPosition position2 = new CategoryLabelPosition(
            RectangleAnchor.TOP, 
            TextBlockAnchor.CENTER_RIGHT, 
            TextAnchor.CENTER, 
            -447.68625781958866, 
            CategoryLabelWidthType.CATEGORY, 
            -1488.0F
        );
        assertFalse(position1.equals(position2));
        assertEquals(-447.68625781958866, position2.getAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentRotationAnchor() {
        RectangleAnchor rectAnchor = RectangleAnchor.RIGHT;
        TextBlockAnchor blockAnchor = TextBlockAnchor.BOTTOM_CENTER;
        CategoryLabelWidthType widthType = CategoryLabelWidthType.RANGE;
        
        CategoryLabelPosition position1 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor, 
            TextAnchor.BASELINE_CENTER, 
            0.0, 
            widthType, 
            -985.5677F
        );
        CategoryLabelPosition position2 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor, 
            position1.getRotationAnchor(), 
            986.267245817, 
            widthType, 
            -985.5677F
        );
        assertFalse(position1.equals(position2));
        assertEquals(986.267245817, position2.getAngle(), 0.01);
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentCategoryAnchor() {
        RectangleAnchor rectAnchor = RectangleAnchor.CENTER;
        TextBlockAnchor blockAnchor = TextBlockAnchor.CENTER;
        CategoryLabelWidthType widthType = CategoryLabelWidthType.RANGE;
        
        CategoryLabelPosition position1 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor, 
            TextAnchor.TOP_CENTER, 
            1.0, 
            widthType, 
            0.0F
        );
        CategoryLabelPosition position2 = new CategoryLabelPosition(
            position1.getCategoryAnchor(), 
            blockAnchor, 
            widthType, 
            428.78F
        );
        CategoryLabelPosition position3 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor
        );
        assertFalse(position2.equals(position3));
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentWidthType() {
        RectangleAnchor rectAnchor = RectangleAnchor.TOP_RIGHT;
        TextBlockAnchor blockAnchor = TextBlockAnchor.CENTER_RIGHT;
        
        CategoryLabelPosition position1 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor
        );
        CategoryLabelPosition position2 = new CategoryLabelPosition(
            rectAnchor, 
            blockAnchor, 
            CategoryLabelWidthType.CATEGORY, 
            -2714.5823F
        );
        assertFalse(position2.equals(position1));
        assertEquals(-2714.5823F, position2.getWidthRatio(), 0.01F);
    }

    @Test(timeout = 4000)
    public void testEqualsDifferentClass() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertFalse(position.equals(new Object()));
    }

    // ========================= Hash Code Tests ========================
    @Test(timeout = 4000)
    public void testHashCodeConsistency() {
        CategoryLabelPosition position = new CategoryLabelPosition();
        assertEquals(position.hashCode(), position.hashCode());
    }

    @Test(timeout = 4000)
    public void testHashCodeEqualObjects() {
        CategoryLabelPosition position1 = new CategoryLabelPosition();
        CategoryLabelPosition position2 = new CategoryLabelPosition();
        assertEquals(position1.hashCode(), position2.hashCode());
    }

    // ========================= Edge Case Tests ========================
    @Test(timeout = 4000)
    public void testRotationAnchorWithNegativeWidthRatio() {
        CategoryLabelPosition position = new CategoryLabelPosition(
            RectangleAnchor.BOTTOM_RIGHT, 
            TextBlockAnchor.CENTER_LEFT, 
            CategoryLabelWidthType.RANGE, 
            -641.25F
        );
        assertNotNull(position.getRotationAnchor());
        assertEquals(-641.25F, position.getWidthRatio(), 0.01F);
    }
}