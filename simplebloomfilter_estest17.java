package org.apache.commons.collections4.bloomfilter;

import org.junit.Test;
import static org.junit.Assert.assertThrows;

/**
 * This class contains test cases for the SimpleBloomFilter, specifically focusing on
 * scenarios involving large data structures that may lead to memory errors.
 *
 * Note: This class extends a scaffolding class generated by EvoSuite, which may
 * handle test environment setup and teardown.
 */
public class SimpleBloomFilter_ESTestTest17 extends SimpleBloomFilter_ESTest_scaffolding {

    /**
     * Tests that the SimpleBloomFilter constructor throws an OutOfMemoryError
     * when initialized with a shape that requires an extremely large backing array.
     * This validates the filter's behavior under memory-constrained conditions
     * when handling very large, but technically valid, parameters.
     */
    @Test
    public void constructorWithVeryLargeShapeShouldThrowOutOfMemoryError() {
        // Arrange: Define a shape with a number of bits close to Integer.MAX_VALUE.
        // This will require allocating a backing long array of approximately 256MB
        // (33,554,432 longs * 8 bytes/long), which is expected to fail in a
        // standard test execution environment.
        final int hugeNumberOfBits = 2_147_483_639; // Close to Integer.MAX_VALUE
        final int numberOfHashFunctions = 1; // This value is not critical for this test.
        final Shape largeShape = Shape.fromNM(hugeNumberOfBits, numberOfHashFunctions);

        // Act & Assert: Verify that attempting to create a SimpleBloomFilter with this
        // massive shape results in an OutOfMemoryError.
        assertThrows(OutOfMemoryError.class, () -> {
            new SimpleBloomFilter(largeShape);
        });
    }
}