/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 15:47:44 GMT 2025
 */

package com.google.gson.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.internal.LazilyParsedNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazilyParsedNumber_ESTest extends LazilyParsedNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("Deserialization is unsupported");
      lazilyParsedNumber0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("A_>sS8(ab<");
      String string0 = lazilyParsedNumber0.toString();
      assertEquals("A_>sS8(ab<", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("");
      String string0 = lazilyParsedNumber0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("0");
      long long0 = lazilyParsedNumber0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("3");
      long long0 = lazilyParsedNumber0.longValue();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("0");
      int int0 = lazilyParsedNumber0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("5");
      int int0 = lazilyParsedNumber0.intValue();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("0");
      float float0 = lazilyParsedNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("7");
      float float0 = lazilyParsedNumber0.floatValue();
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("0");
      double double0 = lazilyParsedNumber0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("3");
      double double0 = lazilyParsedNumber0.doubleValue();
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("Deserialization is unsupported");
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("Deserialization is unsupported");
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.intValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.NumberLimits", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("Deserialization is unsupported");
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.floatValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      LazilyParsedNumber lazilyParsedNumber1 = new LazilyParsedNumber("Deserialization is pnsuported");
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.equals(lazilyParsedNumber1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("...");
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.doubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("Deserialization is pnsuported");
      LazilyParsedNumber lazilyParsedNumber1 = new LazilyParsedNumber("Deserialization is pnsuported");
      boolean boolean0 = lazilyParsedNumber0.equals(lazilyParsedNumber1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("...");
      boolean boolean0 = lazilyParsedNumber0.equals(lazilyParsedNumber0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("d<Hh");
      boolean boolean0 = lazilyParsedNumber0.equals("d<Hh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("-6");
      double double0 = lazilyParsedNumber0.doubleValue();
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.longValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.NumberLimits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      String string0 = lazilyParsedNumber0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("-6");
      long long0 = lazilyParsedNumber0.longValue();
      assertEquals((-6L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("-6");
      int int0 = lazilyParsedNumber0.intValue();
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber((String) null);
      // Undeclared exception!
      try { 
        lazilyParsedNumber0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.LazilyParsedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LazilyParsedNumber lazilyParsedNumber0 = new LazilyParsedNumber("-6");
      float float0 = lazilyParsedNumber0.floatValue();
      assertEquals((-6.0F), float0, 0.01F);
  }
}
