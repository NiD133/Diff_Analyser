/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:05 GMT 2025
 */

package org.apache.commons.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.NoSuchElementException;
import org.apache.commons.io.LineIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LineIterator_ESTest extends LineIterator_ESTest_scaffolding {

    // Constructor Tests
    @Test(timeout = 4000)
    public void testConstructor_NullReader_ThrowsNullPointerException()  {
        try {
            new LineIterator((Reader) null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            assertEquals("reader", e.getMessage());
        }
    }

    // hasNext() Tests
    @Test(timeout = 4000)
    public void testHasNext_EmptyReader_ReturnsFalse()  {
        StringReader stringReader0 = new StringReader("");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertFalse(lineIterator0.hasNext());
    }

    @Test(timeout = 4000)
    public void testHasNext_NonEmptyReader_ReturnsTrue()  {
        StringReader stringReader0 = new StringReader("text");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertTrue(lineIterator0.hasNext());
        assertTrue(lineIterator0.hasNext()); // Multiple calls should still return true
    }

    @Test(timeout = 4000)
    public void testHasNext_AfterCloseQuietly_ReturnsFalse()  {
        StringReader stringReader0 = new StringReader("text");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        LineIterator.closeQuietly(lineIterator0);
        assertFalse(lineIterator0.hasNext());
    }

    @Test(timeout = 4000)
    public void testHasNext_ClosedReader_ThrowsIllegalStateException()  {
        StringReader stringReader0 = new StringReader("text");
        stringReader0.close();
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.hasNext();
            fail("Expecting exception: IllegalStateException");
        } catch(IllegalStateException e) {
            assertTrue(e.getMessage().contains("Stream closed"));
        }
    }

    // next() and nextLine() Tests
    @Test(timeout = 4000)
    public void testNext_WithContent_ReturnsContent()  {
        StringReader stringReader0 = new StringReader("content");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertEquals("content", lineIterator0.next());
    }

    @Test(timeout = 4000)
    public void testNextLine_WithContent_ReturnsContent()  {
        StringReader stringReader0 = new StringReader("content");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertEquals("content", lineIterator0.nextLine());
    }

    @Test(timeout = 4000)
    public void testNext_NewLineOnly_ReturnsEmptyString()  {
        StringReader stringReader0 = new StringReader("\n");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertEquals("", lineIterator0.next());
    }

    @Test(timeout = 4000)
    public void testNextLine_NewLineOnly_ReturnsEmptyString()  {
        StringReader stringReader0 = new StringReader("\n");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        lineIterator0.hasNext(); // Prime the iterator
        assertEquals("", lineIterator0.nextLine());
    }

    // Exception Tests
    @Test(timeout = 4000)
    public void testNext_EmptyReader_ThrowsNoSuchElementException()  {
        StringReader stringReader0 = new StringReader("");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.next();
            fail("Expecting exception: NoSuchElementException");
        } catch(NoSuchElementException e) {
            assertEquals("No more lines", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testNextLine_EmptyReader_ThrowsNoSuchElementException()  {
        StringReader stringReader0 = new StringReader("");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.nextLine();
            fail("Expecting exception: NoSuchElementException");
        } catch(NoSuchElementException e) {
            assertEquals("No more lines", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testNext_ExhaustedReader_ThrowsNoSuchElementException()  {
        StringReader stringReader0 = new StringReader("first");
        LineIterator firstIterator = new LineIterator(stringReader0);
        firstIterator.next(); // Consume the only line
        
        LineIterator secondIterator = new LineIterator(stringReader0);
        try {
            secondIterator.next();
            fail("Expecting exception: NoSuchElementException");
        } catch(NoSuchElementException e) {
            assertEquals("No more lines", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testNext_ClosedReader_ThrowsIllegalStateException()  {
        StringReader stringReader0 = new StringReader("text");
        stringReader0.close();
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.next();
            fail("Expecting exception: IllegalStateException");
        } catch(IllegalStateException e) {
            assertTrue(e.getMessage().contains("Stream closed"));
        }
    }

    @Test(timeout = 4000)
    public void testNextLine_ClosedReader_ThrowsIllegalStateException()  {
        StringReader stringReader0 = new StringReader("text");
        stringReader0.close();
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.nextLine();
            fail("Expecting exception: IllegalStateException");
        } catch(IllegalStateException e) {
            assertTrue(e.getMessage().contains("Stream closed"));
        }
    }

    // Other Functionality Tests
    @Test(timeout = 4000)
    public void testIsValidLine_NonEmptyString_ReturnsTrue()  {
        StringReader stringReader0 = new StringReader("");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        assertTrue(lineIterator0.isValidLine("any string"));
    }

    @Test(timeout = 4000)
    public void testRemove_Always_ThrowsUnsupportedOperationException()  {
        StringReader stringReader0 = new StringReader("");
        LineIterator lineIterator0 = new LineIterator(stringReader0);
        try {
            lineIterator0.remove();
            fail("Expecting exception: UnsupportedOperationException");
        } catch(UnsupportedOperationException e) {
            assertEquals("remove not supported", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void testClose_ValidReader_DoesNotThrow()  {
        StringReader stringReader0 = new StringReader("text");
        BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
        LineIterator lineIterator0 = new LineIterator(bufferedReader0);
        lineIterator0.close(); // Should not throw
    }
}