/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:19:29 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IllegalFieldValueException_ESTest extends IllegalFieldValueException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("ZON+$0'' {[}Z#94 eu", "");
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value \"\" for ZON+$0'' {[}Z#94 eu is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, "Value ");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"Value \" for centuries is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("ZON+$0'' {[}Z#94 eu", "");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"\" for ZON+$0'' {[}Z#94 eu is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Float float0 = new Float(1.0F);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, float0, float0, float0);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value 1.0 for year must be in the range [1.0,1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "");
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value \"\" for secondOfMinute is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, (Number) null, (Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, "4s1_{!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float(2440587.5);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, float0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, (Number) null, (Number) null, (Number) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(1580L);
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, long0, long0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", byte0, byte0, byte0);
      illegalFieldValueException0.prependMessage((String) null);
      assertEquals("Value 0 for  must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.prependMessage("");
      assertEquals(": Value null for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, (Number) null);
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value null for  is not supported", illegalFieldValueException0.getMessage());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("", string0);
      assertEquals("Value \"\" for secondOfMinute is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float(0.0F);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, float0, (Number) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long((-42521587200000L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("nrMiC", (Number) null, (Number) null, long0);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value null for nrMiC must not be larger than -42521587200000", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, ".#Q:=KY]1ld]Nf>u");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, "");
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value \"\" for eras is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value null for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Long long0 = new Long((-42521587200000L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, long0, long0, long0);
      String string0 = illegalFieldValueException0.getMessage();
      assertEquals("Value -42521587200000 for weekyear must be in the range [-42521587200000,-42521587200000]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (Number) null, (Number) null, (Number) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value null for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", byte0, byte0, byte0);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value 0 for  must be in the range [0,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value null for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("sg", "sg");
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value \"sg\" for sg is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, (Number) null, (Number) null, "org.joda.time.DateTimeZone$LazyInit");
  }
}
