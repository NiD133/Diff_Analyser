package org.apache.commons.collections4.iterators;

import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.junit.Test;

import java.util.LinkedList;
import java.util.ListIterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * This test class contains an improved version of a test for FilterListIterator.
 * The original test was generated by an automated tool.
 */
public class FilterListIteratorImprovedTest {

    /**
     * Tests that the nextIndex() method returns the correct value after
     * iterating backward from the end of the list.
     */
    @Test
    public void testNextIndexAfterCallingPreviousFromEndOfList() {
        // Arrange
        // Create a list with a single 'null' element.
        final LinkedList<Integer> sourceList = new LinkedList<>();
        sourceList.add(null);

        // Use a predicate that only accepts 'null' values.
        final Predicate<Integer> predicate = NullPredicate.nullPredicate();

        // Create a ListIterator positioned at the end of the list (after the 'null' element).
        final ListIterator<Integer> listIterator = sourceList.listIterator(1);

        // The FilterListIterator under test.
        final FilterListIterator<Integer> filteredIterator = new FilterListIterator<>(listIterator, predicate);

        // Pre-condition check: The iterator should find a previous element that matches the predicate.
        assertTrue("Iterator should have a previous element", filteredIterator.hasPrevious());

        // Act
        // Move the iterator backward over the 'null' element.
        final Integer previousElement = filteredIterator.previous();
        
        // Get the index of the element that would be returned by a subsequent call to next().
        final int nextIndex = filteredIterator.nextIndex();

        // Assert
        // Verify that the correct element was returned by previous().
        assertNull("previous() should have returned the null element", previousElement);

        // The FilterListIterator's internal index is initialized to 0 and decremented by each
        // call to previous(). Therefore, after one call from the initial state, the index is -1.
        // This assertion verifies this specific implementation detail.
        assertEquals("nextIndex should be -1 after one call to previous() from the end", -1, nextIndex);
    }
}