/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:24 GMT 2025
 */

package org.apache.commons.io.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.util.Comparator;
import java.util.concurrent.ForkJoinTask;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.LongStream;
import org.apache.commons.io.function.IOBiConsumer;
import org.apache.commons.io.function.IOBiFunction;
import org.apache.commons.io.function.IOBooleanSupplier;
import org.apache.commons.io.function.IOComparator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.apache.commons.io.function.IOIntConsumer;
import org.apache.commons.io.function.IOIntSupplier;
import org.apache.commons.io.function.IOLongSupplier;
import org.apache.commons.io.function.IOPredicate;
import org.apache.commons.io.function.IOQuadFunction;
import org.apache.commons.io.function.IORunnable;
import org.apache.commons.io.function.IOSupplier;
import org.apache.commons.io.function.IOTriConsumer;
import org.apache.commons.io.function.IOTriFunction;
import org.apache.commons.io.function.Uncheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Uncheck_ESTest extends Uncheck_ESTest_scaffolding {

    // Tests for accept() methods
    @Test(timeout = 4000)
    public void testAcceptTriConsumer_NoOp() throws Throwable {
        IOTriConsumer<String, String, String> noop = IOTriConsumer.noop();
        Uncheck.accept(noop, "", "09zT^3GkFTSgG3", "09zT^3GkFTSgG3");
    }

    @Test(timeout = 4000)
    public void testAcceptBiConsumer_NoOp() throws Throwable {
        IOBiConsumer<String, String> noop = IOBiConsumer.noop();
        Uncheck.accept(noop, "I8ucG1|7Y@", ">jR><;J|_0");
    }

    @Test(timeout = 4000)
    public void testAcceptConsumer_NoOp() throws Throwable {
        IOConsumer<String> noop = IOConsumer.noop();
        Uncheck.accept(noop, "");
    }

    @Test(timeout = 4000)
    public void testAcceptIntConsumer() throws Throwable {
        IOIntConsumer mockConsumer = mock(IOIntConsumer.class);
        Uncheck.accept(mockConsumer, 111);
    }

    // Tests for test() method with IOPredicate
    @Test(timeout = 4000)
    public void testTestPredicate_AlwaysTrue() throws Throwable {
        IOPredicate<String> alwaysTrue = IOPredicate.alwaysTrue();
        assertTrue(Uncheck.test(alwaysTrue, "after"));
    }

    @Test(timeout = 4000)
    public void testTestPredicate_AlwaysFalse() throws Throwable {
        IOPredicate<String> alwaysFalse = IOPredicate.alwaysFalse();
        assertFalse(Uncheck.test(alwaysFalse, "6 P)'Sdhh"));
    }

    // Tests for getAsLong() with IOLongSupplier
    @Test(timeout = 4000)
    public void testGetAsLong_WithExceptionMessage() throws Throwable {
        IOLongSupplier mockSupplier = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(mockSupplier).getAsLong();
        assertEquals(0L, Uncheck.getAsLong(mockSupplier, (Supplier<String>) null));

        doReturn(1139L).when(mockSupplier).getAsLong();
        assertEquals(1139L, Uncheck.getAsLong(mockSupplier, (Supplier<String>) null));

        doReturn(-890L).when(mockSupplier).getAsLong();
        assertEquals(-890L, Uncheck.getAsLong(mockSupplier, (Supplier<String>) null));
    }

    @Test(timeout = 4000)
    public void testGetAsLong_WithoutExceptionMessage() throws Throwable {
        IOLongSupplier mockSupplier = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(0L).when(mockSupplier).getAsLong();
        assertEquals(0L, Uncheck.getAsLong(mockSupplier));

        doReturn(2444L).when(mockSupplier).getAsLong();
        assertEquals(2444L, Uncheck.getAsLong(mockSupplier));

        doReturn(-2307L).when(mockSupplier).getAsLong();
        assertEquals(-2307L, Uncheck.getAsLong(mockSupplier));
    }

    // Tests for getAsInt() with IOIntSupplier
    @Test(timeout = 4000)
    public void testGetAsInt_WithExceptionMessage() throws Throwable {
        IOIntSupplier mockSupplier = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(mockSupplier).getAsInt();
        assertEquals(0, Uncheck.getAsInt(mockSupplier, (Supplier<String>) null));

        doReturn(2726).when(mockSupplier).getAsInt();
        assertEquals(2726, Uncheck.getAsInt(mockSupplier, (Supplier<String>) null));

        doReturn(-1214).when(mockSupplier).getAsInt();
        assertEquals(-1214, Uncheck.getAsInt(mockSupplier, (Supplier<String>) null));
    }

    @Test(timeout = 4000)
    public void testGetAsInt_WithoutExceptionMessage() throws Throwable {
        IOIntSupplier mockSupplier = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(mockSupplier).getAsInt();
        assertEquals(0, Uncheck.getAsInt(mockSupplier));

        doReturn(1165).when(mockSupplier).getAsInt();
        assertEquals(1165, Uncheck.getAsInt(mockSupplier));

        doReturn(-1830).when(mockSupplier).getAsInt();
        assertEquals(-1830, Uncheck.getAsInt(mockSupplier));
    }

    // Tests for getAsBoolean() with IOBooleanSupplier
    @Test(timeout = 4000)
    public void testGetAsBoolean_True() throws Throwable {
        IOBooleanSupplier mockSupplier = mock(IOBooleanSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(true).when(mockSupplier).getAsBoolean();
        assertTrue(Uncheck.getAsBoolean(mockSupplier));
    }

    @Test(timeout = 4000)
    public void testGetAsBoolean_False() throws Throwable {
        IOBooleanSupplier mockSupplier = mock(IOBooleanSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(mockSupplier).getAsBoolean();
        assertFalse(Uncheck.getAsBoolean(mockSupplier));
    }

    // Tests for compare() with IOComparator
    @Test(timeout = 4000)
    public void testCompare_ZeroResult() throws Throwable {
        IOComparator<String> mockComparator = mock(IOComparator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(mockComparator).compare(anyString(), anyString());
        assertEquals(0, Uncheck.compare(mockComparator, null, ""));
    }

    @Test(timeout = 4000)
    public void testCompare_PositiveResult() throws Throwable {
        IOComparator<String> mockComparator = mock(IOComparator.class, new ViolatedAssumptionAnswer());
        doReturn(553).when(mockComparator).compare(anyString(), anyString());
        assertEquals(553, Uncheck.compare(mockComparator, "I8ucG1|7Y@", "I8ucG1|7Y@"));
    }

    @Test(timeout = 4000)
    public void testCompare_NegativeResult() throws Throwable {
        IOComparator<String> mockComparator = mock(IOComparator.class, new ViolatedAssumptionAnswer());
        doReturn(-502).when(mockComparator).compare(anyString(), anyString());
        assertEquals(-502, Uncheck.compare(mockComparator, "I8ucG1|7Y@", "I8ucG1|7Y@"));
    }

    // Tests for apply() with IOTriFunction
    @Test(timeout = 4000)
    public void testApplyTriFunction_ReturnsNull() throws Throwable {
        IOTriFunction<String, String, String, String> mockFunction = 
            mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockFunction).apply(anyString(), anyString(), anyString());
        assertNull(Uncheck.apply(mockFunction, null, null, "}S<aaJ[%:eX"));
    }

    @Test(timeout = 4000)
    public void testApplyTriFunction_ReturnsString() throws Throwable {
        IOTriFunction<String, String, String, String> mockFunction = 
            mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
        doReturn("%s #%,d: %s").when(mockFunction).apply(anyString(), anyString(), anyString());
        assertEquals("%s #%,d: %s", Uncheck.apply(mockFunction, "http", "", ""));
    }

    // Tests for apply() with IOQuadFunction
    @Test(timeout = 4000)
    public void testApplyQuadFunction_ReturnsNull() throws Throwable {
        IOQuadFunction<String, String, String, String, String> mockFunction = 
            mock(IOQuadFunction.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockFunction).apply(anyString(), anyString(), anyString(), anyString());
        assertNull(Uncheck.apply(mockFunction, "Thread aborted", "&;", "lI1~&fKWs}?,L*$", "lI1~&fKWs}?,L*$"));
    }

    @Test(timeout = 4000)
    public void testApplyQuadFunction_ReturnsString() throws Throwable {
        IOQuadFunction<String, String, String, String, String> mockFunction = 
            mock(IOQuadFunction.class, new ViolatedAssumptionAnswer());
        doReturn("JVT0j").when(mockFunction).apply(anyString(), anyString(), anyString(), anyString());
        assertEquals("JVT0j", Uncheck.apply(mockFunction, "Thread aborted", "&;", "lI1~&fKWs}?,L*$", "lI1~&fKWs}?,L*$"));
    }

    // Tests for apply() with IOFunction
    @Test(timeout = 4000)
    public void testApplyFunction_IdentityReturnsNull() throws Throwable {
        IOFunction<String, String> identity = IOFunction.identity();
        assertNull(Uncheck.apply(identity, (String) null));
    }

    @Test(timeout = 4000)
    public void testApplyFunction_IdentityReturnsSameValue() throws Throwable {
        IOFunction<String, String> identity = IOFunction.identity();
        assertEquals("http", Uncheck.apply(identity, "http"));
    }

    // Tests for apply() with IOBiFunction
    @Test(timeout = 4000)
    public void testApplyBiFunction_ReturnsNull() throws Throwable {
        IOBiFunction<String, String, String> mockFunction = 
            mock(IOBiFunction.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockFunction).apply(anyString(), anyString());
        assertNull(Uncheck.apply(mockFunction, "T;ot>5MR", ""));
    }

    @Test(timeout = 4000)
    public void testApplyBiFunction_ReturnsString() throws Throwable {
        IOBiFunction<String, String, String> mockFunction = 
            mock(IOBiFunction.class, new ViolatedAssumptionAnswer());
        doReturn("|M8Y<4e").when(mockFunction).apply(anyString(), anyString());
        assertEquals("|M8Y<4e", Uncheck.apply(mockFunction, "I8ucG1|7Y@", "I8ucG1|7Y@"));
    }

    // Tests for run() with IORunnable
    @Test(timeout = 4000)
    public void testRun_NoOpWithoutExceptionMessage() throws Throwable {
        IORunnable noop = IORunnable.noop();
        Uncheck.run(noop);
    }

    @Test(timeout = 4000)
    public void testRun_NoOpWithExceptionMessage() throws Throwable {
        IORunnable noop = IORunnable.noop();
        Uncheck.run(noop, (Supplier<String>) null);
    }

    // Tests for get() with IOSupplier
    @Test(timeout = 4000)
    public void testGet_ReturnsNullWithoutExceptionMessage() throws Throwable {
        IOSupplier<ForkJoinTask<String>> mockSupplier = 
            mock(IOSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockSupplier).get();
        assertNull(Uncheck.get(mockSupplier));
    }

    @Test(timeout = 4000)
    public void testGet_ReturnsNullWithExceptionMessage() throws Throwable {
        IOSupplier<LongStream> mockSupplier = 
            mock(IOSupplier.class, new ViolatedAssumptionAnswer());
        doReturn(null).when(mockSupplier).get();
        assertNull(Uncheck.get(mockSupplier, (Supplier<String>) null));
    }

    // Tests for null argument validation
    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testTestPredicate_NullPredicateThrowsNPE() throws Throwable {
        Uncheck.test((IOPredicate<String>) null, "exists");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testRun_NullRunnableThrowsNPE() throws Throwable {
        Uncheck.run((IORunnable) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testRun_NullRunnableWithMessageThrowsNPE() throws Throwable {
        // Setup collector to provide exception message
        Supplier<String> messageSupplier = mock(Supplier.class);
        Uncheck.run((IORunnable) null, messageSupplier);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAsLong_NullSupplierThrowsNPE() throws Throwable {
        Uncheck.getAsLong((IOLongSupplier) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAsLong_NullSupplierWithMessageThrowsNPE() throws Throwable {
        Uncheck.getAsLong((IOLongSupplier) null, (Supplier<String>) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAsInt_NullSupplierThrowsNPE() throws Throwable {
        Uncheck.getAsInt((IOIntSupplier) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAsInt_NullSupplierWithMessageThrowsNPE() throws Throwable {
        Uncheck.getAsInt((IOIntSupplier) null, (Supplier<String>) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetAsBoolean_NullSupplierThrowsNPE() throws Throwable {
        Uncheck.getAsBoolean((IOBooleanSupplier) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGet_NullSupplierThrowsNPE() throws Throwable {
        Uncheck.get((IOSupplier<String>) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGet_NullSupplierWithMessageThrowsNPE() throws Throwable {
        Uncheck.get((IOSupplier<String>) null, (Supplier<String>) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApplyTriFunction_NullFunctionThrowsNPE() throws Throwable {
        Uncheck.apply((IOTriFunction<String, String, String, HijrahEra>) null, 
            "org.apache.commons.io.output.FileWriterWithEncoding", "*T~4q!]3", "*T~4q!]3");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApplyFunction_NullFunctionThrowsNPE() throws Throwable {
        Uncheck.apply((IOFunction<String, String>) null, "7j}&A}pmS^");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApplyBiFunction_NullFunctionThrowsNPE() throws Throwable {
        Uncheck.apply((IOBiFunction<String, String, String>) null, "", "");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testApplyQuadFunction_NullFunctionThrowsNPE() throws Throwable {
        Uncheck.apply((IOQuadFunction<String, String, String, String, String>) null, 
            "Array size=", "Array size=", "", null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAcceptIntConsumer_NullConsumerThrowsNPE() throws Throwable {
        Uncheck.accept((IOIntConsumer) null, Integer.MAX_VALUE);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAcceptTriConsumer_NullConsumerThrowsNPE() throws Throwable {
        Uncheck.accept((IOTriConsumer<String, String, String>) null, 
            "P!ebq\"v'`L[1fuAO5S", "P!ebq\"v'`L[1fuAO5S", "");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAcceptBiConsumer_NullConsumerThrowsNPE() throws Throwable {
        Uncheck.accept((IOBiConsumer<String, String>) null, " exists", " exists");
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testAcceptConsumer_NullConsumerThrowsNPE() throws Throwable {
        Uncheck.accept((IOConsumer<String>) null, (String) null);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testCompare_NullComparatorThrowsNPE() throws Throwable {
        Uncheck.compare((IOComparator<String>) null, "%0E@O`5Sj", "%0E@O`5Sj");
    }
}