/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 21 00:50:24 GMT 2025
 */

package org.apache.commons.io.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.time.chrono.HijrahEra;
import java.util.Comparator;
import java.util.concurrent.ForkJoinTask;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.LongStream;
import org.apache.commons.io.function.IOBiConsumer;
import org.apache.commons.io.function.IOBiFunction;
import org.apache.commons.io.function.IOBooleanSupplier;
import org.apache.commons.io.function.IOComparator;
import org.apache.commons.io.function.IOConsumer;
import org.apache.commons.io.function.IOFunction;
import org.apache.commons.io.function.IOIntConsumer;
import org.apache.commons.io.function.IOIntSupplier;
import org.apache.commons.io.function.IOLongSupplier;
import org.apache.commons.io.function.IOPredicate;
import org.apache.commons.io.function.IOQuadFunction;
import org.apache.commons.io.function.IORunnable;
import org.apache.commons.io.function.IOSupplier;
import org.apache.commons.io.function.IOTriConsumer;
import org.apache.commons.io.function.IOTriFunction;
import org.apache.commons.io.function.Uncheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Uncheck_ESTest extends Uncheck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOTriConsumer<String, String, String> iOTriConsumer0 = IOTriConsumer.noop();
      Uncheck.accept(iOTriConsumer0, "", "09zT^3GkFTSgG3", "09zT^3GkFTSgG3");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOBiConsumer<String, String> iOBiConsumer0 = IOBiConsumer.noop();
      Uncheck.accept(iOBiConsumer0, "I8ucG1|7Y@", ">jR><;J|_0");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOConsumer<String> iOConsumer0 = IOConsumer.noop();
      Uncheck.accept(iOConsumer0, "");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IOPredicate<String> iOPredicate0 = IOPredicate.alwaysTrue();
      boolean boolean0 = Uncheck.test(iOPredicate0, "after");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0, (Supplier<String>) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(1139L).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0, (Supplier<String>) null);
      assertEquals(1139L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-890L)).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0, (Supplier<String>) null);
      assertEquals((-890L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(2444L).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0);
      assertEquals(2444L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iOIntSupplier0).getAsInt();
      int int0 = Uncheck.getAsInt(iOIntSupplier0, (Supplier<String>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(2726).when(iOIntSupplier0).getAsInt();
      int int0 = Uncheck.getAsInt(iOIntSupplier0, (Supplier<String>) null);
      assertEquals(2726, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iOIntSupplier0).getAsInt();
      int int0 = Uncheck.getAsInt(iOIntSupplier0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(1165).when(iOIntSupplier0).getAsInt();
      int int0 = Uncheck.getAsInt(iOIntSupplier0);
      assertEquals(1165, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-1830)).when(iOIntSupplier0).getAsInt();
      int int0 = Uncheck.getAsInt(iOIntSupplier0);
      assertEquals((-1830), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOBooleanSupplier iOBooleanSupplier0 = mock(IOBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iOBooleanSupplier0).getAsBoolean();
      boolean boolean0 = Uncheck.getAsBoolean(iOBooleanSupplier0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOComparator<String> iOComparator0 = (IOComparator<String>) mock(IOComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2057)).when(iOComparator0).compare(anyString() , anyString());
      int int0 = Uncheck.compare(iOComparator0, (String) null, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOComparator<String> iOComparator0 = (IOComparator<String>) mock(IOComparator.class, new ViolatedAssumptionAnswer());
      doReturn(553).when(iOComparator0).compare(anyString() , anyString());
      int int0 = Uncheck.compare(iOComparator0, "I8ucG1|7Y@", "I8ucG1|7Y@");
      assertEquals(553, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOComparator<String> iOComparator0 = (IOComparator<String>) mock(IOComparator.class, new ViolatedAssumptionAnswer());
      doReturn((-502)).when(iOComparator0).compare(anyString() , anyString());
      int int0 = Uncheck.compare(iOComparator0, "I8ucG1|7Y@", "I8ucG1|7Y@");
      assertEquals((-502), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IOTriFunction<String, String, String, String> iOTriFunction0 = (IOTriFunction<String, String, String, String>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOTriFunction0).apply(anyString() , anyString() , anyString());
      String string0 = Uncheck.apply(iOTriFunction0, (String) null, (String) null, "}S<aaJ[%:eX");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOQuadFunction<String, String, String, String, String> iOQuadFunction0 = (IOQuadFunction<String, String, String, String, String>) mock(IOQuadFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOQuadFunction0).apply(anyString() , anyString() , anyString() , anyString());
      String string0 = Uncheck.apply(iOQuadFunction0, "Thread aborted", "&;", "lI1~&fKWs}?,L*$", "lI1~&fKWs}?,L*$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IOQuadFunction<String, String, String, String, String> iOQuadFunction0 = (IOQuadFunction<String, String, String, String, String>) mock(IOQuadFunction.class, new ViolatedAssumptionAnswer());
      doReturn("JVT0j").when(iOQuadFunction0).apply(anyString() , anyString() , anyString() , anyString());
      String string0 = Uncheck.apply(iOQuadFunction0, "Thread aborted", "&;", "lI1~&fKWs}?,L*$", "lI1~&fKWs}?,L*$");
      assertEquals("JVT0j", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOFunction<String, String> iOFunction0 = IOFunction.identity();
      String string0 = Uncheck.apply(iOFunction0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOBiFunction<String, String, String> iOBiFunction0 = (IOBiFunction<String, String, String>) mock(IOBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOBiFunction0).apply(anyString() , anyString());
      String string0 = Uncheck.apply(iOBiFunction0, "T;ot>5MR", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.test((IOPredicate<String>) null, "exists");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOBiConsumer<String, String> iOBiConsumer0 = IOBiConsumer.noop();
      BiConsumer<String, String> biConsumer0 = iOBiConsumer0.asBiConsumer();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<String> binaryOperator0 = BinaryOperator.minBy((Comparator<? super String>) comparator0);
      Collector.Characteristics[] collector_CharacteristicsArray0 = (Collector.Characteristics[]) Array.newInstance(Collector.Characteristics.class, 0);
      Collector<String, String, String> collector0 = Collector.of(supplier0, biConsumer0, binaryOperator0, (Collector.Characteristics[]) collector_CharacteristicsArray0);
      Supplier<String> supplier1 = collector0.supplier();
      // Undeclared exception!
      try { 
        Uncheck.run((IORunnable) null, supplier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.run((IORunnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.getAsLong((IOLongSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.getAsInt((IOIntSupplier) null, (Supplier<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.getAsBoolean((IOBooleanSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.get((IOSupplier<String>) null, (Supplier<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.get((IOSupplier<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.apply((IOTriFunction<String, String, String, HijrahEra>) null, "org.apache.commons.io.output.FileWriterWithEncoding", "*T~4q!]3", "*T~4q!]3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.apply((IOFunction<String, String>) null, "7j}&A}pmS^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.apply((IOBiFunction<String, String, String>) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.accept((IOIntConsumer) null, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOTriFunction<String, String, String, String> iOTriFunction0 = (IOTriFunction<String, String, String, String>) mock(IOTriFunction.class, new ViolatedAssumptionAnswer());
      doReturn("%s #%,d: %s").when(iOTriFunction0).apply(anyString() , anyString() , anyString());
      String string0 = Uncheck.apply(iOTriFunction0, "http", "", "");
      assertEquals("%s #%,d: %s", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IOLongSupplier iOLongSupplier0 = mock(IOLongSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-2307L)).when(iOLongSupplier0).getAsLong();
      long long0 = Uncheck.getAsLong(iOLongSupplier0);
      assertEquals((-2307L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.compare((IOComparator<String>) null, "%0E@O`5Sj", "%0E@O`5Sj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.getAsInt((IOIntSupplier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.apply((IOQuadFunction<String, String, String, String, String>) null, "Array size=", "Array size=", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOBooleanSupplier iOBooleanSupplier0 = mock(IOBooleanSupplier.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iOBooleanSupplier0).getAsBoolean();
      boolean boolean0 = Uncheck.getAsBoolean(iOBooleanSupplier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOFunction<String, String> iOFunction0 = IOFunction.identity();
      String string0 = Uncheck.apply(iOFunction0, "http");
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.accept((IOTriConsumer<String, String, String>) null, "P!ebq\"v'`L[1fuAO5S", "P!ebq\"v'`L[1fuAO5S", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.accept((IOBiConsumer<String, String>) null, " exists", " exists");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IOIntSupplier iOIntSupplier0 = mock(IOIntSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((-1214)).when(iOIntSupplier0).getAsInt();
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      IOBiConsumer<String, String> iOBiConsumer0 = IOBiConsumer.noop();
      BiConsumer<String, String> biConsumer0 = iOBiConsumer0.asBiConsumer();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<String> binaryOperator0 = BinaryOperator.minBy((Comparator<? super String>) comparator0);
      IOFunction<String, String> iOFunction0 = IOFunction.identity();
      Function<String, String> function0 = iOFunction0.asFunction();
      Collector.Characteristics[] collector_CharacteristicsArray0 = (Collector.Characteristics[]) Array.newInstance(Collector.Characteristics.class, 0);
      Collector<String, String, String> collector0 = Collector.of(supplier0, biConsumer0, binaryOperator0, function0, (Collector.Characteristics[]) collector_CharacteristicsArray0);
      Supplier<String> supplier1 = collector0.supplier();
      int int0 = Uncheck.getAsInt(iOIntSupplier0, supplier1);
      assertEquals((-1214), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IOSupplier<LongStream> iOSupplier0 = (IOSupplier<LongStream>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      LongStream longStream0 = Uncheck.get(iOSupplier0, (Supplier<String>) null);
      assertNull(longStream0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IOBiFunction<String, String, String> iOBiFunction0 = (IOBiFunction<String, String, String>) mock(IOBiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("|M8Y<4e").when(iOBiFunction0).apply(anyString() , anyString());
      String string0 = Uncheck.apply(iOBiFunction0, "I8ucG1|7Y@", "I8ucG1|7Y@");
      assertEquals("|M8Y<4e", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IORunnable iORunnable0 = IORunnable.noop();
      Uncheck.run(iORunnable0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.accept((IOConsumer<String>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOIntConsumer iOIntConsumer0 = mock(IOIntConsumer.class, new ViolatedAssumptionAnswer());
      Uncheck.accept(iOIntConsumer0, 111);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uncheck.getAsLong((IOLongSupplier) null, (Supplier<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.io.function.Uncheck", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOSupplier<ForkJoinTask<String>> iOSupplier0 = (IOSupplier<ForkJoinTask<String>>) mock(IOSupplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iOSupplier0).get();
      ForkJoinTask<String> forkJoinTask0 = Uncheck.get(iOSupplier0);
      assertNull(forkJoinTask0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IOPredicate<String> iOPredicate0 = IOPredicate.alwaysFalse();
      boolean boolean0 = Uncheck.test(iOPredicate0, "6 P)'Sdhh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IORunnable iORunnable0 = IORunnable.noop();
      Uncheck.run(iORunnable0, (Supplier<String>) null);
  }
}
