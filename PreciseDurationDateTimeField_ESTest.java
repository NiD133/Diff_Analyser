/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:23:49 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PreciseDurationDateTimeField_ESTest extends PreciseDurationDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void testRemainderCalculation()  throws Throwable  {
      // Test remainder calculation for a precise duration field
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      DurationField durationField1 = zonedChronology0.seconds();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField1, durationField0);
      long remainder = preciseDateTimeField0.remainder(2946L);
      assertEquals(946L, remainder);
  }

  @Test(timeout = 4000)
  public void testRoundCeilingWithPositiveValue()  throws Throwable  {
      // Test rounding ceiling with positive value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 21859200000L);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, preciseDurationField0);
      long rounded = preciseDateTimeField0.roundCeiling(1902L);
      assertEquals(86400000L, rounded);
  }

  @Test(timeout = 4000)
  public void testRoundCeilingWithZero()  throws Throwable  {
      // Test rounding ceiling with zero value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long rounded = preciseDateTimeField0.roundCeiling(0L);
      assertEquals(0L, rounded);
  }

  @Test(timeout = 4000)
  public void testRoundFloorWithZero()  throws Throwable  {
      // Test rounding floor with zero value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long rounded = preciseDateTimeField0.roundFloor(0L);
      assertEquals(0L, rounded);
  }

  @Test(timeout = 4000)
  public void testSetToZero()  throws Throwable  {
      // Test setting field value to zero
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long result = preciseDateTimeField0.set(2979L, 0);
      assertEquals(0L, result);
  }

  @Test(timeout = 4000)
  public void testSetToLargeValue()  throws Throwable  {
      // Test setting field to a large valid value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long result = preciseDateTimeField0.set(31536000000L, 86399850);
      assertEquals(31622399850L, result);
  }

  @Test(timeout = 4000)
  public void testSetToNegativeValue()  throws Throwable  {
      // Test setting field to a negative value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long result = preciseDateTimeField0.set((-3012L), 82);
      assertEquals((-86399918L), result);
  }

  @Test(timeout = 4000)
  public void testRoundFloorAndCheckLeniency()  throws Throwable  {
      // Test round floor operation and field leniency
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.minutes();
      DurationField durationField1 = zonedChronology0.halfdays();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField1);
      long rounded = preciseDateTimeField0.roundFloor(992280585600000L);
      assertEquals(992280585600000L, rounded);
      assertFalse(preciseDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void testRoundFloorWithNegativeValue()  throws Throwable  {
      // Test round floor with negative value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long rounded = preciseDateTimeField0.roundFloor((-5225));
      assertEquals((-5225L), rounded);
  }

  @Test(timeout = 4000)
  public void testRoundCeilingWithNegativeValue()  throws Throwable  {
      // Test round ceiling with negative value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 21859200000L);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, preciseDurationField0);
      long rounded = preciseDateTimeField0.roundCeiling((-1481L));
      assertEquals(0L, rounded);
  }

  @Test(timeout = 4000)
  public void testRemainderWithNegativeValue()  throws Throwable  {
      // Test remainder calculation with negative value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 21859200000L);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, preciseDurationField0);
      long remainder = preciseDateTimeField0.remainder((-5225));
      assertEquals(86394775L, remainder);
  }

  @Test(timeout = 4000)
  public void testIsLenient()  throws Throwable  {
      // Test field leniency property
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.minutes();
      DurationField durationField1 = zonedChronology0.halfdays();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField1);
      boolean isLenient = preciseDateTimeField0.isLenient();
      assertFalse(isLenient);
  }

  @Test(timeout = 4000)
  public void testGetUnitMillis()  throws Throwable  {
      // Test retrieval of unit milliseconds
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long unitMillis = preciseDateTimeField0.getUnitMillis();
      assertEquals(1L, unitMillis);
  }

  @Test(timeout = 4000)
  public void testGetMinimumValue()  throws Throwable  {
      // Test retrieval of minimum field value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.halfdays();
      DurationField durationField1 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField1);
      int minValue = preciseDateTimeField0.getMinimumValue();
      assertEquals(0, minValue);
  }

  @Test(timeout = 4000)
  public void testGetMaximumValueForSet()  throws Throwable  {
      // Test retrieval of maximum allowed value for set operation
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      int maxValue = preciseDateTimeField0.getMaximumValueForSet((-3870L), (-2146901673));
      assertEquals(86399999, maxValue);
  }

  @Test(timeout = 4000)
  public void testGetDurationField()  throws Throwable  {
      // Test retrieval of duration field
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      DurationField durationField1 = preciseDateTimeField0.getDurationField();
      assertTrue(durationField1.isPrecise());
  }

  @Test(timeout = 4000)
  public void testRemainderWithNegativeValueResultZero()  throws Throwable  {
      // Test remainder calculation with negative value resulting in zero
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long remainder = preciseDateTimeField0.remainder((-1142L));
      assertEquals(0L, remainder);
  }

  @Test(timeout = 4000)
  public void testRoundCeilingWithLargeValue()  throws Throwable  {
      // Test round ceiling with large positive value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long rounded = preciseDateTimeField0.roundCeiling(100000000000000L);
      assertEquals(100000000000000L, rounded);
  }

  @Test(timeout = 4000)
  public void testRoundCeilingWithAlignedNegativeValue()  throws Throwable  {
      // Test round ceiling with aligned negative value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.days();
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, durationField0);
      long rounded = preciseDateTimeField0.roundCeiling((-1142L));
      assertEquals((-1142L), rounded);
  }

  @Test(timeout = 4000)
  public void testConstructorWithUnsupportedDurationFieldThrowsException()  throws Throwable  {
      // Test constructor exception with unsupported duration field
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      try {
        new PreciseDateTimeField(dateTimeFieldType0, unsupportedDurationField0, unsupportedDurationField0);
        fail("Expected IllegalArgumentException");
      } catch (IllegalArgumentException e) {
        assertEquals("The unit milliseconds must be at least 1", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testConstructorWithNonPreciseDurationFieldThrowsException()  throws Throwable  {
      // Test constructor exception with non-precise duration field
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      DurationField durationField0 = durationFieldType0.getField((Chronology) null);
      try {
        new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField0);
        fail("Expected IllegalArgumentException");
      } catch (IllegalArgumentException e) {
        assertEquals("Unit duration field must be precise", e.getMessage());
      }
  }

  @Test(timeout = 4000)
  public void testSetWithOutOfRangeValueThrowsException()  throws Throwable  {
      // Test exception when setting out-of-range value
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      Weeks weeks0 = Weeks.ONE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(gJChronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1058);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, scaledDurationField0);
      try {
        preciseDateTimeField0.set(1058L, 1058);
        fail("Expected IllegalArgumentException");
      } catch (IllegalArgumentException e) {
        assertEquals("Value 1058 for minuteOfDay must be in the range [0,1057]", e.getMessage());
      }
  }
}