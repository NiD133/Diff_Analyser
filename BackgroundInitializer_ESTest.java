/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 23 20:04:29 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.BackgroundInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 0L, timeUnit0, synchronousQueue0, threadFactory0);
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>(threadPoolExecutor0);
      // Undeclared exception!
      try { 
        backgroundInitializer0.start();
        fail("Expecting exception: RejectedExecutionException");
      
      } catch(RejectedExecutionException e) {
         //
         // Task java.util.concurrent.FutureTask@e1ff706 rejected from java.util.concurrent.ThreadPoolExecutor@586694bf[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0]
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      assertFalse(backgroundInitializer0.isStarted());
      
      boolean boolean0 = backgroundInitializer0.start();
      assertTrue(boolean0);
      
      Delayed delayed0 = backgroundInitializer0.get();
      assertNull(delayed0);
      
      boolean boolean1 = backgroundInitializer0.isInitialized();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      boolean boolean0 = backgroundInitializer0.start();
      boolean boolean1 = backgroundInitializer0.isInitialized();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>(forkJoinPool0);
      forkJoinPool0.getFactory();
      backgroundInitializer0.start();
      backgroundInitializer0.getFuture();
      BackgroundInitializer<Exception> backgroundInitializer1 = new BackgroundInitializer<Exception>();
      BackgroundInitializer.builder();
      backgroundInitializer1.getActiveExecutor();
      backgroundInitializer1.isInitialized();
      BackgroundInitializer<BackgroundInitializer<Exception>> backgroundInitializer2 = new BackgroundInitializer<BackgroundInitializer<Exception>>();
      ConcurrentException concurrentException0 = new ConcurrentException();
      concurrentException0.getSuppressed();
      backgroundInitializer2.getTypedException(concurrentException0);
      backgroundInitializer2.setExternalExecutor((ExecutorService) null);
      ExecutorService executorService0 = backgroundInitializer1.getExternalExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      backgroundInitializer0.setExternalExecutor(forkJoinPool0);
      boolean boolean0 = backgroundInitializer0.start();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      backgroundInitializer0.start();
      backgroundInitializer0.start();
      backgroundInitializer0.get();
      assertTrue(backgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>();
      backgroundInitializer0.getExternalExecutor();
      BackgroundInitializer<Delayed> backgroundInitializer1 = new BackgroundInitializer<Delayed>((ExecutorService) null);
      backgroundInitializer1.start();
      backgroundInitializer1.start();
      // Undeclared exception!
      try { 
        backgroundInitializer1.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      backgroundInitializer0.start();
      backgroundInitializer0.get();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        backgroundInitializer0.setExternalExecutor(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      BackgroundInitializer<Exception> backgroundInitializer1 = new BackgroundInitializer<Exception>();
      ExecutorService executorService0 = backgroundInitializer1.getActiveExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      // Undeclared exception!
      try { 
        backgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>(forkJoinPool0);
      // Undeclared exception!
      try { 
        backgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      int int0 = backgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      BackgroundInitializer<Object> backgroundInitializer0 = new BackgroundInitializer<Object>(forkJoinPool0);
      backgroundInitializer0.getTaskCount();
      backgroundInitializer0.getTaskCount();
      BackgroundInitializer<Delayed> backgroundInitializer1 = new BackgroundInitializer<Delayed>();
      MockException mockException0 = new MockException("haH:Z~P5");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("'xA", "(V?Q)7A", "{j", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("haH:Z~P5", "qi(qTd2vR~eY:0^sHp", "qi(qTd2vR~eY:0^sHp", (-2077));
      stackTraceElementArray0[1] = stackTraceElement1;
      backgroundInitializer0.initialize();
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement((String) null, "", "", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      ConcurrentException concurrentException0 = new ConcurrentException();
      Exception exception0 = backgroundInitializer0.getTypedException(concurrentException0);
      assertNotNull(exception0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>(forkJoinPool0);
      forkJoinPool0.isTerminating();
      BackgroundInitializer<Delayed> backgroundInitializer1 = new BackgroundInitializer<Delayed>();
      MockThrowable mockThrowable0 = new MockThrowable(" L~&");
      ConcurrentException concurrentException0 = new ConcurrentException(mockThrowable0);
      Exception exception0 = backgroundInitializer1.getTypedException(concurrentException0);
      backgroundInitializer0.getTypedException(exception0);
      backgroundInitializer0.isInitialized();
      backgroundInitializer0.isStarted();
      BackgroundInitializer<Object> backgroundInitializer2 = new BackgroundInitializer<Object>(forkJoinPool0);
      // Undeclared exception!
      try { 
        backgroundInitializer2.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      boolean boolean0 = backgroundInitializer0.isInitialized();
      //  // Unstable assertion: assertFalse(boolean0);
      
      backgroundInitializer0.start();
      boolean boolean1 = backgroundInitializer0.isInitialized();
      //  // Unstable assertion: assertTrue(backgroundInitializer0.isStarted());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BackgroundInitializer.Builder<BackgroundInitializer<Delayed>, Delayed> backgroundInitializer_Builder0 = BackgroundInitializer.builder();
      assertNotNull(backgroundInitializer_Builder0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BackgroundInitializer<Delayed> backgroundInitializer0 = new BackgroundInitializer<Delayed>();
      // Undeclared exception!
      try { 
        backgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BackgroundInitializer<Exception> backgroundInitializer0 = new BackgroundInitializer<Exception>();
      BackgroundInitializer.builder();
      backgroundInitializer0.close();
      // Undeclared exception!
      try { 
        backgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }
}
