/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 13:38:32 GMT 2025
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.CookieUtil;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CookieUtil_ESTest extends CookieUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URI uRI0 = CookieUtil.asUri(uRL0);
      assertEquals("ftp", uRI0.getScheme());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, List<String>> map0 = httpConnection_Request0.headers;
      MockFile mockFile0 = new MockFile("@]?3#", "@]?3#");
      URL uRL0 = mockFile0.toURL();
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, httpConnection_Response0, uRL0, map0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 53: file:/Users/tenghaha/Desktop/EvoSuiteProjects/jsoup/@]?3#/@]?3#
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = httpConnection_Request0.headers;
      // Undeclared exception!
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, httpConnection_Response0, (URL) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        CookieUtil.storeCookies(httpConnection_Request0, httpConnection_Response0, uRL0, (Map<String, List<String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is null
         //
         verifyException("java.net.CookieManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CookieUtil.parseCookie("del", (HttpConnection.Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\u0005!/", "\u0005!/");
      URL uRL0 = mockFile0.toURL();
      try { 
        CookieUtil.asUri(uRL0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Illegal character in path at index 52: file:/Users/tenghaha/Desktop/EvoSuiteProjects/jsoup/\u0005!/\u0005!
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CookieUtil.asUri((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      TextNode textNode0 = TextNode.createFromEncoded("");
      Attributes attributes0 = textNode0.attributes();
      attributes0.put("", "");
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Request0.cookies = map0;
      // Undeclared exception!
      try { 
        CookieUtil.applyCookiesToRequest(httpConnection_Request0, (BiConsumer<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      CookieUtil.parseCookie("", httpConnection_Response0);
      assertEquals(400, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      CookieUtil.parseCookie((String) null, httpConnection_Response0);
      assertEquals(400, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = httpConnection_Request0.url;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("XtzONrG&vb");
      hashMap0.put("Set-Cookie", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response(httpConnection_Request0);
      CookieUtil.storeCookies(httpConnection_Request0, httpConnection_Response0, uRL0, hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = httpConnection_Request0.url;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("inputStream", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response(httpConnection_Request0);
      CookieUtil.storeCookies(httpConnection_Request0, httpConnection_Response0, uRL0, hashMap0);
      assertNull(httpConnection_Request0.requestBody());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Request0.cookies;
      httpConnection_Response0.cookies = map0;
      CookieUtil.parseCookie("wToM>AI", httpConnection_Response0);
      // Undeclared exception!
      try { 
        CookieUtil.applyCookiesToRequest(httpConnection_Request0, (BiConsumer<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.CookieUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CookieUtil cookieUtil0 = new CookieUtil();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      CookieUtil.applyCookiesToRequest(httpConnection_Request0, biConsumer0);
      assertNull(httpConnection_Request0.requestBody());
  }
}
