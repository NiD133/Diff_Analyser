package com.fasterxml.jackson.core.io;

import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.util.BufferRecycler;
import org.junit.Test;

import java.io.IOException;
import java.io.OutputStream;

import static org.junit.Assert.fail;

/**
 * This test class contains an improved version of a test originally generated by EvoSuite.
 * The original test was unclear due to a non-descriptive name ("test46") and a confusing,
 * unrelated assertion.
 *
 * This version focuses on a single, clear behavior: ensuring the UTF8Writer is robust
 * when its underlying OutputStream is null.
 */
public class UTF8Writer_ESTestTest47 { // NOTE: Class name retained for context.

    /**
     * Verifies that calling flush() on a UTF8Writer with a null OutputStream
     * does not throw a NullPointerException or any other exception.
     * The writer should handle this case gracefully by doing nothing.
     */
    @Test(timeout = 4000)
    public void flushShouldNotThrowExceptionWhenOutputStreamIsNull() {
        // Arrange: Create a UTF8Writer with a null OutputStream.
        BufferRecycler bufferRecycler = new BufferRecycler();
        // The IOContext is a required dependency for the writer.
        IOContext ioContext = new IOContext(
                StreamReadConstraints.defaults(),
                StreamWriteConstraints.defaults(),
                ErrorReportConfiguration.defaults(),
                bufferRecycler,
                // The content reference is not relevant for this test.
                ContentReference.rawReference("test"),
                true);
        UTF8Writer utf8Writer = new UTF8Writer(ioContext, (OutputStream) null);

        // Act & Assert: Calling flush() should complete without throwing an exception.
        // The test passes if the flush() call does not throw.
        try {
            utf8Writer.flush();
        } catch (IOException e) {
            // We use fail() to provide a clear message if an unexpected exception occurs.
            fail("UTF8Writer.flush() should not throw an exception when the underlying OutputStream is null, but it threw: " + e.getMessage());
        }
    }
}