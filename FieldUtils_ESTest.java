/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 19 14:24:37 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) 
@EvoRunnerParameters(
    mockJVMNonDeterminism = true, 
    useVFS = true, 
    useVNET = true, 
    resetStaticState = true, 
    separateClassLoader = true
) 
public class FieldUtils_ESTest extends FieldUtils_ESTest_scaffolding {

    //----------------------------- getWrappedValue() Tests -----------------------------
    // Tests for 4-parameter version: getWrappedValue(int, int, int, int)
    
    @Test(timeout = 4000)
    public void getWrappedValue_wrapZeroWithMinusOneToZeroRangeAndLargeNegativeCurrent_returnsMinusOne() throws Throwable {
        int result = FieldUtils.getWrappedValue(Integer.MIN_VALUE + 1, 0, -1, 0);
        assertEquals(-1, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_currentValueEqualsMinValue_returnsOriginalValue() throws Throwable {
        int result = FieldUtils.getWrappedValue(-436, 0, -436, 0);
        assertEquals(-436, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_minValueGreaterThanMaxValue_throwsIllegalArgumentException() throws Throwable {
        try {
            FieldUtils.getWrappedValue(823, 317351877, 1363, -3977);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void getWrappedValue_minIntegerValueWithWrapZeroAndMinZeroMax1756_returns2697() throws Throwable {
        int result = FieldUtils.getWrappedValue(Integer.MIN_VALUE, 0, 0, 1756);
        assertEquals(2697, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_current2149WithMin1610612735MaxMinus1WrapZero_returnsZero() throws Throwable {
        int result = FieldUtils.getWrappedValue(2149, 1610612735, -1, 0);
        assertEquals(0, result);
    }

    // Tests for 3-parameter version: getWrappedValue(int, int, int)
    
    @Test(timeout = 4000)
    public void getWrappedValue_current1055Min1671Max352831696_returns352831081() throws Throwable {
        int result = FieldUtils.getWrappedValue(1055, 1671, 352831696);
        assertEquals(352831081, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_3Params_minValueGreaterThanMaxValue_throwsIllegalArgumentException() throws Throwable {
        try {
            FieldUtils.getWrappedValue(-1610612735, -1610612735, -1610612735, -1610612735);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void getWrappedValue_currentMinus4697MinMinus4536MaxMinus317_returnsMinus477() throws Throwable {
        int result = FieldUtils.getWrappedValue(-4697, -4536, -317);
        assertEquals(-477, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_currentZeroMinMinus3236MaxZero_returnsZero() throws Throwable {
        int result = FieldUtils.getWrappedValue(0, -3236, 0);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_currentMinIntegerMinZeroMaxOne_returnsZero() throws Throwable {
        int result = FieldUtils.getWrappedValue(Integer.MIN_VALUE, 0, 1);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void getWrappedValue_3Params_minValueEqualsMaxValue_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.getWrappedValue(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void getWrappedValue_3Params_minGreaterThanMax_throwsIllegalArgumentException() throws Throwable {
        try {
            FieldUtils.getWrappedValue(697, 697, 697);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    //----------------------------- verifyValueBounds() Tests -----------------------------
    // Tests with field name
    
    @Test(timeout = 4000)
    public void verifyValueBounds_valueWithinBounds_doesNotThrow() throws Throwable {
        FieldUtils.verifyValueBounds("", 1, 1, 2000);
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_valueBelowLowerBound_throwsIllegalArgumentException() throws Throwable {
        try {
            FieldUtils.verifyValueBounds("", -81, -820, -820);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_valueAtLowerBound_doesNotThrow() throws Throwable {
        FieldUtils.verifyValueBounds("['}_&a'Qh", -3236, -3236, -3236);
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_valueAboveUpperBound_throwsIllegalArgumentException() throws Throwable {
        try {
            FieldUtils.verifyValueBounds("", -1702, 1472, 0);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    // Tests with DateTimeFieldType
    
    @Test(timeout = 4000)
    public void verifyValueBounds_fieldTypeValueAtUpperBound_doesNotThrow() throws Throwable {
        DateTimeFieldType fieldType = DateTimeFieldType.minuteOfHour();
        FieldUtils.verifyValueBounds(fieldType, -5550, -5550, -5550);
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_fieldTypeValueWithinBounds_doesNotThrow() throws Throwable {
        DateTimeFieldType fieldType = DateTimeFieldType.weekOfWeekyear();
        FieldUtils.verifyValueBounds(fieldType, 1537, -2144353229, 1537);
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_fieldTypeValueAboveUpperBound_throwsIllegalArgumentException() throws Throwable {
        try {
            DateTimeFieldType fieldType = DateTimeFieldType.minuteOfHour();
            FieldUtils.verifyValueBounds(fieldType, 1428, -1584, -473);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_nullFieldType_throwsNullPointerException() throws Throwable {
        try {
            FieldUtils.verifyValueBounds((DateTimeFieldType) null, 112, 12544, 12544);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected
        }
    }

    // Tests with DateTimeField
    
    @Test(timeout = 4000)
    public void verifyValueBounds_fieldValueWithinBounds_doesNotThrow() throws Throwable {
        FieldUtils.verifyValueBounds((DateTimeField) null, 400, 400, 400);
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_fieldValueAboveUpperBound_throwsIllegalArgumentException() throws Throwable {
        DateTimeZone utc = DateTimeZone.UTC;
        IslamicChronology chronology = IslamicChronology.getInstance(utc);
        ZonedChronology zonedChronology = ZonedChronology.getInstance(chronology, utc);
        DateTimeField field = zonedChronology.minuteOfHour();
        
        try {
            FieldUtils.verifyValueBounds(field, 1, 1, -1);
            fail("Expecting exception: IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void verifyValueBounds_nullField_throwsNullPointerException() throws Throwable {
        try {
            FieldUtils.verifyValueBounds((DateTimeField) null, 29, 2932, 29);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected
        }
    }

    //----------------------------- safeToInt() Tests -----------------------------
    
    @Test(timeout = 4000)
    public void safeToInt_maxIntegerValue_returnsMaxInteger() throws Throwable {
        int result = FieldUtils.safeToInt(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, result);
    }

    @Test(timeout = 4000)
    public void safeToInt_zero_returnsZero() throws Throwable {
        int result = FieldUtils.safeToInt(0);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void safeToInt_minIntegerValue_returnsMinInteger() throws Throwable {
        int result = FieldUtils.safeToInt(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, result);
    }

    @Test(timeout = 4000)
    public void safeToInt_valueBelowMinInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeToInt(-2147483671L);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeToInt_valueAboveMaxInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeToInt(9223372036854775785L);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    //----------------------------- safeMultiply() Tests (long) -----------------------------
    
    @Test(timeout = 4000)
    public void safeMultiply_minLongWithNegativeMultiplier_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, -7);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_minLongByMinLong_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_minLongByNegativeOne_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_positiveByPositive_returnsProduct() throws Throwable {
        long result = FieldUtils.safeMultiply(24L, 24L);
        assertEquals(576L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_zeroByAny_returnsZero() throws Throwable {
        long result = FieldUtils.safeMultiply(-9223372036854775804L, 0L);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_oneByMinLong_returnsMinLong() throws Throwable {
        long result = FieldUtils.safeMultiply(1L, Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_oneByOne_returnsOne() throws Throwable {
        long result = FieldUtils.safeMultiply(1L, 1L);
        assertEquals(1L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_largePositiveByPositive_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(9223372036854775775L, 4978168);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_minLongByNegativeOneInt_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_negativeByPositive_returnsNegative() throws Throwable {
        long result = FieldUtils.safeMultiply(-889L, 1);
        assertEquals(-889L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_zeroByZero_returnsZero() throws Throwable {
        long result = FieldUtils.safeMultiply(0L, 0L);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_positiveByPositive_returnsCorrectValue() throws Throwable {
        long result = FieldUtils.safeMultiply(112L, 112);
        assertEquals(12544L, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_negativeByNegative_returnsPositive() throws Throwable {
        long result = FieldUtils.safeMultiply(-1L, -1);
        assertEquals(1L, result);
    }

    //----------------------------- safeSubtract() Tests -----------------------------
    
    @Test(timeout = 4000)
    public void safeSubtract_positiveMinusZero_returnsPositive() throws Throwable {
        long result = FieldUtils.safeSubtract(3600L, 0L);
        assertEquals(3600L, result);
    }

    @Test(timeout = 4000)
    public void safeSubtract_minLongMinusMinLong_returnsZero() throws Throwable {
        long result = FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeSubtract_maxIntegerMinusNegativeOne_returnsCorrectValue() throws Throwable {
        long result = FieldUtils.safeSubtract(Integer.MAX_VALUE, -1);
        assertEquals(2147483648L, result);
    }

    @Test(timeout = 4000)
    public void safeSubtract_zeroMinusMaxInteger_returnsNegative() throws Throwable {
        long result = FieldUtils.safeSubtract(0L, Integer.MAX_VALUE);
        assertEquals(-2147483647L, result);
    }

    @Test(timeout = 4000)
    public void safeSubtract_minLongMinusPositive_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeSubtract(Long.MIN_VALUE, 11L);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    //----------------------------- safeAdd() Tests -----------------------------
    // int version
    
    @Test(timeout = 4000)
    public void safeAdd_intNegativePlusMinInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeAdd(-1640, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeAdd_intZeroPlusZero_returnsZero() throws Throwable {
        int result = FieldUtils.safeAdd(0, 0);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void safeAdd_intPositivePlusPositive_returnsSum() throws Throwable {
        int result = FieldUtils.safeAdd(4504, 4504);
        assertEquals(9008, result);
    }

    @Test(timeout = 4000)
    public void safeAdd_intMaxIntegerPlusMaxInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeAdd_intPositivePlusMinInteger_returnsNegative() throws Throwable {
        int result = FieldUtils.safeAdd(14, Integer.MIN_VALUE);
        assertEquals(-2147483634, result);
    }

    // long version
    
    @Test(timeout = 4000)
    public void safeAdd_longZeroPlusZero_returnsZero() throws Throwable {
        long result = FieldUtils.safeAdd(0L, 0L);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeAdd_longNegativePlusNegative_returnsSum() throws Throwable {
        long result = FieldUtils.safeAdd(-1185L, -1185L);
        assertEquals(-2370L, result);
    }

    @Test(timeout = 4000)
    public void safeAdd_longNegativePlusMinLong_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeAdd(-610, Long.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeAdd_longMinLongPlusMinLong_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeAdd_longNegativePlusLargePositive_returnsCorrectValue() throws Throwable {
        long result = FieldUtils.safeAdd(-275L, 9223372036854775800L);
        assertEquals(9223372036854775525L, result);
    }

    //----------------------------- safeNegate() Tests -----------------------------
    
    @Test(timeout = 4000)
    public void safeNegate_zero_returnsZero() throws Throwable {
        int result = FieldUtils.safeNegate(0);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void safeNegate_negative_returnsPositive() throws Throwable {
        int result = FieldUtils.safeNegate(-70);
        assertEquals(70, result);
    }

    @Test(timeout = 4000)
    public void safeNegate_minInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeNegate(Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeNegate_positive_returnsNegative() throws Throwable {
        int result = FieldUtils.safeNegate(2147483639);
        assertEquals(-2147483639, result);
    }

    //----------------------------- safeMultiplyToInt() Tests -----------------------------
    
    @Test(timeout = 4000)
    public void safeMultiplyToInt_zeroByZero_returnsZero() throws Throwable {
        int result = FieldUtils.safeMultiplyToInt(0L, 0L);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void safeMultiplyToInt_oneByPositive_returnsProduct() throws Throwable {
        int result = FieldUtils.safeMultiplyToInt(1L, 2765L);
        assertEquals(2765, result);
    }

    @Test(timeout = 4000)
    public void safeMultiplyToInt_positiveByNegative_returnsNegative() throws Throwable {
        int result = FieldUtils.safeMultiplyToInt(2147483646, -1L);
        assertEquals(-2147483646, result);
    }

    @Test(timeout = 4000)
    public void safeMultiplyToInt_minIntValueByPositive_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiplyToInt(3196L, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiplyToInt_largeValues_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiplyToInt(26607895200000L, 26607895200000L);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    //----------------------------- safeDivide() Tests -----------------------------
    // Basic version: safeDivide(long, long)
    
    @Test(timeout = 4000)
    public void safeDivide_positiveByPositive_returnsQuotient() throws Throwable {
        long result = FieldUtils.safeDivide(-9223372036854775765L, -2123L);
        assertEquals(4344499310812423L, result);
    }

    @Test(timeout = 4000)
    public void safeDivide_zeroByPositive_returnsZero() throws Throwable {
        long result = FieldUtils.safeDivide(0, 3961L);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeDivide_minLongByNegativeOne_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeDivide(Long.MIN_VALUE, -1);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeDivide_minLongByPositive_returnsCorrectValue() throws Throwable {
        long result = FieldUtils.safeDivide(Long.MIN_VALUE, 33L);
        assertEquals(-279496122328932600L, result);
    }

    @Test(timeout = 4000)
    public void safeDivide_byZero_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeDivide(0L, 0L);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    // Version with rounding mode: safeDivide(long, long, RoundingMode)
    
    @Test(timeout = 4000)
    public void safeDivideWithRounding_zeroByPositiveWithCeiling_returnsZero() throws Throwable {
        RoundingMode mode = RoundingMode.CEILING;
        long result = FieldUtils.safeDivide(0L, 218L, mode);
        assertEquals(0L, result);
    }

    @Test(timeout = 4000)
    public void safeDivideWithRounding_minLongByPositiveWithUp_returnsCorrectValue() throws Throwable {
        RoundingMode mode = RoundingMode.UP;
        long result = FieldUtils.safeDivide(Long.MIN_VALUE, 319L, mode);
        assertEquals(-28913391965061994L, result);
    }

    @Test(timeout = 4000)
    public void safeDivideWithRounding_minLongByMinLongWithHalfEven_returnsOne() throws Throwable {
        RoundingMode mode = RoundingMode.HALF_EVEN;
        long result = FieldUtils.safeDivide(Long.MIN_VALUE, Long.MIN_VALUE, mode);
        assertEquals(1L, result);
    }

    @Test(timeout = 4000)
    public void safeDivideWithRounding_byZero_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeDivide(0L, 0L, RoundingMode.HALF_EVEN);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            // Expected
        }
    }

    @Test(timeout = 4000)
    public void safeDivideWithRounding_nullRoundingMode_throwsNullPointerException() throws Throwable {
        try {
            FieldUtils.safeDivide(Long.MIN_VALUE, Long.MIN_VALUE, null);
            fail("Expecting exception: NullPointerException");
        } catch(NullPointerException e) {
            // Expected
        }
    }

    //----------------------------- safeMultiply() Tests (int) -----------------------------
    
    @Test(timeout = 4000)
    public void safeMultiply_intZeroByAny_returnsZero() throws Throwable {
        int result = FieldUtils.safeMultiply(0, 3306);
        assertEquals(0, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_intNegativeOneByMinInteger_returnsMaxInteger() throws Throwable {
        int result = FieldUtils.safeMultiply(-1, -2147483647);
        assertEquals(Integer.MAX_VALUE, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_intMinIntegerByMinInteger_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void safeMultiply_intNegativeByPositive_returnsMinInteger() throws Throwable {
        int result = FieldUtils.safeMultiply(-2, 1073741824);
        assertEquals(Integer.MIN_VALUE, result);
    }

    @Test(timeout = 4000)
    public void safeMultiply_intLargePositiveByNegative_throwsArithmeticException() throws Throwable {
        try {
            FieldUtils.safeMultiply(2146641827, -2531);
            fail("Expecting exception: ArithmeticException");
        } catch(ArithmeticException e) {
            verifyException("org.joda.time.field.FieldUtils", e);
        }
    }

    //----------------------------- equals() Tests -----------------------------
    
    @Test(timeout = 4000)
    public void equals_nonNullWithNull_returnsFalse() throws Throwable {
        Integer integer = new Integer(-1);
        boolean result = FieldUtils.equals(integer, null);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void equals_differentTypes_returnsFalse() throws Throwable {
        Object obj = new Object();
        Integer integer = new Integer(0);
        boolean result = FieldUtils.equals(obj, integer);
        assertFalse(result);
    }

    @Test(timeout = 4000)
    public void equals_sameObject_returnsTrue() throws Throwable {
        Object obj = new Object();
        boolean result = FieldUtils.equals(obj, obj);
        assertTrue(result);
    }

    @Test(timeout = 4000)
    public void equals_nullWithNonNull_returnsFalse() throws Throwable {
        Object obj = new Object();
        boolean result = FieldUtils.equals(null, obj);
        assertFalse(result);
    }
}