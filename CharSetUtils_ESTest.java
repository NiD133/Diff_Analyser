/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 18 20:17:03 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.CharSetUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharSetUtils_ESTest extends CharSetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0-9";
      String string0 = CharSetUtils.squeeze("offset cannot be negative", stringArray0);
      assertEquals("offset cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "uk{Z^6e/S>lTbb#wl";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowEror - output of one lop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = CharSetUtils.squeeze("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = CharSetUtils.delete((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",']t[O'q)5c-[";
      String string0 = CharSetUtils.squeeze("...", stringArray0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "uk{Z^6e/S>lTbb#wl";
      String string0 = CharSetUtils.squeeze("...", stringArray0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Jk{Z^]6e/!S>zlTbb#wl";
      String string0 = CharSetUtils.squeeze("offset cannot be negative", stringArray0);
      assertEquals("ofset canot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h|Bv_9mUP7'&Y";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = CharSetUtils.squeeze((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A-Z";
      String string0 = CharSetUtils.keep("A-Z", stringArray0);
      assertEquals("AZ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = CharSetUtils.keep("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = CharSetUtils.keep((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = CharSetUtils.keep("A-Z", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A-Z";
      String string0 = CharSetUtils.delete("A-Z", stringArray0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = CharSetUtils.delete("A-Z", stringArray0);
      assertEquals("A-Z", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = CharSetUtils.delete("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h|Bv_9mUP7'&Y";
      int int0 = CharSetUtils.count("^MPkb@$Zu", stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[13];
      int int0 = CharSetUtils.count("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Xii8KJ";
      boolean boolean0 = CharSetUtils.containsAny("A-Za-z", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h|Bv_9mUP7'&Y";
      boolean boolean0 = CharSetUtils.containsAny("h|Bv_9mUP7'&Y", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = CharSetUtils.containsAny("h|Bv_9mUP7'&Y", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = CharSetUtils.containsAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = CharSetUtils.count("&", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharSetUtils charSetUtils0 = new CharSetUtils();
  }
}
